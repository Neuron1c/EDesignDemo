   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_timerFlag,2,2
  31                             		.comm	_count,2,2
  32                             		.comm	_interval_timer_count,2,2
  33                             		.local	_response
  34                             		.comm	_response,50,1
  35                             		.local	_mode
  36                             		.comm	_mode,2,2
  37                             		.local	_display
  38                             		.comm	_display,2,2
  39                             		.local	_offset
  40                             		.comm	_offset,2,2
  41                             		.global	_D
  42                             	.bss
  43                             		.balign 2
  46                             	_D:
  47 0000 00 00                   		.zero	2
  48                             		.global	_flag
  49                             		.balign 2
  52                             	_flag:
  53 0002 00 00                   		.zero	2
  54                             		.comm	_voltage,1,1
  55                             		.comm	_current1,1,1
  56                             		.comm	_current2,1,1
  57                             		.section	.rodata
  58                             	.LC0:
  59 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  60                             	.text
  61                             		.global	_populate
  63                             	_populate:
  64                             	.LFB0:
  65                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** extern int count;
  22:../src/user_functions.c **** extern int interval_timer_count;
  23:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  24:../src/user_functions.c **** static int mode = 0;
  25:../src/user_functions.c **** static int display = 0;
  26:../src/user_functions.c **** static int offset = 0;
  27:../src/user_functions.c **** int D = 0;
  28:../src/user_functions.c **** int flag = 0;
  29:../src/user_functions.c **** uint8_t voltage, current1, current2;
  30:../src/user_functions.c **** 
  31:../src/user_functions.c **** 
  32:../src/user_functions.c **** void processMSG();
  33:../src/user_functions.c **** int errorTest();
  34:../src/user_functions.c **** void displayLCD();
  35:../src/user_functions.c **** void readRTC();
  36:../src/user_functions.c **** void setRTC();
  37:../src/user_functions.c **** void getRTC();
  38:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  39:../src/user_functions.c **** void collectADC();
  40:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  41:../src/user_functions.c **** 
  42:../src/user_functions.c **** 
  43:../src/user_functions.c **** char populate(char recieved){
  66                             		.loc 1 43 0
  67                             		; start of function
  68                             		; outgoing: 4 bytes
  69 0000 20 04                   		subw	sp, #4
  70                             	.LCFI0:
  44:../src/user_functions.c **** 
  45:../src/user_functions.c **** 	if(recieved == '$'){
  71                             		.loc 1 45 0
  72 0002 88 08                   		mov	a, [sp+8]
  73 0004 4C 24                   		cmp	a, #36
  74 0006 61 E8                   		 skz
  75 0008 EC 2A 00 00             		 br	!!.L2
  46:../src/user_functions.c **** 		record[count] = recieved;
  76                             		.loc 1 46 0
  77 000c AF 00 00                		movw	ax, !_count
  78 000f BD F0                   		movw	r8, ax
  79 0011 88 08                   		mov	a, [sp+8]
  80 0013 9D F2                   		mov	r10, a
  81 0015 DA F0                   		movw	bc, r8
  82 0017 48 00 00                		mov	_record[bc], a
  47:../src/user_functions.c **** 		count++;
  83                             		.loc 1 47 0
  84 001a AF 00 00                		movw	ax, !_count
  85 001d BD F0                   		movw	r8, ax
  86 001f A6 F0                   		incw	r8
  87 0021 AD F0                   		movw	ax, r8
  88 0023 BF 00 00                		movw	!_count, ax
  89 0026 EC E3 00 00             		br	!!.L3
  90                             	.L2:
  48:../src/user_functions.c **** 	}
  49:../src/user_functions.c **** 	else if(recieved == '\x0a'){
  91                             		.loc 1 49 0
  92 002a 88 08                   		mov	a, [sp+8]
  93 002c 4C 0A                   		cmp	a, #10
  94 002e 61 E8                   		 skz
  95 0030 EC 8D 00 00             		 br	!!.L4
  50:../src/user_functions.c **** 		if(record[count - 1] == '\x0d'){
  96                             		.loc 1 50 0
  97 0034 AF 00 00                		movw	ax, !_count
  98 0037 BD F0                   		movw	r8, ax
  99 0039 B6 F0                   		decw	r8
 100 003b AD F0                   		movw	ax, r8
 101 003d 04 00 00                		addw	ax, #_record
 102 0040 16                      		movw	hl, ax
 103 0041 8B                      		mov	a, [hl]
 104 0042 9D F0                   		mov	r8, a
 105 0044 4A F0 0D                		cmp	r8, #13
 106 0047 61 E8                   		 skz
 107 0049 EC 7A 00 00             		 br	!!.L5
  51:../src/user_functions.c **** 			if(!flag){
 108                             		.loc 1 51 0
 109 004d AF 00 00                		movw	ax, !_flag
 110 0050 BD F0                   		movw	r8, ax
 111 0052 44 00 00                		cmpw	ax, #0
 112 0055 61 E8                   		 skz
 113 0057 EC 7A 00 00             		 br	!!.L5
  52:../src/user_functions.c **** 				record[count] = recieved;
 114                             		.loc 1 52 0
 115 005b AF 00 00                		movw	ax, !_count
 116 005e BD F0                   		movw	r8, ax
 117 0060 88 08                   		mov	a, [sp+8]
 118 0062 9D F2                   		mov	r10, a
 119 0064 DA F0                   		movw	bc, r8
 120 0066 48 00 00                		mov	_record[bc], a
  53:../src/user_functions.c **** 				record[count + 1] = '\0';
 121                             		.loc 1 53 0
 122 0069 AF 00 00                		movw	ax, !_count
 123 006c BD F0                   		movw	r8, ax
 124 006e A6 F0                   		incw	r8
 125 0070 DA F0                   		movw	bc, r8
 126 0072 F1                      		clrb	a
 127 0073 48 00 00                		mov	_record[bc], a
  54:../src/user_functions.c **** 				processMSG();
 128                             		.loc 1 54 0
 129 0076 FC 00 00 00             		call	!!%code(_processMSG)
 130                             	.L5:
  55:../src/user_functions.c **** 			}
  56:../src/user_functions.c **** 		}
  57:../src/user_functions.c **** 		strcpy(record,"");
 131                             		.loc 1 57 0
 132 007a F4 F0                   		clrb	r8
 133 007c 8D F0                   		mov	a, r8
 134 007e 9F 00 00                		mov	!_record, a
  58:../src/user_functions.c **** 		count = 0;
 135                             		.loc 1 58 0
 136 0081 F6                      		clrw	ax
 137 0082 BF 00 00                		movw	!_count, ax
  59:../src/user_functions.c **** 		flag = 0;
 138                             		.loc 1 59 0
 139 0085 F6                      		clrw	ax
 140 0086 BF 00 00                		movw	!_flag, ax
 141 0089 EC E3 00 00             		br	!!.L3
 142                             	.L4:
  60:../src/user_functions.c **** 	}
  61:../src/user_functions.c **** 	else if(flag){
 143                             		.loc 1 61 0
 144 008d AF 00 00                		movw	ax, !_flag
 145 0090 BD F0                   		movw	r8, ax
 146 0092 44 00 00                		cmpw	ax, #0
 147 0095 61 E8                   		 skz
 148 0097 EC E3 00 00             		 br	!!.L3
  62:../src/user_functions.c **** 
  63:../src/user_functions.c **** 	}
  64:../src/user_functions.c **** 	else if(count == 0 && recieved != '$'){
 149                             		.loc 1 64 0
 150 009b AF 00 00                		movw	ax, !_count
 151 009e BD F0                   		movw	r8, ax
 152 00a0 44 00 00                		cmpw	ax, #0
 153 00a3 61 E8                   		 skz
 154 00a5 EC C9 00 00             		 br	!!.L6
 155                             		.loc 1 64 0 is_stmt 0 discriminator 1
 156 00a9 88 08                   		mov	a, [sp+8]
 157 00ab 4C 24                   		cmp	a, #36
 158 00ad 61 F8                   		 sknz
 159 00af EC C9 00 00             		 br	!!.L6
  65:../src/user_functions.c **** 
  66:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a",7);
 160                             		.loc 1 66 0 is_stmt 1
 161 00b3 30 00 00                		movw	ax, #.LC0
 162 00b6 B8 00                   		movw	[sp], ax
 163 00b8 30 07 00                		movw	ax, #7
 164 00bb B8 02                   		movw	[sp+2], ax
 165 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  67:../src/user_functions.c **** 		flag = 1;
 166                             		.loc 1 67 0
 167 00c1 E6                      		onew	ax
 168 00c2 BF 00 00                		movw	!_flag, ax
 169 00c5 EC E3 00 00             		br	!!.L3
 170                             	.L6:
  68:../src/user_functions.c **** 	}
  69:../src/user_functions.c **** 
  70:../src/user_functions.c **** 	else{
  71:../src/user_functions.c **** 		record[count] = recieved;
 171                             		.loc 1 71 0
 172 00c9 AF 00 00                		movw	ax, !_count
 173 00cc BD F0                   		movw	r8, ax
 174 00ce 88 08                   		mov	a, [sp+8]
 175 00d0 9D F2                   		mov	r10, a
 176 00d2 DA F0                   		movw	bc, r8
 177 00d4 48 00 00                		mov	_record[bc], a
  72:../src/user_functions.c **** 		count++;
 178                             		.loc 1 72 0
 179 00d7 AF 00 00                		movw	ax, !_count
 180 00da BD F0                   		movw	r8, ax
 181 00dc A6 F0                   		incw	r8
 182 00de AD F0                   		movw	ax, r8
 183 00e0 BF 00 00                		movw	!_count, ax
 184                             	.L3:
  73:../src/user_functions.c **** 	}
  74:../src/user_functions.c **** 
  75:../src/user_functions.c **** 
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** 	return recieved;
 185                             		.loc 1 77 0
 186 00e3 88 08                   		mov	a, [sp+8]
 187 00e5 9D F0                   		mov	r8, a
  78:../src/user_functions.c **** }
 188                             		.loc 1 78 0
 189 00e7 10 04                   		addw	sp, #4
 190 00e9 D7                      		ret
 191                             	.LFE0:
 193                             		.section	.rodata
 194                             	.LC1:
 195 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,0,%02d\r\n"
 195      30 2C 25 30 32 64 0D 0A 
 195      00 
 196                             	.text
 197                             		.global	_processMSG
 199                             	_processMSG:
 200                             	.LFB1:
  79:../src/user_functions.c **** 
  80:../src/user_functions.c **** void processMSG(){
 201                             		.loc 1 80 0
 202                             		; start of function
 203                             		; locals: 34 bytes
 204                             		; outgoing: 8 bytes
 205 00ea 20 2A                   		subw	sp, #42
 206                             	.LCFI1:
  81:../src/user_functions.c **** 	char ack[3];
  82:../src/user_functions.c **** 	char str[30];
  83:../src/user_functions.c **** 	if(errorTest()){
 207                             		.loc 1 83 0
 208 00ec FC 00 00 00             		call	!!%code(_errorTest)
 209 00f0 AD F0                   		movw	ax, r8
 210 00f2 44 00 00                		cmpw	ax, #0
 211 00f5 61 F8                   		 sknz
 212 00f7 EC DB 06 00             		 br	!!.L9
  84:../src/user_functions.c **** 
  85:../src/user_functions.c **** 		switch(record[1]){
 213                             		.loc 1 85 0
 214 00fb 8F 00 00                		mov	a, !_record+1
 215 00fe 9D F0                   		mov	r8, a
 216 0100 CD F1 00                		mov	r9, #0
 217 0103 AD F0                   		movw	ax, r8
 218 0105 44 42 00                		cmpw	ax, #66
 219 0108 61 F8                   		 sknz
 220 010a EC 86 06 00             		 br	!!.L11
 221 010e AD F0                   		movw	ax, r8
 222 0110 44 42 00                		cmpw	ax, #66
 223 0113 71 FF                   		 xor1	CY, a.7
 224 0115 61 F3                   		 sknh
 225 0117 EC 5C 01 00             		 br	!!.L12
 226 011b AD F0                   		movw	ax, r8
 227 011d 44 31 00                		cmpw	ax, #49
 228 0120 61 F8                   		 sknz
 229 0122 EC EF 01 00             		 br	!!.L13
 230 0126 AD F0                   		movw	ax, r8
 231 0128 44 31 00                		cmpw	ax, #49
 232 012b 71 FF                   		 xor1	CY, a.7
 233 012d 61 F3                   		 sknh
 234 012f EC 42 01 00             		 br	!!.L14
 235 0133 AD F0                   		movw	ax, r8
 236 0135 44 30 00                		cmpw	ax, #48
 237 0138 61 F8                   		 sknz
 238 013a EC 8E 01 00             		 br	!!.L15
 239 013e EC 96 06 00             		br	!!.L10
 240                             	.L14:
 241 0142 AD F0                   		movw	ax, r8
 242 0144 44 32 00                		cmpw	ax, #50
 243 0147 61 F8                   		 sknz
 244 0149 EC 50 02 00             		 br	!!.L16
 245 014d AD F0                   		movw	ax, r8
 246 014f 44 33 00                		cmpw	ax, #51
 247 0152 61 F8                   		 sknz
 248 0154 EC 84 02 00             		 br	!!.L17
 249 0158 EC 96 06 00             		br	!!.L10
 250                             	.L12:
 251 015c AD F0                   		movw	ax, r8
 252 015e 44 44 00                		cmpw	ax, #68
 253 0161 61 F8                   		 sknz
 254 0163 EC D2 02 00             		 br	!!.L18
 255 0167 AD F0                   		movw	ax, r8
 256 0169 44 44 00                		cmpw	ax, #68
 257 016c 71 FF                   		 xor1	CY, a.7
 258 016e 61 D8                   		 sknc
 259 0170 EC 8E 06 00             		 br	!!.L19
 260 0174 AD F0                   		movw	ax, r8
 261 0176 44 45 00                		cmpw	ax, #69
 262 0179 61 F8                   		 sknz
 263 017b EC 13 06 00             		 br	!!.L20
 264 017f AD F0                   		movw	ax, r8
 265 0181 44 4C 00                		cmpw	ax, #76
 266 0184 61 F8                   		 sknz
 267 0186 EC 6E 03 00             		 br	!!.L21
 268 018a EC 96 06 00             		br	!!.L10
 269                             	.L15:
  86:../src/user_functions.c **** 		case '0': if(mode == 1){
 270                             		.loc 1 86 0
 271 018e AF 36 00                		movw	ax, !_mode
 272 0191 BD F0                   		movw	r8, ax
 273 0193 44 01 00                		cmpw	ax, #1
 274 0196 61 E8                   		 skz
 275 0198 EC A8 01 00             		 br	!!.L22
  87:../src/user_functions.c **** 					 ack[0] = '0'; mode = 0;
 276                             		.loc 1 87 0
 277 019c 51 30                   		mov	a, #48
 278 019e 98 27                   		mov	[sp+39], a
 279 01a0 F6                      		clrw	ax
 280 01a1 BF 36 00                		movw	!_mode, ax
 281 01a4 EC AC 01 00             		br	!!.L23
 282                             	.L22:
  88:../src/user_functions.c **** 				  }
  89:../src/user_functions.c **** 
  90:../src/user_functions.c **** 				  else{
  91:../src/user_functions.c **** 					  ack[0] = '3';
 283                             		.loc 1 91 0
 284 01a8 51 33                   		mov	a, #51
 285 01aa 98 27                   		mov	[sp+39], a
 286                             	.L23:
  92:../src/user_functions.c **** 				  }
  93:../src/user_functions.c **** 
  94:../src/user_functions.c **** 				  ack[1] = '\x0d';
 287                             		.loc 1 94 0
 288 01ac 51 0D                   		mov	a, #13
 289 01ae 98 28                   		mov	[sp+40], a
  95:../src/user_functions.c **** 				  ack[2] = '\x0a';
 290                             		.loc 1 95 0
 291 01b0 51 0A                   		mov	a, #10
 292 01b2 98 29                   		mov	[sp+41], a
  96:../src/user_functions.c **** 				  strcpy(response, "$0");
 293                             		.loc 1 96 0
 294 01b4 51 24                   		mov	a, #36
 295 01b6 9F 04 00                		mov	!_response, a
 296 01b9 51 30                   		mov	a, #48
 297 01bb 9F 05 00                		mov	!_response+1, a
 298 01be F5 06 00                		clrb	!_response+2
  97:../src/user_functions.c **** 				  strcat(response, ack);
 299                             		.loc 1 97 0
 300 01c1 30 04 00                		movw	ax, #_response
 301 01c4 B8 00                   		movw	[sp], ax
 302 01c6 C9 F0 2A 00             		movw	r8, #42
 303 01ca AE F8                   		movw	ax, sp
 304 01cc BD F0                   		movw	r8, ax
 305 01ce 04 2A 00                		addw	ax, #42
 306 01d1 BD F0                   		movw	r8, ax
 307 01d3 04 FD FF                		addw	ax, #-3
 308 01d6 B8 02                   		movw	[sp+2], ax
 309 01d8 FC 00 00 00             		call	!!%code(_strcat)
  98:../src/user_functions.c **** 				  recieveInstruction(7);
 310                             		.loc 1 98 0
 311 01dc 30 07 00                		movw	ax, #7
 312 01df B8 00                   		movw	[sp], ax
 313 01e1 FC 00 00 00             		call	!!%code(_recieveInstruction)
  99:../src/user_functions.c **** 				  count = 5; break;
 314                             		.loc 1 99 0
 315 01e5 30 05 00                		movw	ax, #5
 316 01e8 BF 00 00                		movw	!_count, ax
 317 01eb EC DB 06 00             		br	!!.L9
 318                             	.L13:
 100:../src/user_functions.c **** 
 101:../src/user_functions.c **** 
 102:../src/user_functions.c **** 		case '1': if(mode == 0){
 319                             		.loc 1 102 0
 320 01ef AF 36 00                		movw	ax, !_mode
 321 01f2 BD F0                   		movw	r8, ax
 322 01f4 44 00 00                		cmpw	ax, #0
 323 01f7 61 E8                   		 skz
 324 01f9 EC 09 02 00             		 br	!!.L24
 103:../src/user_functions.c **** 					  ack[0] = '0'; mode = 1;
 325                             		.loc 1 103 0
 326 01fd 51 30                   		mov	a, #48
 327 01ff 98 27                   		mov	[sp+39], a
 328 0201 E6                      		onew	ax
 329 0202 BF 36 00                		movw	!_mode, ax
 330 0205 EC 0D 02 00             		br	!!.L25
 331                             	.L24:
 104:../src/user_functions.c **** 				  }
 105:../src/user_functions.c **** 
 106:../src/user_functions.c **** 		  	  	  else{
 107:../src/user_functions.c **** 		  	  		  ack[0] = '3';
 332                             		.loc 1 107 0
 333 0209 51 33                   		mov	a, #51
 334 020b 98 27                   		mov	[sp+39], a
 335                             	.L25:
 108:../src/user_functions.c **** 		  	  	  }
 109:../src/user_functions.c **** 
 110:../src/user_functions.c **** 				  ack[1] = '\x0d';
 336                             		.loc 1 110 0
 337 020d 51 0D                   		mov	a, #13
 338 020f 98 28                   		mov	[sp+40], a
 111:../src/user_functions.c **** 				  ack[2] = '\x0a';
 339                             		.loc 1 111 0
 340 0211 51 0A                   		mov	a, #10
 341 0213 98 29                   		mov	[sp+41], a
 112:../src/user_functions.c **** 				  strcpy(response, "$1");
 342                             		.loc 1 112 0
 343 0215 51 24                   		mov	a, #36
 344 0217 9F 04 00                		mov	!_response, a
 345 021a 51 31                   		mov	a, #49
 346 021c 9F 05 00                		mov	!_response+1, a
 347 021f F5 06 00                		clrb	!_response+2
 113:../src/user_functions.c **** 				  strcat(response, ack);
 348                             		.loc 1 113 0
 349 0222 30 04 00                		movw	ax, #_response
 350 0225 B8 00                   		movw	[sp], ax
 351 0227 C9 F2 2A 00             		movw	r10, #42
 352 022b AE F8                   		movw	ax, sp
 353 022d BD F2                   		movw	r10, ax
 354 022f 04 2A 00                		addw	ax, #42
 355 0232 BD F2                   		movw	r10, ax
 356 0234 04 FD FF                		addw	ax, #-3
 357 0237 B8 02                   		movw	[sp+2], ax
 358 0239 FC 00 00 00             		call	!!%code(_strcat)
 114:../src/user_functions.c **** 				  recieveInstruction(6);
 359                             		.loc 1 114 0
 360 023d 30 06 00                		movw	ax, #6
 361 0240 B8 00                   		movw	[sp], ax
 362 0242 FC 00 00 00             		call	!!%code(_recieveInstruction)
 115:../src/user_functions.c **** 				  count = 5; break;
 363                             		.loc 1 115 0
 364 0246 30 05 00                		movw	ax, #5
 365 0249 BF 00 00                		movw	!_count, ax
 366 024c EC DB 06 00             		br	!!.L9
 367                             	.L16:
 116:../src/user_functions.c **** 
 117:../src/user_functions.c **** 		case '2': strcpy(mem, &record[2]);
 368                             		.loc 1 117 0
 369 0250 30 00 00                		movw	ax, #_mem
 370 0253 B8 00                   		movw	[sp], ax
 371 0255 30 00 00                		movw	ax, #_record+2
 372 0258 B8 02                   		movw	[sp+2], ax
 373 025a FC 00 00 00             		call	!!%code(_strcpy)
 118:../src/user_functions.c **** 				  strcpy(response, "$20\x0d\x0a"); count = 5; break;
 374                             		.loc 1 118 0
 375 025e 51 24                   		mov	a, #36
 376 0260 9F 04 00                		mov	!_response, a
 377 0263 51 32                   		mov	a, #50
 378 0265 9F 05 00                		mov	!_response+1, a
 379 0268 51 30                   		mov	a, #48
 380 026a 9F 06 00                		mov	!_response+2, a
 381 026d 51 0D                   		mov	a, #13
 382 026f 9F 07 00                		mov	!_response+3, a
 383 0272 51 0A                   		mov	a, #10
 384 0274 9F 08 00                		mov	!_response+4, a
 385 0277 F5 09 00                		clrb	!_response+5
 386 027a 30 05 00                		movw	ax, #5
 387 027d BF 00 00                		movw	!_count, ax
 388 0280 EC DB 06 00             		br	!!.L9
 389                             	.L17:
 119:../src/user_functions.c **** 
 120:../src/user_functions.c **** 		case '3': strcpy(response, "$3019119038\x0d\x0a"); count = 13; break;
 390                             		.loc 1 120 0
 391 0284 51 24                   		mov	a, #36
 392 0286 9F 04 00                		mov	!_response, a
 393 0289 51 33                   		mov	a, #51
 394 028b 9F 05 00                		mov	!_response+1, a
 395 028e 51 30                   		mov	a, #48
 396 0290 9F 06 00                		mov	!_response+2, a
 397 0293 51 31                   		mov	a, #49
 398 0295 9F 07 00                		mov	!_response+3, a
 399 0298 51 39                   		mov	a, #57
 400 029a 9F 08 00                		mov	!_response+4, a
 401 029d 51 31                   		mov	a, #49
 402 029f 9F 09 00                		mov	!_response+5, a
 403 02a2 51 31                   		mov	a, #49
 404 02a4 9F 0A 00                		mov	!_response+6, a
 405 02a7 51 39                   		mov	a, #57
 406 02a9 9F 0B 00                		mov	!_response+7, a
 407 02ac 51 30                   		mov	a, #48
 408 02ae 9F 0C 00                		mov	!_response+8, a
 409 02b1 51 33                   		mov	a, #51
 410 02b3 9F 0D 00                		mov	!_response+9, a
 411 02b6 51 38                   		mov	a, #56
 412 02b8 9F 0E 00                		mov	!_response+10, a
 413 02bb 51 0D                   		mov	a, #13
 414 02bd 9F 0F 00                		mov	!_response+11, a
 415 02c0 51 0A                   		mov	a, #10
 416 02c2 9F 10 00                		mov	!_response+12, a
 417 02c5 F5 11 00                		clrb	!_response+13
 418 02c8 30 0D 00                		movw	ax, #13
 419 02cb BF 00 00                		movw	!_count, ax
 420 02ce EC DB 06 00             		br	!!.L9
 421                             	.L18:
 121:../src/user_functions.c **** 
 122:../src/user_functions.c **** 		case 'D': if(strlen(mem) <= 32){
 422                             		.loc 1 122 0
 423 02d2 30 00 00                		movw	ax, #_mem
 424 02d5 B8 00                   		movw	[sp], ax
 425 02d7 FC 00 00 00             		call	!!%code(_strlen)
 426 02db AD F0                   		movw	ax, r8
 427 02dd 44 20 00                		cmpw	ax, #32
 428 02e0 61 F3                   		 sknh
 429 02e2 EC 21 03 00             		 br	!!.L26
 123:../src/user_functions.c **** 
 124:../src/user_functions.c **** 					strcpy(response, "$D0\x0d\x0a"); count = 5;
 430                             		.loc 1 124 0
 431 02e6 51 24                   		mov	a, #36
 432 02e8 9F 04 00                		mov	!_response, a
 433 02eb 51 44                   		mov	a, #68
 434 02ed 9F 05 00                		mov	!_response+1, a
 435 02f0 51 30                   		mov	a, #48
 436 02f2 9F 06 00                		mov	!_response+2, a
 437 02f5 51 0D                   		mov	a, #13
 438 02f7 9F 07 00                		mov	!_response+3, a
 439 02fa 51 0A                   		mov	a, #10
 440 02fc 9F 08 00                		mov	!_response+4, a
 441 02ff F5 09 00                		clrb	!_response+5
 442 0302 30 05 00                		movw	ax, #5
 443 0305 BF 00 00                		movw	!_count, ax
 125:../src/user_functions.c **** 					strcpy(display_string,mem);
 444                             		.loc 1 125 0
 445 0308 30 00 00                		movw	ax, #_display_string
 446 030b B8 00                   		movw	[sp], ax
 447 030d 30 00 00                		movw	ax, #_mem
 448 0310 B8 02                   		movw	[sp+2], ax
 449 0312 FC 00 00 00             		call	!!%code(_strcpy)
 126:../src/user_functions.c **** 					displayLCD(1);
 450                             		.loc 1 126 0
 451 0316 E6                      		onew	ax
 452 0317 B8 00                   		movw	[sp], ax
 453 0319 FC 00 00 00             		call	!!%code(_displayLCD)
 127:../src/user_functions.c **** 				  }
 128:../src/user_functions.c **** 				  else{
 129:../src/user_functions.c **** 				    writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 130:../src/user_functions.c **** 					delayNoInt(1640);
 131:../src/user_functions.c **** 
 132:../src/user_functions.c **** 					writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 133:../src/user_functions.c **** 					delayNoInt(1640);
 134:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 135:../src/user_functions.c **** 				  }
 136:../src/user_functions.c **** 				  break;
 454                             		.loc 1 136 0
 455 031d EC DB 06 00             		br	!!.L9
 456                             	.L26:
 129:../src/user_functions.c **** 					delayNoInt(1640);
 457                             		.loc 1 129 0
 458 0321 F1                      		clrb	a
 459 0322 98 00                   		mov	[sp], a
 460 0324 E1                      		oneb	a
 461 0325 98 02                   		mov	[sp+2], a
 462 0327 FC 00 00 00             		call	!!%code(_writeByteLcd)
 130:../src/user_functions.c **** 
 463                             		.loc 1 130 0
 464 032b 30 68 06                		movw	ax, #1640
 465 032e B8 00                   		movw	[sp], ax
 466 0330 FC 00 00 00             		call	!!%code(_delayNoInt)
 132:../src/user_functions.c **** 					delayNoInt(1640);
 467                             		.loc 1 132 0
 468 0334 F1                      		clrb	a
 469 0335 98 00                   		mov	[sp], a
 470 0337 51 80                   		mov	a, #-128
 471 0339 98 02                   		mov	[sp+2], a
 472 033b FC 00 00 00             		call	!!%code(_writeByteLcd)
 133:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 473                             		.loc 1 133 0
 474 033f 30 68 06                		movw	ax, #1640
 475 0342 B8 00                   		movw	[sp], ax
 476 0344 FC 00 00 00             		call	!!%code(_delayNoInt)
 134:../src/user_functions.c **** 				  }
 477                             		.loc 1 134 0
 478 0348 51 24                   		mov	a, #36
 479 034a 9F 04 00                		mov	!_response, a
 480 034d 51 44                   		mov	a, #68
 481 034f 9F 05 00                		mov	!_response+1, a
 482 0352 51 33                   		mov	a, #51
 483 0354 9F 06 00                		mov	!_response+2, a
 484 0357 51 0D                   		mov	a, #13
 485 0359 9F 07 00                		mov	!_response+3, a
 486 035c 51 0A                   		mov	a, #10
 487 035e 9F 08 00                		mov	!_response+4, a
 488 0361 F5 09 00                		clrb	!_response+5
 489 0364 30 05 00                		movw	ax, #5
 490 0367 BF 00 00                		movw	!_count, ax
 491                             		.loc 1 136 0
 492 036a EC DB 06 00             		br	!!.L9
 493                             	.L21:
 137:../src/user_functions.c **** 
 138:../src/user_functions.c **** 		case 'L': if(record[2] == '0'){
 494                             		.loc 1 138 0
 495 036e 8F 00 00                		mov	a, !_record+2
 496 0371 9D F0                   		mov	r8, a
 497 0373 4A F0 30                		cmp	r8, #48
 498 0376 61 E8                   		 skz
 499 0378 EC ED 03 00             		 br	!!.L28
 139:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 500                             		.loc 1 139 0
 501 037c C9 F0 04 FF             		movw	r8, #-252
 502 0380 AD F0                   		movw	ax, r8
 503 0382 BD F4                   		movw	r12, ax
 504 0384 FA F4                   		movw	hl, r12
 505 0386 8B                      		mov	a, [hl]
 506 0387 9D F2                   		mov	r10, a
 507 0389 5A F2 FD                		and	r10, #-3
 508 038c AD F0                   		movw	ax, r8
 509 038e DA F4                   		movw	bc, r12
 510 0390 8D F2                   		mov	a, r10
 511 0392 48 00 00                		mov	[bc], a
 140:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 512                             		.loc 1 140 0
 513 0395 C9 F0 04 FF             		movw	r8, #-252
 514 0399 AD F0                   		movw	ax, r8
 515 039b BD F4                   		movw	r12, ax
 516 039d FA F4                   		movw	hl, r12
 517 039f 8B                      		mov	a, [hl]
 518 03a0 9D F2                   		mov	r10, a
 519 03a2 5A F2 FB                		and	r10, #-5
 520 03a5 AD F0                   		movw	ax, r8
 521 03a7 DA F4                   		movw	bc, r12
 522 03a9 8D F2                   		mov	a, r10
 523 03ab 48 00 00                		mov	[bc], a
 141:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 524                             		.loc 1 141 0
 525 03ae C9 F0 04 FF             		movw	r8, #-252
 526 03b2 AD F0                   		movw	ax, r8
 527 03b4 BD F4                   		movw	r12, ax
 528 03b6 FA F4                   		movw	hl, r12
 529 03b8 8B                      		mov	a, [hl]
 530 03b9 9D F2                   		mov	r10, a
 531 03bb 5A F2 F7                		and	r10, #-9
 532 03be AD F0                   		movw	ax, r8
 533 03c0 DA F4                   		movw	bc, r12
 534 03c2 8D F2                   		mov	a, r10
 535 03c4 48 00 00                		mov	[bc], a
 142:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 536                             		.loc 1 142 0
 537 03c7 51 24                   		mov	a, #36
 538 03c9 9F 04 00                		mov	!_response, a
 539 03cc 51 4C                   		mov	a, #76
 540 03ce 9F 05 00                		mov	!_response+1, a
 541 03d1 51 30                   		mov	a, #48
 542 03d3 9F 06 00                		mov	!_response+2, a
 543 03d6 51 0D                   		mov	a, #13
 544 03d8 9F 07 00                		mov	!_response+3, a
 545 03db 51 0A                   		mov	a, #10
 546 03dd 9F 08 00                		mov	!_response+4, a
 547 03e0 F5 09 00                		clrb	!_response+5
 548 03e3 30 05 00                		movw	ax, #5
 549 03e6 BF 00 00                		movw	!_count, ax
 550 03e9 EC 0F 06 00             		br	!!.L29
 551                             	.L28:
 143:../src/user_functions.c **** 				  }
 144:../src/user_functions.c **** 				  else if(record[2] == '1'){
 552                             		.loc 1 144 0
 553 03ed 8F 00 00                		mov	a, !_record+2
 554 03f0 9D F0                   		mov	r8, a
 555 03f2 4A F0 31                		cmp	r8, #49
 556 03f5 61 E8                   		 skz
 557 03f7 EC 6C 04 00             		 br	!!.L30
 145:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 558                             		.loc 1 145 0
 559 03fb C9 F0 04 FF             		movw	r8, #-252
 560 03ff AD F0                   		movw	ax, r8
 561 0401 BD F4                   		movw	r12, ax
 562 0403 FA F4                   		movw	hl, r12
 563 0405 8B                      		mov	a, [hl]
 564 0406 9D F2                   		mov	r10, a
 565 0408 5A F2 FD                		and	r10, #-3
 566 040b AD F0                   		movw	ax, r8
 567 040d DA F4                   		movw	bc, r12
 568 040f 8D F2                   		mov	a, r10
 569 0411 48 00 00                		mov	[bc], a
 146:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 570                             		.loc 1 146 0
 571 0414 C9 F0 04 FF             		movw	r8, #-252
 572 0418 AD F0                   		movw	ax, r8
 573 041a BD F4                   		movw	r12, ax
 574 041c FA F4                   		movw	hl, r12
 575 041e 8B                      		mov	a, [hl]
 576 041f 9D F2                   		mov	r10, a
 577 0421 5A F2 FB                		and	r10, #-5
 578 0424 AD F0                   		movw	ax, r8
 579 0426 DA F4                   		movw	bc, r12
 580 0428 8D F2                   		mov	a, r10
 581 042a 48 00 00                		mov	[bc], a
 147:../src/user_functions.c **** 					  P4_bit.no3 = 1;
 582                             		.loc 1 147 0
 583 042d C9 F0 04 FF             		movw	r8, #-252
 584 0431 AD F0                   		movw	ax, r8
 585 0433 BD F4                   		movw	r12, ax
 586 0435 FA F4                   		movw	hl, r12
 587 0437 8B                      		mov	a, [hl]
 588 0438 9D F2                   		mov	r10, a
 589 043a 6A F2 08                		or	r10, #8
 590 043d AD F0                   		movw	ax, r8
 591 043f DA F4                   		movw	bc, r12
 592 0441 8D F2                   		mov	a, r10
 593 0443 48 00 00                		mov	[bc], a
 148:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 594                             		.loc 1 148 0
 595 0446 51 24                   		mov	a, #36
 596 0448 9F 04 00                		mov	!_response, a
 597 044b 51 4C                   		mov	a, #76
 598 044d 9F 05 00                		mov	!_response+1, a
 599 0450 51 30                   		mov	a, #48
 600 0452 9F 06 00                		mov	!_response+2, a
 601 0455 51 0D                   		mov	a, #13
 602 0457 9F 07 00                		mov	!_response+3, a
 603 045a 51 0A                   		mov	a, #10
 604 045c 9F 08 00                		mov	!_response+4, a
 605 045f F5 09 00                		clrb	!_response+5
 606 0462 30 05 00                		movw	ax, #5
 607 0465 BF 00 00                		movw	!_count, ax
 608 0468 EC 0F 06 00             		br	!!.L29
 609                             	.L30:
 149:../src/user_functions.c **** 				  }
 150:../src/user_functions.c **** 				  else if(record[2] == '2'){
 610                             		.loc 1 150 0
 611 046c 8F 00 00                		mov	a, !_record+2
 612 046f 9D F0                   		mov	r8, a
 613 0471 4A F0 32                		cmp	r8, #50
 614 0474 61 E8                   		 skz
 615 0476 EC EB 04 00             		 br	!!.L31
 151:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 616                             		.loc 1 151 0
 617 047a C9 F0 04 FF             		movw	r8, #-252
 618 047e AD F0                   		movw	ax, r8
 619 0480 BD F4                   		movw	r12, ax
 620 0482 FA F4                   		movw	hl, r12
 621 0484 8B                      		mov	a, [hl]
 622 0485 9D F2                   		mov	r10, a
 623 0487 6A F2 02                		or	r10, #2
 624 048a AD F0                   		movw	ax, r8
 625 048c DA F4                   		movw	bc, r12
 626 048e 8D F2                   		mov	a, r10
 627 0490 48 00 00                		mov	[bc], a
 152:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 628                             		.loc 1 152 0
 629 0493 C9 F0 04 FF             		movw	r8, #-252
 630 0497 AD F0                   		movw	ax, r8
 631 0499 BD F4                   		movw	r12, ax
 632 049b FA F4                   		movw	hl, r12
 633 049d 8B                      		mov	a, [hl]
 634 049e 9D F2                   		mov	r10, a
 635 04a0 5A F2 FB                		and	r10, #-5
 636 04a3 AD F0                   		movw	ax, r8
 637 04a5 DA F4                   		movw	bc, r12
 638 04a7 8D F2                   		mov	a, r10
 639 04a9 48 00 00                		mov	[bc], a
 153:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 640                             		.loc 1 153 0
 641 04ac C9 F0 04 FF             		movw	r8, #-252
 642 04b0 AD F0                   		movw	ax, r8
 643 04b2 BD F4                   		movw	r12, ax
 644 04b4 FA F4                   		movw	hl, r12
 645 04b6 8B                      		mov	a, [hl]
 646 04b7 9D F2                   		mov	r10, a
 647 04b9 5A F2 F7                		and	r10, #-9
 648 04bc AD F0                   		movw	ax, r8
 649 04be DA F4                   		movw	bc, r12
 650 04c0 8D F2                   		mov	a, r10
 651 04c2 48 00 00                		mov	[bc], a
 154:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 652                             		.loc 1 154 0
 653 04c5 51 24                   		mov	a, #36
 654 04c7 9F 04 00                		mov	!_response, a
 655 04ca 51 4C                   		mov	a, #76
 656 04cc 9F 05 00                		mov	!_response+1, a
 657 04cf 51 30                   		mov	a, #48
 658 04d1 9F 06 00                		mov	!_response+2, a
 659 04d4 51 0D                   		mov	a, #13
 660 04d6 9F 07 00                		mov	!_response+3, a
 661 04d9 51 0A                   		mov	a, #10
 662 04db 9F 08 00                		mov	!_response+4, a
 663 04de F5 09 00                		clrb	!_response+5
 664 04e1 30 05 00                		movw	ax, #5
 665 04e4 BF 00 00                		movw	!_count, ax
 666 04e7 EC 0F 06 00             		br	!!.L29
 667                             	.L31:
 155:../src/user_functions.c **** 				  }
 156:../src/user_functions.c **** 				  else if(record[2] == '3'){
 668                             		.loc 1 156 0
 669 04eb 8F 00 00                		mov	a, !_record+2
 670 04ee 9D F0                   		mov	r8, a
 671 04f0 4A F0 33                		cmp	r8, #51
 672 04f3 61 E8                   		 skz
 673 04f5 EC 6A 05 00             		 br	!!.L32
 157:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 674                             		.loc 1 157 0
 675 04f9 C9 F0 04 FF             		movw	r8, #-252
 676 04fd AD F0                   		movw	ax, r8
 677 04ff BD F4                   		movw	r12, ax
 678 0501 FA F4                   		movw	hl, r12
 679 0503 8B                      		mov	a, [hl]
 680 0504 9D F2                   		mov	r10, a
 681 0506 5A F2 FD                		and	r10, #-3
 682 0509 AD F0                   		movw	ax, r8
 683 050b DA F4                   		movw	bc, r12
 684 050d 8D F2                   		mov	a, r10
 685 050f 48 00 00                		mov	[bc], a
 158:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 686                             		.loc 1 158 0
 687 0512 C9 F0 04 FF             		movw	r8, #-252
 688 0516 AD F0                   		movw	ax, r8
 689 0518 BD F4                   		movw	r12, ax
 690 051a FA F4                   		movw	hl, r12
 691 051c 8B                      		mov	a, [hl]
 692 051d 9D F2                   		mov	r10, a
 693 051f 6A F2 04                		or	r10, #4
 694 0522 AD F0                   		movw	ax, r8
 695 0524 DA F4                   		movw	bc, r12
 696 0526 8D F2                   		mov	a, r10
 697 0528 48 00 00                		mov	[bc], a
 159:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 698                             		.loc 1 159 0
 699 052b C9 F0 04 FF             		movw	r8, #-252
 700 052f AD F0                   		movw	ax, r8
 701 0531 BD F4                   		movw	r12, ax
 702 0533 FA F4                   		movw	hl, r12
 703 0535 8B                      		mov	a, [hl]
 704 0536 9D F2                   		mov	r10, a
 705 0538 5A F2 F7                		and	r10, #-9
 706 053b AD F0                   		movw	ax, r8
 707 053d DA F4                   		movw	bc, r12
 708 053f 8D F2                   		mov	a, r10
 709 0541 48 00 00                		mov	[bc], a
 160:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 710                             		.loc 1 160 0
 711 0544 51 24                   		mov	a, #36
 712 0546 9F 04 00                		mov	!_response, a
 713 0549 51 4C                   		mov	a, #76
 714 054b 9F 05 00                		mov	!_response+1, a
 715 054e 51 30                   		mov	a, #48
 716 0550 9F 06 00                		mov	!_response+2, a
 717 0553 51 0D                   		mov	a, #13
 718 0555 9F 07 00                		mov	!_response+3, a
 719 0558 51 0A                   		mov	a, #10
 720 055a 9F 08 00                		mov	!_response+4, a
 721 055d F5 09 00                		clrb	!_response+5
 722 0560 30 05 00                		movw	ax, #5
 723 0563 BF 00 00                		movw	!_count, ax
 724 0566 EC 0F 06 00             		br	!!.L29
 725                             	.L32:
 161:../src/user_functions.c **** 				  }
 162:../src/user_functions.c **** 				  else if(record[2] == '4'){
 726                             		.loc 1 162 0
 727 056a 8F 00 00                		mov	a, !_record+2
 728 056d 9D F0                   		mov	r8, a
 729 056f 4A F0 34                		cmp	r8, #52
 730 0572 61 E8                   		 skz
 731 0574 EC E9 05 00             		 br	!!.L33
 163:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 732                             		.loc 1 163 0
 733 0578 C9 F0 04 FF             		movw	r8, #-252
 734 057c AD F0                   		movw	ax, r8
 735 057e BD F4                   		movw	r12, ax
 736 0580 FA F4                   		movw	hl, r12
 737 0582 8B                      		mov	a, [hl]
 738 0583 9D F2                   		mov	r10, a
 739 0585 6A F2 02                		or	r10, #2
 740 0588 AD F0                   		movw	ax, r8
 741 058a DA F4                   		movw	bc, r12
 742 058c 8D F2                   		mov	a, r10
 743 058e 48 00 00                		mov	[bc], a
 164:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 744                             		.loc 1 164 0
 745 0591 C9 F0 04 FF             		movw	r8, #-252
 746 0595 AD F0                   		movw	ax, r8
 747 0597 BD F4                   		movw	r12, ax
 748 0599 FA F4                   		movw	hl, r12
 749 059b 8B                      		mov	a, [hl]
 750 059c 9D F2                   		mov	r10, a
 751 059e 6A F2 04                		or	r10, #4
 752 05a1 AD F0                   		movw	ax, r8
 753 05a3 DA F4                   		movw	bc, r12
 754 05a5 8D F2                   		mov	a, r10
 755 05a7 48 00 00                		mov	[bc], a
 165:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 756                             		.loc 1 165 0
 757 05aa C9 F0 04 FF             		movw	r8, #-252
 758 05ae AD F0                   		movw	ax, r8
 759 05b0 BD F4                   		movw	r12, ax
 760 05b2 FA F4                   		movw	hl, r12
 761 05b4 8B                      		mov	a, [hl]
 762 05b5 9D F2                   		mov	r10, a
 763 05b7 5A F2 F7                		and	r10, #-9
 764 05ba AD F0                   		movw	ax, r8
 765 05bc DA F4                   		movw	bc, r12
 766 05be 8D F2                   		mov	a, r10
 767 05c0 48 00 00                		mov	[bc], a
 166:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 768                             		.loc 1 166 0
 769 05c3 51 24                   		mov	a, #36
 770 05c5 9F 04 00                		mov	!_response, a
 771 05c8 51 4C                   		mov	a, #76
 772 05ca 9F 05 00                		mov	!_response+1, a
 773 05cd 51 30                   		mov	a, #48
 774 05cf 9F 06 00                		mov	!_response+2, a
 775 05d2 51 0D                   		mov	a, #13
 776 05d4 9F 07 00                		mov	!_response+3, a
 777 05d7 51 0A                   		mov	a, #10
 778 05d9 9F 08 00                		mov	!_response+4, a
 779 05dc F5 09 00                		clrb	!_response+5
 780 05df 30 05 00                		movw	ax, #5
 781 05e2 BF 00 00                		movw	!_count, ax
 782 05e5 EC 0F 06 00             		br	!!.L29
 783                             	.L33:
 167:../src/user_functions.c **** 				  }
 168:../src/user_functions.c **** 				  else{
 169:../src/user_functions.c **** 					  strcpy(response, "$L2\x0d\x0a"); count = 5;
 784                             		.loc 1 169 0
 785 05e9 51 24                   		mov	a, #36
 786 05eb 9F 04 00                		mov	!_response, a
 787 05ee 51 4C                   		mov	a, #76
 788 05f0 9F 05 00                		mov	!_response+1, a
 789 05f3 51 32                   		mov	a, #50
 790 05f5 9F 06 00                		mov	!_response+2, a
 791 05f8 51 0D                   		mov	a, #13
 792 05fa 9F 07 00                		mov	!_response+3, a
 793 05fd 51 0A                   		mov	a, #10
 794 05ff 9F 08 00                		mov	!_response+4, a
 795 0602 F5 09 00                		clrb	!_response+5
 796 0605 30 05 00                		movw	ax, #5
 797 0608 BF 00 00                		movw	!_count, ax
 170:../src/user_functions.c **** 				  }
 171:../src/user_functions.c **** 				  break;
 798                             		.loc 1 171 0
 799 060b EC DB 06 00             		br	!!.L9
 800                             	.L29:
 801 060f EC DB 06 00             		br	!!.L9
 802                             	.L20:
 172:../src/user_functions.c **** 		case 'E':
 173:../src/user_functions.c **** 
 174:../src/user_functions.c **** 					 collectADC();
 803                             		.loc 1 174 0
 804 0613 FC 00 00 00             		call	!!%code(_collectADC)
 175:../src/user_functions.c **** 					 sprintf(str, "$E0%02d,0,%02d\x0d\x0a", voltage, current2);
 805                             		.loc 1 175 0
 806 0617 8F 00 00                		mov	a, !_voltage
 807 061a 9D F0                   		mov	r8, a
 808 061c 70                      		mov	x, a 
 809 061d 51 00                   		mov	a, #0
 810 061f BD F2                   		movw	r10, ax
 811 0621 8F 00 00                		mov	a, !_current2
 812 0624 9D F0                   		mov	r8, a
 813 0626 CD F1 00                		mov	r9, #0
 814 0629 C9 F4 2A 00             		movw	r12, #42
 815 062d AE F8                   		movw	ax, sp
 816 062f BD F4                   		movw	r12, ax
 817 0631 04 2A 00                		addw	ax, #42
 818 0634 BD F4                   		movw	r12, ax
 819 0636 04 DF FF                		addw	ax, #-33
 820 0639 B8 00                   		movw	[sp], ax
 821 063b 30 08 00                		movw	ax, #.LC1
 822 063e B8 02                   		movw	[sp+2], ax
 823 0640 AD F2                   		movw	ax, r10
 824 0642 B8 04                   		movw	[sp+4], ax
 825 0644 AD F0                   		movw	ax, r8
 826 0646 B8 06                   		movw	[sp+6], ax
 827 0648 FC 00 00 00             		call	!!%code(_sprintf)
 176:../src/user_functions.c **** 
 177:../src/user_functions.c **** 	//				  sprintf(str, "%d", voltage);
 178:../src/user_functions.c **** 
 179:../src/user_functions.c **** 					  strcpy(response, str); count = strlen(str);
 828                             		.loc 1 179 0
 829 064c 30 04 00                		movw	ax, #_response
 830 064f B8 00                   		movw	[sp], ax
 831 0651 C9 F0 2A 00             		movw	r8, #42
 832 0655 AE F8                   		movw	ax, sp
 833 0657 BD F0                   		movw	r8, ax
 834 0659 04 2A 00                		addw	ax, #42
 835 065c BD F0                   		movw	r8, ax
 836 065e 04 DF FF                		addw	ax, #-33
 837 0661 B8 02                   		movw	[sp+2], ax
 838 0663 FC 00 00 00             		call	!!%code(_strcpy)
 839 0667 C9 F2 2A 00             		movw	r10, #42
 840 066b AE F8                   		movw	ax, sp
 841 066d BD F2                   		movw	r10, ax
 842 066f 04 2A 00                		addw	ax, #42
 843 0672 BD F2                   		movw	r10, ax
 844 0674 04 DF FF                		addw	ax, #-33
 845 0677 B8 00                   		movw	[sp], ax
 846 0679 FC 00 00 00             		call	!!%code(_strlen)
 847 067d AD F0                   		movw	ax, r8
 848 067f BF 00 00                		movw	!_count, ax
 180:../src/user_functions.c **** 
 181:../src/user_functions.c **** 					  break;
 849                             		.loc 1 181 0
 850 0682 EC DB 06 00             		br	!!.L9
 851                             	.L11:
 182:../src/user_functions.c **** 
 183:../src/user_functions.c **** 	     case 'B':    setRTC();
 852                             		.loc 1 183 0
 853 0686 FC 00 00 00             		call	!!%code(_setRTC)
 184:../src/user_functions.c **** 					  break;
 854                             		.loc 1 184 0
 855 068a EC DB 06 00             		br	!!.L9
 856                             	.L19:
 185:../src/user_functions.c **** 		 case 'C':	  getRTC();
 857                             		.loc 1 185 0
 858 068e FC 00 00 00             		call	!!%code(_getRTC)
 186:../src/user_functions.c **** 		 	 	 	  break;
 859                             		.loc 1 186 0
 860 0692 EC DB 06 00             		br	!!.L9
 861                             	.L10:
 187:../src/user_functions.c **** 
 188:../src/user_functions.c **** 
 189:../src/user_functions.c **** 		default:
 190:../src/user_functions.c **** 				 strcpy(response, "$");
 862                             		.loc 1 190 0
 863 0696 51 24                   		mov	a, #36
 864 0698 9F 04 00                		mov	!_response, a
 865 069b F5 05 00                		clrb	!_response+1
 191:../src/user_functions.c **** 				 strcat(response, &record[1]);
 866                             		.loc 1 191 0
 867 069e 30 04 00                		movw	ax, #_response
 868 06a1 B8 00                   		movw	[sp], ax
 869 06a3 30 00 00                		movw	ax, #_record+1
 870 06a6 B8 02                   		movw	[sp+2], ax
 871 06a8 FC 00 00 00             		call	!!%code(_strcat)
 192:../src/user_functions.c **** 				 strcat(response, "1\x0d\x0a"); count = 5;
 872                             		.loc 1 192 0
 873 06ac 30 04 00                		movw	ax, #_response
 874 06af B8 00                   		movw	[sp], ax
 875 06b1 FC 00 00 00             		call	!!%code(_strlen)
 876 06b5 AD F0                   		movw	ax, r8
 877 06b7 04 04 00                		addw	ax, #_response
 878 06ba BD F0                   		movw	r8, ax
 879 06bc BD F4                   		movw	r12, ax
 880 06be DA F4                   		movw	bc, r12
 881 06c0 51 31                   		mov	a, #49
 882 06c2 48 00 00                		mov	[bc], a
 883 06c5 DA F0                   		movw	bc, r8
 884 06c7 51 0D                   		mov	a, #13
 885 06c9 48 01 00                		mov	1[bc], a
 886 06cc 51 0A                   		mov	a, #10
 887 06ce 48 02 00                		mov	2[bc], a
 888 06d1 F1                      		clrb	a
 889 06d2 48 03 00                		mov	3[bc], a
 890 06d5 30 05 00                		movw	ax, #5
 891 06d8 BF 00 00                		movw	!_count, ax
 892                             	.L9:
 193:../src/user_functions.c **** 
 194:../src/user_functions.c **** 		}
 195:../src/user_functions.c **** 	}
 196:../src/user_functions.c **** 
 197:../src/user_functions.c **** 	R_UART1_Send(response, count);
 893                             		.loc 1 197 0
 894 06db AF 00 00                		movw	ax, !_count
 895 06de BD F0                   		movw	r8, ax
 896 06e0 30 04 00                		movw	ax, #_response
 897 06e3 B8 00                   		movw	[sp], ax
 898 06e5 AD F0                   		movw	ax, r8
 899 06e7 B8 02                   		movw	[sp+2], ax
 900 06e9 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 198:../src/user_functions.c **** }
 901                             		.loc 1 198 0
 902 06ed 10 2A                   		addw	sp, #42
 903 06ef D7                      		ret
 904                             	.LFE1:
 906                             		.global	_errorTest
 908                             	_errorTest:
 909                             	.LFB2:
 199:../src/user_functions.c **** 
 200:../src/user_functions.c **** int errorTest(){
 910                             		.loc 1 200 0
 911                             		; start of function
 912                             		; locals: 8 bytes
 913                             		; outgoing: 4 bytes
 914 06f0 20 0C                   		subw	sp, #12
 915                             	.LCFI2:
 201:../src/user_functions.c **** 
 202:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 203:../src/user_functions.c **** //	}
 204:../src/user_functions.c **** //	else{
 205:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 206:../src/user_functions.c **** //		strcpy(record, validChar);
 207:../src/user_functions.c **** //		count = 5;
 208:../src/user_functions.c **** //		return 0;
 209:../src/user_functions.c **** //	}
 210:../src/user_functions.c **** 
 211:../src/user_functions.c **** 	if(record[strlen(record) - 1] != '\x0a'){	//INVALID PARAMETERS
 916                             		.loc 1 211 0
 917 06f2 30 00 00                		movw	ax, #_record
 918 06f5 B8 00                   		movw	[sp], ax
 919 06f7 FC 00 00 00             		call	!!%code(_strlen)
 920 06fb B6 F0                   		decw	r8
 921 06fd AD F0                   		movw	ax, r8
 922 06ff 04 00 00                		addw	ax, #_record
 923 0702 16                      		movw	hl, ax
 924 0703 8B                      		mov	a, [hl]
 925 0704 9D F0                   		mov	r8, a
 926 0706 4A F0 0A                		cmp	r8, #10
 927 0709 61 F8                   		 sknz
 928 070b EC 4E 07 00             		 br	!!.L35
 929                             	.LBB2:
 212:../src/user_functions.c **** 		char validChar[] = {'$',record[1],'2','\x0d','\x0a'};
 930                             		.loc 1 212 0
 931 070f 51 24                   		mov	a, #36
 932 0711 98 07                   		mov	[sp+7], a
 933 0713 8F 00 00                		mov	a, !_record+1
 934 0716 9D F0                   		mov	r8, a
 935 0718 98 08                   		mov	[sp+8], a
 936 071a 51 32                   		mov	a, #50
 937 071c 98 09                   		mov	[sp+9], a
 938 071e 51 0D                   		mov	a, #13
 939 0720 98 0A                   		mov	[sp+10], a
 940 0722 51 0A                   		mov	a, #10
 941 0724 98 0B                   		mov	[sp+11], a
 213:../src/user_functions.c **** 		strcpy(record, validChar);
 942                             		.loc 1 213 0
 943 0726 30 00 00                		movw	ax, #_record
 944 0729 B8 00                   		movw	[sp], ax
 945 072b C9 F0 0C 00             		movw	r8, #12
 946 072f AE F8                   		movw	ax, sp
 947 0731 BD F0                   		movw	r8, ax
 948 0733 04 0C 00                		addw	ax, #12
 949 0736 BD F0                   		movw	r8, ax
 950 0738 04 FB FF                		addw	ax, #-5
 951 073b B8 02                   		movw	[sp+2], ax
 952 073d FC 00 00 00             		call	!!%code(_strcpy)
 214:../src/user_functions.c **** 		count = 5;
 953                             		.loc 1 214 0
 954 0741 30 05 00                		movw	ax, #5
 955 0744 BF 00 00                		movw	!_count, ax
 215:../src/user_functions.c **** 		return 0;
 956                             		.loc 1 215 0
 957 0747 F6                      		clrw	ax
 958 0748 B8 04                   		movw	[sp+4], ax
 959 074a EC 51 07 00             		br	!!.L36
 960                             	.L35:
 961                             	.LBE2:
 216:../src/user_functions.c **** 	}
 217:../src/user_functions.c **** 
 218:../src/user_functions.c **** 	return 1;
 962                             		.loc 1 218 0
 963 074e E6                      		onew	ax
 964 074f B8 04                   		movw	[sp+4], ax
 965                             	.L36:
 966 0751 A8 04                   		movw	ax, [sp+4]
 967 0753 BD F0                   		movw	r8, ax
 219:../src/user_functions.c **** }
 968                             		.loc 1 219 0 discriminator 1
 969 0755 10 0C                   		addw	sp, #12
 970 0757 D7                      		ret
 971                             	.LFE2:
 973                             		.global	_displayLCD
 975                             	_displayLCD:
 976                             	.LFB3:
 220:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 221:../src/user_functions.c **** //reset = 0 just keep going
 222:../src/user_functions.c **** 
 223:../src/user_functions.c **** void displayLCD(int reset){
 977                             		.loc 1 223 0
 978                             		; start of function
 979                             		; push 2: r16
 980                             		; locals: 2 bytes
 981                             		; outgoing: 4 bytes
 982 0758 61 EF                   		sel	rb2
 983 075a C1                      		push	ax ; r16
 984                             	.LCFI3:
 985 075b 61 CF                   		sel	rb0
 986 075d 20 06                   		subw	sp, #6
 987                             	.LCFI4:
 224:../src/user_functions.c **** 
 225:../src/user_functions.c **** if(reset){
 988                             		.loc 1 225 0
 989 075f A8 0C                   		movw	ax, [sp+12]
 990 0761 44 00 00                		cmpw	ax, #0
 991 0764 61 F8                   		 sknz
 992 0766 EC 7A 07 00             		 br	!!.L38
 993                             	.LBB3:
 226:../src/user_functions.c **** 	offset = 0;
 994                             		.loc 1 226 0
 995 076a F6                      		clrw	ax
 996 076b BF 3A 00                		movw	!_offset, ax
 227:../src/user_functions.c **** 	display = 1;
 997                             		.loc 1 227 0
 998 076e E6                      		onew	ax
 999 076f BF 38 00                		movw	!_display, ax
 228:../src/user_functions.c **** 	interval_timer_count = 0;
 1000                             		.loc 1 228 0
 1001 0772 F6                      		clrw	ax
 1002 0773 BF 00 00                		movw	!_interval_timer_count, ax
 229:../src/user_functions.c **** 	R_IT_Start();
 1003                             		.loc 1 229 0
 1004 0776 FC 00 00 00             		call	!!%code(_R_IT_Start)
 1005                             	.L38:
 1006                             	.LBE3:
 230:../src/user_functions.c **** }
 231:../src/user_functions.c **** 
 232:../src/user_functions.c **** if(display){
 1007                             		.loc 1 232 0
 1008 077a AF 38 00                		movw	ax, !_display
 1009 077d BD F0                   		movw	r8, ax
 1010 077f 44 00 00                		cmpw	ax, #0
 1011 0782 61 F8                   		 sknz
 1012 0784 EC 34 08 00             		 br	!!.L39
 1013                             	.LBB4:
 233:../src/user_functions.c **** 
 234:../src/user_functions.c **** 	int i;
 235:../src/user_functions.c **** 
 236:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1014                             		.loc 1 236 0
 1015 0788 F1                      		clrb	a
 1016 0789 98 00                   		mov	[sp], a
 1017 078b E1                      		oneb	a
 1018 078c 98 02                   		mov	[sp+2], a
 1019 078e FC 00 00 00             		call	!!%code(_writeByteLcd)
 237:../src/user_functions.c **** 	delayNoInt(1640);
 1020                             		.loc 1 237 0
 1021 0792 30 68 06                		movw	ax, #1640
 1022 0795 B8 00                   		movw	[sp], ax
 1023 0797 FC 00 00 00             		call	!!%code(_delayNoInt)
 238:../src/user_functions.c **** 
 239:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1024                             		.loc 1 239 0
 1025 079b F1                      		clrb	a
 1026 079c 98 00                   		mov	[sp], a
 1027 079e 51 80                   		mov	a, #-128
 1028 07a0 98 02                   		mov	[sp+2], a
 1029 07a2 FC 00 00 00             		call	!!%code(_writeByteLcd)
 240:../src/user_functions.c **** 	delayNoInt(1640);
 1030                             		.loc 1 240 0
 1031 07a6 30 68 06                		movw	ax, #1640
 1032 07a9 B8 00                   		movw	[sp], ax
 1033 07ab FC 00 00 00             		call	!!%code(_delayNoInt)
 241:../src/user_functions.c **** 
 242:../src/user_functions.c **** 	for(i = offset; i < strlen(display_string) - 2; i++){
 1034                             		.loc 1 242 0
 1035 07af AF 3A 00                		movw	ax, !_offset
 1036 07b2 BD F0                   		movw	r8, ax
 1037 07b4 B8 04                   		movw	[sp+4], ax
 1038 07b6 EC 0D 08 00             		br	!!.L40
 1039                             	.L42:
 243:../src/user_functions.c **** 
 244:../src/user_functions.c **** 		if(i == (8 + offset)){
 1040                             		.loc 1 244 0
 1041 07ba AF 3A 00                		movw	ax, !_offset
 1042 07bd BD F0                   		movw	r8, ax
 1043 07bf 04 08 00                		addw	ax, #8
 1044 07c2 BD F2                   		movw	r10, ax
 1045 07c4 A8 04                   		movw	ax, [sp+4]
 1046 07c6 BD F0                   		movw	r8, ax
 1047 07c8 AD F2                   		movw	ax, r10
 1048 07ca 46 F0                   		cmpw	ax, r8
 1049 07cc 61 E8                   		 skz
 1050 07ce EC E6 07 00             		 br	!!.L41
 245:../src/user_functions.c **** 			writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1051                             		.loc 1 245 0
 1052 07d2 F1                      		clrb	a
 1053 07d3 98 00                   		mov	[sp], a
 1054 07d5 51 C0                   		mov	a, #-64
 1055 07d7 98 02                   		mov	[sp+2], a
 1056 07d9 FC 00 00 00             		call	!!%code(_writeByteLcd)
 246:../src/user_functions.c **** 			delayNoInt(1640);
 1057                             		.loc 1 246 0
 1058 07dd 30 68 06                		movw	ax, #1640
 1059 07e0 B8 00                   		movw	[sp], ax
 1060 07e2 FC 00 00 00             		call	!!%code(_delayNoInt)
 1061                             	.L41:
 247:../src/user_functions.c **** 		}
 248:../src/user_functions.c **** 
 249:../src/user_functions.c **** 		writeByteLcd(LCD_DATA_WR, display_string[i]);
 1062                             		.loc 1 249 0 discriminator 2
 1063 07e6 A8 04                   		movw	ax, [sp+4]
 1064 07e8 04 00 00                		addw	ax, #_display_string
 1065 07eb BD F0                   		movw	r8, ax
 1066 07ed BD F2                   		movw	r10, ax
 1067 07ef FA F2                   		movw	hl, r10
 1068 07f1 8B                      		mov	a, [hl]
 1069 07f2 9D F0                   		mov	r8, a
 1070 07f4 E1                      		oneb	a
 1071 07f5 98 00                   		mov	[sp], a
 1072 07f7 8D F0                   		mov	a, r8
 1073 07f9 98 02                   		mov	[sp+2], a
 1074 07fb FC 00 00 00             		call	!!%code(_writeByteLcd)
 250:../src/user_functions.c **** 		delayNoInt(40);
 1075                             		.loc 1 250 0 discriminator 2
 1076 07ff 30 28 00                		movw	ax, #40
 1077 0802 B8 00                   		movw	[sp], ax
 1078 0804 FC 00 00 00             		call	!!%code(_delayNoInt)
 242:../src/user_functions.c **** 
 1079                             		.loc 1 242 0 discriminator 2
 1080 0808 A8 04                   		movw	ax, [sp+4]
 1081 080a A1                      		incw	ax
 1082 080b B8 04                   		movw	[sp+4], ax
 1083                             	.L40:
 242:../src/user_functions.c **** 
 1084                             		.loc 1 242 0 is_stmt 0 discriminator 1
 1085 080d A8 04                   		movw	ax, [sp+4]
 1086 080f BD E8                   		movw	r16, ax
 1087 0811 30 00 00                		movw	ax, #_display_string
 1088 0814 B8 00                   		movw	[sp], ax
 1089 0816 FC 00 00 00             		call	!!%code(_strlen)
 1090 081a B6 F0                   		decw	r8 
 1091 081c B6 F0                   		decw	r8
 1092 081e AD E8                   		movw	ax, r16
 1093 0820 46 F0                   		cmpw	ax, r8
 1094 0822 61 D8                   		 sknc
 1095 0824 EC BA 07 00             		 br	!!.L42
 251:../src/user_functions.c **** 
 252:../src/user_functions.c **** 	}
 253:../src/user_functions.c **** 	offset++;
 1096                             		.loc 1 253 0 is_stmt 1
 1097 0828 AF 3A 00                		movw	ax, !_offset
 1098 082b BD F0                   		movw	r8, ax
 1099 082d A6 F0                   		incw	r8
 1100 082f AD F0                   		movw	ax, r8
 1101 0831 BF 3A 00                		movw	!_offset, ax
 1102                             	.L39:
 1103                             	.LBE4:
 254:../src/user_functions.c **** 
 255:../src/user_functions.c **** }
 256:../src/user_functions.c **** 
 257:../src/user_functions.c **** if(offset >= (strlen(display_string) - 17) || strlen(display_string) <= 18 ){
 1104                             		.loc 1 257 0
 1105 0834 AF 3A 00                		movw	ax, !_offset
 1106 0837 BD F0                   		movw	r8, ax
 1107 0839 BD E8                   		movw	r16, ax
 1108 083b 30 00 00                		movw	ax, #_display_string
 1109 083e B8 00                   		movw	[sp], ax
 1110 0840 FC 00 00 00             		call	!!%code(_strlen)
 1111 0844 AD F0                   		movw	ax, r8
 1112 0846 04 EF FF                		addw	ax, #-17
 1113 0849 BD F0                   		movw	r8, ax
 1114 084b AD E8                   		movw	ax, r16
 1115 084d 46 F0                   		cmpw	ax, r8
 1116 084f 61 C8                   		 skc
 1117 0851 EC 69 08 00             		 br	!!.L43
 1118                             		.loc 1 257 0 is_stmt 0 discriminator 1
 1119 0855 30 00 00                		movw	ax, #_display_string
 1120 0858 B8 00                   		movw	[sp], ax
 1121 085a FC 00 00 00             		call	!!%code(_strlen)
 1122 085e AD F0                   		movw	ax, r8
 1123 0860 44 12 00                		cmpw	ax, #18
 1124 0863 61 F3                   		 sknh
 1125 0865 EC 71 08 00             		 br	!!.L37
 1126                             	.L43:
 1127                             	.LBB5:
 258:../src/user_functions.c **** 	display = 0;
 1128                             		.loc 1 258 0 is_stmt 1
 1129 0869 F6                      		clrw	ax
 1130 086a BF 38 00                		movw	!_display, ax
 259:../src/user_functions.c **** 	R_IT_Stop();
 1131                             		.loc 1 259 0
 1132 086d FC 00 00 00             		call	!!%code(_R_IT_Stop)
 1133                             	.L37:
 1134                             	.LBE5:
 260:../src/user_functions.c **** }
 261:../src/user_functions.c **** 
 262:../src/user_functions.c **** }
 1135                             		.loc 1 262 0
 1136 0871 10 06                   		addw	sp, #6
 1137 0873 61 EF                   		sel	rb2
 1138 0875 C0                      		pop	ax ; r16
 1139 0876 61 CF                   		sel	rb0
 1140 0878 D7                      		ret
 1141                             	.LFE3:
 1143                             		.global	_collectADC
 1145                             	_collectADC:
 1146                             	.LFB4:
 263:../src/user_functions.c **** 
 264:../src/user_functions.c **** void collectADC(){
 1147                             		.loc 1 264 0
 1148                             		; start of function
 1149                             		; outgoing: 2 bytes
 1150 0879 20 02                   		subw	sp, #2
 1151                             	.LCFI5:
 265:../src/user_functions.c **** 
 266:../src/user_functions.c **** 	 ADS = _00_AD_INPUT_CHANNEL_0;
 1152                             		.loc 1 266 0
 1153 087b C9 F0 31 FF             		movw	r8, #-207
 1154 087f AD F0                   		movw	ax, r8
 1155 0881 BD F2                   		movw	r10, ax
 1156 0883 DA F2                   		movw	bc, r10
 1157 0885 F1                      		clrb	a
 1158 0886 48 00 00                		mov	[bc], a
 267:../src/user_functions.c **** 	 R_ADC_Start();
 1159                             		.loc 1 267 0
 1160 0889 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 268:../src/user_functions.c **** 	 while(ADCS);
 1161                             		.loc 1 268 0
 1162 088d 00                      		nop
 1163                             	.L46:
 1164                             		.loc 1 268 0 is_stmt 0 discriminator 1
 1165 088e C9 F0 30 FF             		movw	r8, #-208
 1166 0892 AD F0                   		movw	ax, r8
 1167 0894 BD F2                   		movw	r10, ax
 1168 0896 FA F2                   		movw	hl, r10
 1169 0898 8B                      		mov	a, [hl]
 1170 0899 9D F0                   		mov	r8, a
 1171 089b 31 7A                   		shr	a, 7
 1172 089d 9D F0                   		mov	r8, a
 1173 089f D4 F0                   		cmp0	r8
 1174 08a1 61 E8                   		 skz
 1175 08a3 EC 8E 08 00             		 br	!!.L46
 269:../src/user_functions.c **** 	 R_ADC_Start();
 1176                             		.loc 1 269 0 is_stmt 1
 1177 08a7 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 270:../src/user_functions.c **** 	 while(ADCS);
 1178                             		.loc 1 270 0
 1179 08ab 00                      		nop
 1180                             	.L47:
 1181                             		.loc 1 270 0 is_stmt 0 discriminator 1
 1182 08ac C9 F0 30 FF             		movw	r8, #-208
 1183 08b0 AD F0                   		movw	ax, r8
 1184 08b2 BD F2                   		movw	r10, ax
 1185 08b4 FA F2                   		movw	hl, r10
 1186 08b6 8B                      		mov	a, [hl]
 1187 08b7 9D F0                   		mov	r8, a
 1188 08b9 31 7A                   		shr	a, 7
 1189 08bb 9D F0                   		mov	r8, a
 1190 08bd D4 F0                   		cmp0	r8
 1191 08bf 61 E8                   		 skz
 1192 08c1 EC AC 08 00             		 br	!!.L47
 271:../src/user_functions.c **** 
 272:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&voltage);
 1193                             		.loc 1 272 0 is_stmt 1
 1194 08c5 30 00 00                		movw	ax, #_voltage
 1195 08c8 B8 00                   		movw	[sp], ax
 1196 08ca FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 273:../src/user_functions.c **** 	 voltage = voltage >> 1;
 1197                             		.loc 1 273 0
 1198 08ce 8F 00 00                		mov	a, !_voltage
 1199 08d1 9D F0                   		mov	r8, a
 1200 08d3 31 1A                   		shr	a, 1
 1201 08d5 9D F0                   		mov	r8, a
 1202 08d7 9F 00 00                		mov	!_voltage, a
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** 	 ADS = _02_AD_INPUT_CHANNEL_2;
 1203                             		.loc 1 275 0
 1204 08da C9 F0 31 FF             		movw	r8, #-207
 1205 08de AD F0                   		movw	ax, r8
 1206 08e0 BD F2                   		movw	r10, ax
 1207 08e2 DA F2                   		movw	bc, r10
 1208 08e4 51 02                   		mov	a, #2
 1209 08e6 48 00 00                		mov	[bc], a
 276:../src/user_functions.c **** 	 R_ADC_Start();
 1210                             		.loc 1 276 0
 1211 08e9 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 277:../src/user_functions.c **** 	 while(ADCS);
 1212                             		.loc 1 277 0
 1213 08ed 00                      		nop
 1214                             	.L48:
 1215                             		.loc 1 277 0 is_stmt 0 discriminator 1
 1216 08ee C9 F0 30 FF             		movw	r8, #-208
 1217 08f2 AD F0                   		movw	ax, r8
 1218 08f4 BD F2                   		movw	r10, ax
 1219 08f6 FA F2                   		movw	hl, r10
 1220 08f8 8B                      		mov	a, [hl]
 1221 08f9 9D F0                   		mov	r8, a
 1222 08fb 31 7A                   		shr	a, 7
 1223 08fd 9D F0                   		mov	r8, a
 1224 08ff D4 F0                   		cmp0	r8
 1225 0901 61 E8                   		 skz
 1226 0903 EC EE 08 00             		 br	!!.L48
 278:../src/user_functions.c **** 	 R_ADC_Start();
 1227                             		.loc 1 278 0 is_stmt 1
 1228 0907 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 279:../src/user_functions.c **** 	 while(ADCS);
 1229                             		.loc 1 279 0
 1230 090b 00                      		nop
 1231                             	.L49:
 1232                             		.loc 1 279 0 is_stmt 0 discriminator 1
 1233 090c C9 F0 30 FF             		movw	r8, #-208
 1234 0910 AD F0                   		movw	ax, r8
 1235 0912 BD F2                   		movw	r10, ax
 1236 0914 FA F2                   		movw	hl, r10
 1237 0916 8B                      		mov	a, [hl]
 1238 0917 9D F0                   		mov	r8, a
 1239 0919 31 7A                   		shr	a, 7
 1240 091b 9D F0                   		mov	r8, a
 1241 091d D4 F0                   		cmp0	r8
 1242 091f 61 E8                   		 skz
 1243 0921 EC 0C 09 00             		 br	!!.L49
 280:../src/user_functions.c **** 
 281:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current2);
 1244                             		.loc 1 281 0 is_stmt 1
 1245 0925 30 00 00                		movw	ax, #_current2
 1246 0928 B8 00                   		movw	[sp], ax
 1247 092a FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 282:../src/user_functions.c **** 	 current2 = current2 >> 2;
 1248                             		.loc 1 282 0
 1249 092e 8F 00 00                		mov	a, !_current2
 1250 0931 9D F0                   		mov	r8, a
 1251 0933 31 2A                   		shr	a, 2
 1252 0935 9D F0                   		mov	r8, a
 1253 0937 9F 00 00                		mov	!_current2, a
 283:../src/user_functions.c **** 
 284:../src/user_functions.c **** }
 1254                             		.loc 1 284 0
 1255 093a 10 02                   		addw	sp, #2
 1256 093c D7                      		ret
 1257                             	.LFE4:
 1259                             		.global	_setRTC
 1261                             	_setRTC:
 1262                             	.LFB5:
 285:../src/user_functions.c **** 
 286:../src/user_functions.c **** void setRTC(){
 1263                             		.loc 1 286 0
 1264                             		; start of function
 1265                             		; locals: 30 bytes
 1266                             		; outgoing: 8 bytes
 1267 093d 20 26                   		subw	sp, #38
 1268                             	.LCFI6:
 287:../src/user_functions.c **** 	uint8_t date[6] = {0,0,0,0,0,0};
 1269                             		.loc 1 287 0
 1270 093f F1                      		clrb	a
 1271 0940 98 1D                   		mov	[sp+29], a
 1272 0942 F1                      		clrb	a
 1273 0943 98 1E                   		mov	[sp+30], a
 1274 0945 F1                      		clrb	a
 1275 0946 98 1F                   		mov	[sp+31], a
 1276 0948 F1                      		clrb	a
 1277 0949 98 20                   		mov	[sp+32], a
 1278 094b F1                      		clrb	a
 1279 094c 98 21                   		mov	[sp+33], a
 1280 094e F1                      		clrb	a
 1281 094f 98 22                   		mov	[sp+34], a
 288:../src/user_functions.c **** 	uint8_t actualDate[6] = {0,0,0,0,0,0};
 1282                             		.loc 1 288 0
 1283 0951 F1                      		clrb	a
 1284 0952 98 17                   		mov	[sp+23], a
 1285 0954 F1                      		clrb	a
 1286 0955 98 18                   		mov	[sp+24], a
 1287 0957 F1                      		clrb	a
 1288 0958 98 19                   		mov	[sp+25], a
 1289 095a F1                      		clrb	a
 1290 095b 98 1A                   		mov	[sp+26], a
 1291 095d F1                      		clrb	a
 1292 095e 98 1B                   		mov	[sp+27], a
 1293 0960 F1                      		clrb	a
 1294 0961 98 1C                   		mov	[sp+28], a
 289:../src/user_functions.c **** 	count = 4;
 1295                             		.loc 1 289 0
 1296 0963 30 04 00                		movw	ax, #4
 1297 0966 BF 00 00                		movw	!_count, ax
 290:../src/user_functions.c **** 	int dateCount = 0;
 1298                             		.loc 1 290 0
 1299 0969 F6                      		clrw	ax
 1300 096a B8 24                   		movw	[sp+36], ax
 291:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 292:../src/user_functions.c **** 
 293:../src/user_functions.c **** 	while(record[count] != '\r'){
 1301                             		.loc 1 293 0
 1302 096c EC B1 0A 00             		br	!!.L51
 1303                             	.L53:
 294:../src/user_functions.c **** 
 295:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1304                             		.loc 1 295 0
 1305 0970 AE F8                   		movw	ax, sp
 1306 0972 BD F2                   		movw	r10, ax
 1307 0974 04 1D 00                		addw	ax, #29
 1308 0977 BD F0                   		movw	r8, ax
 1309 0979 A8 24                   		movw	ax, [sp+36]
 1310 097b 06 F0                   		addw	ax, r8
 1311 097d BD F0                   		movw	r8, ax
 1312 097f BD F4                   		movw	r12, ax
 1313 0981 FA F4                   		movw	hl, r12
 1314 0983 8B                      		mov	a, [hl]
 1315 0984 9D F2                   		mov	r10, a
 1316 0986 AF 00 00                		movw	ax, !_count
 1317 0989 BD F0                   		movw	r8, ax
 1318 098b 04 00 00                		addw	ax, #_record
 1319 098e 16                      		movw	hl, ax
 1320 098f 8B                      		mov	a, [hl]
 1321 0990 9D F0                   		mov	r8, a
 1322 0992 76                      		mov	l, a
 1323 0993 8D F2                   		mov	a, r10
 1324 0995 61 0E                   		add	a, l
 1325 0997 9D F0                   		mov	r8, a
 1326 0999 0C D0                   		add	a, #-48
 1327 099b 9D F2                   		mov	r10, a
 1328 099d AE F8                   		movw	ax, sp
 1329 099f BD F4                   		movw	r12, ax
 1330 09a1 04 1D 00                		addw	ax, #29
 1331 09a4 BD F0                   		movw	r8, ax
 1332 09a6 A8 24                   		movw	ax, [sp+36]
 1333 09a8 06 F0                   		addw	ax, r8
 1334 09aa BD F0                   		movw	r8, ax
 1335 09ac BD F4                   		movw	r12, ax
 1336 09ae DA F4                   		movw	bc, r12
 1337 09b0 8D F2                   		mov	a, r10
 1338 09b2 48 00 00                		mov	[bc], a
 296:../src/user_functions.c **** 		actualDate[dateCount] += record[count] - '0';
 1339                             		.loc 1 296 0
 1340 09b5 AE F8                   		movw	ax, sp
 1341 09b7 BD F2                   		movw	r10, ax
 1342 09b9 04 17 00                		addw	ax, #23
 1343 09bc BD F0                   		movw	r8, ax
 1344 09be A8 24                   		movw	ax, [sp+36]
 1345 09c0 06 F0                   		addw	ax, r8
 1346 09c2 BD F0                   		movw	r8, ax
 1347 09c4 BD F4                   		movw	r12, ax
 1348 09c6 FA F4                   		movw	hl, r12
 1349 09c8 8B                      		mov	a, [hl]
 1350 09c9 9D F2                   		mov	r10, a
 1351 09cb AF 00 00                		movw	ax, !_count
 1352 09ce BD F0                   		movw	r8, ax
 1353 09d0 04 00 00                		addw	ax, #_record
 1354 09d3 16                      		movw	hl, ax
 1355 09d4 8B                      		mov	a, [hl]
 1356 09d5 9D F0                   		mov	r8, a
 1357 09d7 76                      		mov	l, a
 1358 09d8 8D F2                   		mov	a, r10
 1359 09da 61 0E                   		add	a, l
 1360 09dc 9D F0                   		mov	r8, a
 1361 09de 0C D0                   		add	a, #-48
 1362 09e0 9D F2                   		mov	r10, a
 1363 09e2 AE F8                   		movw	ax, sp
 1364 09e4 BD F4                   		movw	r12, ax
 1365 09e6 04 17 00                		addw	ax, #23
 1366 09e9 BD F0                   		movw	r8, ax
 1367 09eb A8 24                   		movw	ax, [sp+36]
 1368 09ed 06 F0                   		addw	ax, r8
 1369 09ef BD F0                   		movw	r8, ax
 1370 09f1 BD F4                   		movw	r12, ax
 1371 09f3 DA F4                   		movw	bc, r12
 1372 09f5 8D F2                   		mov	a, r10
 1373 09f7 48 00 00                		mov	[bc], a
 297:../src/user_functions.c **** 		count++;
 1374                             		.loc 1 297 0
 1375 09fa AF 00 00                		movw	ax, !_count
 1376 09fd BD F0                   		movw	r8, ax
 1377 09ff A6 F0                   		incw	r8
 1378 0a01 AD F0                   		movw	ax, r8
 1379 0a03 BF 00 00                		movw	!_count, ax
 298:../src/user_functions.c **** 		if(record[count] == ','){
 1380                             		.loc 1 298 0
 1381 0a06 BD F0                   		movw	r8, ax
 1382 0a08 04 00 00                		addw	ax, #_record
 1383 0a0b 16                      		movw	hl, ax
 1384 0a0c 8B                      		mov	a, [hl]
 1385 0a0d 9D F0                   		mov	r8, a
 1386 0a0f 4A F0 2C                		cmp	r8, #44
 1387 0a12 61 E8                   		 skz
 1388 0a14 EC 2D 0A 00             		 br	!!.L52
 299:../src/user_functions.c **** 			dateCount++;
 1389                             		.loc 1 299 0
 1390 0a18 A8 24                   		movw	ax, [sp+36]
 1391 0a1a A1                      		incw	ax
 1392 0a1b B8 24                   		movw	[sp+36], ax
 300:../src/user_functions.c **** 			count++;
 1393                             		.loc 1 300 0
 1394 0a1d AF 00 00                		movw	ax, !_count
 1395 0a20 BD F0                   		movw	r8, ax
 1396 0a22 A6 F0                   		incw	r8
 1397 0a24 AD F0                   		movw	ax, r8
 1398 0a26 BF 00 00                		movw	!_count, ax
 1399 0a29 EC B1 0A 00             		br	!!.L51
 1400                             	.L52:
 301:../src/user_functions.c **** 		}
 302:../src/user_functions.c **** 		else if(record[count] == '\r'){
 1401                             		.loc 1 302 0
 1402 0a2d AF 00 00                		movw	ax, !_count
 1403 0a30 BD F0                   		movw	r8, ax
 1404 0a32 04 00 00                		addw	ax, #_record
 1405 0a35 16                      		movw	hl, ax
 1406 0a36 8B                      		mov	a, [hl]
 1407 0a37 9D F0                   		mov	r8, a
 1408 0a39 4A F0 0D                		cmp	r8, #13
 1409 0a3c 61 F8                   		 sknz
 1410 0a3e EC B1 0A 00             		 br	!!.L51
 303:../src/user_functions.c **** 
 304:../src/user_functions.c **** 		}
 305:../src/user_functions.c **** 		else{
 306:../src/user_functions.c **** 			date[dateCount] = date[dateCount]<<4;
 1411                             		.loc 1 306 0
 1412 0a42 AE F8                   		movw	ax, sp
 1413 0a44 BD F2                   		movw	r10, ax
 1414 0a46 04 1D 00                		addw	ax, #29
 1415 0a49 BD F0                   		movw	r8, ax
 1416 0a4b A8 24                   		movw	ax, [sp+36]
 1417 0a4d 06 F0                   		addw	ax, r8
 1418 0a4f BD F0                   		movw	r8, ax
 1419 0a51 BD F4                   		movw	r12, ax
 1420 0a53 FA F4                   		movw	hl, r12
 1421 0a55 8B                      		mov	a, [hl]
 1422 0a56 9D F0                   		mov	r8, a
 1423 0a58 31 49                   		shl	a, 4
 1424 0a5a 9D F2                   		mov	r10, a
 1425 0a5c AE F8                   		movw	ax, sp
 1426 0a5e BD F4                   		movw	r12, ax
 1427 0a60 04 1D 00                		addw	ax, #29
 1428 0a63 BD F0                   		movw	r8, ax
 1429 0a65 A8 24                   		movw	ax, [sp+36]
 1430 0a67 06 F0                   		addw	ax, r8
 1431 0a69 BD F0                   		movw	r8, ax
 1432 0a6b BD F4                   		movw	r12, ax
 1433 0a6d DA F4                   		movw	bc, r12
 1434 0a6f 8D F2                   		mov	a, r10
 1435 0a71 48 00 00                		mov	[bc], a
 307:../src/user_functions.c **** 			actualDate[dateCount] = actualDate[dateCount]*10;
 1436                             		.loc 1 307 0
 1437 0a74 AE F8                   		movw	ax, sp
 1438 0a76 BD F2                   		movw	r10, ax
 1439 0a78 04 17 00                		addw	ax, #23
 1440 0a7b BD F0                   		movw	r8, ax
 1441 0a7d A8 24                   		movw	ax, [sp+36]
 1442 0a7f 06 F0                   		addw	ax, r8
 1443 0a81 BD F0                   		movw	r8, ax
 1444 0a83 BD F4                   		movw	r12, ax
 1445 0a85 FA F4                   		movw	hl, r12
 1446 0a87 8B                      		mov	a, [hl]
 1447 0a88 9D F0                   		mov	r8, a
 1448 0a8a 61 01                   		add	a, a
 1449 0a8c 9D F0                   		mov	r8, a
 1450 0a8e 31 29                   		shl	a, 2
 1451 0a90 9D F1                   		mov	r9, a
 1452 0a92 76                      		mov	l, a
 1453 0a93 8D F0                   		mov	a, r8
 1454 0a95 61 0E                   		add	a, l
 1455 0a97 9D F2                   		mov	r10, a
 1456 0a99 AE F8                   		movw	ax, sp
 1457 0a9b BD F4                   		movw	r12, ax
 1458 0a9d 04 17 00                		addw	ax, #23
 1459 0aa0 BD F0                   		movw	r8, ax
 1460 0aa2 A8 24                   		movw	ax, [sp+36]
 1461 0aa4 06 F0                   		addw	ax, r8
 1462 0aa6 BD F0                   		movw	r8, ax
 1463 0aa8 BD F4                   		movw	r12, ax
 1464 0aaa DA F4                   		movw	bc, r12
 1465 0aac 8D F2                   		mov	a, r10
 1466 0aae 48 00 00                		mov	[bc], a
 1467                             	.L51:
 293:../src/user_functions.c **** 
 1468                             		.loc 1 293 0
 1469 0ab1 AF 00 00                		movw	ax, !_count
 1470 0ab4 BD F0                   		movw	r8, ax
 1471 0ab6 04 00 00                		addw	ax, #_record
 1472 0ab9 16                      		movw	hl, ax
 1473 0aba 8B                      		mov	a, [hl]
 1474 0abb 9D F0                   		mov	r8, a
 1475 0abd 4A F0 0D                		cmp	r8, #13
 1476 0ac0 61 E8                   		 skz
 1477 0ac2 EC 70 09 00             		 br	!!.L53
 308:../src/user_functions.c **** 		}
 309:../src/user_functions.c **** 
 310:../src/user_functions.c **** 	}
 311:../src/user_functions.c **** 
 312:../src/user_functions.c **** 	if(testDate(actualDate)){
 1478                             		.loc 1 312 0
 1479 0ac6 C9 F0 26 00             		movw	r8, #38
 1480 0aca AE F8                   		movw	ax, sp
 1481 0acc BD F0                   		movw	r8, ax
 1482 0ace 04 26 00                		addw	ax, #38
 1483 0ad1 BD F0                   		movw	r8, ax
 1484 0ad3 04 F1 FF                		addw	ax, #-15
 1485 0ad6 B8 00                   		movw	[sp], ax
 1486 0ad8 FC 00 00 00             		call	!!%code(_testDate)
 1487 0adc D4 F0                   		cmp0	r8
 1488 0ade 61 F8                   		 sknz
 1489 0ae0 EC 7F 0B 00             		 br	!!.L54
 1490                             	.LBB6:
 313:../src/user_functions.c **** 
 314:../src/user_functions.c **** 		theDate.year = date[0];
 1491                             		.loc 1 314 0
 1492 0ae4 88 1D                   		mov	a, [sp+29]
 1493 0ae6 9D F0                   		mov	r8, a
 1494 0ae8 98 16                   		mov	[sp+22], a
 315:../src/user_functions.c **** 		theDate.month = date[1];
 1495                             		.loc 1 315 0
 1496 0aea 88 1E                   		mov	a, [sp+30]
 1497 0aec 9D F0                   		mov	r8, a
 1498 0aee 98 15                   		mov	[sp+21], a
 316:../src/user_functions.c **** 		theDate.day = date[2];
 1499                             		.loc 1 316 0
 1500 0af0 88 1F                   		mov	a, [sp+31]
 1501 0af2 9D F0                   		mov	r8, a
 1502 0af4 98 13                   		mov	[sp+19], a
 317:../src/user_functions.c **** 		theDate.hour = date[3];
 1503                             		.loc 1 317 0
 1504 0af6 88 20                   		mov	a, [sp+32]
 1505 0af8 9D F0                   		mov	r8, a
 1506 0afa 98 12                   		mov	[sp+18], a
 318:../src/user_functions.c **** 		theDate.min = date[4];
 1507                             		.loc 1 318 0
 1508 0afc 88 21                   		mov	a, [sp+33]
 1509 0afe 9D F0                   		mov	r8, a
 1510 0b00 98 11                   		mov	[sp+17], a
 319:../src/user_functions.c **** 		theDate.sec = date[5];
 1511                             		.loc 1 319 0
 1512 0b02 88 22                   		mov	a, [sp+34]
 1513 0b04 9D F0                   		mov	r8, a
 1514 0b06 98 10                   		mov	[sp+16], a
 320:../src/user_functions.c **** 
 321:../src/user_functions.c **** 		char str[4];
 322:../src/user_functions.c **** 		sprintf(str, "$B0\x0d\x0a");
 1515                             		.loc 1 322 0
 1516 0b08 AE F8                   		movw	ax, sp
 1517 0b0a BD F2                   		movw	r10, ax
 1518 0b0c 04 0C 00                		addw	ax, #12
 1519 0b0f BD F0                   		movw	r8, ax
 1520 0b11 BD F4                   		movw	r12, ax
 1521 0b13 DA F4                   		movw	bc, r12
 1522 0b15 30 24 42                		movw	ax, #16932
 1523 0b18 78 00 00                		movw	[bc], ax
 1524 0b1b DA F0                   		movw	bc, r8
 1525 0b1d 30 30 0D                		movw	ax, #3376
 1526 0b20 78 02 00                		movw	2[bc], ax
 1527 0b23 30 0A 00                		movw	ax, #10
 1528 0b26 78 04 00                		movw	4[bc], ax
 323:../src/user_functions.c **** 		count = strlen(str);
 1529                             		.loc 1 323 0
 1530 0b29 C9 F0 26 00             		movw	r8, #38
 1531 0b2d AE F8                   		movw	ax, sp
 1532 0b2f BD F0                   		movw	r8, ax
 1533 0b31 04 26 00                		addw	ax, #38
 1534 0b34 BD F0                   		movw	r8, ax
 1535 0b36 04 E6 FF                		addw	ax, #-26
 1536 0b39 B8 00                   		movw	[sp], ax
 1537 0b3b FC 00 00 00             		call	!!%code(_strlen)
 1538 0b3f AD F0                   		movw	ax, r8
 1539 0b41 BF 00 00                		movw	!_count, ax
 324:../src/user_functions.c **** 		strcpy(response, str);
 1540                             		.loc 1 324 0
 1541 0b44 30 04 00                		movw	ax, #_response
 1542 0b47 B8 00                   		movw	[sp], ax
 1543 0b49 C9 F2 26 00             		movw	r10, #38
 1544 0b4d AE F8                   		movw	ax, sp
 1545 0b4f BD F2                   		movw	r10, ax
 1546 0b51 04 26 00                		addw	ax, #38
 1547 0b54 BD F2                   		movw	r10, ax
 1548 0b56 04 E6 FF                		addw	ax, #-26
 1549 0b59 B8 02                   		movw	[sp+2], ax
 1550 0b5b FC 00 00 00             		call	!!%code(_strcpy)
 325:../src/user_functions.c **** 
 326:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 1551                             		.loc 1 326 0
 1552 0b5f A8 10                   		movw	ax, [sp+16]
 1553 0b61 BD F0                   		movw	r8, ax
 1554 0b63 B8 00                   		movw	[sp], ax
 1555 0b65 A8 12                   		movw	ax, [sp+18]
 1556 0b67 BD F0                   		movw	r8, ax
 1557 0b69 B8 02                   		movw	[sp+2], ax
 1558 0b6b A8 14                   		movw	ax, [sp+20]
 1559 0b6d BD F0                   		movw	r8, ax
 1560 0b6f B8 04                   		movw	[sp+4], ax
 1561 0b71 88 16                   		mov	a, [sp+22]
 1562 0b73 9D F0                   		mov	r8, a
 1563 0b75 98 06                   		mov	[sp+6], a
 1564 0b77 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1565                             	.LBE6:
 1566 0b7b EC D9 0B 00             		br	!!.L50
 1567                             	.L54:
 1568                             	.LBB7:
 327:../src/user_functions.c **** 	}
 328:../src/user_functions.c **** 	else{
 329:../src/user_functions.c **** 		char str[4];
 330:../src/user_functions.c **** 		uint8_t ack = 0;
 1569                             		.loc 1 330 0 discriminator 2
 1570 0b7f F1                      		clrb	a
 1571 0b80 98 23                   		mov	[sp+35], a
 331:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 1572                             		.loc 1 331 0 discriminator 2
 1573 0b82 AE F8                   		movw	ax, sp
 1574 0b84 BD F4                   		movw	r12, ax
 1575 0b86 04 08 00                		addw	ax, #8
 1576 0b89 BD F0                   		movw	r8, ax
 1577 0b8b BD F2                   		movw	r10, ax
 1578 0b8d DA F2                   		movw	bc, r10
 1579 0b8f 30 24 42                		movw	ax, #16932
 1580 0b92 78 00 00                		movw	[bc], ax
 1581 0b95 DA F0                   		movw	bc, r8
 1582 0b97 30 32 0D                		movw	ax, #3378
 1583 0b9a 78 02 00                		movw	2[bc], ax
 1584 0b9d 30 0A 00                		movw	ax, #10
 1585 0ba0 78 04 00                		movw	4[bc], ax
 332:../src/user_functions.c **** 		count = strlen(str);
 1586                             		.loc 1 332 0 discriminator 2
 1587 0ba3 C9 F4 26 00             		movw	r12, #38
 1588 0ba7 AE F8                   		movw	ax, sp
 1589 0ba9 BD F4                   		movw	r12, ax
 1590 0bab 04 26 00                		addw	ax, #38
 1591 0bae BD F4                   		movw	r12, ax
 1592 0bb0 04 E2 FF                		addw	ax, #-30
 1593 0bb3 B8 00                   		movw	[sp], ax
 1594 0bb5 FC 00 00 00             		call	!!%code(_strlen)
 1595 0bb9 AD F0                   		movw	ax, r8
 1596 0bbb BF 00 00                		movw	!_count, ax
 333:../src/user_functions.c **** 		strcpy(response, str);
 1597                             		.loc 1 333 0 discriminator 2
 1598 0bbe 30 04 00                		movw	ax, #_response
 1599 0bc1 B8 00                   		movw	[sp], ax
 1600 0bc3 C9 F0 26 00             		movw	r8, #38
 1601 0bc7 AE F8                   		movw	ax, sp
 1602 0bc9 BD F0                   		movw	r8, ax
 1603 0bcb 04 26 00                		addw	ax, #38
 1604 0bce BD F0                   		movw	r8, ax
 1605 0bd0 04 E2 FF                		addw	ax, #-30
 1606 0bd3 B8 02                   		movw	[sp+2], ax
 1607 0bd5 FC 00 00 00             		call	!!%code(_strcpy)
 1608                             	.L50:
 1609                             	.LBE7:
 334:../src/user_functions.c **** 
 335:../src/user_functions.c **** 	}
 336:../src/user_functions.c **** 
 337:../src/user_functions.c **** }
 1610                             		.loc 1 337 0
 1611 0bd9 10 26                   		addw	sp, #38
 1612 0bdb D7                      		ret
 1613                             	.LFE5:
 1615                             		.section	.rodata
 1616                             	.LC2:
 1617 0019 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 1617      25 64 2C 25 64 2C 25 64 
 1617      2C 25 64 2C 25 64 0D 0A 
 1617      00 
 1618                             	.text
 1619                             		.global	_getRTC
 1621                             	_getRTC:
 1622                             	.LFB6:
 338:../src/user_functions.c **** 
 339:../src/user_functions.c **** void getRTC(){
 1623                             		.loc 1 339 0
 1624                             		; start of function
 1625                             		; push 6: r16 r18 r20
 1626                             		; locals: 16 bytes
 1627                             		; outgoing: 16 bytes
 1628 0bdc 61 EF                   		sel	rb2
 1629 0bde C1                      		push	ax ; r16
 1630                             	.LCFI7:
 1631 0bdf C3                      		push	bc ; r18
 1632                             	.LCFI8:
 1633 0be0 C5                      		push	de ; r20
 1634                             	.LCFI9:
 1635 0be1 61 CF                   		sel	rb0
 1636 0be3 20 20                   		subw	sp, #32
 1637                             	.LCFI10:
 340:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 341:../src/user_functions.c **** 	uint8_t date[] = {0,0,0,0,0,0};
 1638                             		.loc 1 341 0
 1639 0be5 F1                      		clrb	a
 1640 0be6 98 11                   		mov	[sp+17], a
 1641 0be8 F1                      		clrb	a
 1642 0be9 98 12                   		mov	[sp+18], a
 1643 0beb F1                      		clrb	a
 1644 0bec 98 13                   		mov	[sp+19], a
 1645 0bee F1                      		clrb	a
 1646 0bef 98 14                   		mov	[sp+20], a
 1647 0bf1 F1                      		clrb	a
 1648 0bf2 98 15                   		mov	[sp+21], a
 1649 0bf4 F1                      		clrb	a
 1650 0bf5 98 16                   		mov	[sp+22], a
 342:../src/user_functions.c **** //	uint8_t *date;
 343:../src/user_functions.c **** //	date = (uint8_t *)malloc(6);
 344:../src/user_functions.c **** 
 345:../src/user_functions.c **** 
 346:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 1651                             		.loc 1 346 0
 1652 0bf7 C9 F0 20 00             		movw	r8, #32
 1653 0bfb AE F8                   		movw	ax, sp
 1654 0bfd BD F0                   		movw	r8, ax
 1655 0bff 04 20 00                		addw	ax, #32
 1656 0c02 BD F0                   		movw	r8, ax
 1657 0c04 04 F7 FF                		addw	ax, #-9
 1658 0c07 B8 00                   		movw	[sp], ax
 1659 0c09 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 347:../src/user_functions.c **** 
 348:../src/user_functions.c **** 	date[0] = theDate.year;
 1660                             		.loc 1 348 0
 1661 0c0d 88 1D                   		mov	a, [sp+29]
 1662 0c0f 9D F0                   		mov	r8, a
 1663 0c11 98 11                   		mov	[sp+17], a
 349:../src/user_functions.c **** 	date[1] = theDate.month;
 1664                             		.loc 1 349 0
 1665 0c13 88 1C                   		mov	a, [sp+28]
 1666 0c15 9D F0                   		mov	r8, a
 1667 0c17 98 12                   		mov	[sp+18], a
 350:../src/user_functions.c **** 	date[2] = theDate.day;
 1668                             		.loc 1 350 0
 1669 0c19 88 1A                   		mov	a, [sp+26]
 1670 0c1b 9D F0                   		mov	r8, a
 1671 0c1d 98 13                   		mov	[sp+19], a
 351:../src/user_functions.c **** 	date[3] = theDate.hour;
 1672                             		.loc 1 351 0
 1673 0c1f 88 19                   		mov	a, [sp+25]
 1674 0c21 9D F0                   		mov	r8, a
 1675 0c23 98 14                   		mov	[sp+20], a
 352:../src/user_functions.c **** 	date[4] = theDate.min;
 1676                             		.loc 1 352 0
 1677 0c25 88 18                   		mov	a, [sp+24]
 1678 0c27 9D F0                   		mov	r8, a
 1679 0c29 98 15                   		mov	[sp+21], a
 353:../src/user_functions.c **** 	date[5] = theDate.sec;
 1680                             		.loc 1 353 0
 1681 0c2b 88 17                   		mov	a, [sp+23]
 1682 0c2d 9D F0                   		mov	r8, a
 1683 0c2f 98 16                   		mov	[sp+22], a
 354:../src/user_functions.c **** 
 355:../src/user_functions.c **** 	BCDtoDEC(date);
 1684                             		.loc 1 355 0
 1685 0c31 C9 F0 20 00             		movw	r8, #32
 1686 0c35 AE F8                   		movw	ax, sp
 1687 0c37 BD F0                   		movw	r8, ax
 1688 0c39 04 20 00                		addw	ax, #32
 1689 0c3c BD F0                   		movw	r8, ax
 1690 0c3e 04 F1 FF                		addw	ax, #-15
 1691 0c41 B8 00                   		movw	[sp], ax
 1692 0c43 FC 00 00 00             		call	!!%code(_BCDtoDEC)
 356:../src/user_functions.c **** 
 357:../src/user_functions.c **** 	char *str;
 358:../src/user_functions.c **** 	str = (char *)malloc(32);
 1693                             		.loc 1 358 0
 1694 0c47 30 20 00                		movw	ax, #32
 1695 0c4a B8 00                   		movw	[sp], ax
 1696 0c4c FC 00 00 00             		call	!!%code(_malloc)
 1697 0c50 AD F0                   		movw	ax, r8
 1698 0c52 B8 1E                   		movw	[sp+30], ax
 359:../src/user_functions.c **** 	sprintf(str, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2], date[3], date[4], date[5
 1699                             		.loc 1 359 0
 1700 0c54 88 11                   		mov	a, [sp+17]
 1701 0c56 9D F0                   		mov	r8, a
 1702 0c58 70                      		mov	x, a 
 1703 0c59 51 00                   		mov	a, #0
 1704 0c5b BD EC                   		movw	r20, ax
 1705 0c5d 88 12                   		mov	a, [sp+18]
 1706 0c5f 9D F0                   		mov	r8, a
 1707 0c61 70                      		mov	x, a 
 1708 0c62 51 00                   		mov	a, #0
 1709 0c64 BD EA                   		movw	r18, ax
 1710 0c66 88 13                   		mov	a, [sp+19]
 1711 0c68 9D F0                   		mov	r8, a
 1712 0c6a 70                      		mov	x, a 
 1713 0c6b 51 00                   		mov	a, #0
 1714 0c6d BD E8                   		movw	r16, ax
 1715 0c6f 88 14                   		mov	a, [sp+20]
 1716 0c71 9D F0                   		mov	r8, a
 1717 0c73 70                      		mov	x, a 
 1718 0c74 51 00                   		mov	a, #0
 1719 0c76 BD F6                   		movw	r14, ax
 1720 0c78 88 15                   		mov	a, [sp+21]
 1721 0c7a 9D F0                   		mov	r8, a
 1722 0c7c 70                      		mov	x, a 
 1723 0c7d 51 00                   		mov	a, #0
 1724 0c7f BD F4                   		movw	r12, ax
 1725 0c81 88 16                   		mov	a, [sp+22]
 1726 0c83 9D F0                   		mov	r8, a
 1727 0c85 70                      		mov	x, a 
 1728 0c86 51 00                   		mov	a, #0
 1729 0c88 BD F2                   		movw	r10, ax
 1730 0c8a A8 1E                   		movw	ax, [sp+30]
 1731 0c8c BD F0                   		movw	r8, ax
 1732 0c8e B8 00                   		movw	[sp], ax
 1733 0c90 30 19 00                		movw	ax, #.LC2
 1734 0c93 B8 02                   		movw	[sp+2], ax
 1735 0c95 AD EC                   		movw	ax, r20
 1736 0c97 B8 04                   		movw	[sp+4], ax
 1737 0c99 AD EA                   		movw	ax, r18
 1738 0c9b B8 06                   		movw	[sp+6], ax
 1739 0c9d AD E8                   		movw	ax, r16
 1740 0c9f B8 08                   		movw	[sp+8], ax
 1741 0ca1 AD F6                   		movw	ax, r14
 1742 0ca3 B8 0A                   		movw	[sp+10], ax
 1743 0ca5 AD F4                   		movw	ax, r12
 1744 0ca7 B8 0C                   		movw	[sp+12], ax
 1745 0ca9 AD F2                   		movw	ax, r10
 1746 0cab B8 0E                   		movw	[sp+14], ax
 1747 0cad FC 00 00 00             		call	!!%code(_sprintf)
 360:../src/user_functions.c **** //	free(date);
 361:../src/user_functions.c **** 	count = strlen(str);
 1748                             		.loc 1 361 0
 1749 0cb1 A8 1E                   		movw	ax, [sp+30]
 1750 0cb3 BD F0                   		movw	r8, ax
 1751 0cb5 B8 00                   		movw	[sp], ax
 1752 0cb7 FC 00 00 00             		call	!!%code(_strlen)
 1753 0cbb AD F0                   		movw	ax, r8
 1754 0cbd BF 00 00                		movw	!_count, ax
 362:../src/user_functions.c **** 	strcpy(response, str);
 1755                             		.loc 1 362 0
 1756 0cc0 30 04 00                		movw	ax, #_response
 1757 0cc3 B8 00                   		movw	[sp], ax
 1758 0cc5 A8 1E                   		movw	ax, [sp+30]
 1759 0cc7 BD F0                   		movw	r8, ax
 1760 0cc9 B8 02                   		movw	[sp+2], ax
 1761 0ccb FC 00 00 00             		call	!!%code(_strcpy)
 363:../src/user_functions.c **** 	free(str);
 1762                             		.loc 1 363 0
 1763 0ccf A8 1E                   		movw	ax, [sp+30]
 1764 0cd1 BD F0                   		movw	r8, ax
 1765 0cd3 B8 00                   		movw	[sp], ax
 1766 0cd5 FC 00 00 00             		call	!!%code(_free)
 364:../src/user_functions.c **** 
 365:../src/user_functions.c **** }
 1767                             		.loc 1 365 0
 1768 0cd9 10 20                   		addw	sp, #32
 1769 0cdb 61 EF                   		sel	rb2
 1770 0cdd C4                      		pop	de ; r20
 1771 0cde C2                      		pop	bc ; r18
 1772 0cdf C0                      		pop	ax ; r16
 1773 0ce0 61 CF                   		sel	rb0
 1774 0ce2 D7                      		ret
 1775                             	.LFE6:
 1777                             		.global	_BCDtoDEC
 1779                             	_BCDtoDEC:
 1780                             	.LFB7:
 366:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]){
 1781                             		.loc 1 366 0
 1782                             		; start of function
 1783                             		; locals: 6 bytes
 1784 0ce3 20 06                   		subw	sp, #6
 1785                             	.LCFI11:
 367:../src/user_functions.c **** 
 368:../src/user_functions.c **** 	uint8_t len =  6;
 1786                             		.loc 1 368 0
 1787 0ce5 51 06                   		mov	a, #6
 1788 0ce7 98 03                   		mov	[sp+3], a
 369:../src/user_functions.c **** 	uint8_t upper, lower;
 370:../src/user_functions.c **** 	int i;
 371:../src/user_functions.c **** 	for(i = 0; i < len; i++){
 1789                             		.loc 1 371 0
 1790 0ce9 F6                      		clrw	ax
 1791 0cea B8 04                   		movw	[sp+4], ax
 1792 0cec EC 4E 0D 00             		br	!!.L58
 1793                             	.L59:
 372:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1794                             		.loc 1 372 0 discriminator 3
 1795 0cf0 A8 04                   		movw	ax, [sp+4]
 1796 0cf2 BD F0                   		movw	r8, ax
 1797 0cf4 A8 0A                   		movw	ax, [sp+10]
 1798 0cf6 06 F0                   		addw	ax, r8
 1799 0cf8 BD F0                   		movw	r8, ax
 1800 0cfa BD F2                   		movw	r10, ax
 1801 0cfc FA F2                   		movw	hl, r10
 1802 0cfe 8B                      		mov	a, [hl]
 1803 0cff 9D F0                   		mov	r8, a
 1804 0d01 5C 0F                   		and	a, #15
 1805 0d03 98 02                   		mov	[sp+2], a
 373:../src/user_functions.c **** 		upper = (arr[i] & 0xf0)>>4;
 1806                             		.loc 1 373 0 discriminator 3
 1807 0d05 A8 04                   		movw	ax, [sp+4]
 1808 0d07 BD F0                   		movw	r8, ax
 1809 0d09 A8 0A                   		movw	ax, [sp+10]
 1810 0d0b 06 F0                   		addw	ax, r8
 1811 0d0d BD F0                   		movw	r8, ax
 1812 0d0f BD F4                   		movw	r12, ax
 1813 0d11 FA F4                   		movw	hl, r12
 1814 0d13 8B                      		mov	a, [hl]
 1815 0d14 9D F0                   		mov	r8, a
 1816 0d16 31 4A                   		shr	a, 4
 1817 0d18 98 01                   		mov	[sp+1], a
 374:../src/user_functions.c **** 
 375:../src/user_functions.c **** 		arr[i] = upper*10 + lower;
 1818                             		.loc 1 375 0 discriminator 3
 1819 0d1a A8 04                   		movw	ax, [sp+4]
 1820 0d1c BD F0                   		movw	r8, ax
 1821 0d1e A8 0A                   		movw	ax, [sp+10]
 1822 0d20 06 F0                   		addw	ax, r8
 1823 0d22 BD F2                   		movw	r10, ax
 1824 0d24 88 01                   		mov	a, [sp+1]
 1825 0d26 9D F0                   		mov	r8, a
 1826 0d28 61 01                   		add	a, a
 1827 0d2a 9D F0                   		mov	r8, a
 1828 0d2c 31 29                   		shl	a, 2
 1829 0d2e 9D F1                   		mov	r9, a
 1830 0d30 76                      		mov	l, a
 1831 0d31 8D F0                   		mov	a, r8
 1832 0d33 61 0E                   		add	a, l
 1833 0d35 9D F0                   		mov	r8, a
 1834 0d37 76                      		mov	l, a
 1835 0d38 88 02                   		mov	a, [sp+2]
 1836 0d3a 61 0E                   		add	a, l
 1837 0d3c 9D F0                   		mov	r8, a
 1838 0d3e AD F2                   		movw	ax, r10
 1839 0d40 BD F4                   		movw	r12, ax
 1840 0d42 DA F4                   		movw	bc, r12
 1841 0d44 8D F0                   		mov	a, r8
 1842 0d46 48 00 00                		mov	[bc], a
 371:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1843                             		.loc 1 371 0 discriminator 3
 1844 0d49 A8 04                   		movw	ax, [sp+4]
 1845 0d4b A1                      		incw	ax
 1846 0d4c B8 04                   		movw	[sp+4], ax
 1847                             	.L58:
 371:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1848                             		.loc 1 371 0 is_stmt 0 discriminator 1
 1849 0d4e 88 03                   		mov	a, [sp+3]
 1850 0d50 70                      		mov	x, a 
 1851 0d51 51 00                   		mov	a, #0
 1852 0d53 BD F2                   		movw	r10, ax
 1853 0d55 A8 04                   		movw	ax, [sp+4]
 1854 0d57 BD F0                   		movw	r8, ax
 1855 0d59 AD F2                   		movw	ax, r10
 1856 0d5b 46 F0                   		cmpw	ax, r8
 1857 0d5d 71 FF                   		 xor1	CY, a.7
 1858 0d5f 71 77 F1                		 xor1	CY, r9.7
 1859 0d62 61 F3                   		 sknh
 1860 0d64 EC F0 0C 00             		 br	!!.L59
 376:../src/user_functions.c **** 	}
 377:../src/user_functions.c **** }
 1861                             		.loc 1 377 0 is_stmt 1
 1862 0d68 10 06                   		addw	sp, #6
 1863 0d6a D7                      		ret
 1864                             	.LFE7:
 1866                             		.global	_testDate
 1868                             	_testDate:
 1869                             	.LFB8:
 378:../src/user_functions.c **** 
 379:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 380:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]){
 1870                             		.loc 1 380 0
 1871                             		; start of function
 1872                             		; locals: 24 bytes
 1873 0d6b 20 18                   		subw	sp, #24
 1874                             	.LCFI12:
 381:../src/user_functions.c **** 
 382:../src/user_functions.c **** 	int daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 1875                             		.loc 1 382 0
 1876 0d6d 30 1F 00                		movw	ax, #31
 1877 0d70 B8 00                   		movw	[sp], ax
 1878 0d72 30 1C 00                		movw	ax, #28
 1879 0d75 B8 02                   		movw	[sp+2], ax
 1880 0d77 30 1F 00                		movw	ax, #31
 1881 0d7a B8 04                   		movw	[sp+4], ax
 1882 0d7c 30 1E 00                		movw	ax, #30
 1883 0d7f B8 06                   		movw	[sp+6], ax
 1884 0d81 30 1F 00                		movw	ax, #31
 1885 0d84 B8 08                   		movw	[sp+8], ax
 1886 0d86 30 1E 00                		movw	ax, #30
 1887 0d89 B8 0A                   		movw	[sp+10], ax
 1888 0d8b 30 1F 00                		movw	ax, #31
 1889 0d8e B8 0C                   		movw	[sp+12], ax
 1890 0d90 30 1F 00                		movw	ax, #31
 1891 0d93 B8 0E                   		movw	[sp+14], ax
 1892 0d95 30 1E 00                		movw	ax, #30
 1893 0d98 B8 10                   		movw	[sp+16], ax
 1894 0d9a 30 1F 00                		movw	ax, #31
 1895 0d9d B8 12                   		movw	[sp+18], ax
 1896 0d9f 30 1E 00                		movw	ax, #30
 1897 0da2 B8 14                   		movw	[sp+20], ax
 1898 0da4 30 1F 00                		movw	ax, #31
 1899 0da7 B8 16                   		movw	[sp+22], ax
 383:../src/user_functions.c **** 
 384:../src/user_functions.c **** 	if(arr[1] > 12){
 1900                             		.loc 1 384 0
 1901 0da9 A8 1C                   		movw	ax, [sp+28]
 1902 0dab A1                      		incw	ax
 1903 0dac BD F0                   		movw	r8, ax
 1904 0dae BD F2                   		movw	r10, ax
 1905 0db0 FA F2                   		movw	hl, r10
 1906 0db2 8B                      		mov	a, [hl]
 1907 0db3 9D F0                   		mov	r8, a
 1908 0db5 4A F0 0C                		cmp	r8, #12
 1909 0db8 61 E3                   		 skh
 1910 0dba EC C4 0D 00             		 br	!!.L61
 385:../src/user_functions.c **** 		return 0;
 1911                             		.loc 1 385 0
 1912 0dbe F4 F0                   		clrb	r8
 1913 0dc0 EC 76 0E 00             		br	!!.L67
 1914                             	.L61:
 386:../src/user_functions.c **** 	}
 387:../src/user_functions.c **** 	else if(arr[2] > daysInMonth[arr[1]]){
 1915                             		.loc 1 387 0
 1916 0dc4 A8 1C                   		movw	ax, [sp+28]
 1917 0dc6 04 02 00                		addw	ax, #2
 1918 0dc9 BD F0                   		movw	r8, ax
 1919 0dcb BD F4                   		movw	r12, ax
 1920 0dcd FA F4                   		movw	hl, r12
 1921 0dcf 8B                      		mov	a, [hl]
 1922 0dd0 9D F0                   		mov	r8, a
 1923 0dd2 70                      		mov	x, a 
 1924 0dd3 51 00                   		mov	a, #0
 1925 0dd5 BD F2                   		movw	r10, ax
 1926 0dd7 A8 1C                   		movw	ax, [sp+28]
 1927 0dd9 A1                      		incw	ax
 1928 0dda BD F0                   		movw	r8, ax
 1929 0ddc BD F4                   		movw	r12, ax
 1930 0dde FA F4                   		movw	hl, r12
 1931 0de0 8B                      		mov	a, [hl]
 1932 0de1 9D F0                   		mov	r8, a
 1933 0de3 CD F1 00                		mov	r9, #0
 1934 0de6 AD F0                   		movw	ax, r8
 1935 0de8 01                      		addw	ax, ax
 1936 0de9 BD F0                   		movw	r8, ax
 1937 0deb C9 F4 18 00             		movw	r12, #24
 1938 0def AE F8                   		movw	ax, sp
 1939 0df1 BD F4                   		movw	r12, ax
 1940 0df3 04 18 00                		addw	ax, #24
 1941 0df6 BD F4                   		movw	r12, ax
 1942 0df8 06 F0                   		addw	ax, r8
 1943 0dfa BD F0                   		movw	r8, ax
 1944 0dfc 04 E8 FF                		addw	ax, #-24
 1945 0dff BD F0                   		movw	r8, ax
 1946 0e01 BD F4                   		movw	r12, ax
 1947 0e03 FA F4                   		movw	hl, r12
 1948 0e05 AB                      		movw	ax, [hl]
 1949 0e06 BD F0                   		movw	r8, ax
 1950 0e08 AD F2                   		movw	ax, r10
 1951 0e0a 46 F0                   		cmpw	ax, r8
 1952 0e0c 71 FF                   		 xor1	CY, a.7
 1953 0e0e 71 77 F1                		 xor1	CY, r9.7
 1954 0e11 61 E3                   		 skh
 1955 0e13 EC 1D 0E 00             		 br	!!.L63
 388:../src/user_functions.c **** 		return 0;
 1956                             		.loc 1 388 0
 1957 0e17 F4 F0                   		clrb	r8
 1958 0e19 EC 76 0E 00             		br	!!.L67
 1959                             	.L63:
 389:../src/user_functions.c **** 	}
 390:../src/user_functions.c **** 	else if(arr[3] > 24){
 1960                             		.loc 1 390 0
 1961 0e1d A8 1C                   		movw	ax, [sp+28]
 1962 0e1f 04 03 00                		addw	ax, #3
 1963 0e22 BD F0                   		movw	r8, ax
 1964 0e24 BD F2                   		movw	r10, ax
 1965 0e26 FA F2                   		movw	hl, r10
 1966 0e28 8B                      		mov	a, [hl]
 1967 0e29 9D F0                   		mov	r8, a
 1968 0e2b 4A F0 18                		cmp	r8, #24
 1969 0e2e 61 E3                   		 skh
 1970 0e30 EC 3A 0E 00             		 br	!!.L64
 391:../src/user_functions.c **** 		return 0;
 1971                             		.loc 1 391 0
 1972 0e34 F4 F0                   		clrb	r8
 1973 0e36 EC 76 0E 00             		br	!!.L67
 1974                             	.L64:
 392:../src/user_functions.c **** 	}
 393:../src/user_functions.c **** 	else if(arr[4] > 60){
 1975                             		.loc 1 393 0
 1976 0e3a A8 1C                   		movw	ax, [sp+28]
 1977 0e3c 04 04 00                		addw	ax, #4
 1978 0e3f BD F0                   		movw	r8, ax
 1979 0e41 BD F4                   		movw	r12, ax
 1980 0e43 FA F4                   		movw	hl, r12
 1981 0e45 8B                      		mov	a, [hl]
 1982 0e46 9D F0                   		mov	r8, a
 1983 0e48 4A F0 3C                		cmp	r8, #60
 1984 0e4b 61 E3                   		 skh
 1985 0e4d EC 57 0E 00             		 br	!!.L65
 394:../src/user_functions.c **** 		return 0;
 1986                             		.loc 1 394 0
 1987 0e51 F4 F0                   		clrb	r8
 1988 0e53 EC 76 0E 00             		br	!!.L67
 1989                             	.L65:
 395:../src/user_functions.c **** 	}
 396:../src/user_functions.c **** 	else if(arr[5] > 60){
 1990                             		.loc 1 396 0
 1991 0e57 A8 1C                   		movw	ax, [sp+28]
 1992 0e59 04 05 00                		addw	ax, #5
 1993 0e5c BD F0                   		movw	r8, ax
 1994 0e5e BD F2                   		movw	r10, ax
 1995 0e60 FA F2                   		movw	hl, r10
 1996 0e62 8B                      		mov	a, [hl]
 1997 0e63 9D F0                   		mov	r8, a
 1998 0e65 4A F0 3C                		cmp	r8, #60
 1999 0e68 61 E3                   		 skh
 2000 0e6a EC 74 0E 00             		 br	!!.L66
 397:../src/user_functions.c **** 		return 0;
 2001                             		.loc 1 397 0
 2002 0e6e F4 F0                   		clrb	r8
 2003 0e70 EC 76 0E 00             		br	!!.L67
 2004                             	.L66:
 398:../src/user_functions.c **** 	}
 399:../src/user_functions.c **** 	else{
 400:../src/user_functions.c **** 		return 1;
 2005                             		.loc 1 400 0
 2006 0e74 E4 F0                   		oneb	r8
 2007                             	.L67:
 401:../src/user_functions.c **** 
 402:../src/user_functions.c **** 	}
 403:../src/user_functions.c **** 
 404:../src/user_functions.c **** }
 2008                             		.loc 1 404 0 discriminator 1
 2009 0e76 10 18                   		addw	sp, #24
 2010 0e78 D7                      		ret
 2011                             	.LFE8:
 2155                             	.Letext0:
 2156                             		.file 2 "../src/iodefine.h"
 2157                             		.file 3 "../src/r_cg_macrodriver.h"
 2158                             		.file 4 "../src/r_cg_rtc.h"
 2159                             		.file 5 "../src/globals.h"
