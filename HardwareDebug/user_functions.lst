   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_timerFlag,2,2
  31                             		.comm	_count,2,2
  32                             		.comm	_interval_timer_count,2,2
  33                             		.local	_response
  34                             		.comm	_response,50,1
  35                             		.local	_mode
  36                             		.comm	_mode,2,2
  37                             		.local	_display
  38                             		.comm	_display,2,2
  39                             		.local	_offset
  40                             		.comm	_offset,2,2
  41                             		.global	_D
  42                             	.bss
  43                             		.balign 2
  46                             	_D:
  47 0000 00 00                   		.zero	2
  48                             		.global	_flag
  49                             		.balign 2
  52                             	_flag:
  53 0002 00 00                   		.zero	2
  54                             		.comm	_voltage,1,1
  55                             		.comm	_current1,1,1
  56                             		.comm	_current2,1,1
  57                             		.section	.rodata
  58                             	.LC0:
  59 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  60                             	.text
  61                             		.global	_populate
  63                             	_populate:
  64                             	.LFB0:
  65                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** 
  17:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  18:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  20:../src/user_functions.c **** extern int count;
  21:../src/user_functions.c **** extern int interval_timer_count;
  22:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  23:../src/user_functions.c **** static int mode = 0;
  24:../src/user_functions.c **** static int display = 0;
  25:../src/user_functions.c **** static int offset = 0;
  26:../src/user_functions.c **** int D = 0;
  27:../src/user_functions.c **** int flag = 0;
  28:../src/user_functions.c **** uint8_t voltage, current1, current2;
  29:../src/user_functions.c **** 
  30:../src/user_functions.c **** 
  31:../src/user_functions.c **** void processMSG();
  32:../src/user_functions.c **** int errorTest();
  33:../src/user_functions.c **** void displayLCD();
  34:../src/user_functions.c **** void readRTC();
  35:../src/user_functions.c **** void setRTC();
  36:../src/user_functions.c **** void collectADC();
  37:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  38:../src/user_functions.c **** 
  39:../src/user_functions.c **** 
  40:../src/user_functions.c **** char populate(char recieved){
  66                             		.loc 1 40 0
  67                             		; start of function
  68                             		; outgoing: 4 bytes
  69 0000 20 04                   		subw	sp, #4
  70                             	.LCFI0:
  41:../src/user_functions.c **** 
  42:../src/user_functions.c **** 	if(recieved == '$'){
  71                             		.loc 1 42 0
  72 0002 88 08                   		mov	a, [sp+8]
  73 0004 4C 24                   		cmp	a, #36
  74 0006 61 E8                   		 skz
  75 0008 EC 2A 00 00             		 br	!!.L2
  43:../src/user_functions.c **** 		record[count] = recieved;
  76                             		.loc 1 43 0
  77 000c AF 00 00                		movw	ax, !_count
  78 000f BD F0                   		movw	r8, ax
  79 0011 88 08                   		mov	a, [sp+8]
  80 0013 9D F2                   		mov	r10, a
  81 0015 DA F0                   		movw	bc, r8
  82 0017 48 00 00                		mov	_record[bc], a
  44:../src/user_functions.c **** 		count++;
  83                             		.loc 1 44 0
  84 001a AF 00 00                		movw	ax, !_count
  85 001d BD F0                   		movw	r8, ax
  86 001f A6 F0                   		incw	r8
  87 0021 AD F0                   		movw	ax, r8
  88 0023 BF 00 00                		movw	!_count, ax
  89 0026 EC E3 00 00             		br	!!.L3
  90                             	.L2:
  45:../src/user_functions.c **** 	}
  46:../src/user_functions.c **** 	else if(recieved == '\x0a'){
  91                             		.loc 1 46 0
  92 002a 88 08                   		mov	a, [sp+8]
  93 002c 4C 0A                   		cmp	a, #10
  94 002e 61 E8                   		 skz
  95 0030 EC 8D 00 00             		 br	!!.L4
  47:../src/user_functions.c **** 		if(record[count - 1] == '\x0d'){
  96                             		.loc 1 47 0
  97 0034 AF 00 00                		movw	ax, !_count
  98 0037 BD F0                   		movw	r8, ax
  99 0039 B6 F0                   		decw	r8
 100 003b AD F0                   		movw	ax, r8
 101 003d 04 00 00                		addw	ax, #_record
 102 0040 16                      		movw	hl, ax
 103 0041 8B                      		mov	a, [hl]
 104 0042 9D F0                   		mov	r8, a
 105 0044 4A F0 0D                		cmp	r8, #13
 106 0047 61 E8                   		 skz
 107 0049 EC 7A 00 00             		 br	!!.L5
  48:../src/user_functions.c **** 			if(!flag){
 108                             		.loc 1 48 0
 109 004d AF 00 00                		movw	ax, !_flag
 110 0050 BD F0                   		movw	r8, ax
 111 0052 44 00 00                		cmpw	ax, #0
 112 0055 61 E8                   		 skz
 113 0057 EC 7A 00 00             		 br	!!.L5
  49:../src/user_functions.c **** 				record[count] = recieved;
 114                             		.loc 1 49 0
 115 005b AF 00 00                		movw	ax, !_count
 116 005e BD F0                   		movw	r8, ax
 117 0060 88 08                   		mov	a, [sp+8]
 118 0062 9D F2                   		mov	r10, a
 119 0064 DA F0                   		movw	bc, r8
 120 0066 48 00 00                		mov	_record[bc], a
  50:../src/user_functions.c **** 				record[count + 1] = '\0';
 121                             		.loc 1 50 0
 122 0069 AF 00 00                		movw	ax, !_count
 123 006c BD F0                   		movw	r8, ax
 124 006e A6 F0                   		incw	r8
 125 0070 DA F0                   		movw	bc, r8
 126 0072 F1                      		clrb	a
 127 0073 48 00 00                		mov	_record[bc], a
  51:../src/user_functions.c **** 				processMSG();
 128                             		.loc 1 51 0
 129 0076 FC 00 00 00             		call	!!%code(_processMSG)
 130                             	.L5:
  52:../src/user_functions.c **** 			}
  53:../src/user_functions.c **** 		}
  54:../src/user_functions.c **** 		strcpy(record,"");
 131                             		.loc 1 54 0
 132 007a F4 F0                   		clrb	r8
 133 007c 8D F0                   		mov	a, r8
 134 007e 9F 00 00                		mov	!_record, a
  55:../src/user_functions.c **** 		count = 0;
 135                             		.loc 1 55 0
 136 0081 F6                      		clrw	ax
 137 0082 BF 00 00                		movw	!_count, ax
  56:../src/user_functions.c **** 		flag = 0;
 138                             		.loc 1 56 0
 139 0085 F6                      		clrw	ax
 140 0086 BF 00 00                		movw	!_flag, ax
 141 0089 EC E3 00 00             		br	!!.L3
 142                             	.L4:
  57:../src/user_functions.c **** 	}
  58:../src/user_functions.c **** 	else if(flag){
 143                             		.loc 1 58 0
 144 008d AF 00 00                		movw	ax, !_flag
 145 0090 BD F0                   		movw	r8, ax
 146 0092 44 00 00                		cmpw	ax, #0
 147 0095 61 E8                   		 skz
 148 0097 EC E3 00 00             		 br	!!.L3
  59:../src/user_functions.c **** 
  60:../src/user_functions.c **** 	}
  61:../src/user_functions.c **** 	else if(count == 0 && recieved != '$'){
 149                             		.loc 1 61 0
 150 009b AF 00 00                		movw	ax, !_count
 151 009e BD F0                   		movw	r8, ax
 152 00a0 44 00 00                		cmpw	ax, #0
 153 00a3 61 E8                   		 skz
 154 00a5 EC C9 00 00             		 br	!!.L6
 155                             		.loc 1 61 0 is_stmt 0 discriminator 1
 156 00a9 88 08                   		mov	a, [sp+8]
 157 00ab 4C 24                   		cmp	a, #36
 158 00ad 61 F8                   		 sknz
 159 00af EC C9 00 00             		 br	!!.L6
  62:../src/user_functions.c **** 
  63:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a",7);
 160                             		.loc 1 63 0 is_stmt 1
 161 00b3 30 00 00                		movw	ax, #.LC0
 162 00b6 B8 00                   		movw	[sp], ax
 163 00b8 30 07 00                		movw	ax, #7
 164 00bb B8 02                   		movw	[sp+2], ax
 165 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  64:../src/user_functions.c **** 		flag = 1;
 166                             		.loc 1 64 0
 167 00c1 E6                      		onew	ax
 168 00c2 BF 00 00                		movw	!_flag, ax
 169 00c5 EC E3 00 00             		br	!!.L3
 170                             	.L6:
  65:../src/user_functions.c **** 	}
  66:../src/user_functions.c **** 
  67:../src/user_functions.c **** 	else{
  68:../src/user_functions.c **** 		record[count] = recieved;
 171                             		.loc 1 68 0
 172 00c9 AF 00 00                		movw	ax, !_count
 173 00cc BD F0                   		movw	r8, ax
 174 00ce 88 08                   		mov	a, [sp+8]
 175 00d0 9D F2                   		mov	r10, a
 176 00d2 DA F0                   		movw	bc, r8
 177 00d4 48 00 00                		mov	_record[bc], a
  69:../src/user_functions.c **** 		count++;
 178                             		.loc 1 69 0
 179 00d7 AF 00 00                		movw	ax, !_count
 180 00da BD F0                   		movw	r8, ax
 181 00dc A6 F0                   		incw	r8
 182 00de AD F0                   		movw	ax, r8
 183 00e0 BF 00 00                		movw	!_count, ax
 184                             	.L3:
  70:../src/user_functions.c **** 	}
  71:../src/user_functions.c **** 
  72:../src/user_functions.c **** 
  73:../src/user_functions.c **** 
  74:../src/user_functions.c **** 	return recieved;
 185                             		.loc 1 74 0
 186 00e3 88 08                   		mov	a, [sp+8]
 187 00e5 9D F0                   		mov	r8, a
  75:../src/user_functions.c **** }
 188                             		.loc 1 75 0
 189 00e7 10 04                   		addw	sp, #4
 190 00e9 D7                      		ret
 191                             	.LFE0:
 193                             		.section	.rodata
 194                             	.LC1:
 195 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,0,%02d\r\n"
 195      30 2C 25 30 32 64 0D 0A 
 195      00 
 196                             	.text
 197                             		.global	_processMSG
 199                             	_processMSG:
 200                             	.LFB1:
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** void processMSG(){
 201                             		.loc 1 77 0
 202                             		; start of function
 203                             		; locals: 34 bytes
 204                             		; outgoing: 8 bytes
 205 00ea 20 2A                   		subw	sp, #42
 206                             	.LCFI1:
  78:../src/user_functions.c **** 	char ack[3];
  79:../src/user_functions.c **** 	char str[30];
  80:../src/user_functions.c **** 	if(errorTest()){
 207                             		.loc 1 80 0
 208 00ec FC 00 00 00             		call	!!%code(_errorTest)
 209 00f0 AD F0                   		movw	ax, r8
 210 00f2 44 00 00                		cmpw	ax, #0
 211 00f5 61 F8                   		 sknz
 212 00f7 EC C8 06 00             		 br	!!.L9
  81:../src/user_functions.c **** 
  82:../src/user_functions.c **** 		switch(record[1]){
 213                             		.loc 1 82 0
 214 00fb 8F 00 00                		mov	a, !_record+1
 215 00fe 9D F0                   		mov	r8, a
 216 0100 CD F1 00                		mov	r9, #0
 217 0103 AD F0                   		movw	ax, r8
 218 0105 44 33 00                		cmpw	ax, #51
 219 0108 61 F8                   		 sknz
 220 010a EC 79 02 00             		 br	!!.L11
 221 010e AD F0                   		movw	ax, r8
 222 0110 44 33 00                		cmpw	ax, #51
 223 0113 71 FF                   		 xor1	CY, a.7
 224 0115 61 F3                   		 sknh
 225 0117 EC 42 01 00             		 br	!!.L12
 226 011b AD F0                   		movw	ax, r8
 227 011d 44 31 00                		cmpw	ax, #49
 228 0120 61 F8                   		 sknz
 229 0122 EC E4 01 00             		 br	!!.L13
 230 0126 AD F0                   		movw	ax, r8
 231 0128 44 31 00                		cmpw	ax, #49
 232 012b 71 FF                   		 xor1	CY, a.7
 233 012d 61 F3                   		 sknh
 234 012f EC 45 02 00             		 br	!!.L14
 235 0133 AD F0                   		movw	ax, r8
 236 0135 44 30 00                		cmpw	ax, #48
 237 0138 61 F8                   		 sknz
 238 013a EC 83 01 00             		 br	!!.L15
 239 013e EC 83 06 00             		br	!!.L10
 240                             	.L12:
 241 0142 AD F0                   		movw	ax, r8
 242 0144 44 44 00                		cmpw	ax, #68
 243 0147 61 F8                   		 sknz
 244 0149 EC C7 02 00             		 br	!!.L16
 245 014d AD F0                   		movw	ax, r8
 246 014f 44 44 00                		cmpw	ax, #68
 247 0152 71 FF                   		 xor1	CY, a.7
 248 0154 61 F3                   		 sknh
 249 0156 EC 69 01 00             		 br	!!.L17
 250 015a AD F0                   		movw	ax, r8
 251 015c 44 42 00                		cmpw	ax, #66
 252 015f 61 F8                   		 sknz
 253 0161 EC 7B 06 00             		 br	!!.L18
 254 0165 EC 83 06 00             		br	!!.L10
 255                             	.L17:
 256 0169 AD F0                   		movw	ax, r8
 257 016b 44 45 00                		cmpw	ax, #69
 258 016e 61 F8                   		 sknz
 259 0170 EC 08 06 00             		 br	!!.L19
 260 0174 AD F0                   		movw	ax, r8
 261 0176 44 4C 00                		cmpw	ax, #76
 262 0179 61 F8                   		 sknz
 263 017b EC 63 03 00             		 br	!!.L20
 264 017f EC 83 06 00             		br	!!.L10
 265                             	.L15:
  83:../src/user_functions.c **** 		case '0': if(mode == 1){ack[0] = '0'; mode = 0;}
 266                             		.loc 1 83 0
 267 0183 AF 36 00                		movw	ax, !_mode
 268 0186 BD F0                   		movw	r8, ax
 269 0188 44 01 00                		cmpw	ax, #1
 270 018b 61 E8                   		 skz
 271 018d EC 9D 01 00             		 br	!!.L21
 272                             		.loc 1 83 0 is_stmt 0 discriminator 1
 273 0191 51 30                   		mov	a, #48
 274 0193 98 27                   		mov	[sp+39], a
 275 0195 F6                      		clrw	ax
 276 0196 BF 36 00                		movw	!_mode, ax
 277 0199 EC A1 01 00             		br	!!.L22
 278                             	.L21:
  84:../src/user_functions.c **** 				  else{ack[0] = '3';}
 279                             		.loc 1 84 0 is_stmt 1
 280 019d 51 33                   		mov	a, #51
 281 019f 98 27                   		mov	[sp+39], a
 282                             	.L22:
  85:../src/user_functions.c **** 				  ack[1] = '\x0d';
 283                             		.loc 1 85 0
 284 01a1 51 0D                   		mov	a, #13
 285 01a3 98 28                   		mov	[sp+40], a
  86:../src/user_functions.c **** 				  ack[2] = '\x0a';
 286                             		.loc 1 86 0
 287 01a5 51 0A                   		mov	a, #10
 288 01a7 98 29                   		mov	[sp+41], a
  87:../src/user_functions.c **** 				  strcpy(response, "$0");
 289                             		.loc 1 87 0
 290 01a9 51 24                   		mov	a, #36
 291 01ab 9F 04 00                		mov	!_response, a
 292 01ae 51 30                   		mov	a, #48
 293 01b0 9F 05 00                		mov	!_response+1, a
 294 01b3 F5 06 00                		clrb	!_response+2
  88:../src/user_functions.c **** 				  strcat(response, ack);
 295                             		.loc 1 88 0
 296 01b6 30 04 00                		movw	ax, #_response
 297 01b9 B8 00                   		movw	[sp], ax
 298 01bb C9 F0 2A 00             		movw	r8, #42
 299 01bf AE F8                   		movw	ax, sp
 300 01c1 BD F0                   		movw	r8, ax
 301 01c3 04 2A 00                		addw	ax, #42
 302 01c6 BD F0                   		movw	r8, ax
 303 01c8 04 FD FF                		addw	ax, #-3
 304 01cb B8 02                   		movw	[sp+2], ax
 305 01cd FC 00 00 00             		call	!!%code(_strcat)
  89:../src/user_functions.c **** 				  recieveInstruction(7);
 306                             		.loc 1 89 0
 307 01d1 30 07 00                		movw	ax, #7
 308 01d4 B8 00                   		movw	[sp], ax
 309 01d6 FC 00 00 00             		call	!!%code(_recieveInstruction)
  90:../src/user_functions.c **** 				  count = 5; break;
 310                             		.loc 1 90 0
 311 01da 30 05 00                		movw	ax, #5
 312 01dd BF 00 00                		movw	!_count, ax
 313 01e0 EC C8 06 00             		br	!!.L9
 314                             	.L13:
  91:../src/user_functions.c **** 
  92:../src/user_functions.c **** 
  93:../src/user_functions.c **** 		case '1': if(mode == 0){ack[0] = '0'; mode = 1;}
 315                             		.loc 1 93 0
 316 01e4 AF 36 00                		movw	ax, !_mode
 317 01e7 BD F0                   		movw	r8, ax
 318 01e9 44 00 00                		cmpw	ax, #0
 319 01ec 61 E8                   		 skz
 320 01ee EC FE 01 00             		 br	!!.L23
 321                             		.loc 1 93 0 is_stmt 0 discriminator 1
 322 01f2 51 30                   		mov	a, #48
 323 01f4 98 27                   		mov	[sp+39], a
 324 01f6 E6                      		onew	ax
 325 01f7 BF 36 00                		movw	!_mode, ax
 326 01fa EC 02 02 00             		br	!!.L24
 327                             	.L23:
  94:../src/user_functions.c **** 		  	  	  else{ack[0] = '3';}
 328                             		.loc 1 94 0 is_stmt 1
 329 01fe 51 33                   		mov	a, #51
 330 0200 98 27                   		mov	[sp+39], a
 331                             	.L24:
  95:../src/user_functions.c **** 				  ack[1] = '\x0d';
 332                             		.loc 1 95 0
 333 0202 51 0D                   		mov	a, #13
 334 0204 98 28                   		mov	[sp+40], a
  96:../src/user_functions.c **** 				  ack[2] = '\x0a';
 335                             		.loc 1 96 0
 336 0206 51 0A                   		mov	a, #10
 337 0208 98 29                   		mov	[sp+41], a
  97:../src/user_functions.c **** 				  strcpy(response, "$1");
 338                             		.loc 1 97 0
 339 020a 51 24                   		mov	a, #36
 340 020c 9F 04 00                		mov	!_response, a
 341 020f 51 31                   		mov	a, #49
 342 0211 9F 05 00                		mov	!_response+1, a
 343 0214 F5 06 00                		clrb	!_response+2
  98:../src/user_functions.c **** 				  strcat(response, ack);
 344                             		.loc 1 98 0
 345 0217 30 04 00                		movw	ax, #_response
 346 021a B8 00                   		movw	[sp], ax
 347 021c C9 F2 2A 00             		movw	r10, #42
 348 0220 AE F8                   		movw	ax, sp
 349 0222 BD F2                   		movw	r10, ax
 350 0224 04 2A 00                		addw	ax, #42
 351 0227 BD F2                   		movw	r10, ax
 352 0229 04 FD FF                		addw	ax, #-3
 353 022c B8 02                   		movw	[sp+2], ax
 354 022e FC 00 00 00             		call	!!%code(_strcat)
  99:../src/user_functions.c **** 				  recieveInstruction(6);
 355                             		.loc 1 99 0
 356 0232 30 06 00                		movw	ax, #6
 357 0235 B8 00                   		movw	[sp], ax
 358 0237 FC 00 00 00             		call	!!%code(_recieveInstruction)
 100:../src/user_functions.c **** 				  count = 5; break;
 359                             		.loc 1 100 0
 360 023b 30 05 00                		movw	ax, #5
 361 023e BF 00 00                		movw	!_count, ax
 362 0241 EC C8 06 00             		br	!!.L9
 363                             	.L14:
 101:../src/user_functions.c **** 
 102:../src/user_functions.c **** 		case '2': strcpy(mem, &record[2]);
 364                             		.loc 1 102 0
 365 0245 30 00 00                		movw	ax, #_mem
 366 0248 B8 00                   		movw	[sp], ax
 367 024a 30 00 00                		movw	ax, #_record+2
 368 024d B8 02                   		movw	[sp+2], ax
 369 024f FC 00 00 00             		call	!!%code(_strcpy)
 103:../src/user_functions.c **** 				  strcpy(response, "$20\x0d\x0a"); count = 5; break;
 370                             		.loc 1 103 0
 371 0253 51 24                   		mov	a, #36
 372 0255 9F 04 00                		mov	!_response, a
 373 0258 51 32                   		mov	a, #50
 374 025a 9F 05 00                		mov	!_response+1, a
 375 025d 51 30                   		mov	a, #48
 376 025f 9F 06 00                		mov	!_response+2, a
 377 0262 51 0D                   		mov	a, #13
 378 0264 9F 07 00                		mov	!_response+3, a
 379 0267 51 0A                   		mov	a, #10
 380 0269 9F 08 00                		mov	!_response+4, a
 381 026c F5 09 00                		clrb	!_response+5
 382 026f 30 05 00                		movw	ax, #5
 383 0272 BF 00 00                		movw	!_count, ax
 384 0275 EC C8 06 00             		br	!!.L9
 385                             	.L11:
 104:../src/user_functions.c **** 
 105:../src/user_functions.c **** 		case '3': strcpy(response, "$3019119038\x0d\x0a"); count = 13; break;
 386                             		.loc 1 105 0
 387 0279 51 24                   		mov	a, #36
 388 027b 9F 04 00                		mov	!_response, a
 389 027e 51 33                   		mov	a, #51
 390 0280 9F 05 00                		mov	!_response+1, a
 391 0283 51 30                   		mov	a, #48
 392 0285 9F 06 00                		mov	!_response+2, a
 393 0288 51 31                   		mov	a, #49
 394 028a 9F 07 00                		mov	!_response+3, a
 395 028d 51 39                   		mov	a, #57
 396 028f 9F 08 00                		mov	!_response+4, a
 397 0292 51 31                   		mov	a, #49
 398 0294 9F 09 00                		mov	!_response+5, a
 399 0297 51 31                   		mov	a, #49
 400 0299 9F 0A 00                		mov	!_response+6, a
 401 029c 51 39                   		mov	a, #57
 402 029e 9F 0B 00                		mov	!_response+7, a
 403 02a1 51 30                   		mov	a, #48
 404 02a3 9F 0C 00                		mov	!_response+8, a
 405 02a6 51 33                   		mov	a, #51
 406 02a8 9F 0D 00                		mov	!_response+9, a
 407 02ab 51 38                   		mov	a, #56
 408 02ad 9F 0E 00                		mov	!_response+10, a
 409 02b0 51 0D                   		mov	a, #13
 410 02b2 9F 0F 00                		mov	!_response+11, a
 411 02b5 51 0A                   		mov	a, #10
 412 02b7 9F 10 00                		mov	!_response+12, a
 413 02ba F5 11 00                		clrb	!_response+13
 414 02bd 30 0D 00                		movw	ax, #13
 415 02c0 BF 00 00                		movw	!_count, ax
 416 02c3 EC C8 06 00             		br	!!.L9
 417                             	.L16:
 106:../src/user_functions.c **** 
 107:../src/user_functions.c **** 		case 'D': if(strlen(mem) <= 32){
 418                             		.loc 1 107 0
 419 02c7 30 00 00                		movw	ax, #_mem
 420 02ca B8 00                   		movw	[sp], ax
 421 02cc FC 00 00 00             		call	!!%code(_strlen)
 422 02d0 AD F0                   		movw	ax, r8
 423 02d2 44 20 00                		cmpw	ax, #32
 424 02d5 61 F3                   		 sknh
 425 02d7 EC 16 03 00             		 br	!!.L25
 108:../src/user_functions.c **** 
 109:../src/user_functions.c **** 					strcpy(response, "$D0\x0d\x0a"); count = 5;
 426                             		.loc 1 109 0
 427 02db 51 24                   		mov	a, #36
 428 02dd 9F 04 00                		mov	!_response, a
 429 02e0 51 44                   		mov	a, #68
 430 02e2 9F 05 00                		mov	!_response+1, a
 431 02e5 51 30                   		mov	a, #48
 432 02e7 9F 06 00                		mov	!_response+2, a
 433 02ea 51 0D                   		mov	a, #13
 434 02ec 9F 07 00                		mov	!_response+3, a
 435 02ef 51 0A                   		mov	a, #10
 436 02f1 9F 08 00                		mov	!_response+4, a
 437 02f4 F5 09 00                		clrb	!_response+5
 438 02f7 30 05 00                		movw	ax, #5
 439 02fa BF 00 00                		movw	!_count, ax
 110:../src/user_functions.c **** 					strcpy(display_string,mem);
 440                             		.loc 1 110 0
 441 02fd 30 00 00                		movw	ax, #_display_string
 442 0300 B8 00                   		movw	[sp], ax
 443 0302 30 00 00                		movw	ax, #_mem
 444 0305 B8 02                   		movw	[sp+2], ax
 445 0307 FC 00 00 00             		call	!!%code(_strcpy)
 111:../src/user_functions.c **** 					displayLCD(1);
 446                             		.loc 1 111 0
 447 030b E6                      		onew	ax
 448 030c B8 00                   		movw	[sp], ax
 449 030e FC 00 00 00             		call	!!%code(_displayLCD)
 112:../src/user_functions.c **** 				  }
 113:../src/user_functions.c **** 				  else{
 114:../src/user_functions.c **** 				    writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 115:../src/user_functions.c **** 					delayNoInt(1640);
 116:../src/user_functions.c **** 
 117:../src/user_functions.c **** 					writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 118:../src/user_functions.c **** 					delayNoInt(1640);
 119:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 120:../src/user_functions.c **** 				  }
 121:../src/user_functions.c **** 				  break;
 450                             		.loc 1 121 0
 451 0312 EC C8 06 00             		br	!!.L9
 452                             	.L25:
 114:../src/user_functions.c **** 					delayNoInt(1640);
 453                             		.loc 1 114 0
 454 0316 F1                      		clrb	a
 455 0317 98 00                   		mov	[sp], a
 456 0319 E1                      		oneb	a
 457 031a 98 02                   		mov	[sp+2], a
 458 031c FC 00 00 00             		call	!!%code(_writeByteLcd)
 115:../src/user_functions.c **** 
 459                             		.loc 1 115 0
 460 0320 30 68 06                		movw	ax, #1640
 461 0323 B8 00                   		movw	[sp], ax
 462 0325 FC 00 00 00             		call	!!%code(_delayNoInt)
 117:../src/user_functions.c **** 					delayNoInt(1640);
 463                             		.loc 1 117 0
 464 0329 F1                      		clrb	a
 465 032a 98 00                   		mov	[sp], a
 466 032c 51 80                   		mov	a, #-128
 467 032e 98 02                   		mov	[sp+2], a
 468 0330 FC 00 00 00             		call	!!%code(_writeByteLcd)
 118:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 469                             		.loc 1 118 0
 470 0334 30 68 06                		movw	ax, #1640
 471 0337 B8 00                   		movw	[sp], ax
 472 0339 FC 00 00 00             		call	!!%code(_delayNoInt)
 119:../src/user_functions.c **** 				  }
 473                             		.loc 1 119 0
 474 033d 51 24                   		mov	a, #36
 475 033f 9F 04 00                		mov	!_response, a
 476 0342 51 44                   		mov	a, #68
 477 0344 9F 05 00                		mov	!_response+1, a
 478 0347 51 33                   		mov	a, #51
 479 0349 9F 06 00                		mov	!_response+2, a
 480 034c 51 0D                   		mov	a, #13
 481 034e 9F 07 00                		mov	!_response+3, a
 482 0351 51 0A                   		mov	a, #10
 483 0353 9F 08 00                		mov	!_response+4, a
 484 0356 F5 09 00                		clrb	!_response+5
 485 0359 30 05 00                		movw	ax, #5
 486 035c BF 00 00                		movw	!_count, ax
 487                             		.loc 1 121 0
 488 035f EC C8 06 00             		br	!!.L9
 489                             	.L20:
 122:../src/user_functions.c **** 
 123:../src/user_functions.c **** 		case 'L': if(record[2] == '0'){
 490                             		.loc 1 123 0
 491 0363 8F 00 00                		mov	a, !_record+2
 492 0366 9D F0                   		mov	r8, a
 493 0368 4A F0 30                		cmp	r8, #48
 494 036b 61 E8                   		 skz
 495 036d EC E2 03 00             		 br	!!.L27
 124:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 496                             		.loc 1 124 0
 497 0371 C9 F0 04 FF             		movw	r8, #-252
 498 0375 AD F0                   		movw	ax, r8
 499 0377 BD F4                   		movw	r12, ax
 500 0379 FA F4                   		movw	hl, r12
 501 037b 8B                      		mov	a, [hl]
 502 037c 9D F2                   		mov	r10, a
 503 037e 5A F2 FD                		and	r10, #-3
 504 0381 AD F0                   		movw	ax, r8
 505 0383 DA F4                   		movw	bc, r12
 506 0385 8D F2                   		mov	a, r10
 507 0387 48 00 00                		mov	[bc], a
 125:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 508                             		.loc 1 125 0
 509 038a C9 F0 04 FF             		movw	r8, #-252
 510 038e AD F0                   		movw	ax, r8
 511 0390 BD F4                   		movw	r12, ax
 512 0392 FA F4                   		movw	hl, r12
 513 0394 8B                      		mov	a, [hl]
 514 0395 9D F2                   		mov	r10, a
 515 0397 5A F2 FB                		and	r10, #-5
 516 039a AD F0                   		movw	ax, r8
 517 039c DA F4                   		movw	bc, r12
 518 039e 8D F2                   		mov	a, r10
 519 03a0 48 00 00                		mov	[bc], a
 126:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 520                             		.loc 1 126 0
 521 03a3 C9 F0 04 FF             		movw	r8, #-252
 522 03a7 AD F0                   		movw	ax, r8
 523 03a9 BD F4                   		movw	r12, ax
 524 03ab FA F4                   		movw	hl, r12
 525 03ad 8B                      		mov	a, [hl]
 526 03ae 9D F2                   		mov	r10, a
 527 03b0 5A F2 F7                		and	r10, #-9
 528 03b3 AD F0                   		movw	ax, r8
 529 03b5 DA F4                   		movw	bc, r12
 530 03b7 8D F2                   		mov	a, r10
 531 03b9 48 00 00                		mov	[bc], a
 127:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 532                             		.loc 1 127 0
 533 03bc 51 24                   		mov	a, #36
 534 03be 9F 04 00                		mov	!_response, a
 535 03c1 51 4C                   		mov	a, #76
 536 03c3 9F 05 00                		mov	!_response+1, a
 537 03c6 51 30                   		mov	a, #48
 538 03c8 9F 06 00                		mov	!_response+2, a
 539 03cb 51 0D                   		mov	a, #13
 540 03cd 9F 07 00                		mov	!_response+3, a
 541 03d0 51 0A                   		mov	a, #10
 542 03d2 9F 08 00                		mov	!_response+4, a
 543 03d5 F5 09 00                		clrb	!_response+5
 544 03d8 30 05 00                		movw	ax, #5
 545 03db BF 00 00                		movw	!_count, ax
 546 03de EC 04 06 00             		br	!!.L28
 547                             	.L27:
 128:../src/user_functions.c **** 				  }
 129:../src/user_functions.c **** 				  else if(record[2] == '1'){
 548                             		.loc 1 129 0
 549 03e2 8F 00 00                		mov	a, !_record+2
 550 03e5 9D F0                   		mov	r8, a
 551 03e7 4A F0 31                		cmp	r8, #49
 552 03ea 61 E8                   		 skz
 553 03ec EC 61 04 00             		 br	!!.L29
 130:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 554                             		.loc 1 130 0
 555 03f0 C9 F0 04 FF             		movw	r8, #-252
 556 03f4 AD F0                   		movw	ax, r8
 557 03f6 BD F4                   		movw	r12, ax
 558 03f8 FA F4                   		movw	hl, r12
 559 03fa 8B                      		mov	a, [hl]
 560 03fb 9D F2                   		mov	r10, a
 561 03fd 5A F2 FD                		and	r10, #-3
 562 0400 AD F0                   		movw	ax, r8
 563 0402 DA F4                   		movw	bc, r12
 564 0404 8D F2                   		mov	a, r10
 565 0406 48 00 00                		mov	[bc], a
 131:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 566                             		.loc 1 131 0
 567 0409 C9 F0 04 FF             		movw	r8, #-252
 568 040d AD F0                   		movw	ax, r8
 569 040f BD F4                   		movw	r12, ax
 570 0411 FA F4                   		movw	hl, r12
 571 0413 8B                      		mov	a, [hl]
 572 0414 9D F2                   		mov	r10, a
 573 0416 5A F2 FB                		and	r10, #-5
 574 0419 AD F0                   		movw	ax, r8
 575 041b DA F4                   		movw	bc, r12
 576 041d 8D F2                   		mov	a, r10
 577 041f 48 00 00                		mov	[bc], a
 132:../src/user_functions.c **** 					  P4_bit.no3 = 1;
 578                             		.loc 1 132 0
 579 0422 C9 F0 04 FF             		movw	r8, #-252
 580 0426 AD F0                   		movw	ax, r8
 581 0428 BD F4                   		movw	r12, ax
 582 042a FA F4                   		movw	hl, r12
 583 042c 8B                      		mov	a, [hl]
 584 042d 9D F2                   		mov	r10, a
 585 042f 6A F2 08                		or	r10, #8
 586 0432 AD F0                   		movw	ax, r8
 587 0434 DA F4                   		movw	bc, r12
 588 0436 8D F2                   		mov	a, r10
 589 0438 48 00 00                		mov	[bc], a
 133:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 590                             		.loc 1 133 0
 591 043b 51 24                   		mov	a, #36
 592 043d 9F 04 00                		mov	!_response, a
 593 0440 51 4C                   		mov	a, #76
 594 0442 9F 05 00                		mov	!_response+1, a
 595 0445 51 30                   		mov	a, #48
 596 0447 9F 06 00                		mov	!_response+2, a
 597 044a 51 0D                   		mov	a, #13
 598 044c 9F 07 00                		mov	!_response+3, a
 599 044f 51 0A                   		mov	a, #10
 600 0451 9F 08 00                		mov	!_response+4, a
 601 0454 F5 09 00                		clrb	!_response+5
 602 0457 30 05 00                		movw	ax, #5
 603 045a BF 00 00                		movw	!_count, ax
 604 045d EC 04 06 00             		br	!!.L28
 605                             	.L29:
 134:../src/user_functions.c **** 				  }
 135:../src/user_functions.c **** 				  else if(record[2] == '2'){
 606                             		.loc 1 135 0
 607 0461 8F 00 00                		mov	a, !_record+2
 608 0464 9D F0                   		mov	r8, a
 609 0466 4A F0 32                		cmp	r8, #50
 610 0469 61 E8                   		 skz
 611 046b EC E0 04 00             		 br	!!.L30
 136:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 612                             		.loc 1 136 0
 613 046f C9 F0 04 FF             		movw	r8, #-252
 614 0473 AD F0                   		movw	ax, r8
 615 0475 BD F4                   		movw	r12, ax
 616 0477 FA F4                   		movw	hl, r12
 617 0479 8B                      		mov	a, [hl]
 618 047a 9D F2                   		mov	r10, a
 619 047c 6A F2 02                		or	r10, #2
 620 047f AD F0                   		movw	ax, r8
 621 0481 DA F4                   		movw	bc, r12
 622 0483 8D F2                   		mov	a, r10
 623 0485 48 00 00                		mov	[bc], a
 137:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 624                             		.loc 1 137 0
 625 0488 C9 F0 04 FF             		movw	r8, #-252
 626 048c AD F0                   		movw	ax, r8
 627 048e BD F4                   		movw	r12, ax
 628 0490 FA F4                   		movw	hl, r12
 629 0492 8B                      		mov	a, [hl]
 630 0493 9D F2                   		mov	r10, a
 631 0495 5A F2 FB                		and	r10, #-5
 632 0498 AD F0                   		movw	ax, r8
 633 049a DA F4                   		movw	bc, r12
 634 049c 8D F2                   		mov	a, r10
 635 049e 48 00 00                		mov	[bc], a
 138:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 636                             		.loc 1 138 0
 637 04a1 C9 F0 04 FF             		movw	r8, #-252
 638 04a5 AD F0                   		movw	ax, r8
 639 04a7 BD F4                   		movw	r12, ax
 640 04a9 FA F4                   		movw	hl, r12
 641 04ab 8B                      		mov	a, [hl]
 642 04ac 9D F2                   		mov	r10, a
 643 04ae 5A F2 F7                		and	r10, #-9
 644 04b1 AD F0                   		movw	ax, r8
 645 04b3 DA F4                   		movw	bc, r12
 646 04b5 8D F2                   		mov	a, r10
 647 04b7 48 00 00                		mov	[bc], a
 139:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 648                             		.loc 1 139 0
 649 04ba 51 24                   		mov	a, #36
 650 04bc 9F 04 00                		mov	!_response, a
 651 04bf 51 4C                   		mov	a, #76
 652 04c1 9F 05 00                		mov	!_response+1, a
 653 04c4 51 30                   		mov	a, #48
 654 04c6 9F 06 00                		mov	!_response+2, a
 655 04c9 51 0D                   		mov	a, #13
 656 04cb 9F 07 00                		mov	!_response+3, a
 657 04ce 51 0A                   		mov	a, #10
 658 04d0 9F 08 00                		mov	!_response+4, a
 659 04d3 F5 09 00                		clrb	!_response+5
 660 04d6 30 05 00                		movw	ax, #5
 661 04d9 BF 00 00                		movw	!_count, ax
 662 04dc EC 04 06 00             		br	!!.L28
 663                             	.L30:
 140:../src/user_functions.c **** 				  }
 141:../src/user_functions.c **** 				  else if(record[2] == '3'){
 664                             		.loc 1 141 0
 665 04e0 8F 00 00                		mov	a, !_record+2
 666 04e3 9D F0                   		mov	r8, a
 667 04e5 4A F0 33                		cmp	r8, #51
 668 04e8 61 E8                   		 skz
 669 04ea EC 5F 05 00             		 br	!!.L31
 142:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 670                             		.loc 1 142 0
 671 04ee C9 F0 04 FF             		movw	r8, #-252
 672 04f2 AD F0                   		movw	ax, r8
 673 04f4 BD F4                   		movw	r12, ax
 674 04f6 FA F4                   		movw	hl, r12
 675 04f8 8B                      		mov	a, [hl]
 676 04f9 9D F2                   		mov	r10, a
 677 04fb 5A F2 FD                		and	r10, #-3
 678 04fe AD F0                   		movw	ax, r8
 679 0500 DA F4                   		movw	bc, r12
 680 0502 8D F2                   		mov	a, r10
 681 0504 48 00 00                		mov	[bc], a
 143:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 682                             		.loc 1 143 0
 683 0507 C9 F0 04 FF             		movw	r8, #-252
 684 050b AD F0                   		movw	ax, r8
 685 050d BD F4                   		movw	r12, ax
 686 050f FA F4                   		movw	hl, r12
 687 0511 8B                      		mov	a, [hl]
 688 0512 9D F2                   		mov	r10, a
 689 0514 6A F2 04                		or	r10, #4
 690 0517 AD F0                   		movw	ax, r8
 691 0519 DA F4                   		movw	bc, r12
 692 051b 8D F2                   		mov	a, r10
 693 051d 48 00 00                		mov	[bc], a
 144:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 694                             		.loc 1 144 0
 695 0520 C9 F0 04 FF             		movw	r8, #-252
 696 0524 AD F0                   		movw	ax, r8
 697 0526 BD F4                   		movw	r12, ax
 698 0528 FA F4                   		movw	hl, r12
 699 052a 8B                      		mov	a, [hl]
 700 052b 9D F2                   		mov	r10, a
 701 052d 5A F2 F7                		and	r10, #-9
 702 0530 AD F0                   		movw	ax, r8
 703 0532 DA F4                   		movw	bc, r12
 704 0534 8D F2                   		mov	a, r10
 705 0536 48 00 00                		mov	[bc], a
 145:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 706                             		.loc 1 145 0
 707 0539 51 24                   		mov	a, #36
 708 053b 9F 04 00                		mov	!_response, a
 709 053e 51 4C                   		mov	a, #76
 710 0540 9F 05 00                		mov	!_response+1, a
 711 0543 51 30                   		mov	a, #48
 712 0545 9F 06 00                		mov	!_response+2, a
 713 0548 51 0D                   		mov	a, #13
 714 054a 9F 07 00                		mov	!_response+3, a
 715 054d 51 0A                   		mov	a, #10
 716 054f 9F 08 00                		mov	!_response+4, a
 717 0552 F5 09 00                		clrb	!_response+5
 718 0555 30 05 00                		movw	ax, #5
 719 0558 BF 00 00                		movw	!_count, ax
 720 055b EC 04 06 00             		br	!!.L28
 721                             	.L31:
 146:../src/user_functions.c **** 				  }
 147:../src/user_functions.c **** 				  else if(record[2] == '4'){
 722                             		.loc 1 147 0
 723 055f 8F 00 00                		mov	a, !_record+2
 724 0562 9D F0                   		mov	r8, a
 725 0564 4A F0 34                		cmp	r8, #52
 726 0567 61 E8                   		 skz
 727 0569 EC DE 05 00             		 br	!!.L32
 148:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 728                             		.loc 1 148 0
 729 056d C9 F0 04 FF             		movw	r8, #-252
 730 0571 AD F0                   		movw	ax, r8
 731 0573 BD F4                   		movw	r12, ax
 732 0575 FA F4                   		movw	hl, r12
 733 0577 8B                      		mov	a, [hl]
 734 0578 9D F2                   		mov	r10, a
 735 057a 6A F2 02                		or	r10, #2
 736 057d AD F0                   		movw	ax, r8
 737 057f DA F4                   		movw	bc, r12
 738 0581 8D F2                   		mov	a, r10
 739 0583 48 00 00                		mov	[bc], a
 149:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 740                             		.loc 1 149 0
 741 0586 C9 F0 04 FF             		movw	r8, #-252
 742 058a AD F0                   		movw	ax, r8
 743 058c BD F4                   		movw	r12, ax
 744 058e FA F4                   		movw	hl, r12
 745 0590 8B                      		mov	a, [hl]
 746 0591 9D F2                   		mov	r10, a
 747 0593 6A F2 04                		or	r10, #4
 748 0596 AD F0                   		movw	ax, r8
 749 0598 DA F4                   		movw	bc, r12
 750 059a 8D F2                   		mov	a, r10
 751 059c 48 00 00                		mov	[bc], a
 150:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 752                             		.loc 1 150 0
 753 059f C9 F0 04 FF             		movw	r8, #-252
 754 05a3 AD F0                   		movw	ax, r8
 755 05a5 BD F4                   		movw	r12, ax
 756 05a7 FA F4                   		movw	hl, r12
 757 05a9 8B                      		mov	a, [hl]
 758 05aa 9D F2                   		mov	r10, a
 759 05ac 5A F2 F7                		and	r10, #-9
 760 05af AD F0                   		movw	ax, r8
 761 05b1 DA F4                   		movw	bc, r12
 762 05b3 8D F2                   		mov	a, r10
 763 05b5 48 00 00                		mov	[bc], a
 151:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 764                             		.loc 1 151 0
 765 05b8 51 24                   		mov	a, #36
 766 05ba 9F 04 00                		mov	!_response, a
 767 05bd 51 4C                   		mov	a, #76
 768 05bf 9F 05 00                		mov	!_response+1, a
 769 05c2 51 30                   		mov	a, #48
 770 05c4 9F 06 00                		mov	!_response+2, a
 771 05c7 51 0D                   		mov	a, #13
 772 05c9 9F 07 00                		mov	!_response+3, a
 773 05cc 51 0A                   		mov	a, #10
 774 05ce 9F 08 00                		mov	!_response+4, a
 775 05d1 F5 09 00                		clrb	!_response+5
 776 05d4 30 05 00                		movw	ax, #5
 777 05d7 BF 00 00                		movw	!_count, ax
 778 05da EC 04 06 00             		br	!!.L28
 779                             	.L32:
 152:../src/user_functions.c **** 				  }
 153:../src/user_functions.c **** 				  else{
 154:../src/user_functions.c **** 					  strcpy(response, "$L2\x0d\x0a"); count = 5;
 780                             		.loc 1 154 0
 781 05de 51 24                   		mov	a, #36
 782 05e0 9F 04 00                		mov	!_response, a
 783 05e3 51 4C                   		mov	a, #76
 784 05e5 9F 05 00                		mov	!_response+1, a
 785 05e8 51 32                   		mov	a, #50
 786 05ea 9F 06 00                		mov	!_response+2, a
 787 05ed 51 0D                   		mov	a, #13
 788 05ef 9F 07 00                		mov	!_response+3, a
 789 05f2 51 0A                   		mov	a, #10
 790 05f4 9F 08 00                		mov	!_response+4, a
 791 05f7 F5 09 00                		clrb	!_response+5
 792 05fa 30 05 00                		movw	ax, #5
 793 05fd BF 00 00                		movw	!_count, ax
 155:../src/user_functions.c **** 				  }
 156:../src/user_functions.c **** 				  break;
 794                             		.loc 1 156 0
 795 0600 EC C8 06 00             		br	!!.L9
 796                             	.L28:
 797 0604 EC C8 06 00             		br	!!.L9
 798                             	.L19:
 157:../src/user_functions.c **** 		case 'E':
 158:../src/user_functions.c **** 
 159:../src/user_functions.c **** 				 collectADC();
 799                             		.loc 1 159 0
 800 0608 FC 00 00 00             		call	!!%code(_collectADC)
 160:../src/user_functions.c **** 				 sprintf(str, "$E0%02d,0,%02d\x0d\x0a", voltage, current2);
 801                             		.loc 1 160 0
 802 060c 8F 00 00                		mov	a, !_voltage
 803 060f 9D F0                   		mov	r8, a
 804 0611 70                      		mov	x, a 
 805 0612 51 00                   		mov	a, #0
 806 0614 BD F2                   		movw	r10, ax
 807 0616 8F 00 00                		mov	a, !_current2
 808 0619 9D F0                   		mov	r8, a
 809 061b CD F1 00                		mov	r9, #0
 810 061e C9 F4 2A 00             		movw	r12, #42
 811 0622 AE F8                   		movw	ax, sp
 812 0624 BD F4                   		movw	r12, ax
 813 0626 04 2A 00                		addw	ax, #42
 814 0629 BD F4                   		movw	r12, ax
 815 062b 04 DF FF                		addw	ax, #-33
 816 062e B8 00                   		movw	[sp], ax
 817 0630 30 08 00                		movw	ax, #.LC1
 818 0633 B8 02                   		movw	[sp+2], ax
 819 0635 AD F2                   		movw	ax, r10
 820 0637 B8 04                   		movw	[sp+4], ax
 821 0639 AD F0                   		movw	ax, r8
 822 063b B8 06                   		movw	[sp+6], ax
 823 063d FC 00 00 00             		call	!!%code(_sprintf)
 161:../src/user_functions.c **** 
 162:../src/user_functions.c **** 
 163:../src/user_functions.c **** //				  sprintf(str, "%d", voltage);
 164:../src/user_functions.c **** 
 165:../src/user_functions.c **** 			      strcpy(response, str); count = strlen(str);
 824                             		.loc 1 165 0
 825 0641 30 04 00                		movw	ax, #_response
 826 0644 B8 00                   		movw	[sp], ax
 827 0646 C9 F0 2A 00             		movw	r8, #42
 828 064a AE F8                   		movw	ax, sp
 829 064c BD F0                   		movw	r8, ax
 830 064e 04 2A 00                		addw	ax, #42
 831 0651 BD F0                   		movw	r8, ax
 832 0653 04 DF FF                		addw	ax, #-33
 833 0656 B8 02                   		movw	[sp+2], ax
 834 0658 FC 00 00 00             		call	!!%code(_strcpy)
 835 065c C9 F2 2A 00             		movw	r10, #42
 836 0660 AE F8                   		movw	ax, sp
 837 0662 BD F2                   		movw	r10, ax
 838 0664 04 2A 00                		addw	ax, #42
 839 0667 BD F2                   		movw	r10, ax
 840 0669 04 DF FF                		addw	ax, #-33
 841 066c B8 00                   		movw	[sp], ax
 842 066e FC 00 00 00             		call	!!%code(_strlen)
 843 0672 AD F0                   		movw	ax, r8
 844 0674 BF 00 00                		movw	!_count, ax
 166:../src/user_functions.c **** 
 167:../src/user_functions.c **** 				  break;
 845                             		.loc 1 167 0
 846 0677 EC C8 06 00             		br	!!.L9
 847                             	.L18:
 168:../src/user_functions.c **** 		 case'B': setRTC();
 848                             		.loc 1 168 0
 849 067b FC 00 00 00             		call	!!%code(_setRTC)
 169:../src/user_functions.c **** 			      break;
 850                             		.loc 1 169 0
 851 067f EC C8 06 00             		br	!!.L9
 852                             	.L10:
 170:../src/user_functions.c **** 
 171:../src/user_functions.c **** 
 172:../src/user_functions.c **** 		default:
 173:../src/user_functions.c **** 				 strcpy(response, "$");
 853                             		.loc 1 173 0
 854 0683 51 24                   		mov	a, #36
 855 0685 9F 04 00                		mov	!_response, a
 856 0688 F5 05 00                		clrb	!_response+1
 174:../src/user_functions.c **** 				 strcat(response, &record[1]);
 857                             		.loc 1 174 0
 858 068b 30 04 00                		movw	ax, #_response
 859 068e B8 00                   		movw	[sp], ax
 860 0690 30 00 00                		movw	ax, #_record+1
 861 0693 B8 02                   		movw	[sp+2], ax
 862 0695 FC 00 00 00             		call	!!%code(_strcat)
 175:../src/user_functions.c **** 				 strcat(response, "1\x0d\x0a"); count = 5;
 863                             		.loc 1 175 0
 864 0699 30 04 00                		movw	ax, #_response
 865 069c B8 00                   		movw	[sp], ax
 866 069e FC 00 00 00             		call	!!%code(_strlen)
 867 06a2 AD F0                   		movw	ax, r8
 868 06a4 04 04 00                		addw	ax, #_response
 869 06a7 BD F0                   		movw	r8, ax
 870 06a9 BD F4                   		movw	r12, ax
 871 06ab DA F4                   		movw	bc, r12
 872 06ad 51 31                   		mov	a, #49
 873 06af 48 00 00                		mov	[bc], a
 874 06b2 DA F0                   		movw	bc, r8
 875 06b4 51 0D                   		mov	a, #13
 876 06b6 48 01 00                		mov	1[bc], a
 877 06b9 51 0A                   		mov	a, #10
 878 06bb 48 02 00                		mov	2[bc], a
 879 06be F1                      		clrb	a
 880 06bf 48 03 00                		mov	3[bc], a
 881 06c2 30 05 00                		movw	ax, #5
 882 06c5 BF 00 00                		movw	!_count, ax
 883                             	.L9:
 176:../src/user_functions.c **** 
 177:../src/user_functions.c **** 		}
 178:../src/user_functions.c **** 	}
 179:../src/user_functions.c **** 
 180:../src/user_functions.c **** 	R_UART1_Send(response, count);
 884                             		.loc 1 180 0
 885 06c8 AF 00 00                		movw	ax, !_count
 886 06cb BD F0                   		movw	r8, ax
 887 06cd 30 04 00                		movw	ax, #_response
 888 06d0 B8 00                   		movw	[sp], ax
 889 06d2 AD F0                   		movw	ax, r8
 890 06d4 B8 02                   		movw	[sp+2], ax
 891 06d6 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 181:../src/user_functions.c **** }
 892                             		.loc 1 181 0
 893 06da 10 2A                   		addw	sp, #42
 894 06dc D7                      		ret
 895                             	.LFE1:
 897                             		.global	_errorTest
 899                             	_errorTest:
 900                             	.LFB2:
 182:../src/user_functions.c **** 
 183:../src/user_functions.c **** int errorTest(){
 901                             		.loc 1 183 0
 902                             		; start of function
 903                             		; locals: 8 bytes
 904                             		; outgoing: 4 bytes
 905 06dd 20 0C                   		subw	sp, #12
 906                             	.LCFI2:
 184:../src/user_functions.c **** 
 185:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 186:../src/user_functions.c **** //	}
 187:../src/user_functions.c **** //	else{
 188:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 189:../src/user_functions.c **** //		strcpy(record, validChar);
 190:../src/user_functions.c **** //		count = 5;
 191:../src/user_functions.c **** //		return 0;
 192:../src/user_functions.c **** //	}
 193:../src/user_functions.c **** 
 194:../src/user_functions.c **** 	if(record[strlen(record) - 1] != '\x0a'){	//INVALID PARAMETERS
 907                             		.loc 1 194 0
 908 06df 30 00 00                		movw	ax, #_record
 909 06e2 B8 00                   		movw	[sp], ax
 910 06e4 FC 00 00 00             		call	!!%code(_strlen)
 911 06e8 B6 F0                   		decw	r8
 912 06ea AD F0                   		movw	ax, r8
 913 06ec 04 00 00                		addw	ax, #_record
 914 06ef 16                      		movw	hl, ax
 915 06f0 8B                      		mov	a, [hl]
 916 06f1 9D F0                   		mov	r8, a
 917 06f3 4A F0 0A                		cmp	r8, #10
 918 06f6 61 F8                   		 sknz
 919 06f8 EC 3B 07 00             		 br	!!.L34
 920                             	.LBB2:
 195:../src/user_functions.c **** 		char validChar[] = {'$',record[1],'2','\x0d','\x0a'};
 921                             		.loc 1 195 0
 922 06fc 51 24                   		mov	a, #36
 923 06fe 98 07                   		mov	[sp+7], a
 924 0700 8F 00 00                		mov	a, !_record+1
 925 0703 9D F0                   		mov	r8, a
 926 0705 98 08                   		mov	[sp+8], a
 927 0707 51 32                   		mov	a, #50
 928 0709 98 09                   		mov	[sp+9], a
 929 070b 51 0D                   		mov	a, #13
 930 070d 98 0A                   		mov	[sp+10], a
 931 070f 51 0A                   		mov	a, #10
 932 0711 98 0B                   		mov	[sp+11], a
 196:../src/user_functions.c **** 		strcpy(record, validChar);
 933                             		.loc 1 196 0
 934 0713 30 00 00                		movw	ax, #_record
 935 0716 B8 00                   		movw	[sp], ax
 936 0718 C9 F0 0C 00             		movw	r8, #12
 937 071c AE F8                   		movw	ax, sp
 938 071e BD F0                   		movw	r8, ax
 939 0720 04 0C 00                		addw	ax, #12
 940 0723 BD F0                   		movw	r8, ax
 941 0725 04 FB FF                		addw	ax, #-5
 942 0728 B8 02                   		movw	[sp+2], ax
 943 072a FC 00 00 00             		call	!!%code(_strcpy)
 197:../src/user_functions.c **** 		count = 5;
 944                             		.loc 1 197 0
 945 072e 30 05 00                		movw	ax, #5
 946 0731 BF 00 00                		movw	!_count, ax
 198:../src/user_functions.c **** 		return 0;
 947                             		.loc 1 198 0
 948 0734 F6                      		clrw	ax
 949 0735 B8 04                   		movw	[sp+4], ax
 950 0737 EC 3E 07 00             		br	!!.L35
 951                             	.L34:
 952                             	.LBE2:
 199:../src/user_functions.c **** 	}
 200:../src/user_functions.c **** 
 201:../src/user_functions.c **** 	return 1;
 953                             		.loc 1 201 0
 954 073b E6                      		onew	ax
 955 073c B8 04                   		movw	[sp+4], ax
 956                             	.L35:
 957 073e A8 04                   		movw	ax, [sp+4]
 958 0740 BD F0                   		movw	r8, ax
 202:../src/user_functions.c **** }
 959                             		.loc 1 202 0 discriminator 1
 960 0742 10 0C                   		addw	sp, #12
 961 0744 D7                      		ret
 962                             	.LFE2:
 964                             		.global	_displayLCD
 966                             	_displayLCD:
 967                             	.LFB3:
 203:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 204:../src/user_functions.c **** //reset = 0 just keep going
 205:../src/user_functions.c **** 
 206:../src/user_functions.c **** void displayLCD(int reset){
 968                             		.loc 1 206 0
 969                             		; start of function
 970                             		; push 2: r16
 971                             		; locals: 2 bytes
 972                             		; outgoing: 4 bytes
 973 0745 61 EF                   		sel	rb2
 974 0747 C1                      		push	ax ; r16
 975                             	.LCFI3:
 976 0748 61 CF                   		sel	rb0
 977 074a 20 06                   		subw	sp, #6
 978                             	.LCFI4:
 207:../src/user_functions.c **** 
 208:../src/user_functions.c **** if(reset){
 979                             		.loc 1 208 0
 980 074c A8 0C                   		movw	ax, [sp+12]
 981 074e 44 00 00                		cmpw	ax, #0
 982 0751 61 F8                   		 sknz
 983 0753 EC 67 07 00             		 br	!!.L37
 984                             	.LBB3:
 209:../src/user_functions.c **** 	offset = 0;
 985                             		.loc 1 209 0
 986 0757 F6                      		clrw	ax
 987 0758 BF 3A 00                		movw	!_offset, ax
 210:../src/user_functions.c **** 	display = 1;
 988                             		.loc 1 210 0
 989 075b E6                      		onew	ax
 990 075c BF 38 00                		movw	!_display, ax
 211:../src/user_functions.c **** 	interval_timer_count = 0;
 991                             		.loc 1 211 0
 992 075f F6                      		clrw	ax
 993 0760 BF 00 00                		movw	!_interval_timer_count, ax
 212:../src/user_functions.c **** 	R_IT_Start();
 994                             		.loc 1 212 0
 995 0763 FC 00 00 00             		call	!!%code(_R_IT_Start)
 996                             	.L37:
 997                             	.LBE3:
 213:../src/user_functions.c **** }
 214:../src/user_functions.c **** 
 215:../src/user_functions.c **** if(display){
 998                             		.loc 1 215 0
 999 0767 AF 38 00                		movw	ax, !_display
 1000 076a BD F0                   		movw	r8, ax
 1001 076c 44 00 00                		cmpw	ax, #0
 1002 076f 61 F8                   		 sknz
 1003 0771 EC 21 08 00             		 br	!!.L38
 1004                             	.LBB4:
 216:../src/user_functions.c **** 
 217:../src/user_functions.c **** 	int i;
 218:../src/user_functions.c **** 
 219:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1005                             		.loc 1 219 0
 1006 0775 F1                      		clrb	a
 1007 0776 98 00                   		mov	[sp], a
 1008 0778 E1                      		oneb	a
 1009 0779 98 02                   		mov	[sp+2], a
 1010 077b FC 00 00 00             		call	!!%code(_writeByteLcd)
 220:../src/user_functions.c **** 	delayNoInt(1640);
 1011                             		.loc 1 220 0
 1012 077f 30 68 06                		movw	ax, #1640
 1013 0782 B8 00                   		movw	[sp], ax
 1014 0784 FC 00 00 00             		call	!!%code(_delayNoInt)
 221:../src/user_functions.c **** 
 222:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1015                             		.loc 1 222 0
 1016 0788 F1                      		clrb	a
 1017 0789 98 00                   		mov	[sp], a
 1018 078b 51 80                   		mov	a, #-128
 1019 078d 98 02                   		mov	[sp+2], a
 1020 078f FC 00 00 00             		call	!!%code(_writeByteLcd)
 223:../src/user_functions.c **** 	delayNoInt(1640);
 1021                             		.loc 1 223 0
 1022 0793 30 68 06                		movw	ax, #1640
 1023 0796 B8 00                   		movw	[sp], ax
 1024 0798 FC 00 00 00             		call	!!%code(_delayNoInt)
 224:../src/user_functions.c **** 
 225:../src/user_functions.c **** 	for(i = offset; i < strlen(display_string) - 2; i++){
 1025                             		.loc 1 225 0
 1026 079c AF 3A 00                		movw	ax, !_offset
 1027 079f BD F0                   		movw	r8, ax
 1028 07a1 B8 04                   		movw	[sp+4], ax
 1029 07a3 EC FA 07 00             		br	!!.L39
 1030                             	.L41:
 226:../src/user_functions.c **** 
 227:../src/user_functions.c **** 		if(i == (8 + offset)){
 1031                             		.loc 1 227 0
 1032 07a7 AF 3A 00                		movw	ax, !_offset
 1033 07aa BD F0                   		movw	r8, ax
 1034 07ac 04 08 00                		addw	ax, #8
 1035 07af BD F2                   		movw	r10, ax
 1036 07b1 A8 04                   		movw	ax, [sp+4]
 1037 07b3 BD F0                   		movw	r8, ax
 1038 07b5 AD F2                   		movw	ax, r10
 1039 07b7 46 F0                   		cmpw	ax, r8
 1040 07b9 61 E8                   		 skz
 1041 07bb EC D3 07 00             		 br	!!.L40
 228:../src/user_functions.c **** 			writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1042                             		.loc 1 228 0
 1043 07bf F1                      		clrb	a
 1044 07c0 98 00                   		mov	[sp], a
 1045 07c2 51 C0                   		mov	a, #-64
 1046 07c4 98 02                   		mov	[sp+2], a
 1047 07c6 FC 00 00 00             		call	!!%code(_writeByteLcd)
 229:../src/user_functions.c **** 			delayNoInt(1640);
 1048                             		.loc 1 229 0
 1049 07ca 30 68 06                		movw	ax, #1640
 1050 07cd B8 00                   		movw	[sp], ax
 1051 07cf FC 00 00 00             		call	!!%code(_delayNoInt)
 1052                             	.L40:
 230:../src/user_functions.c **** 		}
 231:../src/user_functions.c **** 
 232:../src/user_functions.c **** 		writeByteLcd(LCD_DATA_WR, display_string[i]);
 1053                             		.loc 1 232 0 discriminator 2
 1054 07d3 A8 04                   		movw	ax, [sp+4]
 1055 07d5 04 00 00                		addw	ax, #_display_string
 1056 07d8 BD F0                   		movw	r8, ax
 1057 07da BD F2                   		movw	r10, ax
 1058 07dc FA F2                   		movw	hl, r10
 1059 07de 8B                      		mov	a, [hl]
 1060 07df 9D F0                   		mov	r8, a
 1061 07e1 E1                      		oneb	a
 1062 07e2 98 00                   		mov	[sp], a
 1063 07e4 8D F0                   		mov	a, r8
 1064 07e6 98 02                   		mov	[sp+2], a
 1065 07e8 FC 00 00 00             		call	!!%code(_writeByteLcd)
 233:../src/user_functions.c **** 		delayNoInt(40);
 1066                             		.loc 1 233 0 discriminator 2
 1067 07ec 30 28 00                		movw	ax, #40
 1068 07ef B8 00                   		movw	[sp], ax
 1069 07f1 FC 00 00 00             		call	!!%code(_delayNoInt)
 225:../src/user_functions.c **** 
 1070                             		.loc 1 225 0 discriminator 2
 1071 07f5 A8 04                   		movw	ax, [sp+4]
 1072 07f7 A1                      		incw	ax
 1073 07f8 B8 04                   		movw	[sp+4], ax
 1074                             	.L39:
 225:../src/user_functions.c **** 
 1075                             		.loc 1 225 0 is_stmt 0 discriminator 1
 1076 07fa A8 04                   		movw	ax, [sp+4]
 1077 07fc BD E8                   		movw	r16, ax
 1078 07fe 30 00 00                		movw	ax, #_display_string
 1079 0801 B8 00                   		movw	[sp], ax
 1080 0803 FC 00 00 00             		call	!!%code(_strlen)
 1081 0807 B6 F0                   		decw	r8 
 1082 0809 B6 F0                   		decw	r8
 1083 080b AD E8                   		movw	ax, r16
 1084 080d 46 F0                   		cmpw	ax, r8
 1085 080f 61 D8                   		 sknc
 1086 0811 EC A7 07 00             		 br	!!.L41
 234:../src/user_functions.c **** 
 235:../src/user_functions.c **** 	}
 236:../src/user_functions.c **** 	offset++;
 1087                             		.loc 1 236 0 is_stmt 1
 1088 0815 AF 3A 00                		movw	ax, !_offset
 1089 0818 BD F0                   		movw	r8, ax
 1090 081a A6 F0                   		incw	r8
 1091 081c AD F0                   		movw	ax, r8
 1092 081e BF 3A 00                		movw	!_offset, ax
 1093                             	.L38:
 1094                             	.LBE4:
 237:../src/user_functions.c **** 
 238:../src/user_functions.c **** }
 239:../src/user_functions.c **** 
 240:../src/user_functions.c **** if(offset >= (strlen(display_string) - 17) || strlen(display_string) <= 18 ){
 1095                             		.loc 1 240 0
 1096 0821 AF 3A 00                		movw	ax, !_offset
 1097 0824 BD F0                   		movw	r8, ax
 1098 0826 BD E8                   		movw	r16, ax
 1099 0828 30 00 00                		movw	ax, #_display_string
 1100 082b B8 00                   		movw	[sp], ax
 1101 082d FC 00 00 00             		call	!!%code(_strlen)
 1102 0831 AD F0                   		movw	ax, r8
 1103 0833 04 EF FF                		addw	ax, #-17
 1104 0836 BD F0                   		movw	r8, ax
 1105 0838 AD E8                   		movw	ax, r16
 1106 083a 46 F0                   		cmpw	ax, r8
 1107 083c 61 C8                   		 skc
 1108 083e EC 56 08 00             		 br	!!.L42
 1109                             		.loc 1 240 0 is_stmt 0 discriminator 1
 1110 0842 30 00 00                		movw	ax, #_display_string
 1111 0845 B8 00                   		movw	[sp], ax
 1112 0847 FC 00 00 00             		call	!!%code(_strlen)
 1113 084b AD F0                   		movw	ax, r8
 1114 084d 44 12 00                		cmpw	ax, #18
 1115 0850 61 F3                   		 sknh
 1116 0852 EC 5E 08 00             		 br	!!.L36
 1117                             	.L42:
 1118                             	.LBB5:
 241:../src/user_functions.c **** 	display = 0;
 1119                             		.loc 1 241 0 is_stmt 1
 1120 0856 F6                      		clrw	ax
 1121 0857 BF 38 00                		movw	!_display, ax
 242:../src/user_functions.c **** 	R_IT_Stop();
 1122                             		.loc 1 242 0
 1123 085a FC 00 00 00             		call	!!%code(_R_IT_Stop)
 1124                             	.L36:
 1125                             	.LBE5:
 243:../src/user_functions.c **** }
 244:../src/user_functions.c **** 
 245:../src/user_functions.c **** }
 1126                             		.loc 1 245 0
 1127 085e 10 06                   		addw	sp, #6
 1128 0860 61 EF                   		sel	rb2
 1129 0862 C0                      		pop	ax ; r16
 1130 0863 61 CF                   		sel	rb0
 1131 0865 D7                      		ret
 1132                             	.LFE3:
 1134                             		.global	_collectADC
 1136                             	_collectADC:
 1137                             	.LFB4:
 246:../src/user_functions.c **** 
 247:../src/user_functions.c **** void collectADC(){
 1138                             		.loc 1 247 0
 1139                             		; start of function
 1140                             		; outgoing: 2 bytes
 1141 0866 20 02                   		subw	sp, #2
 1142                             	.LCFI5:
 248:../src/user_functions.c **** 
 249:../src/user_functions.c **** 	 ADS = _00_AD_INPUT_CHANNEL_0;
 1143                             		.loc 1 249 0
 1144 0868 C9 F0 31 FF             		movw	r8, #-207
 1145 086c AD F0                   		movw	ax, r8
 1146 086e BD F2                   		movw	r10, ax
 1147 0870 DA F2                   		movw	bc, r10
 1148 0872 F1                      		clrb	a
 1149 0873 48 00 00                		mov	[bc], a
 250:../src/user_functions.c **** 	 R_ADC_Start();
 1150                             		.loc 1 250 0
 1151 0876 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 251:../src/user_functions.c **** 	 while(ADCS);
 1152                             		.loc 1 251 0
 1153 087a 00                      		nop
 1154                             	.L45:
 1155                             		.loc 1 251 0 is_stmt 0 discriminator 1
 1156 087b C9 F0 30 FF             		movw	r8, #-208
 1157 087f AD F0                   		movw	ax, r8
 1158 0881 BD F2                   		movw	r10, ax
 1159 0883 FA F2                   		movw	hl, r10
 1160 0885 8B                      		mov	a, [hl]
 1161 0886 9D F0                   		mov	r8, a
 1162 0888 31 7A                   		shr	a, 7
 1163 088a 9D F0                   		mov	r8, a
 1164 088c D4 F0                   		cmp0	r8
 1165 088e 61 E8                   		 skz
 1166 0890 EC 7B 08 00             		 br	!!.L45
 252:../src/user_functions.c **** 	 R_ADC_Start();
 1167                             		.loc 1 252 0 is_stmt 1
 1168 0894 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 253:../src/user_functions.c **** 	 while(ADCS);
 1169                             		.loc 1 253 0
 1170 0898 00                      		nop
 1171                             	.L46:
 1172                             		.loc 1 253 0 is_stmt 0 discriminator 1
 1173 0899 C9 F0 30 FF             		movw	r8, #-208
 1174 089d AD F0                   		movw	ax, r8
 1175 089f BD F2                   		movw	r10, ax
 1176 08a1 FA F2                   		movw	hl, r10
 1177 08a3 8B                      		mov	a, [hl]
 1178 08a4 9D F0                   		mov	r8, a
 1179 08a6 31 7A                   		shr	a, 7
 1180 08a8 9D F0                   		mov	r8, a
 1181 08aa D4 F0                   		cmp0	r8
 1182 08ac 61 E8                   		 skz
 1183 08ae EC 99 08 00             		 br	!!.L46
 254:../src/user_functions.c **** 
 255:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&voltage);
 1184                             		.loc 1 255 0 is_stmt 1
 1185 08b2 30 00 00                		movw	ax, #_voltage
 1186 08b5 B8 00                   		movw	[sp], ax
 1187 08b7 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 256:../src/user_functions.c **** 	 voltage = voltage >> 1;
 1188                             		.loc 1 256 0
 1189 08bb 8F 00 00                		mov	a, !_voltage
 1190 08be 9D F0                   		mov	r8, a
 1191 08c0 31 1A                   		shr	a, 1
 1192 08c2 9D F0                   		mov	r8, a
 1193 08c4 9F 00 00                		mov	!_voltage, a
 257:../src/user_functions.c **** 
 258:../src/user_functions.c **** 	 ADS = _02_AD_INPUT_CHANNEL_2;
 1194                             		.loc 1 258 0
 1195 08c7 C9 F0 31 FF             		movw	r8, #-207
 1196 08cb AD F0                   		movw	ax, r8
 1197 08cd BD F2                   		movw	r10, ax
 1198 08cf DA F2                   		movw	bc, r10
 1199 08d1 51 02                   		mov	a, #2
 1200 08d3 48 00 00                		mov	[bc], a
 259:../src/user_functions.c **** 	 R_ADC_Start();
 1201                             		.loc 1 259 0
 1202 08d6 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 260:../src/user_functions.c **** 	 while(ADCS);
 1203                             		.loc 1 260 0
 1204 08da 00                      		nop
 1205                             	.L47:
 1206                             		.loc 1 260 0 is_stmt 0 discriminator 1
 1207 08db C9 F0 30 FF             		movw	r8, #-208
 1208 08df AD F0                   		movw	ax, r8
 1209 08e1 BD F2                   		movw	r10, ax
 1210 08e3 FA F2                   		movw	hl, r10
 1211 08e5 8B                      		mov	a, [hl]
 1212 08e6 9D F0                   		mov	r8, a
 1213 08e8 31 7A                   		shr	a, 7
 1214 08ea 9D F0                   		mov	r8, a
 1215 08ec D4 F0                   		cmp0	r8
 1216 08ee 61 E8                   		 skz
 1217 08f0 EC DB 08 00             		 br	!!.L47
 261:../src/user_functions.c **** 	 R_ADC_Start();
 1218                             		.loc 1 261 0 is_stmt 1
 1219 08f4 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 262:../src/user_functions.c **** 	 while(ADCS);
 1220                             		.loc 1 262 0
 1221 08f8 00                      		nop
 1222                             	.L48:
 1223                             		.loc 1 262 0 is_stmt 0 discriminator 1
 1224 08f9 C9 F0 30 FF             		movw	r8, #-208
 1225 08fd AD F0                   		movw	ax, r8
 1226 08ff BD F2                   		movw	r10, ax
 1227 0901 FA F2                   		movw	hl, r10
 1228 0903 8B                      		mov	a, [hl]
 1229 0904 9D F0                   		mov	r8, a
 1230 0906 31 7A                   		shr	a, 7
 1231 0908 9D F0                   		mov	r8, a
 1232 090a D4 F0                   		cmp0	r8
 1233 090c 61 E8                   		 skz
 1234 090e EC F9 08 00             		 br	!!.L48
 263:../src/user_functions.c **** 
 264:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current2);
 1235                             		.loc 1 264 0 is_stmt 1
 1236 0912 30 00 00                		movw	ax, #_current2
 1237 0915 B8 00                   		movw	[sp], ax
 1238 0917 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 265:../src/user_functions.c **** 	 current2 = current2 >> 2;
 1239                             		.loc 1 265 0
 1240 091b 8F 00 00                		mov	a, !_current2
 1241 091e 9D F0                   		mov	r8, a
 1242 0920 31 2A                   		shr	a, 2
 1243 0922 9D F0                   		mov	r8, a
 1244 0924 9F 00 00                		mov	!_current2, a
 266:../src/user_functions.c **** 
 267:../src/user_functions.c **** }
 1245                             		.loc 1 267 0
 1246 0927 10 02                   		addw	sp, #2
 1247 0929 D7                      		ret
 1248                             	.LFE4:
 1250                             		.section	.rodata
 1251                             	.LC2:
 1252 0019 24 25 64 0D 0A 00       		.string	"$%d\r\n"
 1253                             	.text
 1254                             		.global	_setRTC
 1256                             	_setRTC:
 1257                             	.LFB5:
 268:../src/user_functions.c **** 
 269:../src/user_functions.c **** void setRTC(){
 1258                             		.loc 1 269 0
 1259                             		; start of function
 1260                             		; locals: 20 bytes
 1261                             		; outgoing: 8 bytes
 1262 092a 20 1C                   		subw	sp, #28
 1263                             	.LCFI6:
 270:../src/user_functions.c **** 	uint8_t date[] = {0,0,0,0,0,0};
 1264                             		.loc 1 270 0
 1265 092c F1                      		clrb	a
 1266 092d 98 13                   		mov	[sp+19], a
 1267 092f F1                      		clrb	a
 1268 0930 98 14                   		mov	[sp+20], a
 1269 0932 F1                      		clrb	a
 1270 0933 98 15                   		mov	[sp+21], a
 1271 0935 F1                      		clrb	a
 1272 0936 98 16                   		mov	[sp+22], a
 1273 0938 F1                      		clrb	a
 1274 0939 98 17                   		mov	[sp+23], a
 1275 093b F1                      		clrb	a
 1276 093c 98 18                   		mov	[sp+24], a
 271:../src/user_functions.c **** 	count = 4;
 1277                             		.loc 1 271 0
 1278 093e 30 04 00                		movw	ax, #4
 1279 0941 BF 00 00                		movw	!_count, ax
 272:../src/user_functions.c **** 	int dateCount = 0;
 1280                             		.loc 1 272 0
 1281 0944 F6                      		clrw	ax
 1282 0945 B8 1A                   		movw	[sp+26], ax
 273:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** 	while(record[count] != '\r'){
 1283                             		.loc 1 275 0
 1284 0947 EC 0A 0A 00             		br	!!.L50
 1285                             	.L52:
 276:../src/user_functions.c **** 
 277:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1286                             		.loc 1 277 0
 1287 094b AE F8                   		movw	ax, sp
 1288 094d BD F2                   		movw	r10, ax
 1289 094f 04 13 00                		addw	ax, #19
 1290 0952 BD F0                   		movw	r8, ax
 1291 0954 A8 1A                   		movw	ax, [sp+26]
 1292 0956 06 F0                   		addw	ax, r8
 1293 0958 BD F0                   		movw	r8, ax
 1294 095a BD F4                   		movw	r12, ax
 1295 095c FA F4                   		movw	hl, r12
 1296 095e 8B                      		mov	a, [hl]
 1297 095f 9D F2                   		mov	r10, a
 1298 0961 AF 00 00                		movw	ax, !_count
 1299 0964 BD F0                   		movw	r8, ax
 1300 0966 04 00 00                		addw	ax, #_record
 1301 0969 16                      		movw	hl, ax
 1302 096a 8B                      		mov	a, [hl]
 1303 096b 9D F0                   		mov	r8, a
 1304 096d 76                      		mov	l, a
 1305 096e 8D F2                   		mov	a, r10
 1306 0970 61 0E                   		add	a, l
 1307 0972 9D F0                   		mov	r8, a
 1308 0974 0C D0                   		add	a, #-48
 1309 0976 9D F2                   		mov	r10, a
 1310 0978 AE F8                   		movw	ax, sp
 1311 097a BD F4                   		movw	r12, ax
 1312 097c 04 13 00                		addw	ax, #19
 1313 097f BD F0                   		movw	r8, ax
 1314 0981 A8 1A                   		movw	ax, [sp+26]
 1315 0983 06 F0                   		addw	ax, r8
 1316 0985 BD F0                   		movw	r8, ax
 1317 0987 BD F4                   		movw	r12, ax
 1318 0989 DA F4                   		movw	bc, r12
 1319 098b 8D F2                   		mov	a, r10
 1320 098d 48 00 00                		mov	[bc], a
 278:../src/user_functions.c **** 		count++;
 1321                             		.loc 1 278 0
 1322 0990 AF 00 00                		movw	ax, !_count
 1323 0993 BD F0                   		movw	r8, ax
 1324 0995 A6 F0                   		incw	r8
 1325 0997 AD F0                   		movw	ax, r8
 1326 0999 BF 00 00                		movw	!_count, ax
 279:../src/user_functions.c **** 		if(record[count] == ','){
 1327                             		.loc 1 279 0
 1328 099c BD F0                   		movw	r8, ax
 1329 099e 04 00 00                		addw	ax, #_record
 1330 09a1 16                      		movw	hl, ax
 1331 09a2 8B                      		mov	a, [hl]
 1332 09a3 9D F0                   		mov	r8, a
 1333 09a5 4A F0 2C                		cmp	r8, #44
 1334 09a8 61 E8                   		 skz
 1335 09aa EC C3 09 00             		 br	!!.L51
 280:../src/user_functions.c **** 			dateCount++;
 1336                             		.loc 1 280 0
 1337 09ae A8 1A                   		movw	ax, [sp+26]
 1338 09b0 A1                      		incw	ax
 1339 09b1 B8 1A                   		movw	[sp+26], ax
 281:../src/user_functions.c **** 			count++;
 1340                             		.loc 1 281 0
 1341 09b3 AF 00 00                		movw	ax, !_count
 1342 09b6 BD F0                   		movw	r8, ax
 1343 09b8 A6 F0                   		incw	r8
 1344 09ba AD F0                   		movw	ax, r8
 1345 09bc BF 00 00                		movw	!_count, ax
 1346 09bf EC 0A 0A 00             		br	!!.L50
 1347                             	.L51:
 282:../src/user_functions.c **** 		}
 283:../src/user_functions.c **** 		else if(record[count] == '\r'){
 1348                             		.loc 1 283 0
 1349 09c3 AF 00 00                		movw	ax, !_count
 1350 09c6 BD F0                   		movw	r8, ax
 1351 09c8 04 00 00                		addw	ax, #_record
 1352 09cb 16                      		movw	hl, ax
 1353 09cc 8B                      		mov	a, [hl]
 1354 09cd 9D F0                   		mov	r8, a
 1355 09cf 4A F0 0D                		cmp	r8, #13
 1356 09d2 61 F8                   		 sknz
 1357 09d4 EC 0A 0A 00             		 br	!!.L50
 284:../src/user_functions.c **** 
 285:../src/user_functions.c **** 		}
 286:../src/user_functions.c **** 		else{
 287:../src/user_functions.c **** 			date[dateCount] = date[dateCount]<<4;
 1358                             		.loc 1 287 0
 1359 09d8 AE F8                   		movw	ax, sp
 1360 09da BD F2                   		movw	r10, ax
 1361 09dc 04 13 00                		addw	ax, #19
 1362 09df BD F0                   		movw	r8, ax
 1363 09e1 A8 1A                   		movw	ax, [sp+26]
 1364 09e3 06 F0                   		addw	ax, r8
 1365 09e5 BD F0                   		movw	r8, ax
 1366 09e7 BD F4                   		movw	r12, ax
 1367 09e9 FA F4                   		movw	hl, r12
 1368 09eb 8B                      		mov	a, [hl]
 1369 09ec 9D F0                   		mov	r8, a
 1370 09ee 31 49                   		shl	a, 4
 1371 09f0 9D F2                   		mov	r10, a
 1372 09f2 AE F8                   		movw	ax, sp
 1373 09f4 BD F4                   		movw	r12, ax
 1374 09f6 04 13 00                		addw	ax, #19
 1375 09f9 BD F0                   		movw	r8, ax
 1376 09fb A8 1A                   		movw	ax, [sp+26]
 1377 09fd 06 F0                   		addw	ax, r8
 1378 09ff BD F0                   		movw	r8, ax
 1379 0a01 BD F4                   		movw	r12, ax
 1380 0a03 DA F4                   		movw	bc, r12
 1381 0a05 8D F2                   		mov	a, r10
 1382 0a07 48 00 00                		mov	[bc], a
 1383                             	.L50:
 275:../src/user_functions.c **** 
 1384                             		.loc 1 275 0
 1385 0a0a AF 00 00                		movw	ax, !_count
 1386 0a0d BD F0                   		movw	r8, ax
 1387 0a0f 04 00 00                		addw	ax, #_record
 1388 0a12 16                      		movw	hl, ax
 1389 0a13 8B                      		mov	a, [hl]
 1390 0a14 9D F0                   		mov	r8, a
 1391 0a16 4A F0 0D                		cmp	r8, #13
 1392 0a19 61 E8                   		 skz
 1393 0a1b EC 4B 09 00             		 br	!!.L52
 288:../src/user_functions.c **** 		}
 289:../src/user_functions.c **** 
 290:../src/user_functions.c **** 	}
 291:../src/user_functions.c **** 
 292:../src/user_functions.c **** 	theDate.year = date[0];
 1394                             		.loc 1 292 0
 1395 0a1f 88 13                   		mov	a, [sp+19]
 1396 0a21 9D F0                   		mov	r8, a
 1397 0a23 98 12                   		mov	[sp+18], a
 293:../src/user_functions.c **** 	theDate.month = date[1];
 1398                             		.loc 1 293 0
 1399 0a25 88 14                   		mov	a, [sp+20]
 1400 0a27 9D F0                   		mov	r8, a
 1401 0a29 98 11                   		mov	[sp+17], a
 294:../src/user_functions.c **** 	theDate.day = date[2];
 1402                             		.loc 1 294 0
 1403 0a2b 88 15                   		mov	a, [sp+21]
 1404 0a2d 9D F0                   		mov	r8, a
 1405 0a2f 98 0F                   		mov	[sp+15], a
 295:../src/user_functions.c **** 	theDate.hour = date[3];
 1406                             		.loc 1 295 0
 1407 0a31 88 16                   		mov	a, [sp+22]
 1408 0a33 9D F0                   		mov	r8, a
 1409 0a35 98 0E                   		mov	[sp+14], a
 296:../src/user_functions.c **** 	theDate.min = date[4];
 1410                             		.loc 1 296 0
 1411 0a37 88 17                   		mov	a, [sp+23]
 1412 0a39 9D F0                   		mov	r8, a
 1413 0a3b 98 0D                   		mov	[sp+13], a
 297:../src/user_functions.c **** 	theDate.sec = date[5];
 1414                             		.loc 1 297 0
 1415 0a3d 88 18                   		mov	a, [sp+24]
 1416 0a3f 9D F0                   		mov	r8, a
 1417 0a41 98 0C                   		mov	[sp+12], a
 298:../src/user_functions.c **** 
 299:../src/user_functions.c **** 	char str[4];
 300:../src/user_functions.c **** 	uint8_t ack = 0;
 1418                             		.loc 1 300 0
 1419 0a43 F1                      		clrb	a
 1420 0a44 98 19                   		mov	[sp+25], a
 301:../src/user_functions.c **** 	sprintf(str, "$%d\x0d\x0a", date[0]); count = strlen(str);
 1421                             		.loc 1 301 0
 1422 0a46 88 13                   		mov	a, [sp+19]
 1423 0a48 9D F0                   		mov	r8, a
 1424 0a4a CD F1 00                		mov	r9, #0
 1425 0a4d C9 F2 1C 00             		movw	r10, #28
 1426 0a51 AE F8                   		movw	ax, sp
 1427 0a53 BD F2                   		movw	r10, ax
 1428 0a55 04 1C 00                		addw	ax, #28
 1429 0a58 BD F2                   		movw	r10, ax
 1430 0a5a 04 EC FF                		addw	ax, #-20
 1431 0a5d B8 00                   		movw	[sp], ax
 1432 0a5f 30 19 00                		movw	ax, #.LC2
 1433 0a62 B8 02                   		movw	[sp+2], ax
 1434 0a64 AD F0                   		movw	ax, r8
 1435 0a66 B8 04                   		movw	[sp+4], ax
 1436 0a68 FC 00 00 00             		call	!!%code(_sprintf)
 1437 0a6c C9 F4 1C 00             		movw	r12, #28
 1438 0a70 AE F8                   		movw	ax, sp
 1439 0a72 BD F4                   		movw	r12, ax
 1440 0a74 04 1C 00                		addw	ax, #28
 1441 0a77 BD F4                   		movw	r12, ax
 1442 0a79 04 EC FF                		addw	ax, #-20
 1443 0a7c B8 00                   		movw	[sp], ax
 1444 0a7e FC 00 00 00             		call	!!%code(_strlen)
 1445 0a82 AD F0                   		movw	ax, r8
 1446 0a84 BF 00 00                		movw	!_count, ax
 302:../src/user_functions.c **** 	strcpy(response, str);
 1447                             		.loc 1 302 0
 1448 0a87 30 04 00                		movw	ax, #_response
 1449 0a8a B8 00                   		movw	[sp], ax
 1450 0a8c C9 F0 1C 00             		movw	r8, #28
 1451 0a90 AE F8                   		movw	ax, sp
 1452 0a92 BD F0                   		movw	r8, ax
 1453 0a94 04 1C 00                		addw	ax, #28
 1454 0a97 BD F0                   		movw	r8, ax
 1455 0a99 04 EC FF                		addw	ax, #-20
 1456 0a9c B8 02                   		movw	[sp+2], ax
 1457 0a9e FC 00 00 00             		call	!!%code(_strcpy)
 303:../src/user_functions.c **** 
 304:../src/user_functions.c **** 	if(ack == 0){
 1458                             		.loc 1 304 0
 1459 0aa2 88 19                   		mov	a, [sp+25]
 1460 0aa4 D1                      		cmp0	a
 1461 0aa5 61 E8                   		 skz
 1462 0aa7 EC C7 0A 00             		 br	!!.L49
 305:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 1463                             		.loc 1 305 0
 1464 0aab A8 0C                   		movw	ax, [sp+12]
 1465 0aad BD F0                   		movw	r8, ax
 1466 0aaf B8 00                   		movw	[sp], ax
 1467 0ab1 A8 0E                   		movw	ax, [sp+14]
 1468 0ab3 BD F0                   		movw	r8, ax
 1469 0ab5 B8 02                   		movw	[sp+2], ax
 1470 0ab7 A8 10                   		movw	ax, [sp+16]
 1471 0ab9 BD F0                   		movw	r8, ax
 1472 0abb B8 04                   		movw	[sp+4], ax
 1473 0abd 88 12                   		mov	a, [sp+18]
 1474 0abf 9D F0                   		mov	r8, a
 1475 0ac1 98 06                   		mov	[sp+6], a
 1476 0ac3 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1477                             	.L49:
 306:../src/user_functions.c **** 	}
 307:../src/user_functions.c **** }
 1478                             		.loc 1 307 0
 1479 0ac7 10 1C                   		addw	sp, #28
 1480 0ac9 D7                      		ret
 1481                             	.LFE5:
 1483                             		.global	_testDate
 1485                             	_testDate:
 1486                             	.LFB6:
 308:../src/user_functions.c **** 
 309:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]){
 1487                             		.loc 1 309 0
 310:../src/user_functions.c **** 
 311:../src/user_functions.c **** 
 312:../src/user_functions.c **** 	if(arr[0] > 153){
 1488                             		.loc 1 312 0
 1489 0aca A8 04                   		movw	ax, [sp+4]
 1490 0acc BD F0                   		movw	r8, ax
 1491 0ace BD F2                   		movw	r10, ax
 1492 0ad0 FA F2                   		movw	hl, r10
 1493 0ad2 8B                      		mov	a, [hl]
 1494 0ad3 9D F0                   		mov	r8, a
 1495 0ad5 4A F0 99                		cmp	r8, #-103
 1496 0ad8 61 E3                   		 skh
 1497 0ada EC E5 0A 00             		 br	!!.L55
 313:../src/user_functions.c **** 		return 2;
 1498                             		.loc 1 313 0
 1499 0ade CD F0 02                		mov	r8, #2
 1500 0ae1 EC 7B 0B 00             		br	!!.L56
 1501                             	.L55:
 314:../src/user_functions.c **** 	}
 315:../src/user_functions.c **** 	if(arr[1] > 18){
 1502                             		.loc 1 315 0
 1503 0ae5 A8 04                   		movw	ax, [sp+4]
 1504 0ae7 A1                      		incw	ax
 1505 0ae8 BD F0                   		movw	r8, ax
 1506 0aea BD F2                   		movw	r10, ax
 1507 0aec FA F2                   		movw	hl, r10
 1508 0aee 8B                      		mov	a, [hl]
 1509 0aef 9D F0                   		mov	r8, a
 1510 0af1 4A F0 12                		cmp	r8, #18
 1511 0af4 61 E3                   		 skh
 1512 0af6 EC 01 0B 00             		 br	!!.L57
 316:../src/user_functions.c **** 		return 2;
 1513                             		.loc 1 316 0
 1514 0afa CD F0 02                		mov	r8, #2
 1515 0afd EC 7B 0B 00             		br	!!.L56
 1516                             	.L57:
 317:../src/user_functions.c **** 	}
 318:../src/user_functions.c **** 	if(arr[2] > 49){
 1517                             		.loc 1 318 0
 1518 0b01 A8 04                   		movw	ax, [sp+4]
 1519 0b03 04 02 00                		addw	ax, #2
 1520 0b06 BD F0                   		movw	r8, ax
 1521 0b08 BD F2                   		movw	r10, ax
 1522 0b0a FA F2                   		movw	hl, r10
 1523 0b0c 8B                      		mov	a, [hl]
 1524 0b0d 9D F0                   		mov	r8, a
 1525 0b0f 4A F0 31                		cmp	r8, #49
 1526 0b12 61 E3                   		 skh
 1527 0b14 EC 1F 0B 00             		 br	!!.L58
 319:../src/user_functions.c **** 		return 2;
 1528                             		.loc 1 319 0
 1529 0b18 CD F0 02                		mov	r8, #2
 1530 0b1b EC 7B 0B 00             		br	!!.L56
 1531                             	.L58:
 320:../src/user_functions.c **** 	}
 321:../src/user_functions.c **** 	if(arr[3] > 36){
 1532                             		.loc 1 321 0
 1533 0b1f A8 04                   		movw	ax, [sp+4]
 1534 0b21 04 03 00                		addw	ax, #3
 1535 0b24 BD F0                   		movw	r8, ax
 1536 0b26 BD F2                   		movw	r10, ax
 1537 0b28 FA F2                   		movw	hl, r10
 1538 0b2a 8B                      		mov	a, [hl]
 1539 0b2b 9D F0                   		mov	r8, a
 1540 0b2d 4A F0 24                		cmp	r8, #36
 1541 0b30 61 E3                   		 skh
 1542 0b32 EC 3D 0B 00             		 br	!!.L59
 322:../src/user_functions.c **** 		return 2;
 1543                             		.loc 1 322 0
 1544 0b36 CD F0 02                		mov	r8, #2
 1545 0b39 EC 7B 0B 00             		br	!!.L56
 1546                             	.L59:
 323:../src/user_functions.c **** 	}
 324:../src/user_functions.c **** 	if(arr[4] > 96){
 1547                             		.loc 1 324 0
 1548 0b3d A8 04                   		movw	ax, [sp+4]
 1549 0b3f 04 04 00                		addw	ax, #4
 1550 0b42 BD F0                   		movw	r8, ax
 1551 0b44 BD F2                   		movw	r10, ax
 1552 0b46 FA F2                   		movw	hl, r10
 1553 0b48 8B                      		mov	a, [hl]
 1554 0b49 9D F0                   		mov	r8, a
 1555 0b4b 4A F0 60                		cmp	r8, #96
 1556 0b4e 61 E3                   		 skh
 1557 0b50 EC 5B 0B 00             		 br	!!.L60
 325:../src/user_functions.c **** 		return 2;
 1558                             		.loc 1 325 0
 1559 0b54 CD F0 02                		mov	r8, #2
 1560 0b57 EC 7B 0B 00             		br	!!.L56
 1561                             	.L60:
 326:../src/user_functions.c **** 	}
 327:../src/user_functions.c **** 	if(arr[5] > 96){
 1562                             		.loc 1 327 0
 1563 0b5b A8 04                   		movw	ax, [sp+4]
 1564 0b5d 04 05 00                		addw	ax, #5
 1565 0b60 BD F0                   		movw	r8, ax
 1566 0b62 BD F2                   		movw	r10, ax
 1567 0b64 FA F2                   		movw	hl, r10
 1568 0b66 8B                      		mov	a, [hl]
 1569 0b67 9D F0                   		mov	r8, a
 1570 0b69 4A F0 60                		cmp	r8, #96
 1571 0b6c 61 E3                   		 skh
 1572 0b6e EC 79 0B 00             		 br	!!.L61
 328:../src/user_functions.c **** 		return 2;
 1573                             		.loc 1 328 0
 1574 0b72 CD F0 02                		mov	r8, #2
 1575 0b75 EC 7B 0B 00             		br	!!.L56
 1576                             	.L61:
 329:../src/user_functions.c **** 	}
 330:../src/user_functions.c **** 
 331:../src/user_functions.c **** 
 332:../src/user_functions.c **** 	return 0;
 1577                             		.loc 1 332 0
 1578 0b79 F4 F0                   		clrb	r8
 1579                             	.L56:
 333:../src/user_functions.c **** }
 1580                             		.loc 1 333 0
 1581 0b7b D7                      		ret
 1582                             	.LFE6:
 1686                             	.Letext0:
 1687                             		.file 2 "../src/iodefine.h"
 1688                             		.file 3 "../src/r_cg_macrodriver.h"
 1689                             		.file 4 "../src/r_cg_rtc.h"
 1690                             		.file 5 "../src/globals.h"
