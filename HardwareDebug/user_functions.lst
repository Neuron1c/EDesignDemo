   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_voltage,1,1
  31                             		.comm	_current1,1,1
  32                             		.comm	_current2,1,1
  33                             		.comm	_date,6,1
  34                             		.comm	_scrollFlag,1,1
  35                             		.comm	_tempFlag,1,1
  36                             		.comm	_secFlag,1,1
  37                             		.comm	_scrollCount,2,2
  38                             		.comm	_timerFlag,2,2
  39                             		.local	_count
  40                             		.comm	_count,2,2
  41                             		.local	_finalTemp
  42                             		.comm	_finalTemp,2,2
  43                             		.local	_response
  44                             		.comm	_response,50,1
  45                             		.local	_mode
  46                             		.comm	_mode,2,2
  47                             		.local	_display
  48                             		.comm	_display,2,2
  49                             		.local	_offset
  50                             		.comm	_offset,2,2
  51                             		.global	_D
  52                             	.bss
  53                             		.balign 2
  56                             	_D:
  57 0000 00 00                   		.zero	2
  58                             		.global	_flag
  59                             		.balign 2
  62                             	_flag:
  63 0002 00 00                   		.zero	2
  64                             		.local	_switchState
  65                             		.comm	_switchState,1,1
  66                             		.local	_tempState
  67                             		.comm	_tempState,1,1
  68                             		.local	_logCount
  69                             		.comm	_logCount,2,2
  70                             		.section	.rodata
  71                             	.LC0:
  72 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  73                             	.text
  74                             		.global	_populate
  76                             	_populate:
  77                             	.LFB0:
  78                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** static uint16_t count = 0;
  22:../src/user_functions.c **** extern uint16_t scrollCount;
  23:../src/user_functions.c **** extern uint8_t scrollFlag;
  24:../src/user_functions.c **** extern uint8_t tempFlag;
  25:../src/user_functions.c **** extern uint8_t recieveflag;
  26:../src/user_functions.c **** extern uint8_t sendflag;
  27:../src/user_functions.c **** extern uint8_t secFlag;
  28:../src/user_functions.c **** 
  29:../src/user_functions.c **** static uint16_t finalTemp;
  30:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  31:../src/user_functions.c **** static int mode = 0;
  32:../src/user_functions.c **** static int display = 0;
  33:../src/user_functions.c **** static int offset = 0;
  34:../src/user_functions.c **** int D = 0;
  35:../src/user_functions.c **** int flag = 0;
  36:../src/user_functions.c **** extern uint8_t voltage, current1, current2;
  37:../src/user_functions.c **** extern uint8_t date[6];
  38:../src/user_functions.c **** static uint8_t switchState;
  39:../src/user_functions.c **** static uint8_t tempState;
  40:../src/user_functions.c **** static uint16_t logCount;
  41:../src/user_functions.c **** 
  42:../src/user_functions.c **** void processMSG();
  43:../src/user_functions.c **** int errorTest();
  44:../src/user_functions.c **** void displayLCD();
  45:../src/user_functions.c **** void readRTC();
  46:../src/user_functions.c **** void setRTC();
  47:../src/user_functions.c **** void getRTC();
  48:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  49:../src/user_functions.c **** void collectADC();
  50:../src/user_functions.c **** void checkFlags();
  51:../src/user_functions.c **** void measureTemp();
  52:../src/user_functions.c **** void setTemp();
  53:../src/user_functions.c **** void read(uint16_t addr, uint8_t len);
  54:../src/user_functions.c **** void writeLog();
  55:../src/user_functions.c **** void writeMem(uint16_t addr);
  56:../src/user_functions.c **** void readLog(uint16_t logNum);
  57:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  58:../src/user_functions.c **** 
  59:../src/user_functions.c **** char populate(char recieved) {
  79                             		.loc 1 59 0
  80                             		; start of function
  81                             		; outgoing: 4 bytes
  82 0000 20 04                   		subw	sp, #4
  83                             	.LCFI0:
  60:../src/user_functions.c **** 
  61:../src/user_functions.c **** 	if (recieved == '$') {
  84                             		.loc 1 61 0
  85 0002 88 08                   		mov	a, [sp+8]
  86 0004 4C 24                   		cmp	a, #36
  87 0006 61 E8                   		 skz
  88 0008 EC 2A 00 00             		 br	!!.L2
  62:../src/user_functions.c **** 		record[count] = recieved;
  89                             		.loc 1 62 0
  90 000c AF 04 00                		movw	ax, !_count
  91 000f BD F0                   		movw	r8, ax
  92 0011 88 08                   		mov	a, [sp+8]
  93 0013 9D F2                   		mov	r10, a
  94 0015 DA F0                   		movw	bc, r8
  95 0017 48 00 00                		mov	_record[bc], a
  63:../src/user_functions.c **** 		count++;
  96                             		.loc 1 63 0
  97 001a AF 04 00                		movw	ax, !_count
  98 001d BD F0                   		movw	r8, ax
  99 001f A6 F0                   		incw	r8
 100 0021 AD F0                   		movw	ax, r8
 101 0023 BF 04 00                		movw	!_count, ax
 102 0026 EC E3 00 00             		br	!!.L3
 103                             	.L2:
  64:../src/user_functions.c **** 	} else if (recieved == '\x0a') {
 104                             		.loc 1 64 0
 105 002a 88 08                   		mov	a, [sp+8]
 106 002c 4C 0A                   		cmp	a, #10
 107 002e 61 E8                   		 skz
 108 0030 EC 8D 00 00             		 br	!!.L4
  65:../src/user_functions.c **** 		if (record[count - 1] == '\x0d') {
 109                             		.loc 1 65 0
 110 0034 AF 04 00                		movw	ax, !_count
 111 0037 BD F0                   		movw	r8, ax
 112 0039 B6 F0                   		decw	r8
 113 003b AD F0                   		movw	ax, r8
 114 003d 04 00 00                		addw	ax, #_record
 115 0040 16                      		movw	hl, ax
 116 0041 8B                      		mov	a, [hl]
 117 0042 9D F0                   		mov	r8, a
 118 0044 4A F0 0D                		cmp	r8, #13
 119 0047 61 E8                   		 skz
 120 0049 EC 7A 00 00             		 br	!!.L5
  66:../src/user_functions.c **** 			if (!flag) {
 121                             		.loc 1 66 0
 122 004d AF 00 00                		movw	ax, !_flag
 123 0050 BD F0                   		movw	r8, ax
 124 0052 44 00 00                		cmpw	ax, #0
 125 0055 61 E8                   		 skz
 126 0057 EC 7A 00 00             		 br	!!.L5
  67:../src/user_functions.c **** 				record[count] = recieved;
 127                             		.loc 1 67 0
 128 005b AF 04 00                		movw	ax, !_count
 129 005e BD F0                   		movw	r8, ax
 130 0060 88 08                   		mov	a, [sp+8]
 131 0062 9D F2                   		mov	r10, a
 132 0064 DA F0                   		movw	bc, r8
 133 0066 48 00 00                		mov	_record[bc], a
  68:../src/user_functions.c **** 				record[count + 1] = '\0';
 134                             		.loc 1 68 0
 135 0069 AF 04 00                		movw	ax, !_count
 136 006c BD F0                   		movw	r8, ax
 137 006e A6 F0                   		incw	r8
 138 0070 DA F0                   		movw	bc, r8
 139 0072 F1                      		clrb	a
 140 0073 48 00 00                		mov	_record[bc], a
  69:../src/user_functions.c **** 				processMSG();
 141                             		.loc 1 69 0
 142 0076 FC 00 00 00             		call	!!%code(_processMSG)
 143                             	.L5:
  70:../src/user_functions.c **** 			}
  71:../src/user_functions.c **** 		}
  72:../src/user_functions.c **** 		strcpy(record, "");
 144                             		.loc 1 72 0
 145 007a F4 F0                   		clrb	r8
 146 007c 8D F0                   		mov	a, r8
 147 007e 9F 00 00                		mov	!_record, a
  73:../src/user_functions.c **** 		count = 0;
 148                             		.loc 1 73 0
 149 0081 F6                      		clrw	ax
 150 0082 BF 04 00                		movw	!_count, ax
  74:../src/user_functions.c **** 		flag = 0;
 151                             		.loc 1 74 0
 152 0085 F6                      		clrw	ax
 153 0086 BF 00 00                		movw	!_flag, ax
 154 0089 EC E3 00 00             		br	!!.L3
 155                             	.L4:
  75:../src/user_functions.c **** 	} else if (flag) {
 156                             		.loc 1 75 0
 157 008d AF 00 00                		movw	ax, !_flag
 158 0090 BD F0                   		movw	r8, ax
 159 0092 44 00 00                		cmpw	ax, #0
 160 0095 61 E8                   		 skz
 161 0097 EC E3 00 00             		 br	!!.L3
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** 	} else if (count == 0 && recieved != '$') {
 162                             		.loc 1 77 0
 163 009b AF 04 00                		movw	ax, !_count
 164 009e BD F0                   		movw	r8, ax
 165 00a0 44 00 00                		cmpw	ax, #0
 166 00a3 61 E8                   		 skz
 167 00a5 EC C9 00 00             		 br	!!.L6
 168                             		.loc 1 77 0 is_stmt 0 discriminator 1
 169 00a9 88 08                   		mov	a, [sp+8]
 170 00ab 4C 24                   		cmp	a, #36
 171 00ad 61 F8                   		 sknz
 172 00af EC C9 00 00             		 br	!!.L6
  78:../src/user_functions.c **** 
  79:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a", 7);
 173                             		.loc 1 79 0 is_stmt 1
 174 00b3 30 00 00                		movw	ax, #.LC0
 175 00b6 B8 00                   		movw	[sp], ax
 176 00b8 30 07 00                		movw	ax, #7
 177 00bb B8 02                   		movw	[sp+2], ax
 178 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  80:../src/user_functions.c **** 		flag = 1;
 179                             		.loc 1 80 0
 180 00c1 E6                      		onew	ax
 181 00c2 BF 00 00                		movw	!_flag, ax
 182 00c5 EC E3 00 00             		br	!!.L3
 183                             	.L6:
  81:../src/user_functions.c **** 	}
  82:../src/user_functions.c **** 
  83:../src/user_functions.c **** 	else {
  84:../src/user_functions.c **** 		record[count] = recieved;
 184                             		.loc 1 84 0
 185 00c9 AF 04 00                		movw	ax, !_count
 186 00cc BD F0                   		movw	r8, ax
 187 00ce 88 08                   		mov	a, [sp+8]
 188 00d0 9D F2                   		mov	r10, a
 189 00d2 DA F0                   		movw	bc, r8
 190 00d4 48 00 00                		mov	_record[bc], a
  85:../src/user_functions.c **** 		count++;
 191                             		.loc 1 85 0
 192 00d7 AF 04 00                		movw	ax, !_count
 193 00da BD F0                   		movw	r8, ax
 194 00dc A6 F0                   		incw	r8
 195 00de AD F0                   		movw	ax, r8
 196 00e0 BF 04 00                		movw	!_count, ax
 197                             	.L3:
  86:../src/user_functions.c **** 	}
  87:../src/user_functions.c **** 
  88:../src/user_functions.c **** 	return recieved;
 198                             		.loc 1 88 0
 199 00e3 88 08                   		mov	a, [sp+8]
 200 00e5 9D F0                   		mov	r8, a
  89:../src/user_functions.c **** }
 201                             		.loc 1 89 0
 202 00e7 10 04                   		addw	sp, #4
 203 00e9 D7                      		ret
 204                             	.LFE0:
 206                             		.section	.rodata
 207                             	.LC1:
 208 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,%02d,%0d\r\n"
 208      25 30 32 64 2C 25 30 64 
 208      0D 0A 00 
 209                             	.LC2:
 210 001b 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 210      25 64 2C 25 64 2C 25 64 
 210      2C 25 64 2C 25 64 0D 0A 
 210      00 
 211                             	.LC3:
 212 0034 24 49 30 25 30 33 64 0D 		.string	"$I0%03d\r\n"
 212      0A 00 
 213                             	.LC4:
 214 003e 24 4B 25 64 00          		.string	"$K%d"
 215                             	.LC5:
 216 0043 24 25 63 31 0D 0A 00    		.string	"$%c1\r\n"
 217                             	.text
 218                             		.global	_processMSG
 220                             	_processMSG:
 221                             	.LFB1:
  90:../src/user_functions.c **** 
  91:../src/user_functions.c **** void processMSG() {
 222                             		.loc 1 91 0
 223                             		; start of function
 224                             		; push 4: r16 r18
 225                             		; locals: 44 bytes
 226                             		; outgoing: 16 bytes
 227 00ea 61 EF                   		sel	rb2
 228 00ec C1                      		push	ax ; r16
 229                             	.LCFI1:
 230 00ed C3                      		push	bc ; r18
 231                             	.LCFI2:
 232 00ee 61 CF                   		sel	rb0
 233 00f0 20 3C                   		subw	sp, #60
 234                             	.LCFI3:
  92:../src/user_functions.c **** 	char ack[3];
  93:../src/user_functions.c **** 	char str[30];
  94:../src/user_functions.c **** 	if (errorTest()) {
 235                             		.loc 1 94 0
 236 00f2 FC 00 00 00             		call	!!%code(_errorTest)
 237 00f6 AD F0                   		movw	ax, r8
 238 00f8 44 00 00                		cmpw	ax, #0
 239 00fb 61 F8                   		 sknz
 240 00fd EC 0A 0A 00             		 br	!!.L9
  95:../src/user_functions.c **** 
  96:../src/user_functions.c **** 		switch (record[1]) {
 241                             		.loc 1 96 0
 242 0101 8F 00 00                		mov	a, !_record+1
 243 0104 9D F0                   		mov	r8, a
 244 0106 CD F1 00                		mov	r9, #0
 245 0109 AD F0                   		movw	ax, r8
 246 010b 44 44 00                		cmpw	ax, #68
 247 010e 61 F8                   		 sknz
 248 0110 EC 24 03 00             		 br	!!.L11
 249 0114 AD F0                   		movw	ax, r8
 250 0116 44 44 00                		cmpw	ax, #68
 251 0119 71 FF                   		 xor1	CY, a.7
 252 011b 61 F3                   		 sknh
 253 011d EC 7A 01 00             		 br	!!.L12
 254 0121 AD F0                   		movw	ax, r8
 255 0123 44 32 00                		cmpw	ax, #50
 256 0126 61 F8                   		 sknz
 257 0128 EC A2 02 00             		 br	!!.L13
 258 012c AD F0                   		movw	ax, r8
 259 012e 44 32 00                		cmpw	ax, #50
 260 0131 71 FF                   		 xor1	CY, a.7
 261 0133 61 F3                   		 sknh
 262 0135 EC 53 01 00             		 br	!!.L14
 263 0139 AD F0                   		movw	ax, r8
 264 013b 44 30 00                		cmpw	ax, #48
 265 013e 61 F8                   		 sknz
 266 0140 EC E0 01 00             		 br	!!.L15
 267 0144 AD F0                   		movw	ax, r8
 268 0146 44 31 00                		cmpw	ax, #49
 269 0149 61 F8                   		 sknz
 270 014b EC 41 02 00             		 br	!!.L16
 271 014f EC EA 09 00             		br	!!.L10
 272                             	.L14:
 273 0153 AD F0                   		movw	ax, r8
 274 0155 44 42 00                		cmpw	ax, #66
 275 0158 61 F8                   		 sknz
 276 015a EC 15 07 00             		 br	!!.L17
 277 015e AD F0                   		movw	ax, r8
 278 0160 44 42 00                		cmpw	ax, #66
 279 0163 71 FF                   		 xor1	CY, a.7
 280 0165 61 F3                   		 sknh
 281 0167 EC 1D 07 00             		 br	!!.L18
 282 016b AD F0                   		movw	ax, r8
 283 016d 44 33 00                		cmpw	ax, #51
 284 0170 61 F8                   		 sknz
 285 0172 EC D6 02 00             		 br	!!.L19
 286 0176 EC EA 09 00             		br	!!.L10
 287                             	.L12:
 288 017a AD F0                   		movw	ax, r8
 289 017c 44 4B 00                		cmpw	ax, #75
 290 017f 61 F8                   		 sknz
 291 0181 EC BC 07 00             		 br	!!.L20
 292 0185 AD F0                   		movw	ax, r8
 293 0187 44 4B 00                		cmpw	ax, #75
 294 018a 71 FF                   		 xor1	CY, a.7
 295 018c 61 F3                   		 sknh
 296 018e EC B9 01 00             		 br	!!.L21
 297 0192 AD F0                   		movw	ax, r8
 298 0194 44 49 00                		cmpw	ax, #73
 299 0197 61 F8                   		 sknz
 300 0199 EC 93 07 00             		 br	!!.L22
 301 019d AD F0                   		movw	ax, r8
 302 019f 44 49 00                		cmpw	ax, #73
 303 01a2 71 FF                   		 xor1	CY, a.7
 304 01a4 61 F3                   		 sknh
 305 01a6 EC B3 08 00             		 br	!!.L23
 306 01aa AD F0                   		movw	ax, r8
 307 01ac 44 45 00                		cmpw	ax, #69
 308 01af 61 F8                   		 sknz
 309 01b1 EC 98 06 00             		 br	!!.L24
 310 01b5 EC EA 09 00             		br	!!.L10
 311                             	.L21:
 312 01b9 AD F0                   		movw	ax, r8
 313 01bb 44 4D 00                		cmpw	ax, #77
 314 01be 61 F8                   		 sknz
 315 01c0 EC 4D 09 00             		 br	!!.L25
 316 01c4 AD F0                   		movw	ax, r8
 317 01c6 44 4D 00                		cmpw	ax, #77
 318 01c9 71 FF                   		 xor1	CY, a.7
 319 01cb 61 D8                   		 sknc
 320 01cd EC C0 03 00             		 br	!!.L26
 321 01d1 AD F0                   		movw	ax, r8
 322 01d3 44 4E 00                		cmpw	ax, #78
 323 01d6 61 F8                   		 sknz
 324 01d8 EC B0 09 00             		 br	!!.L27
 325 01dc EC EA 09 00             		br	!!.L10
 326                             	.L15:
 327                             	.LBB2:
  97:../src/user_functions.c **** 		case '0':
  98:../src/user_functions.c **** 			if (mode == 1) {
 328                             		.loc 1 98 0
 329 01e0 AF 3A 00                		movw	ax, !_mode
 330 01e3 BD F0                   		movw	r8, ax
 331 01e5 44 01 00                		cmpw	ax, #1
 332 01e8 61 E8                   		 skz
 333 01ea EC FA 01 00             		 br	!!.L28
  99:../src/user_functions.c **** 				ack[0] = '0';
 334                             		.loc 1 99 0
 335 01ee 51 30                   		mov	a, #48
 336 01f0 98 2F                   		mov	[sp+47], a
 100:../src/user_functions.c **** 				mode = 0;
 337                             		.loc 1 100 0
 338 01f2 F6                      		clrw	ax
 339 01f3 BF 3A 00                		movw	!_mode, ax
 340 01f6 EC FE 01 00             		br	!!.L29
 341                             	.L28:
 101:../src/user_functions.c **** 			}
 102:../src/user_functions.c **** 
 103:../src/user_functions.c **** 			else {
 104:../src/user_functions.c **** 				ack[0] = '3';
 342                             		.loc 1 104 0
 343 01fa 51 33                   		mov	a, #51
 344 01fc 98 2F                   		mov	[sp+47], a
 345                             	.L29:
 105:../src/user_functions.c **** 			}
 106:../src/user_functions.c **** 
 107:../src/user_functions.c **** 			ack[1] = '\x0d';
 346                             		.loc 1 107 0
 347 01fe 51 0D                   		mov	a, #13
 348 0200 98 30                   		mov	[sp+48], a
 108:../src/user_functions.c **** 			ack[2] = '\x0a';
 349                             		.loc 1 108 0
 350 0202 51 0A                   		mov	a, #10
 351 0204 98 31                   		mov	[sp+49], a
 109:../src/user_functions.c **** 			strcpy(response, "$0");
 352                             		.loc 1 109 0
 353 0206 51 24                   		mov	a, #36
 354 0208 9F 08 00                		mov	!_response, a
 355 020b 51 30                   		mov	a, #48
 356 020d 9F 09 00                		mov	!_response+1, a
 357 0210 F5 0A 00                		clrb	!_response+2
 110:../src/user_functions.c **** 			strcat(response, ack);
 358                             		.loc 1 110 0
 359 0213 30 08 00                		movw	ax, #_response
 360 0216 B8 00                   		movw	[sp], ax
 361 0218 C9 F0 3C 00             		movw	r8, #60
 362 021c AE F8                   		movw	ax, sp
 363 021e BD F0                   		movw	r8, ax
 364 0220 04 3C 00                		addw	ax, #60
 365 0223 BD F0                   		movw	r8, ax
 366 0225 04 F3 FF                		addw	ax, #-13
 367 0228 B8 02                   		movw	[sp+2], ax
 368 022a FC 00 00 00             		call	!!%code(_strcat)
 111:../src/user_functions.c **** 			recieveInstruction(7);
 369                             		.loc 1 111 0
 370 022e 30 07 00                		movw	ax, #7
 371 0231 B8 00                   		movw	[sp], ax
 372 0233 FC 00 00 00             		call	!!%code(_recieveInstruction)
 112:../src/user_functions.c **** 			count = 5;
 373                             		.loc 1 112 0
 374 0237 30 05 00                		movw	ax, #5
 375 023a BF 04 00                		movw	!_count, ax
 113:../src/user_functions.c **** 			break;
 376                             		.loc 1 113 0
 377 023d EC 0A 0A 00             		br	!!.L9
 378                             	.L16:
 114:../src/user_functions.c **** 
 115:../src/user_functions.c **** 		case '1':
 116:../src/user_functions.c **** 			if (mode == 0) {
 379                             		.loc 1 116 0
 380 0241 AF 3A 00                		movw	ax, !_mode
 381 0244 BD F0                   		movw	r8, ax
 382 0246 44 00 00                		cmpw	ax, #0
 383 0249 61 E8                   		 skz
 384 024b EC 5B 02 00             		 br	!!.L30
 117:../src/user_functions.c **** 				ack[0] = '0';
 385                             		.loc 1 117 0
 386 024f 51 30                   		mov	a, #48
 387 0251 98 2F                   		mov	[sp+47], a
 118:../src/user_functions.c **** 				mode = 1;
 388                             		.loc 1 118 0
 389 0253 E6                      		onew	ax
 390 0254 BF 3A 00                		movw	!_mode, ax
 391 0257 EC 5F 02 00             		br	!!.L31
 392                             	.L30:
 119:../src/user_functions.c **** 			}
 120:../src/user_functions.c **** 
 121:../src/user_functions.c **** 			else {
 122:../src/user_functions.c **** 				ack[0] = '3';
 393                             		.loc 1 122 0
 394 025b 51 33                   		mov	a, #51
 395 025d 98 2F                   		mov	[sp+47], a
 396                             	.L31:
 123:../src/user_functions.c **** 			}
 124:../src/user_functions.c **** 
 125:../src/user_functions.c **** 			ack[1] = '\x0d';
 397                             		.loc 1 125 0
 398 025f 51 0D                   		mov	a, #13
 399 0261 98 30                   		mov	[sp+48], a
 126:../src/user_functions.c **** 			ack[2] = '\x0a';
 400                             		.loc 1 126 0
 401 0263 51 0A                   		mov	a, #10
 402 0265 98 31                   		mov	[sp+49], a
 127:../src/user_functions.c **** 			strcpy(response, "$1");
 403                             		.loc 1 127 0
 404 0267 51 24                   		mov	a, #36
 405 0269 9F 08 00                		mov	!_response, a
 406 026c 51 31                   		mov	a, #49
 407 026e 9F 09 00                		mov	!_response+1, a
 408 0271 F5 0A 00                		clrb	!_response+2
 128:../src/user_functions.c **** 			strcat(response, ack);
 409                             		.loc 1 128 0
 410 0274 30 08 00                		movw	ax, #_response
 411 0277 B8 00                   		movw	[sp], ax
 412 0279 C9 F2 3C 00             		movw	r10, #60
 413 027d AE F8                   		movw	ax, sp
 414 027f BD F2                   		movw	r10, ax
 415 0281 04 3C 00                		addw	ax, #60
 416 0284 BD F2                   		movw	r10, ax
 417 0286 04 F3 FF                		addw	ax, #-13
 418 0289 B8 02                   		movw	[sp+2], ax
 419 028b FC 00 00 00             		call	!!%code(_strcat)
 129:../src/user_functions.c **** 			recieveInstruction(6);
 420                             		.loc 1 129 0
 421 028f 30 06 00                		movw	ax, #6
 422 0292 B8 00                   		movw	[sp], ax
 423 0294 FC 00 00 00             		call	!!%code(_recieveInstruction)
 130:../src/user_functions.c **** 			count = 5;
 424                             		.loc 1 130 0
 425 0298 30 05 00                		movw	ax, #5
 426 029b BF 04 00                		movw	!_count, ax
 131:../src/user_functions.c **** 			break;
 427                             		.loc 1 131 0
 428 029e EC 0A 0A 00             		br	!!.L9
 429                             	.L13:
 132:../src/user_functions.c **** 
 133:../src/user_functions.c **** 		case '2':
 134:../src/user_functions.c **** 			strcpy(mem, &record[2]);
 430                             		.loc 1 134 0
 431 02a2 30 00 00                		movw	ax, #_mem
 432 02a5 B8 00                   		movw	[sp], ax
 433 02a7 30 00 00                		movw	ax, #_record+2
 434 02aa B8 02                   		movw	[sp+2], ax
 435 02ac FC 00 00 00             		call	!!%code(_strcpy)
 135:../src/user_functions.c **** 			strcpy(response, "$20\x0d\x0a");
 436                             		.loc 1 135 0
 437 02b0 51 24                   		mov	a, #36
 438 02b2 9F 08 00                		mov	!_response, a
 439 02b5 51 32                   		mov	a, #50
 440 02b7 9F 09 00                		mov	!_response+1, a
 441 02ba 51 30                   		mov	a, #48
 442 02bc 9F 0A 00                		mov	!_response+2, a
 443 02bf 51 0D                   		mov	a, #13
 444 02c1 9F 0B 00                		mov	!_response+3, a
 445 02c4 51 0A                   		mov	a, #10
 446 02c6 9F 0C 00                		mov	!_response+4, a
 447 02c9 F5 0D 00                		clrb	!_response+5
 136:../src/user_functions.c **** 			count = 5;
 448                             		.loc 1 136 0
 449 02cc 30 05 00                		movw	ax, #5
 450 02cf BF 04 00                		movw	!_count, ax
 137:../src/user_functions.c **** 			break;
 451                             		.loc 1 137 0
 452 02d2 EC 0A 0A 00             		br	!!.L9
 453                             	.L19:
 138:../src/user_functions.c **** 
 139:../src/user_functions.c **** 		case '3':
 140:../src/user_functions.c **** 			strcpy(response, "$3019119038\x0d\x0a");
 454                             		.loc 1 140 0
 455 02d6 51 24                   		mov	a, #36
 456 02d8 9F 08 00                		mov	!_response, a
 457 02db 51 33                   		mov	a, #51
 458 02dd 9F 09 00                		mov	!_response+1, a
 459 02e0 51 30                   		mov	a, #48
 460 02e2 9F 0A 00                		mov	!_response+2, a
 461 02e5 51 31                   		mov	a, #49
 462 02e7 9F 0B 00                		mov	!_response+3, a
 463 02ea 51 39                   		mov	a, #57
 464 02ec 9F 0C 00                		mov	!_response+4, a
 465 02ef 51 31                   		mov	a, #49
 466 02f1 9F 0D 00                		mov	!_response+5, a
 467 02f4 51 31                   		mov	a, #49
 468 02f6 9F 0E 00                		mov	!_response+6, a
 469 02f9 51 39                   		mov	a, #57
 470 02fb 9F 0F 00                		mov	!_response+7, a
 471 02fe 51 30                   		mov	a, #48
 472 0300 9F 10 00                		mov	!_response+8, a
 473 0303 51 33                   		mov	a, #51
 474 0305 9F 11 00                		mov	!_response+9, a
 475 0308 51 38                   		mov	a, #56
 476 030a 9F 12 00                		mov	!_response+10, a
 477 030d 51 0D                   		mov	a, #13
 478 030f 9F 13 00                		mov	!_response+11, a
 479 0312 51 0A                   		mov	a, #10
 480 0314 9F 14 00                		mov	!_response+12, a
 481 0317 F5 15 00                		clrb	!_response+13
 141:../src/user_functions.c **** 			count = 13;
 482                             		.loc 1 141 0
 483 031a 30 0D 00                		movw	ax, #13
 484 031d BF 04 00                		movw	!_count, ax
 142:../src/user_functions.c **** 			break;
 485                             		.loc 1 142 0
 486 0320 EC 0A 0A 00             		br	!!.L9
 487                             	.L11:
 143:../src/user_functions.c **** 
 144:../src/user_functions.c **** 		case 'D':
 145:../src/user_functions.c **** 			if (strlen(mem) <= 32) {
 488                             		.loc 1 145 0
 489 0324 30 00 00                		movw	ax, #_mem
 490 0327 B8 00                   		movw	[sp], ax
 491 0329 FC 00 00 00             		call	!!%code(_strlen)
 492 032d AD F0                   		movw	ax, r8
 493 032f 44 20 00                		cmpw	ax, #32
 494 0332 61 F3                   		 sknh
 495 0334 EC 73 03 00             		 br	!!.L32
 146:../src/user_functions.c **** 
 147:../src/user_functions.c **** 				strcpy(response, "$D0\x0d\x0a");
 496                             		.loc 1 147 0
 497 0338 51 24                   		mov	a, #36
 498 033a 9F 08 00                		mov	!_response, a
 499 033d 51 44                   		mov	a, #68
 500 033f 9F 09 00                		mov	!_response+1, a
 501 0342 51 30                   		mov	a, #48
 502 0344 9F 0A 00                		mov	!_response+2, a
 503 0347 51 0D                   		mov	a, #13
 504 0349 9F 0B 00                		mov	!_response+3, a
 505 034c 51 0A                   		mov	a, #10
 506 034e 9F 0C 00                		mov	!_response+4, a
 507 0351 F5 0D 00                		clrb	!_response+5
 148:../src/user_functions.c **** 				count = 5;
 508                             		.loc 1 148 0
 509 0354 30 05 00                		movw	ax, #5
 510 0357 BF 04 00                		movw	!_count, ax
 149:../src/user_functions.c **** 
 150:../src/user_functions.c **** 				strcpy(display_string, mem);
 511                             		.loc 1 150 0
 512 035a 30 00 00                		movw	ax, #_display_string
 513 035d B8 00                   		movw	[sp], ax
 514 035f 30 00 00                		movw	ax, #_mem
 515 0362 B8 02                   		movw	[sp+2], ax
 516 0364 FC 00 00 00             		call	!!%code(_strcpy)
 151:../src/user_functions.c **** 				displayLCD(1);
 517                             		.loc 1 151 0
 518 0368 E6                      		onew	ax
 519 0369 B8 00                   		movw	[sp], ax
 520 036b FC 00 00 00             		call	!!%code(_displayLCD)
 152:../src/user_functions.c **** 			} else {
 153:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 154:../src/user_functions.c **** 				delayNoInt(1640);
 155:../src/user_functions.c **** 
 156:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 157:../src/user_functions.c **** 				delayNoInt(1640);
 158:../src/user_functions.c **** 				strcpy(response, "$D3\x0d\x0a");
 159:../src/user_functions.c **** 				count = 5;
 160:../src/user_functions.c **** 			}
 161:../src/user_functions.c **** 			break;
 521                             		.loc 1 161 0
 522 036f EC 0A 0A 00             		br	!!.L9
 523                             	.L32:
 153:../src/user_functions.c **** 				delayNoInt(1640);
 524                             		.loc 1 153 0
 525 0373 F1                      		clrb	a
 526 0374 98 00                   		mov	[sp], a
 527 0376 E1                      		oneb	a
 528 0377 98 02                   		mov	[sp+2], a
 529 0379 FC 00 00 00             		call	!!%code(_writeByteLcd)
 154:../src/user_functions.c **** 
 530                             		.loc 1 154 0
 531 037d 30 68 06                		movw	ax, #1640
 532 0380 B8 00                   		movw	[sp], ax
 533 0382 FC 00 00 00             		call	!!%code(_delayNoInt)
 156:../src/user_functions.c **** 				delayNoInt(1640);
 534                             		.loc 1 156 0
 535 0386 F1                      		clrb	a
 536 0387 98 00                   		mov	[sp], a
 537 0389 51 80                   		mov	a, #-128
 538 038b 98 02                   		mov	[sp+2], a
 539 038d FC 00 00 00             		call	!!%code(_writeByteLcd)
 157:../src/user_functions.c **** 				strcpy(response, "$D3\x0d\x0a");
 540                             		.loc 1 157 0
 541 0391 30 68 06                		movw	ax, #1640
 542 0394 B8 00                   		movw	[sp], ax
 543 0396 FC 00 00 00             		call	!!%code(_delayNoInt)
 158:../src/user_functions.c **** 				count = 5;
 544                             		.loc 1 158 0
 545 039a 51 24                   		mov	a, #36
 546 039c 9F 08 00                		mov	!_response, a
 547 039f 51 44                   		mov	a, #68
 548 03a1 9F 09 00                		mov	!_response+1, a
 549 03a4 51 33                   		mov	a, #51
 550 03a6 9F 0A 00                		mov	!_response+2, a
 551 03a9 51 0D                   		mov	a, #13
 552 03ab 9F 0B 00                		mov	!_response+3, a
 553 03ae 51 0A                   		mov	a, #10
 554 03b0 9F 0C 00                		mov	!_response+4, a
 555 03b3 F5 0D 00                		clrb	!_response+5
 159:../src/user_functions.c **** 			}
 556                             		.loc 1 159 0
 557 03b6 30 05 00                		movw	ax, #5
 558 03b9 BF 04 00                		movw	!_count, ax
 559                             		.loc 1 161 0
 560 03bc EC 0A 0A 00             		br	!!.L9
 561                             	.L26:
 162:../src/user_functions.c **** 
 163:../src/user_functions.c **** 		case 'L':
 164:../src/user_functions.c **** 			if (record[2] == '0') {
 562                             		.loc 1 164 0
 563 03c0 8F 00 00                		mov	a, !_record+2
 564 03c3 9D F0                   		mov	r8, a
 565 03c5 4A F0 30                		cmp	r8, #48
 566 03c8 61 E8                   		 skz
 567 03ca EC 48 04 00             		 br	!!.L34
 165:../src/user_functions.c **** 				P4_bit.no1 = 0;
 568                             		.loc 1 165 0
 569 03ce C9 F0 04 FF             		movw	r8, #-252
 570 03d2 AD F0                   		movw	ax, r8
 571 03d4 BD F4                   		movw	r12, ax
 572 03d6 FA F4                   		movw	hl, r12
 573 03d8 8B                      		mov	a, [hl]
 574 03d9 9D F2                   		mov	r10, a
 575 03db 5A F2 FD                		and	r10, #-3
 576 03de AD F0                   		movw	ax, r8
 577 03e0 BD F6                   		movw	r14, ax
 578 03e2 DA F6                   		movw	bc, r14
 579 03e4 8D F2                   		mov	a, r10
 580 03e6 48 00 00                		mov	[bc], a
 166:../src/user_functions.c **** 				P4_bit.no2 = 0;
 581                             		.loc 1 166 0
 582 03e9 C9 F0 04 FF             		movw	r8, #-252
 583 03ed AD F0                   		movw	ax, r8
 584 03ef BD F4                   		movw	r12, ax
 585 03f1 FA F4                   		movw	hl, r12
 586 03f3 8B                      		mov	a, [hl]
 587 03f4 9D F2                   		mov	r10, a
 588 03f6 5A F2 FB                		and	r10, #-5
 589 03f9 AD F0                   		movw	ax, r8
 590 03fb BD F6                   		movw	r14, ax
 591 03fd DA F6                   		movw	bc, r14
 592 03ff 8D F2                   		mov	a, r10
 593 0401 48 00 00                		mov	[bc], a
 167:../src/user_functions.c **** 				P4_bit.no3 = 0;
 594                             		.loc 1 167 0
 595 0404 C9 F0 04 FF             		movw	r8, #-252
 596 0408 AD F0                   		movw	ax, r8
 597 040a BD F4                   		movw	r12, ax
 598 040c FA F4                   		movw	hl, r12
 599 040e 8B                      		mov	a, [hl]
 600 040f 9D F2                   		mov	r10, a
 601 0411 5A F2 F7                		and	r10, #-9
 602 0414 AD F0                   		movw	ax, r8
 603 0416 BD F6                   		movw	r14, ax
 604 0418 DA F6                   		movw	bc, r14
 605 041a 8D F2                   		mov	a, r10
 606 041c 48 00 00                		mov	[bc], a
 168:../src/user_functions.c **** 				switchState = 0;
 607                             		.loc 1 168 0
 608 041f F5 40 00                		clrb	!_switchState
 169:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 609                             		.loc 1 169 0
 610 0422 51 24                   		mov	a, #36
 611 0424 9F 08 00                		mov	!_response, a
 612 0427 51 4C                   		mov	a, #76
 613 0429 9F 09 00                		mov	!_response+1, a
 614 042c 51 30                   		mov	a, #48
 615 042e 9F 0A 00                		mov	!_response+2, a
 616 0431 51 0D                   		mov	a, #13
 617 0433 9F 0B 00                		mov	!_response+3, a
 618 0436 51 0A                   		mov	a, #10
 619 0438 9F 0C 00                		mov	!_response+4, a
 620 043b F5 0D 00                		clrb	!_response+5
 170:../src/user_functions.c **** 				count = 5;
 621                             		.loc 1 170 0
 622 043e 30 05 00                		movw	ax, #5
 623 0441 BF 04 00                		movw	!_count, ax
 624 0444 EC 94 06 00             		br	!!.L35
 625                             	.L34:
 171:../src/user_functions.c **** 			} else if (record[2] == '1') {
 626                             		.loc 1 171 0
 627 0448 8F 00 00                		mov	a, !_record+2
 628 044b 9D F0                   		mov	r8, a
 629 044d 4A F0 31                		cmp	r8, #49
 630 0450 61 E8                   		 skz
 631 0452 EC D0 04 00             		 br	!!.L36
 172:../src/user_functions.c **** 				P4_bit.no1 = 0;
 632                             		.loc 1 172 0
 633 0456 C9 F0 04 FF             		movw	r8, #-252
 634 045a AD F0                   		movw	ax, r8
 635 045c BD F4                   		movw	r12, ax
 636 045e FA F4                   		movw	hl, r12
 637 0460 8B                      		mov	a, [hl]
 638 0461 9D F2                   		mov	r10, a
 639 0463 5A F2 FD                		and	r10, #-3
 640 0466 AD F0                   		movw	ax, r8
 641 0468 BD F6                   		movw	r14, ax
 642 046a DA F6                   		movw	bc, r14
 643 046c 8D F2                   		mov	a, r10
 644 046e 48 00 00                		mov	[bc], a
 173:../src/user_functions.c **** 				P4_bit.no2 = 0;
 645                             		.loc 1 173 0
 646 0471 C9 F0 04 FF             		movw	r8, #-252
 647 0475 AD F0                   		movw	ax, r8
 648 0477 BD F4                   		movw	r12, ax
 649 0479 FA F4                   		movw	hl, r12
 650 047b 8B                      		mov	a, [hl]
 651 047c 9D F2                   		mov	r10, a
 652 047e 5A F2 FB                		and	r10, #-5
 653 0481 AD F0                   		movw	ax, r8
 654 0483 BD F6                   		movw	r14, ax
 655 0485 DA F6                   		movw	bc, r14
 656 0487 8D F2                   		mov	a, r10
 657 0489 48 00 00                		mov	[bc], a
 174:../src/user_functions.c **** 				P4_bit.no3 = 1;
 658                             		.loc 1 174 0
 659 048c C9 F0 04 FF             		movw	r8, #-252
 660 0490 AD F0                   		movw	ax, r8
 661 0492 BD F4                   		movw	r12, ax
 662 0494 FA F4                   		movw	hl, r12
 663 0496 8B                      		mov	a, [hl]
 664 0497 9D F2                   		mov	r10, a
 665 0499 6A F2 08                		or	r10, #8
 666 049c AD F0                   		movw	ax, r8
 667 049e BD F6                   		movw	r14, ax
 668 04a0 DA F6                   		movw	bc, r14
 669 04a2 8D F2                   		mov	a, r10
 670 04a4 48 00 00                		mov	[bc], a
 175:../src/user_functions.c **** 				switchState = 1;
 671                             		.loc 1 175 0
 672 04a7 E5 40 00                		oneb	!_switchState
 176:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 673                             		.loc 1 176 0
 674 04aa 51 24                   		mov	a, #36
 675 04ac 9F 08 00                		mov	!_response, a
 676 04af 51 4C                   		mov	a, #76
 677 04b1 9F 09 00                		mov	!_response+1, a
 678 04b4 51 30                   		mov	a, #48
 679 04b6 9F 0A 00                		mov	!_response+2, a
 680 04b9 51 0D                   		mov	a, #13
 681 04bb 9F 0B 00                		mov	!_response+3, a
 682 04be 51 0A                   		mov	a, #10
 683 04c0 9F 0C 00                		mov	!_response+4, a
 684 04c3 F5 0D 00                		clrb	!_response+5
 177:../src/user_functions.c **** 				count = 5;
 685                             		.loc 1 177 0
 686 04c6 30 05 00                		movw	ax, #5
 687 04c9 BF 04 00                		movw	!_count, ax
 688 04cc EC 94 06 00             		br	!!.L35
 689                             	.L36:
 178:../src/user_functions.c **** 			} else if (record[2] == '2') {
 690                             		.loc 1 178 0
 691 04d0 8F 00 00                		mov	a, !_record+2
 692 04d3 9D F0                   		mov	r8, a
 693 04d5 4A F0 32                		cmp	r8, #50
 694 04d8 61 E8                   		 skz
 695 04da EC 5A 05 00             		 br	!!.L37
 179:../src/user_functions.c **** 				P4_bit.no1 = 1;
 696                             		.loc 1 179 0
 697 04de C9 F0 04 FF             		movw	r8, #-252
 698 04e2 AD F0                   		movw	ax, r8
 699 04e4 BD F4                   		movw	r12, ax
 700 04e6 FA F4                   		movw	hl, r12
 701 04e8 8B                      		mov	a, [hl]
 702 04e9 9D F2                   		mov	r10, a
 703 04eb 6A F2 02                		or	r10, #2
 704 04ee AD F0                   		movw	ax, r8
 705 04f0 BD F6                   		movw	r14, ax
 706 04f2 DA F6                   		movw	bc, r14
 707 04f4 8D F2                   		mov	a, r10
 708 04f6 48 00 00                		mov	[bc], a
 180:../src/user_functions.c **** 				P4_bit.no2 = 0;
 709                             		.loc 1 180 0
 710 04f9 C9 F0 04 FF             		movw	r8, #-252
 711 04fd AD F0                   		movw	ax, r8
 712 04ff BD F4                   		movw	r12, ax
 713 0501 FA F4                   		movw	hl, r12
 714 0503 8B                      		mov	a, [hl]
 715 0504 9D F2                   		mov	r10, a
 716 0506 5A F2 FB                		and	r10, #-5
 717 0509 AD F0                   		movw	ax, r8
 718 050b BD F6                   		movw	r14, ax
 719 050d DA F6                   		movw	bc, r14
 720 050f 8D F2                   		mov	a, r10
 721 0511 48 00 00                		mov	[bc], a
 181:../src/user_functions.c **** 				P4_bit.no3 = 0;
 722                             		.loc 1 181 0
 723 0514 C9 F0 04 FF             		movw	r8, #-252
 724 0518 AD F0                   		movw	ax, r8
 725 051a BD F4                   		movw	r12, ax
 726 051c FA F4                   		movw	hl, r12
 727 051e 8B                      		mov	a, [hl]
 728 051f 9D F2                   		mov	r10, a
 729 0521 5A F2 F7                		and	r10, #-9
 730 0524 AD F0                   		movw	ax, r8
 731 0526 BD F6                   		movw	r14, ax
 732 0528 DA F6                   		movw	bc, r14
 733 052a 8D F2                   		mov	a, r10
 734 052c 48 00 00                		mov	[bc], a
 182:../src/user_functions.c **** 				switchState = 2;
 735                             		.loc 1 182 0
 736 052f 51 02                   		mov	a, #2
 737 0531 9F 40 00                		mov	!_switchState, a
 183:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 738                             		.loc 1 183 0
 739 0534 51 24                   		mov	a, #36
 740 0536 9F 08 00                		mov	!_response, a
 741 0539 51 4C                   		mov	a, #76
 742 053b 9F 09 00                		mov	!_response+1, a
 743 053e 51 30                   		mov	a, #48
 744 0540 9F 0A 00                		mov	!_response+2, a
 745 0543 51 0D                   		mov	a, #13
 746 0545 9F 0B 00                		mov	!_response+3, a
 747 0548 51 0A                   		mov	a, #10
 748 054a 9F 0C 00                		mov	!_response+4, a
 749 054d F5 0D 00                		clrb	!_response+5
 184:../src/user_functions.c **** 				count = 5;
 750                             		.loc 1 184 0
 751 0550 30 05 00                		movw	ax, #5
 752 0553 BF 04 00                		movw	!_count, ax
 753 0556 EC 94 06 00             		br	!!.L35
 754                             	.L37:
 185:../src/user_functions.c **** 			} else if (record[2] == '3') {
 755                             		.loc 1 185 0
 756 055a 8F 00 00                		mov	a, !_record+2
 757 055d 9D F0                   		mov	r8, a
 758 055f 4A F0 33                		cmp	r8, #51
 759 0562 61 E8                   		 skz
 760 0564 EC E4 05 00             		 br	!!.L38
 186:../src/user_functions.c **** 				P4_bit.no1 = 0;
 761                             		.loc 1 186 0
 762 0568 C9 F0 04 FF             		movw	r8, #-252
 763 056c AD F0                   		movw	ax, r8
 764 056e BD F4                   		movw	r12, ax
 765 0570 FA F4                   		movw	hl, r12
 766 0572 8B                      		mov	a, [hl]
 767 0573 9D F2                   		mov	r10, a
 768 0575 5A F2 FD                		and	r10, #-3
 769 0578 AD F0                   		movw	ax, r8
 770 057a BD F6                   		movw	r14, ax
 771 057c DA F6                   		movw	bc, r14
 772 057e 8D F2                   		mov	a, r10
 773 0580 48 00 00                		mov	[bc], a
 187:../src/user_functions.c **** 				P4_bit.no2 = 1;
 774                             		.loc 1 187 0
 775 0583 C9 F0 04 FF             		movw	r8, #-252
 776 0587 AD F0                   		movw	ax, r8
 777 0589 BD F4                   		movw	r12, ax
 778 058b FA F4                   		movw	hl, r12
 779 058d 8B                      		mov	a, [hl]
 780 058e 9D F2                   		mov	r10, a
 781 0590 6A F2 04                		or	r10, #4
 782 0593 AD F0                   		movw	ax, r8
 783 0595 BD F6                   		movw	r14, ax
 784 0597 DA F6                   		movw	bc, r14
 785 0599 8D F2                   		mov	a, r10
 786 059b 48 00 00                		mov	[bc], a
 188:../src/user_functions.c **** 				P4_bit.no3 = 0;
 787                             		.loc 1 188 0
 788 059e C9 F0 04 FF             		movw	r8, #-252
 789 05a2 AD F0                   		movw	ax, r8
 790 05a4 BD F4                   		movw	r12, ax
 791 05a6 FA F4                   		movw	hl, r12
 792 05a8 8B                      		mov	a, [hl]
 793 05a9 9D F2                   		mov	r10, a
 794 05ab 5A F2 F7                		and	r10, #-9
 795 05ae AD F0                   		movw	ax, r8
 796 05b0 BD F6                   		movw	r14, ax
 797 05b2 DA F6                   		movw	bc, r14
 798 05b4 8D F2                   		mov	a, r10
 799 05b6 48 00 00                		mov	[bc], a
 189:../src/user_functions.c **** 				switchState = 3;
 800                             		.loc 1 189 0
 801 05b9 51 03                   		mov	a, #3
 802 05bb 9F 40 00                		mov	!_switchState, a
 190:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 803                             		.loc 1 190 0
 804 05be 51 24                   		mov	a, #36
 805 05c0 9F 08 00                		mov	!_response, a
 806 05c3 51 4C                   		mov	a, #76
 807 05c5 9F 09 00                		mov	!_response+1, a
 808 05c8 51 30                   		mov	a, #48
 809 05ca 9F 0A 00                		mov	!_response+2, a
 810 05cd 51 0D                   		mov	a, #13
 811 05cf 9F 0B 00                		mov	!_response+3, a
 812 05d2 51 0A                   		mov	a, #10
 813 05d4 9F 0C 00                		mov	!_response+4, a
 814 05d7 F5 0D 00                		clrb	!_response+5
 191:../src/user_functions.c **** 				count = 5;
 815                             		.loc 1 191 0
 816 05da 30 05 00                		movw	ax, #5
 817 05dd BF 04 00                		movw	!_count, ax
 818 05e0 EC 94 06 00             		br	!!.L35
 819                             	.L38:
 192:../src/user_functions.c **** 			} else if (record[2] == '4') {
 820                             		.loc 1 192 0
 821 05e4 8F 00 00                		mov	a, !_record+2
 822 05e7 9D F0                   		mov	r8, a
 823 05e9 4A F0 34                		cmp	r8, #52
 824 05ec 61 E8                   		 skz
 825 05ee EC 6E 06 00             		 br	!!.L39
 193:../src/user_functions.c **** 				P4_bit.no1 = 1;
 826                             		.loc 1 193 0
 827 05f2 C9 F0 04 FF             		movw	r8, #-252
 828 05f6 AD F0                   		movw	ax, r8
 829 05f8 BD F4                   		movw	r12, ax
 830 05fa FA F4                   		movw	hl, r12
 831 05fc 8B                      		mov	a, [hl]
 832 05fd 9D F2                   		mov	r10, a
 833 05ff 6A F2 02                		or	r10, #2
 834 0602 AD F0                   		movw	ax, r8
 835 0604 BD F6                   		movw	r14, ax
 836 0606 DA F6                   		movw	bc, r14
 837 0608 8D F2                   		mov	a, r10
 838 060a 48 00 00                		mov	[bc], a
 194:../src/user_functions.c **** 				P4_bit.no2 = 1;
 839                             		.loc 1 194 0
 840 060d C9 F0 04 FF             		movw	r8, #-252
 841 0611 AD F0                   		movw	ax, r8
 842 0613 BD F4                   		movw	r12, ax
 843 0615 FA F4                   		movw	hl, r12
 844 0617 8B                      		mov	a, [hl]
 845 0618 9D F2                   		mov	r10, a
 846 061a 6A F2 04                		or	r10, #4
 847 061d AD F0                   		movw	ax, r8
 848 061f BD F6                   		movw	r14, ax
 849 0621 DA F6                   		movw	bc, r14
 850 0623 8D F2                   		mov	a, r10
 851 0625 48 00 00                		mov	[bc], a
 195:../src/user_functions.c **** 				P4_bit.no3 = 0;
 852                             		.loc 1 195 0
 853 0628 C9 F0 04 FF             		movw	r8, #-252
 854 062c AD F0                   		movw	ax, r8
 855 062e BD F4                   		movw	r12, ax
 856 0630 FA F4                   		movw	hl, r12
 857 0632 8B                      		mov	a, [hl]
 858 0633 9D F2                   		mov	r10, a
 859 0635 5A F2 F7                		and	r10, #-9
 860 0638 AD F0                   		movw	ax, r8
 861 063a BD F6                   		movw	r14, ax
 862 063c DA F6                   		movw	bc, r14
 863 063e 8D F2                   		mov	a, r10
 864 0640 48 00 00                		mov	[bc], a
 196:../src/user_functions.c **** 				switchState = 4;
 865                             		.loc 1 196 0
 866 0643 51 04                   		mov	a, #4
 867 0645 9F 40 00                		mov	!_switchState, a
 197:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 868                             		.loc 1 197 0
 869 0648 51 24                   		mov	a, #36
 870 064a 9F 08 00                		mov	!_response, a
 871 064d 51 4C                   		mov	a, #76
 872 064f 9F 09 00                		mov	!_response+1, a
 873 0652 51 30                   		mov	a, #48
 874 0654 9F 0A 00                		mov	!_response+2, a
 875 0657 51 0D                   		mov	a, #13
 876 0659 9F 0B 00                		mov	!_response+3, a
 877 065c 51 0A                   		mov	a, #10
 878 065e 9F 0C 00                		mov	!_response+4, a
 879 0661 F5 0D 00                		clrb	!_response+5
 198:../src/user_functions.c **** 				count = 5;
 880                             		.loc 1 198 0
 881 0664 30 05 00                		movw	ax, #5
 882 0667 BF 04 00                		movw	!_count, ax
 883 066a EC 94 06 00             		br	!!.L35
 884                             	.L39:
 199:../src/user_functions.c **** 			} else {
 200:../src/user_functions.c **** 				strcpy(response, "$L2\x0d\x0a");
 885                             		.loc 1 200 0
 886 066e 51 24                   		mov	a, #36
 887 0670 9F 08 00                		mov	!_response, a
 888 0673 51 4C                   		mov	a, #76
 889 0675 9F 09 00                		mov	!_response+1, a
 890 0678 51 32                   		mov	a, #50
 891 067a 9F 0A 00                		mov	!_response+2, a
 892 067d 51 0D                   		mov	a, #13
 893 067f 9F 0B 00                		mov	!_response+3, a
 894 0682 51 0A                   		mov	a, #10
 895 0684 9F 0C 00                		mov	!_response+4, a
 896 0687 F5 0D 00                		clrb	!_response+5
 201:../src/user_functions.c **** 				count = 5;
 897                             		.loc 1 201 0
 898 068a 30 05 00                		movw	ax, #5
 899 068d BF 04 00                		movw	!_count, ax
 202:../src/user_functions.c **** 			}
 203:../src/user_functions.c **** 			break;
 900                             		.loc 1 203 0
 901 0690 EC 0A 0A 00             		br	!!.L9
 902                             	.L35:
 903 0694 EC 0A 0A 00             		br	!!.L9
 904                             	.L24:
 204:../src/user_functions.c **** 		case 'E':
 205:../src/user_functions.c **** 			sprintf(str, "$E0%02d,%02d,%0d\x0d\x0a", voltage, current2,
 905                             		.loc 1 205 0
 906 0698 8F 00 00                		mov	a, !_voltage
 907 069b 9D F0                   		mov	r8, a
 908 069d 70                      		mov	x, a 
 909 069e 51 00                   		mov	a, #0
 910 06a0 BD F4                   		movw	r12, ax
 911 06a2 8F 00 00                		mov	a, !_current2
 912 06a5 9D F0                   		mov	r8, a
 913 06a7 70                      		mov	x, a 
 914 06a8 51 00                   		mov	a, #0
 915 06aa BD F2                   		movw	r10, ax
 916 06ac 8F 00 00                		mov	a, !_current1
 917 06af 9D F0                   		mov	r8, a
 918 06b1 CD F1 00                		mov	r9, #0
 919 06b4 C9 F6 3C 00             		movw	r14, #60
 920 06b8 AE F8                   		movw	ax, sp
 921 06ba BD F6                   		movw	r14, ax
 922 06bc 04 3C 00                		addw	ax, #60
 923 06bf BD F6                   		movw	r14, ax
 924 06c1 04 D5 FF                		addw	ax, #-43
 925 06c4 B8 00                   		movw	[sp], ax
 926 06c6 30 08 00                		movw	ax, #.LC1
 927 06c9 B8 02                   		movw	[sp+2], ax
 928 06cb AD F4                   		movw	ax, r12
 929 06cd B8 04                   		movw	[sp+4], ax
 930 06cf AD F2                   		movw	ax, r10
 931 06d1 B8 06                   		movw	[sp+6], ax
 932 06d3 AD F0                   		movw	ax, r8
 933 06d5 B8 08                   		movw	[sp+8], ax
 934 06d7 FC 00 00 00             		call	!!%code(_sprintf)
 206:../src/user_functions.c **** 					current1);
 207:../src/user_functions.c **** 
 208:../src/user_functions.c **** 			//				  sprintf(str, "%d", voltage);
 209:../src/user_functions.c **** 
 210:../src/user_functions.c **** 			strcpy(response, str);
 935                             		.loc 1 210 0
 936 06db 30 08 00                		movw	ax, #_response
 937 06de B8 00                   		movw	[sp], ax
 938 06e0 C9 F0 3C 00             		movw	r8, #60
 939 06e4 AE F8                   		movw	ax, sp
 940 06e6 BD F0                   		movw	r8, ax
 941 06e8 04 3C 00                		addw	ax, #60
 942 06eb BD F0                   		movw	r8, ax
 943 06ed 04 D5 FF                		addw	ax, #-43
 944 06f0 B8 02                   		movw	[sp+2], ax
 945 06f2 FC 00 00 00             		call	!!%code(_strcpy)
 211:../src/user_functions.c **** 			count = strlen(str);
 946                             		.loc 1 211 0
 947 06f6 C9 F2 3C 00             		movw	r10, #60
 948 06fa AE F8                   		movw	ax, sp
 949 06fc BD F2                   		movw	r10, ax
 950 06fe 04 3C 00                		addw	ax, #60
 951 0701 BD F2                   		movw	r10, ax
 952 0703 04 D5 FF                		addw	ax, #-43
 953 0706 B8 00                   		movw	[sp], ax
 954 0708 FC 00 00 00             		call	!!%code(_strlen)
 955 070c AD F0                   		movw	ax, r8
 956 070e BF 04 00                		movw	!_count, ax
 212:../src/user_functions.c **** 
 213:../src/user_functions.c **** 			break;
 957                             		.loc 1 213 0
 958 0711 EC 0A 0A 00             		br	!!.L9
 959                             	.L17:
 214:../src/user_functions.c **** 
 215:../src/user_functions.c **** 		case 'B':
 216:../src/user_functions.c **** 			setRTC();
 960                             		.loc 1 216 0
 961 0715 FC 00 00 00             		call	!!%code(_setRTC)
 217:../src/user_functions.c **** 			break;
 962                             		.loc 1 217 0
 963 0719 EC 0A 0A 00             		br	!!.L9
 964                             	.L18:
 218:../src/user_functions.c **** 		case 'C':
 219:../src/user_functions.c **** 			getRTC();
 965                             		.loc 1 219 0
 966 071d FC 00 00 00             		call	!!%code(_getRTC)
 220:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2],
 967                             		.loc 1 220 0
 968 0721 8F 00 00                		mov	a, !_date
 969 0724 9D F0                   		mov	r8, a
 970 0726 70                      		mov	x, a 
 971 0727 51 00                   		mov	a, #0
 972 0729 BD EA                   		movw	r18, ax
 973 072b 8F 00 00                		mov	a, !_date+1
 974 072e 9D F0                   		mov	r8, a
 975 0730 70                      		mov	x, a 
 976 0731 51 00                   		mov	a, #0
 977 0733 BD E8                   		movw	r16, ax
 978 0735 8F 00 00                		mov	a, !_date+2
 979 0738 9D F0                   		mov	r8, a
 980 073a 70                      		mov	x, a 
 981 073b 51 00                   		mov	a, #0
 982 073d BD F6                   		movw	r14, ax
 221:../src/user_functions.c **** 					date[3], date[4], date[5]);
 983                             		.loc 1 221 0
 984 073f 8F 00 00                		mov	a, !_date+3
 985 0742 9D F0                   		mov	r8, a
 220:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2],
 986                             		.loc 1 220 0
 987 0744 70                      		mov	x, a 
 988 0745 51 00                   		mov	a, #0
 989 0747 BD F4                   		movw	r12, ax
 990                             		.loc 1 221 0
 991 0749 8F 00 00                		mov	a, !_date+4
 992 074c 9D F0                   		mov	r8, a
 220:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2],
 993                             		.loc 1 220 0
 994 074e 70                      		mov	x, a 
 995 074f 51 00                   		mov	a, #0
 996 0751 BD F2                   		movw	r10, ax
 997                             		.loc 1 221 0
 998 0753 8F 00 00                		mov	a, !_date+5
 999 0756 9D F0                   		mov	r8, a
 220:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2],
 1000                             		.loc 1 220 0
 1001 0758 CD F1 00                		mov	r9, #0
 1002 075b 30 08 00                		movw	ax, #_response
 1003 075e B8 00                   		movw	[sp], ax
 1004 0760 30 1B 00                		movw	ax, #.LC2
 1005 0763 B8 02                   		movw	[sp+2], ax
 1006 0765 AD EA                   		movw	ax, r18
 1007 0767 B8 04                   		movw	[sp+4], ax
 1008 0769 AD E8                   		movw	ax, r16
 1009 076b B8 06                   		movw	[sp+6], ax
 1010 076d AD F6                   		movw	ax, r14
 1011 076f B8 08                   		movw	[sp+8], ax
 1012 0771 AD F4                   		movw	ax, r12
 1013 0773 B8 0A                   		movw	[sp+10], ax
 1014 0775 AD F2                   		movw	ax, r10
 1015 0777 B8 0C                   		movw	[sp+12], ax
 1016 0779 AD F0                   		movw	ax, r8
 1017 077b B8 0E                   		movw	[sp+14], ax
 1018 077d FC 00 00 00             		call	!!%code(_sprintf)
 222:../src/user_functions.c **** 			count = strlen(response);
 1019                             		.loc 1 222 0
 1020 0781 30 08 00                		movw	ax, #_response
 1021 0784 B8 00                   		movw	[sp], ax
 1022 0786 FC 00 00 00             		call	!!%code(_strlen)
 1023 078a AD F0                   		movw	ax, r8
 1024 078c BF 04 00                		movw	!_count, ax
 223:../src/user_functions.c **** 			break;
 1025                             		.loc 1 223 0
 1026 078f EC 0A 0A 00             		br	!!.L9
 1027                             	.L22:
 224:../src/user_functions.c **** 		case 'I':
 225:../src/user_functions.c **** 			sprintf(response, "$I0%03d\x0d\x0a", finalTemp);
 1028                             		.loc 1 225 0
 1029 0793 AF 06 00                		movw	ax, !_finalTemp
 1030 0796 BD F0                   		movw	r8, ax
 1031 0798 30 08 00                		movw	ax, #_response
 1032 079b B8 00                   		movw	[sp], ax
 1033 079d 30 34 00                		movw	ax, #.LC3
 1034 07a0 B8 02                   		movw	[sp+2], ax
 1035 07a2 AD F0                   		movw	ax, r8
 1036 07a4 B8 04                   		movw	[sp+4], ax
 1037 07a6 FC 00 00 00             		call	!!%code(_sprintf)
 226:../src/user_functions.c **** 			count = strlen(response);
 1038                             		.loc 1 226 0
 1039 07aa 30 08 00                		movw	ax, #_response
 1040 07ad B8 00                   		movw	[sp], ax
 1041 07af FC 00 00 00             		call	!!%code(_strlen)
 1042 07b3 AD F0                   		movw	ax, r8
 1043 07b5 BF 04 00                		movw	!_count, ax
 227:../src/user_functions.c **** 			break;
 1044                             		.loc 1 227 0
 1045 07b8 EC 0A 0A 00             		br	!!.L9
 1046                             	.L20:
 228:../src/user_functions.c **** 		case 'K':
 229:../src/user_functions.c **** 			if (1) {
 230:../src/user_functions.c **** 			}
 231:../src/user_functions.c **** 			uint16_t addr = (record[2] - '0') * 1000 + (record[3] - '0') * 100
 1047                             		.loc 1 231 0
 1048 07bc 8F 00 00                		mov	a, !_record+2
 1049 07bf 9D F0                   		mov	r8, a
 1050 07c1 CD F1 00                		mov	r9, #0
 1051 07c4 AD F0                   		movw	ax, r8
 1052 07c6 04 D0 FF                		addw	ax, #-48
 1053 07c9 BD F4                   		movw	r12, ax
 1054 07cb BD F2                   		movw	r10, ax
 1055 07cd 31 2D                   		shlw	ax, 2
 1056 07cf BD F0                   		movw	r8, ax
 1057 07d1 BD F2                   		movw	r10, ax
 1058 07d3 31 5D                   		shlw	ax, 5
 1059 07d5 BD F0                   		movw	r8, ax
 1060 07d7 26 F2                   		subw	ax, r10
 1061 07d9 BD F0                   		movw	r8, ax
 1062 07db 06 F4                   		addw	ax, r12
 1063 07dd BD F0                   		movw	r8, ax
 1064 07df 31 3D                   		shlw	ax, 3
 1065 07e1 BD F0                   		movw	r8, ax
 1066 07e3 BD F6                   		movw	r14, ax
 1067 07e5 8F 00 00                		mov	a, !_record+3
 1068 07e8 9D F0                   		mov	r8, a
 1069 07ea CD F1 00                		mov	r9, #0
 1070 07ed AD F0                   		movw	ax, r8
 1071 07ef 04 D0 FF                		addw	ax, #-48
 1072 07f2 BD F2                   		movw	r10, ax
 1073 07f4 BD F0                   		movw	r8, ax
 1074 07f6 01                      		addw	ax, ax
 1075 07f7 BD F0                   		movw	r8, ax
 1076 07f9 06 F2                   		addw	ax, r10
 1077 07fb BD F0                   		movw	r8, ax
 1078 07fd 31 5D                   		shlw	ax, 5
 1079 07ff BD F4                   		movw	r12, ax
 1080 0801 AD F0                   		movw	ax, r8
 1081 0803 06 F4                   		addw	ax, r12
 1082 0805 BD F0                   		movw	r8, ax
 1083 0807 06 F2                   		addw	ax, r10
 1084 0809 BD F0                   		movw	r8, ax
 1085 080b AD F6                   		movw	ax, r14
 1086 080d 06 F0                   		addw	ax, r8
 1087 080f BD F2                   		movw	r10, ax
 232:../src/user_functions.c **** 					+ (record[4] - '0') * 10 + (record[5] - '0');
 1088                             		.loc 1 232 0
 1089 0811 8F 00 00                		mov	a, !_record+4
 1090 0814 9D F0                   		mov	r8, a
 1091 0816 CD F1 00                		mov	r9, #0
 1092 0819 AD F0                   		movw	ax, r8
 1093 081b 04 D0 FF                		addw	ax, #-48
 1094 081e BD F0                   		movw	r8, ax
 1095 0820 01                      		addw	ax, ax
 1096 0821 BD F0                   		movw	r8, ax
 1097 0823 31 2D                   		shlw	ax, 2
 1098 0825 BD F4                   		movw	r12, ax
 1099 0827 AD F0                   		movw	ax, r8
 1100 0829 06 F4                   		addw	ax, r12
 1101 082b BD F0                   		movw	r8, ax
 1102 082d AD F2                   		movw	ax, r10
 1103 082f 06 F0                   		addw	ax, r8
 1104 0831 BD F2                   		movw	r10, ax
 1105 0833 8F 00 00                		mov	a, !_record+5
 1106 0836 9D F0                   		mov	r8, a
 1107 0838 CD F1 00                		mov	r9, #0
 1108 083b AD F0                   		movw	ax, r8
 1109 083d 04 D0 FF                		addw	ax, #-48
 1110 0840 BD F0                   		movw	r8, ax
 1111 0842 AD F2                   		movw	ax, r10
 1112 0844 06 F0                   		addw	ax, r8
 1113 0846 BD F0                   		movw	r8, ax
 231:../src/user_functions.c **** 					+ (record[4] - '0') * 10 + (record[5] - '0');
 1114                             		.loc 1 231 0
 1115 0848 B8 36                   		movw	[sp+54], ax
 233:../src/user_functions.c **** 			uint8_t len = record[7] - '0';
 1116                             		.loc 1 233 0
 1117 084a 8F 00 00                		mov	a, !_record+7
 1118 084d 9D F0                   		mov	r8, a
 1119 084f 0C D0                   		add	a, #-48
 1120 0851 98 35                   		mov	[sp+53], a
 234:../src/user_functions.c **** 			len = len + (record[6] - '0') * 10;
 1121                             		.loc 1 234 0
 1122 0853 8F 00 00                		mov	a, !_record+6
 1123 0856 9D F0                   		mov	r8, a
 1124 0858 CD F1 00                		mov	r9, #0
 1125 085b AD F0                   		movw	ax, r8
 1126 085d 04 D0 FF                		addw	ax, #-48
 1127 0860 BD F0                   		movw	r8, ax
 1128 0862 8D F0                   		mov	a, r8
 1129 0864 61 01                   		add	a, a
 1130 0866 9D F0                   		mov	r8, a
 1131 0868 31 29                   		shl	a, 2
 1132 086a 9D F1                   		mov	r9, a
 1133 086c 76                      		mov	l, a
 1134 086d 8D F0                   		mov	a, r8
 1135 086f 61 0E                   		add	a, l
 1136 0871 9D F0                   		mov	r8, a
 1137 0873 76                      		mov	l, a
 1138 0874 88 35                   		mov	a, [sp+53]
 1139 0876 61 0E                   		add	a, l
 1140 0878 98 35                   		mov	[sp+53], a
 235:../src/user_functions.c **** 			if (len > 32) {
 1141                             		.loc 1 235 0
 1142 087a 4C 20                   		cmp	a, #32
 1143 087c 61 E3                   		 skh
 1144 087e EC 9F 08 00             		 br	!!.L40
 236:../src/user_functions.c **** 				sprintf(response, "$K%d", len);
 1145                             		.loc 1 236 0
 1146 0882 88 35                   		mov	a, [sp+53]
 1147 0884 70                      		mov	x, a 
 1148 0885 51 00                   		mov	a, #0
 1149 0887 BD F0                   		movw	r8, ax
 1150 0889 30 08 00                		movw	ax, #_response
 1151 088c B8 00                   		movw	[sp], ax
 1152 088e 30 3E 00                		movw	ax, #.LC4
 1153 0891 B8 02                   		movw	[sp+2], ax
 1154 0893 AD F0                   		movw	ax, r8
 1155 0895 B8 04                   		movw	[sp+4], ax
 1156 0897 FC 00 00 00             		call	!!%code(_sprintf)
 237:../src/user_functions.c **** 			} else {
 238:../src/user_functions.c **** 				read(addr, len);
 239:../src/user_functions.c **** 			}
 240:../src/user_functions.c **** 			break;
 1157                             		.loc 1 240 0
 1158 089b EC 0A 0A 00             		br	!!.L9
 1159                             	.L40:
 238:../src/user_functions.c **** 			}
 1160                             		.loc 1 238 0
 1161 089f A8 36                   		movw	ax, [sp+54]
 1162 08a1 BD F0                   		movw	r8, ax
 1163 08a3 B8 00                   		movw	[sp], ax
 1164 08a5 88 35                   		mov	a, [sp+53]
 1165 08a7 9D F0                   		mov	r8, a
 1166 08a9 98 02                   		mov	[sp+2], a
 1167 08ab FC 00 00 00             		call	!!%code(_read)
 1168                             		.loc 1 240 0
 1169 08af EC 0A 0A 00             		br	!!.L9
 1170                             	.L23:
 241:../src/user_functions.c **** 		case 'J':
 242:../src/user_functions.c **** 			if (1) {
 243:../src/user_functions.c **** 			}
 244:../src/user_functions.c **** 			uint16_t address = (record[2] - '0') * 1000
 1171                             		.loc 1 244 0
 1172 08b3 8F 00 00                		mov	a, !_record+2
 1173 08b6 9D F0                   		mov	r8, a
 1174 08b8 CD F1 00                		mov	r9, #0
 1175 08bb AD F0                   		movw	ax, r8
 1176 08bd 04 D0 FF                		addw	ax, #-48
 1177 08c0 BD F4                   		movw	r12, ax
 1178 08c2 BD F2                   		movw	r10, ax
 1179 08c4 31 2D                   		shlw	ax, 2
 1180 08c6 BD F0                   		movw	r8, ax
 1181 08c8 BD F2                   		movw	r10, ax
 1182 08ca 31 5D                   		shlw	ax, 5
 1183 08cc BD F0                   		movw	r8, ax
 1184 08ce 26 F2                   		subw	ax, r10
 1185 08d0 BD F0                   		movw	r8, ax
 1186 08d2 06 F4                   		addw	ax, r12
 1187 08d4 BD F0                   		movw	r8, ax
 1188 08d6 31 3D                   		shlw	ax, 3
 1189 08d8 BD F0                   		movw	r8, ax
 1190 08da BD F6                   		movw	r14, ax
 245:../src/user_functions.c **** 					+ (record[3] - '0') * 100 + (record[4] - '0') * 10
 1191                             		.loc 1 245 0
 1192 08dc 8F 00 00                		mov	a, !_record+3
 1193 08df 9D F0                   		mov	r8, a
 1194 08e1 CD F1 00                		mov	r9, #0
 1195 08e4 AD F0                   		movw	ax, r8
 1196 08e6 04 D0 FF                		addw	ax, #-48
 1197 08e9 BD F2                   		movw	r10, ax
 1198 08eb BD F0                   		movw	r8, ax
 1199 08ed 01                      		addw	ax, ax
 1200 08ee BD F0                   		movw	r8, ax
 1201 08f0 06 F2                   		addw	ax, r10
 1202 08f2 BD F0                   		movw	r8, ax
 1203 08f4 31 5D                   		shlw	ax, 5
 1204 08f6 BD F4                   		movw	r12, ax
 1205 08f8 AD F0                   		movw	ax, r8
 1206 08fa 06 F4                   		addw	ax, r12
 1207 08fc BD F0                   		movw	r8, ax
 1208 08fe 06 F2                   		addw	ax, r10
 1209 0900 BD F0                   		movw	r8, ax
 1210 0902 AD F6                   		movw	ax, r14
 1211 0904 06 F0                   		addw	ax, r8
 1212 0906 BD F2                   		movw	r10, ax
 1213 0908 8F 00 00                		mov	a, !_record+4
 1214 090b 9D F0                   		mov	r8, a
 1215 090d CD F1 00                		mov	r9, #0
 1216 0910 AD F0                   		movw	ax, r8
 1217 0912 04 D0 FF                		addw	ax, #-48
 1218 0915 BD F0                   		movw	r8, ax
 1219 0917 01                      		addw	ax, ax
 1220 0918 BD F0                   		movw	r8, ax
 1221 091a 31 2D                   		shlw	ax, 2
 1222 091c BD F4                   		movw	r12, ax
 1223 091e AD F0                   		movw	ax, r8
 1224 0920 06 F4                   		addw	ax, r12
 1225 0922 BD F0                   		movw	r8, ax
 1226 0924 AD F2                   		movw	ax, r10
 1227 0926 06 F0                   		addw	ax, r8
 1228 0928 BD F2                   		movw	r10, ax
 246:../src/user_functions.c **** 					+ (record[5] - '0');
 1229                             		.loc 1 246 0
 1230 092a 8F 00 00                		mov	a, !_record+5
 1231 092d 9D F0                   		mov	r8, a
 1232 092f CD F1 00                		mov	r9, #0
 1233 0932 AD F0                   		movw	ax, r8
 1234 0934 04 D0 FF                		addw	ax, #-48
 1235 0937 BD F0                   		movw	r8, ax
 1236 0939 AD F2                   		movw	ax, r10
 1237 093b 06 F0                   		addw	ax, r8
 1238 093d BD F0                   		movw	r8, ax
 244:../src/user_functions.c **** 					+ (record[3] - '0') * 100 + (record[4] - '0') * 10
 1239                             		.loc 1 244 0
 1240 093f B8 32                   		movw	[sp+50], ax
 247:../src/user_functions.c **** 			writeMem(address);
 1241                             		.loc 1 247 0
 1242 0941 BD F0                   		movw	r8, ax
 1243 0943 B8 00                   		movw	[sp], ax
 1244 0945 FC 00 00 00             		call	!!%code(_writeMem)
 248:../src/user_functions.c **** 			break;
 1245                             		.loc 1 248 0
 1246 0949 EC 0A 0A 00             		br	!!.L9
 1247                             	.L25:
 249:../src/user_functions.c **** 		case 'M':
 250:../src/user_functions.c **** 			if (1) {
 251:../src/user_functions.c **** 
 252:../src/user_functions.c **** 			}
 253:../src/user_functions.c **** 			int i = 2;
 1248                             		.loc 1 253 0
 1249 094d 30 02 00                		movw	ax, #2
 1250 0950 B8 3A                   		movw	[sp+58], ax
 254:../src/user_functions.c **** 			uint16_t log = 0;
 1251                             		.loc 1 254 0
 1252 0952 F6                      		clrw	ax
 1253 0953 B8 38                   		movw	[sp+56], ax
 255:../src/user_functions.c **** 			while (record[i] != '\x0d') {
 1254                             		.loc 1 255 0
 1255 0955 EC 8B 09 00             		br	!!.L42
 1256                             	.L43:
 256:../src/user_functions.c **** 				log = log * 10;
 1257                             		.loc 1 256 0
 1258 0959 A8 38                   		movw	ax, [sp+56]
 1259 095b BD F0                   		movw	r8, ax
 1260 095d 01                      		addw	ax, ax
 1261 095e BD F0                   		movw	r8, ax
 1262 0960 31 2D                   		shlw	ax, 2
 1263 0962 BD F2                   		movw	r10, ax
 1264 0964 AD F0                   		movw	ax, r8
 1265 0966 06 F2                   		addw	ax, r10
 1266 0968 B8 38                   		movw	[sp+56], ax
 257:../src/user_functions.c **** 				log += record[i] - '0';
 1267                             		.loc 1 257 0
 1268 096a A8 3A                   		movw	ax, [sp+58]
 1269 096c 04 00 00                		addw	ax, #_record
 1270 096f BD F0                   		movw	r8, ax
 1271 0971 BD F4                   		movw	r12, ax
 1272 0973 FA F4                   		movw	hl, r12
 1273 0975 8B                      		mov	a, [hl]
 1274 0976 9D F0                   		mov	r8, a
 1275 0978 CD F1 00                		mov	r9, #0
 1276 097b A8 38                   		movw	ax, [sp+56]
 1277 097d 06 F0                   		addw	ax, r8
 1278 097f BD F0                   		movw	r8, ax
 1279 0981 04 D0 FF                		addw	ax, #-48
 1280 0984 B8 38                   		movw	[sp+56], ax
 258:../src/user_functions.c **** 				i++;
 1281                             		.loc 1 258 0
 1282 0986 A8 3A                   		movw	ax, [sp+58]
 1283 0988 A1                      		incw	ax
 1284 0989 B8 3A                   		movw	[sp+58], ax
 1285                             	.L42:
 255:../src/user_functions.c **** 				log = log * 10;
 1286                             		.loc 1 255 0
 1287 098b A8 3A                   		movw	ax, [sp+58]
 1288 098d 04 00 00                		addw	ax, #_record
 1289 0990 BD F0                   		movw	r8, ax
 1290 0992 BD F6                   		movw	r14, ax
 1291 0994 FA F6                   		movw	hl, r14
 1292 0996 8B                      		mov	a, [hl]
 1293 0997 9D F0                   		mov	r8, a
 1294 0999 4A F0 0D                		cmp	r8, #13
 1295 099c 61 E8                   		 skz
 1296 099e EC 59 09 00             		 br	!!.L43
 259:../src/user_functions.c **** 			}
 260:../src/user_functions.c **** 			readLog(log);
 1297                             		.loc 1 260 0
 1298 09a2 A8 38                   		movw	ax, [sp+56]
 1299 09a4 BD F0                   		movw	r8, ax
 1300 09a6 B8 00                   		movw	[sp], ax
 1301 09a8 FC 00 00 00             		call	!!%code(_readLog)
 261:../src/user_functions.c **** 			break;
 1302                             		.loc 1 261 0
 1303 09ac EC 0A 0A 00             		br	!!.L9
 1304                             	.L27:
 262:../src/user_functions.c **** 
 263:../src/user_functions.c **** 		case 'N':
 264:../src/user_functions.c **** 
 265:../src/user_functions.c **** 			sprintf(response, "$N02427\x0d\x0a");
 1305                             		.loc 1 265 0
 1306 09b0 51 24                   		mov	a, #36
 1307 09b2 9F 08 00                		mov	!_response, a
 1308 09b5 51 4E                   		mov	a, #78
 1309 09b7 9F 09 00                		mov	!_response+1, a
 1310 09ba 51 30                   		mov	a, #48
 1311 09bc 9F 0A 00                		mov	!_response+2, a
 1312 09bf 51 32                   		mov	a, #50
 1313 09c1 9F 0B 00                		mov	!_response+3, a
 1314 09c4 51 34                   		mov	a, #52
 1315 09c6 9F 0C 00                		mov	!_response+4, a
 1316 09c9 51 32                   		mov	a, #50
 1317 09cb 9F 0D 00                		mov	!_response+5, a
 1318 09ce 51 37                   		mov	a, #55
 1319 09d0 9F 0E 00                		mov	!_response+6, a
 1320 09d3 51 0D                   		mov	a, #13
 1321 09d5 9F 0F 00                		mov	!_response+7, a
 1322 09d8 51 0A                   		mov	a, #10
 1323 09da 9F 10 00                		mov	!_response+8, a
 1324 09dd F5 11 00                		clrb	!_response+9
 266:../src/user_functions.c **** 			count = 9;
 1325                             		.loc 1 266 0
 1326 09e0 30 09 00                		movw	ax, #9
 1327 09e3 BF 04 00                		movw	!_count, ax
 267:../src/user_functions.c **** 			break;
 1328                             		.loc 1 267 0
 1329 09e6 EC 0A 0A 00             		br	!!.L9
 1330                             	.L10:
 268:../src/user_functions.c **** 		default:
 269:../src/user_functions.c **** 			sprintf(response, "$%c1\x0d\x0a", record[1]);
 1331                             		.loc 1 269 0
 1332 09ea 8F 00 00                		mov	a, !_record+1
 1333 09ed 9D F0                   		mov	r8, a
 1334 09ef CD F1 00                		mov	r9, #0
 1335 09f2 30 08 00                		movw	ax, #_response
 1336 09f5 B8 00                   		movw	[sp], ax
 1337 09f7 30 43 00                		movw	ax, #.LC5
 1338 09fa B8 02                   		movw	[sp+2], ax
 1339 09fc AD F0                   		movw	ax, r8
 1340 09fe B8 04                   		movw	[sp+4], ax
 1341 0a00 FC 00 00 00             		call	!!%code(_sprintf)
 270:../src/user_functions.c **** 			count = 5;
 1342                             		.loc 1 270 0
 1343 0a04 30 05 00                		movw	ax, #5
 1344 0a07 BF 04 00                		movw	!_count, ax
 1345                             	.L9:
 1346                             	.LBE2:
 271:../src/user_functions.c **** //				 strcpy(response, "$");
 272:../src/user_functions.c **** //				 strcat(response, &record[1]);
 273:../src/user_functions.c **** //				 strcat(response, "1\x0d\x0a"); count = 5;
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** 		}
 276:../src/user_functions.c **** 	}
 277:../src/user_functions.c **** 
 278:../src/user_functions.c **** 	R_UART1_Send(response, strlen(response));
 1347                             		.loc 1 278 0
 1348 0a0a 30 08 00                		movw	ax, #_response
 1349 0a0d B8 00                   		movw	[sp], ax
 1350 0a0f FC 00 00 00             		call	!!%code(_strlen)
 1351 0a13 30 08 00                		movw	ax, #_response
 1352 0a16 B8 00                   		movw	[sp], ax
 1353 0a18 AD F0                   		movw	ax, r8
 1354 0a1a B8 02                   		movw	[sp+2], ax
 1355 0a1c FC 00 00 00             		call	!!%code(_R_UART1_Send)
 279:../src/user_functions.c **** 	count = 0;
 1356                             		.loc 1 279 0
 1357 0a20 F6                      		clrw	ax
 1358 0a21 BF 04 00                		movw	!_count, ax
 280:../src/user_functions.c **** }
 1359                             		.loc 1 280 0
 1360 0a24 10 3C                   		addw	sp, #60
 1361 0a26 61 EF                   		sel	rb2
 1362 0a28 C2                      		pop	bc ; r18
 1363 0a29 C0                      		pop	ax ; r16
 1364 0a2a 61 CF                   		sel	rb0
 1365 0a2c D7                      		ret
 1366                             	.LFE1:
 1368                             		.global	_errorTest
 1370                             	_errorTest:
 1371                             	.LFB2:
 281:../src/user_functions.c **** 
 282:../src/user_functions.c **** int errorTest() {
 1372                             		.loc 1 282 0
 1373                             		; start of function
 1374                             		; locals: 8 bytes
 1375                             		; outgoing: 4 bytes
 1376 0a2d 20 0C                   		subw	sp, #12
 1377                             	.LCFI4:
 283:../src/user_functions.c **** 
 284:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 285:../src/user_functions.c **** //	}
 286:../src/user_functions.c **** //	else{
 287:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 288:../src/user_functions.c **** //		strcpy(record, validChar);
 289:../src/user_functions.c **** //		count = 5;
 290:../src/user_functions.c **** //		return 0;
 291:../src/user_functions.c **** //	}
 292:../src/user_functions.c **** 
 293:../src/user_functions.c **** 	if (record[strlen(record) - 1] != '\x0a') {	//INVALID PARAMETERS
 1378                             		.loc 1 293 0
 1379 0a2f 30 00 00                		movw	ax, #_record
 1380 0a32 B8 00                   		movw	[sp], ax
 1381 0a34 FC 00 00 00             		call	!!%code(_strlen)
 1382 0a38 B6 F0                   		decw	r8
 1383 0a3a AD F0                   		movw	ax, r8
 1384 0a3c 04 00 00                		addw	ax, #_record
 1385 0a3f 16                      		movw	hl, ax
 1386 0a40 8B                      		mov	a, [hl]
 1387 0a41 9D F0                   		mov	r8, a
 1388 0a43 4A F0 0A                		cmp	r8, #10
 1389 0a46 61 F8                   		 sknz
 1390 0a48 EC 8B 0A 00             		 br	!!.L45
 1391                             	.LBB3:
 294:../src/user_functions.c **** 		char validChar[] = { '$', record[1], '2', '\x0d', '\x0a' };
 1392                             		.loc 1 294 0
 1393 0a4c 51 24                   		mov	a, #36
 1394 0a4e 98 07                   		mov	[sp+7], a
 1395 0a50 8F 00 00                		mov	a, !_record+1
 1396 0a53 9D F0                   		mov	r8, a
 1397 0a55 98 08                   		mov	[sp+8], a
 1398 0a57 51 32                   		mov	a, #50
 1399 0a59 98 09                   		mov	[sp+9], a
 1400 0a5b 51 0D                   		mov	a, #13
 1401 0a5d 98 0A                   		mov	[sp+10], a
 1402 0a5f 51 0A                   		mov	a, #10
 1403 0a61 98 0B                   		mov	[sp+11], a
 295:../src/user_functions.c **** 		strcpy(record, validChar);
 1404                             		.loc 1 295 0
 1405 0a63 30 00 00                		movw	ax, #_record
 1406 0a66 B8 00                   		movw	[sp], ax
 1407 0a68 C9 F0 0C 00             		movw	r8, #12
 1408 0a6c AE F8                   		movw	ax, sp
 1409 0a6e BD F0                   		movw	r8, ax
 1410 0a70 04 0C 00                		addw	ax, #12
 1411 0a73 BD F0                   		movw	r8, ax
 1412 0a75 04 FB FF                		addw	ax, #-5
 1413 0a78 B8 02                   		movw	[sp+2], ax
 1414 0a7a FC 00 00 00             		call	!!%code(_strcpy)
 296:../src/user_functions.c **** 		count = 5;
 1415                             		.loc 1 296 0
 1416 0a7e 30 05 00                		movw	ax, #5
 1417 0a81 BF 04 00                		movw	!_count, ax
 297:../src/user_functions.c **** 		return 0;
 1418                             		.loc 1 297 0
 1419 0a84 F6                      		clrw	ax
 1420 0a85 B8 04                   		movw	[sp+4], ax
 1421 0a87 EC 8E 0A 00             		br	!!.L46
 1422                             	.L45:
 1423                             	.LBE3:
 298:../src/user_functions.c **** 	}
 299:../src/user_functions.c **** 
 300:../src/user_functions.c **** 	return 1;
 1424                             		.loc 1 300 0
 1425 0a8b E6                      		onew	ax
 1426 0a8c B8 04                   		movw	[sp+4], ax
 1427                             	.L46:
 1428 0a8e A8 04                   		movw	ax, [sp+4]
 1429 0a90 BD F0                   		movw	r8, ax
 301:../src/user_functions.c **** }
 1430                             		.loc 1 301 0 discriminator 1
 1431 0a92 10 0C                   		addw	sp, #12
 1432 0a94 D7                      		ret
 1433                             	.LFE2:
 1435                             		.global	_displayLCD
 1437                             	_displayLCD:
 1438                             	.LFB3:
 302:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 303:../src/user_functions.c **** //reset = 0 just keep going
 304:../src/user_functions.c **** 
 305:../src/user_functions.c **** void displayLCD(int reset) {
 1439                             		.loc 1 305 0
 1440                             		; start of function
 1441                             		; push 2: r16
 1442                             		; locals: 2 bytes
 1443                             		; outgoing: 4 bytes
 1444 0a95 61 EF                   		sel	rb2
 1445 0a97 C1                      		push	ax ; r16
 1446                             	.LCFI5:
 1447 0a98 61 CF                   		sel	rb0
 1448 0a9a 20 06                   		subw	sp, #6
 1449                             	.LCFI6:
 306:../src/user_functions.c **** 
 307:../src/user_functions.c **** 	if (reset) {
 1450                             		.loc 1 307 0
 1451 0a9c A8 0C                   		movw	ax, [sp+12]
 1452 0a9e 44 00 00                		cmpw	ax, #0
 1453 0aa1 61 F8                   		 sknz
 1454 0aa3 EC B3 0A 00             		 br	!!.L48
 308:../src/user_functions.c **** 		offset = 0;
 1455                             		.loc 1 308 0
 1456 0aa7 F6                      		clrw	ax
 1457 0aa8 BF 3E 00                		movw	!_offset, ax
 309:../src/user_functions.c **** 		display = 1;
 1458                             		.loc 1 309 0
 1459 0aab E6                      		onew	ax
 1460 0aac BF 3C 00                		movw	!_display, ax
 310:../src/user_functions.c **** 		scrollCount = 0;
 1461                             		.loc 1 310 0
 1462 0aaf F6                      		clrw	ax
 1463 0ab0 BF 00 00                		movw	!_scrollCount, ax
 1464                             	.L48:
 311:../src/user_functions.c **** 	}
 312:../src/user_functions.c **** 
 313:../src/user_functions.c **** 	if (display) {
 1465                             		.loc 1 313 0
 1466 0ab3 AF 3C 00                		movw	ax, !_display
 1467 0ab6 BD F0                   		movw	r8, ax
 1468 0ab8 44 00 00                		cmpw	ax, #0
 1469 0abb 61 F8                   		 sknz
 1470 0abd EC 6D 0B 00             		 br	!!.L49
 1471                             	.LBB4:
 314:../src/user_functions.c **** 
 315:../src/user_functions.c **** 		int i;
 316:../src/user_functions.c **** 
 317:../src/user_functions.c **** 		writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1472                             		.loc 1 317 0
 1473 0ac1 F1                      		clrb	a
 1474 0ac2 98 00                   		mov	[sp], a
 1475 0ac4 E1                      		oneb	a
 1476 0ac5 98 02                   		mov	[sp+2], a
 1477 0ac7 FC 00 00 00             		call	!!%code(_writeByteLcd)
 318:../src/user_functions.c **** 		delayNoInt(1640);
 1478                             		.loc 1 318 0
 1479 0acb 30 68 06                		movw	ax, #1640
 1480 0ace B8 00                   		movw	[sp], ax
 1481 0ad0 FC 00 00 00             		call	!!%code(_delayNoInt)
 319:../src/user_functions.c **** 
 320:../src/user_functions.c **** 		writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1482                             		.loc 1 320 0
 1483 0ad4 F1                      		clrb	a
 1484 0ad5 98 00                   		mov	[sp], a
 1485 0ad7 51 80                   		mov	a, #-128
 1486 0ad9 98 02                   		mov	[sp+2], a
 1487 0adb FC 00 00 00             		call	!!%code(_writeByteLcd)
 321:../src/user_functions.c **** 		delayNoInt(1640);
 1488                             		.loc 1 321 0
 1489 0adf 30 68 06                		movw	ax, #1640
 1490 0ae2 B8 00                   		movw	[sp], ax
 1491 0ae4 FC 00 00 00             		call	!!%code(_delayNoInt)
 322:../src/user_functions.c **** 
 323:../src/user_functions.c **** 		for (i = offset; i < strlen(display_string) - 2; i++) {
 1492                             		.loc 1 323 0
 1493 0ae8 AF 3E 00                		movw	ax, !_offset
 1494 0aeb BD F0                   		movw	r8, ax
 1495 0aed B8 04                   		movw	[sp+4], ax
 1496 0aef EC 46 0B 00             		br	!!.L50
 1497                             	.L52:
 324:../src/user_functions.c **** 
 325:../src/user_functions.c **** 			if (i == (8 + offset)) {
 1498                             		.loc 1 325 0
 1499 0af3 AF 3E 00                		movw	ax, !_offset
 1500 0af6 BD F0                   		movw	r8, ax
 1501 0af8 04 08 00                		addw	ax, #8
 1502 0afb BD F2                   		movw	r10, ax
 1503 0afd A8 04                   		movw	ax, [sp+4]
 1504 0aff BD F0                   		movw	r8, ax
 1505 0b01 AD F2                   		movw	ax, r10
 1506 0b03 46 F0                   		cmpw	ax, r8
 1507 0b05 61 E8                   		 skz
 1508 0b07 EC 1F 0B 00             		 br	!!.L51
 326:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1509                             		.loc 1 326 0
 1510 0b0b F1                      		clrb	a
 1511 0b0c 98 00                   		mov	[sp], a
 1512 0b0e 51 C0                   		mov	a, #-64
 1513 0b10 98 02                   		mov	[sp+2], a
 1514 0b12 FC 00 00 00             		call	!!%code(_writeByteLcd)
 327:../src/user_functions.c **** 				delayNoInt(1640);
 1515                             		.loc 1 327 0
 1516 0b16 30 68 06                		movw	ax, #1640
 1517 0b19 B8 00                   		movw	[sp], ax
 1518 0b1b FC 00 00 00             		call	!!%code(_delayNoInt)
 1519                             	.L51:
 328:../src/user_functions.c **** 			}
 329:../src/user_functions.c **** 
 330:../src/user_functions.c **** 			writeByteLcd(LCD_DATA_WR, display_string[i]);
 1520                             		.loc 1 330 0 discriminator 2
 1521 0b1f A8 04                   		movw	ax, [sp+4]
 1522 0b21 04 00 00                		addw	ax, #_display_string
 1523 0b24 BD F0                   		movw	r8, ax
 1524 0b26 BD F2                   		movw	r10, ax
 1525 0b28 FA F2                   		movw	hl, r10
 1526 0b2a 8B                      		mov	a, [hl]
 1527 0b2b 9D F0                   		mov	r8, a
 1528 0b2d E1                      		oneb	a
 1529 0b2e 98 00                   		mov	[sp], a
 1530 0b30 8D F0                   		mov	a, r8
 1531 0b32 98 02                   		mov	[sp+2], a
 1532 0b34 FC 00 00 00             		call	!!%code(_writeByteLcd)
 331:../src/user_functions.c **** 			delayNoInt(40);
 1533                             		.loc 1 331 0 discriminator 2
 1534 0b38 30 28 00                		movw	ax, #40
 1535 0b3b B8 00                   		movw	[sp], ax
 1536 0b3d FC 00 00 00             		call	!!%code(_delayNoInt)
 323:../src/user_functions.c **** 
 1537                             		.loc 1 323 0 discriminator 2
 1538 0b41 A8 04                   		movw	ax, [sp+4]
 1539 0b43 A1                      		incw	ax
 1540 0b44 B8 04                   		movw	[sp+4], ax
 1541                             	.L50:
 323:../src/user_functions.c **** 
 1542                             		.loc 1 323 0 is_stmt 0 discriminator 1
 1543 0b46 A8 04                   		movw	ax, [sp+4]
 1544 0b48 BD E8                   		movw	r16, ax
 1545 0b4a 30 00 00                		movw	ax, #_display_string
 1546 0b4d B8 00                   		movw	[sp], ax
 1547 0b4f FC 00 00 00             		call	!!%code(_strlen)
 1548 0b53 B6 F0                   		decw	r8 
 1549 0b55 B6 F0                   		decw	r8
 1550 0b57 AD E8                   		movw	ax, r16
 1551 0b59 46 F0                   		cmpw	ax, r8
 1552 0b5b 61 D8                   		 sknc
 1553 0b5d EC F3 0A 00             		 br	!!.L52
 332:../src/user_functions.c **** 
 333:../src/user_functions.c **** 		}
 334:../src/user_functions.c **** 		offset++;
 1554                             		.loc 1 334 0 is_stmt 1
 1555 0b61 AF 3E 00                		movw	ax, !_offset
 1556 0b64 BD F0                   		movw	r8, ax
 1557 0b66 A6 F0                   		incw	r8
 1558 0b68 AD F0                   		movw	ax, r8
 1559 0b6a BF 3E 00                		movw	!_offset, ax
 1560                             	.L49:
 1561                             	.LBE4:
 335:../src/user_functions.c **** 
 336:../src/user_functions.c **** 	}
 337:../src/user_functions.c **** 
 338:../src/user_functions.c **** 	if (offset >= (strlen(display_string) - 17)
 1562                             		.loc 1 338 0
 1563 0b6d AF 3E 00                		movw	ax, !_offset
 1564 0b70 BD F0                   		movw	r8, ax
 1565 0b72 BD E8                   		movw	r16, ax
 1566 0b74 30 00 00                		movw	ax, #_display_string
 1567 0b77 B8 00                   		movw	[sp], ax
 1568 0b79 FC 00 00 00             		call	!!%code(_strlen)
 1569 0b7d AD F0                   		movw	ax, r8
 1570 0b7f 04 EF FF                		addw	ax, #-17
 1571 0b82 BD F0                   		movw	r8, ax
 1572 0b84 AD E8                   		movw	ax, r16
 1573 0b86 46 F0                   		cmpw	ax, r8
 1574 0b88 61 C8                   		 skc
 1575 0b8a EC A2 0B 00             		 br	!!.L53
 339:../src/user_functions.c **** 			|| strlen(display_string) <= 18) {
 1576                             		.loc 1 339 0
 1577 0b8e 30 00 00                		movw	ax, #_display_string
 1578 0b91 B8 00                   		movw	[sp], ax
 1579 0b93 FC 00 00 00             		call	!!%code(_strlen)
 1580 0b97 AD F0                   		movw	ax, r8
 1581 0b99 44 12 00                		cmpw	ax, #18
 1582 0b9c 61 F3                   		 sknh
 1583 0b9e EC A6 0B 00             		 br	!!.L47
 1584                             	.L53:
 340:../src/user_functions.c **** 		display = 0;
 1585                             		.loc 1 340 0
 1586 0ba2 F6                      		clrw	ax
 1587 0ba3 BF 3C 00                		movw	!_display, ax
 1588                             	.L47:
 341:../src/user_functions.c **** 	}
 342:../src/user_functions.c **** 
 343:../src/user_functions.c **** }
 1589                             		.loc 1 343 0
 1590 0ba6 10 06                   		addw	sp, #6
 1591 0ba8 61 EF                   		sel	rb2
 1592 0baa C0                      		pop	ax ; r16
 1593 0bab 61 CF                   		sel	rb0
 1594 0bad D7                      		ret
 1595                             	.LFE3:
 1597                             		.global	_collectADC
 1599                             	_collectADC:
 1600                             	.LFB4:
 344:../src/user_functions.c **** 
 345:../src/user_functions.c **** void collectADC() {
 1601                             		.loc 1 345 0
 1602                             		; start of function
 1603                             		; outgoing: 2 bytes
 1604 0bae 20 02                   		subw	sp, #2
 1605                             	.LCFI7:
 346:../src/user_functions.c **** 
 347:../src/user_functions.c **** 	ADS = _00_AD_INPUT_CHANNEL_0;
 1606                             		.loc 1 347 0
 1607 0bb0 C9 F0 31 FF             		movw	r8, #-207
 1608 0bb4 AD F0                   		movw	ax, r8
 1609 0bb6 BD F2                   		movw	r10, ax
 1610 0bb8 DA F2                   		movw	bc, r10
 1611 0bba F1                      		clrb	a
 1612 0bbb 48 00 00                		mov	[bc], a
 348:../src/user_functions.c **** 	R_ADC_Start();
 1613                             		.loc 1 348 0
 1614 0bbe FC 00 00 00             		call	!!%code(_R_ADC_Start)
 349:../src/user_functions.c **** 	while (ADCS)
 1615                             		.loc 1 349 0
 1616 0bc2 00                      		nop
 1617                             	.L56:
 1618                             		.loc 1 349 0 is_stmt 0 discriminator 1
 1619 0bc3 C9 F0 30 FF             		movw	r8, #-208
 1620 0bc7 AD F0                   		movw	ax, r8
 1621 0bc9 BD F2                   		movw	r10, ax
 1622 0bcb FA F2                   		movw	hl, r10
 1623 0bcd 8B                      		mov	a, [hl]
 1624 0bce 9D F0                   		mov	r8, a
 1625 0bd0 31 7A                   		shr	a, 7
 1626 0bd2 9D F0                   		mov	r8, a
 1627 0bd4 D4 F0                   		cmp0	r8
 1628 0bd6 61 E8                   		 skz
 1629 0bd8 EC C3 0B 00             		 br	!!.L56
 350:../src/user_functions.c **** 		;
 351:../src/user_functions.c **** 	R_ADC_Start();
 1630                             		.loc 1 351 0 is_stmt 1
 1631 0bdc FC 00 00 00             		call	!!%code(_R_ADC_Start)
 352:../src/user_functions.c **** 	while (ADCS)
 1632                             		.loc 1 352 0
 1633 0be0 00                      		nop
 1634                             	.L57:
 1635                             		.loc 1 352 0 is_stmt 0 discriminator 1
 1636 0be1 C9 F0 30 FF             		movw	r8, #-208
 1637 0be5 AD F0                   		movw	ax, r8
 1638 0be7 BD F2                   		movw	r10, ax
 1639 0be9 FA F2                   		movw	hl, r10
 1640 0beb 8B                      		mov	a, [hl]
 1641 0bec 9D F0                   		mov	r8, a
 1642 0bee 31 7A                   		shr	a, 7
 1643 0bf0 9D F0                   		mov	r8, a
 1644 0bf2 D4 F0                   		cmp0	r8
 1645 0bf4 61 E8                   		 skz
 1646 0bf6 EC E1 0B 00             		 br	!!.L57
 353:../src/user_functions.c **** 		;
 354:../src/user_functions.c **** 
 355:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&voltage);
 1647                             		.loc 1 355 0 is_stmt 1
 1648 0bfa 30 00 00                		movw	ax, #_voltage
 1649 0bfd B8 00                   		movw	[sp], ax
 1650 0bff FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 356:../src/user_functions.c **** 	voltage = voltage >> 1;
 1651                             		.loc 1 356 0
 1652 0c03 8F 00 00                		mov	a, !_voltage
 1653 0c06 9D F0                   		mov	r8, a
 1654 0c08 31 1A                   		shr	a, 1
 1655 0c0a 9D F0                   		mov	r8, a
 1656 0c0c 9F 00 00                		mov	!_voltage, a
 357:../src/user_functions.c **** 
 358:../src/user_functions.c **** 	ADS = _01_AD_INPUT_CHANNEL_1;
 1657                             		.loc 1 358 0
 1658 0c0f C9 F0 31 FF             		movw	r8, #-207
 1659 0c13 AD F0                   		movw	ax, r8
 1660 0c15 BD F2                   		movw	r10, ax
 1661 0c17 DA F2                   		movw	bc, r10
 1662 0c19 E1                      		oneb	a
 1663 0c1a 48 00 00                		mov	[bc], a
 359:../src/user_functions.c **** 	R_ADC_Start();
 1664                             		.loc 1 359 0
 1665 0c1d FC 00 00 00             		call	!!%code(_R_ADC_Start)
 360:../src/user_functions.c **** 	while (ADCS)
 1666                             		.loc 1 360 0
 1667 0c21 00                      		nop
 1668                             	.L58:
 1669                             		.loc 1 360 0 is_stmt 0 discriminator 1
 1670 0c22 C9 F0 30 FF             		movw	r8, #-208
 1671 0c26 AD F0                   		movw	ax, r8
 1672 0c28 BD F2                   		movw	r10, ax
 1673 0c2a FA F2                   		movw	hl, r10
 1674 0c2c 8B                      		mov	a, [hl]
 1675 0c2d 9D F0                   		mov	r8, a
 1676 0c2f 31 7A                   		shr	a, 7
 1677 0c31 9D F0                   		mov	r8, a
 1678 0c33 D4 F0                   		cmp0	r8
 1679 0c35 61 E8                   		 skz
 1680 0c37 EC 22 0C 00             		 br	!!.L58
 361:../src/user_functions.c **** 		;
 362:../src/user_functions.c **** 	R_ADC_Start();
 1681                             		.loc 1 362 0 is_stmt 1
 1682 0c3b FC 00 00 00             		call	!!%code(_R_ADC_Start)
 363:../src/user_functions.c **** 	while (ADCS)
 1683                             		.loc 1 363 0
 1684 0c3f 00                      		nop
 1685                             	.L59:
 1686                             		.loc 1 363 0 is_stmt 0 discriminator 1
 1687 0c40 C9 F0 30 FF             		movw	r8, #-208
 1688 0c44 AD F0                   		movw	ax, r8
 1689 0c46 BD F2                   		movw	r10, ax
 1690 0c48 FA F2                   		movw	hl, r10
 1691 0c4a 8B                      		mov	a, [hl]
 1692 0c4b 9D F0                   		mov	r8, a
 1693 0c4d 31 7A                   		shr	a, 7
 1694 0c4f 9D F0                   		mov	r8, a
 1695 0c51 D4 F0                   		cmp0	r8
 1696 0c53 61 E8                   		 skz
 1697 0c55 EC 40 0C 00             		 br	!!.L59
 364:../src/user_functions.c **** 		;
 365:../src/user_functions.c **** 
 366:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&current1);
 1698                             		.loc 1 366 0 is_stmt 1
 1699 0c59 30 00 00                		movw	ax, #_current1
 1700 0c5c B8 00                   		movw	[sp], ax
 1701 0c5e FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 367:../src/user_functions.c **** 	current1 = current1 >> 2;
 1702                             		.loc 1 367 0
 1703 0c62 8F 00 00                		mov	a, !_current1
 1704 0c65 9D F0                   		mov	r8, a
 1705 0c67 31 2A                   		shr	a, 2
 1706 0c69 9D F0                   		mov	r8, a
 1707 0c6b 9F 00 00                		mov	!_current1, a
 368:../src/user_functions.c **** 
 369:../src/user_functions.c **** 	ADS = _02_AD_INPUT_CHANNEL_2;
 1708                             		.loc 1 369 0
 1709 0c6e C9 F0 31 FF             		movw	r8, #-207
 1710 0c72 AD F0                   		movw	ax, r8
 1711 0c74 BD F2                   		movw	r10, ax
 1712 0c76 DA F2                   		movw	bc, r10
 1713 0c78 51 02                   		mov	a, #2
 1714 0c7a 48 00 00                		mov	[bc], a
 370:../src/user_functions.c **** 	R_ADC_Start();
 1715                             		.loc 1 370 0
 1716 0c7d FC 00 00 00             		call	!!%code(_R_ADC_Start)
 371:../src/user_functions.c **** 	while (ADCS)
 1717                             		.loc 1 371 0
 1718 0c81 00                      		nop
 1719                             	.L60:
 1720                             		.loc 1 371 0 is_stmt 0 discriminator 1
 1721 0c82 C9 F0 30 FF             		movw	r8, #-208
 1722 0c86 AD F0                   		movw	ax, r8
 1723 0c88 BD F2                   		movw	r10, ax
 1724 0c8a FA F2                   		movw	hl, r10
 1725 0c8c 8B                      		mov	a, [hl]
 1726 0c8d 9D F0                   		mov	r8, a
 1727 0c8f 31 7A                   		shr	a, 7
 1728 0c91 9D F0                   		mov	r8, a
 1729 0c93 D4 F0                   		cmp0	r8
 1730 0c95 61 E8                   		 skz
 1731 0c97 EC 82 0C 00             		 br	!!.L60
 372:../src/user_functions.c **** 		;
 373:../src/user_functions.c **** 	R_ADC_Start();
 1732                             		.loc 1 373 0 is_stmt 1
 1733 0c9b FC 00 00 00             		call	!!%code(_R_ADC_Start)
 374:../src/user_functions.c **** 	while (ADCS)
 1734                             		.loc 1 374 0
 1735 0c9f 00                      		nop
 1736                             	.L61:
 1737                             		.loc 1 374 0 is_stmt 0 discriminator 1
 1738 0ca0 C9 F0 30 FF             		movw	r8, #-208
 1739 0ca4 AD F0                   		movw	ax, r8
 1740 0ca6 BD F2                   		movw	r10, ax
 1741 0ca8 FA F2                   		movw	hl, r10
 1742 0caa 8B                      		mov	a, [hl]
 1743 0cab 9D F0                   		mov	r8, a
 1744 0cad 31 7A                   		shr	a, 7
 1745 0caf 9D F0                   		mov	r8, a
 1746 0cb1 D4 F0                   		cmp0	r8
 1747 0cb3 61 E8                   		 skz
 1748 0cb5 EC A0 0C 00             		 br	!!.L61
 375:../src/user_functions.c **** 		;
 376:../src/user_functions.c **** 
 377:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&current2);
 1749                             		.loc 1 377 0 is_stmt 1
 1750 0cb9 30 00 00                		movw	ax, #_current2
 1751 0cbc B8 00                   		movw	[sp], ax
 1752 0cbe FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 378:../src/user_functions.c **** 	current2 = current2 >> 2;
 1753                             		.loc 1 378 0
 1754 0cc2 8F 00 00                		mov	a, !_current2
 1755 0cc5 9D F0                   		mov	r8, a
 1756 0cc7 31 2A                   		shr	a, 2
 1757 0cc9 9D F0                   		mov	r8, a
 1758 0ccb 9F 00 00                		mov	!_current2, a
 379:../src/user_functions.c **** 
 380:../src/user_functions.c **** }
 1759                             		.loc 1 380 0
 1760 0cce 10 02                   		addw	sp, #2
 1761 0cd0 D7                      		ret
 1762                             	.LFE4:
 1764                             		.global	_setRTC
 1766                             	_setRTC:
 1767                             	.LFB5:
 381:../src/user_functions.c **** 
 382:../src/user_functions.c **** void setRTC() {
 1768                             		.loc 1 382 0
 1769                             		; start of function
 1770                             		; locals: 22 bytes
 1771                             		; outgoing: 8 bytes
 1772 0cd1 20 1E                   		subw	sp, #30
 1773                             	.LCFI8:
 383:../src/user_functions.c **** 	uint8_t BCDdate[6] = { 0, 0, 0, 0, 0, 0 };
 1774                             		.loc 1 383 0
 1775 0cd3 F1                      		clrb	a
 1776 0cd4 98 13                   		mov	[sp+19], a
 1777 0cd6 F1                      		clrb	a
 1778 0cd7 98 14                   		mov	[sp+20], a
 1779 0cd9 F1                      		clrb	a
 1780 0cda 98 15                   		mov	[sp+21], a
 1781 0cdc F1                      		clrb	a
 1782 0cdd 98 16                   		mov	[sp+22], a
 1783 0cdf F1                      		clrb	a
 1784 0ce0 98 17                   		mov	[sp+23], a
 1785 0ce2 F1                      		clrb	a
 1786 0ce3 98 18                   		mov	[sp+24], a
 384:../src/user_functions.c **** 	date[0] = 0;
 1787                             		.loc 1 384 0
 1788 0ce5 F5 00 00                		clrb	!_date
 385:../src/user_functions.c **** 	date[1] = 0;
 1789                             		.loc 1 385 0
 1790 0ce8 F5 00 00                		clrb	!_date+1
 386:../src/user_functions.c **** 	date[2] = 0;
 1791                             		.loc 1 386 0
 1792 0ceb F5 00 00                		clrb	!_date+2
 387:../src/user_functions.c **** 	date[3] = 0;
 1793                             		.loc 1 387 0
 1794 0cee F5 00 00                		clrb	!_date+3
 388:../src/user_functions.c **** 	date[4] = 0;
 1795                             		.loc 1 388 0
 1796 0cf1 F5 00 00                		clrb	!_date+4
 389:../src/user_functions.c **** 	date[5] = 0;
 1797                             		.loc 1 389 0
 1798 0cf4 F5 00 00                		clrb	!_date+5
 390:../src/user_functions.c **** 	uint8_t count = 4;
 1799                             		.loc 1 390 0
 1800 0cf7 51 04                   		mov	a, #4
 1801 0cf9 98 1D                   		mov	[sp+29], a
 391:../src/user_functions.c **** 	int dateCount = 0;
 1802                             		.loc 1 391 0
 1803 0cfb F6                      		clrw	ax
 1804 0cfc B8 1A                   		movw	[sp+26], ax
 392:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 393:../src/user_functions.c **** 
 394:../src/user_functions.c **** 	while (record[count] != '\r') {
 1805                             		.loc 1 394 0
 1806 0cfe EC 22 0E 00             		br	!!.L63
 1807                             	.L65:
 395:../src/user_functions.c **** 
 396:../src/user_functions.c **** 		BCDdate[dateCount] += record[count] - '0';
 1808                             		.loc 1 396 0
 1809 0d02 AE F8                   		movw	ax, sp
 1810 0d04 BD F2                   		movw	r10, ax
 1811 0d06 04 13 00                		addw	ax, #19
 1812 0d09 BD F0                   		movw	r8, ax
 1813 0d0b A8 1A                   		movw	ax, [sp+26]
 1814 0d0d 06 F0                   		addw	ax, r8
 1815 0d0f BD F0                   		movw	r8, ax
 1816 0d11 BD F4                   		movw	r12, ax
 1817 0d13 FA F4                   		movw	hl, r12
 1818 0d15 8B                      		mov	a, [hl]
 1819 0d16 9D F2                   		mov	r10, a
 1820 0d18 88 1D                   		mov	a, [sp+29]
 1821 0d1a 70                      		mov	x, a 
 1822 0d1b 51 00                   		mov	a, #0
 1823 0d1d BD F0                   		movw	r8, ax
 1824 0d1f 04 00 00                		addw	ax, #_record
 1825 0d22 16                      		movw	hl, ax
 1826 0d23 8B                      		mov	a, [hl]
 1827 0d24 9D F0                   		mov	r8, a
 1828 0d26 76                      		mov	l, a
 1829 0d27 8D F2                   		mov	a, r10
 1830 0d29 61 0E                   		add	a, l
 1831 0d2b 9D F0                   		mov	r8, a
 1832 0d2d 0C D0                   		add	a, #-48
 1833 0d2f 9D F2                   		mov	r10, a
 1834 0d31 AE F8                   		movw	ax, sp
 1835 0d33 BD F4                   		movw	r12, ax
 1836 0d35 04 13 00                		addw	ax, #19
 1837 0d38 BD F0                   		movw	r8, ax
 1838 0d3a A8 1A                   		movw	ax, [sp+26]
 1839 0d3c 06 F0                   		addw	ax, r8
 1840 0d3e BD F0                   		movw	r8, ax
 1841 0d40 BD F4                   		movw	r12, ax
 1842 0d42 DA F4                   		movw	bc, r12
 1843 0d44 8D F2                   		mov	a, r10
 1844 0d46 48 00 00                		mov	[bc], a
 397:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1845                             		.loc 1 397 0
 1846 0d49 A8 1A                   		movw	ax, [sp+26]
 1847 0d4b 04 00 00                		addw	ax, #_date
 1848 0d4e BD F0                   		movw	r8, ax
 1849 0d50 BD F4                   		movw	r12, ax
 1850 0d52 FA F4                   		movw	hl, r12
 1851 0d54 8B                      		mov	a, [hl]
 1852 0d55 9D F2                   		mov	r10, a
 1853 0d57 88 1D                   		mov	a, [sp+29]
 1854 0d59 70                      		mov	x, a 
 1855 0d5a 51 00                   		mov	a, #0
 1856 0d5c BD F0                   		movw	r8, ax
 1857 0d5e 04 00 00                		addw	ax, #_record
 1858 0d61 16                      		movw	hl, ax
 1859 0d62 8B                      		mov	a, [hl]
 1860 0d63 9D F0                   		mov	r8, a
 1861 0d65 76                      		mov	l, a
 1862 0d66 8D F2                   		mov	a, r10
 1863 0d68 61 0E                   		add	a, l
 1864 0d6a 9D F0                   		mov	r8, a
 1865 0d6c 0C D0                   		add	a, #-48
 1866 0d6e 9D F2                   		mov	r10, a
 1867 0d70 A8 1A                   		movw	ax, [sp+26]
 1868 0d72 04 00 00                		addw	ax, #_date
 1869 0d75 BD F0                   		movw	r8, ax
 1870 0d77 BD F4                   		movw	r12, ax
 1871 0d79 DA F4                   		movw	bc, r12
 1872 0d7b 8D F2                   		mov	a, r10
 1873 0d7d 48 00 00                		mov	[bc], a
 398:../src/user_functions.c **** 		count++;
 1874                             		.loc 1 398 0
 1875 0d80 88 1D                   		mov	a, [sp+29]
 1876 0d82 9D F0                   		mov	r8, a
 1877 0d84 81                      		inc	a
 1878 0d85 98 1D                   		mov	[sp+29], a
 399:../src/user_functions.c **** 		if (record[count] == ',') {
 1879                             		.loc 1 399 0
 1880 0d87 70                      		mov	x, a 
 1881 0d88 51 00                   		mov	a, #0
 1882 0d8a BD F0                   		movw	r8, ax
 1883 0d8c 04 00 00                		addw	ax, #_record
 1884 0d8f 16                      		movw	hl, ax
 1885 0d90 8B                      		mov	a, [hl]
 1886 0d91 9D F0                   		mov	r8, a
 1887 0d93 4A F0 2C                		cmp	r8, #44
 1888 0d96 61 E8                   		 skz
 1889 0d98 EC AC 0D 00             		 br	!!.L64
 400:../src/user_functions.c **** 			dateCount++;
 1890                             		.loc 1 400 0
 1891 0d9c A8 1A                   		movw	ax, [sp+26]
 1892 0d9e A1                      		incw	ax
 1893 0d9f B8 1A                   		movw	[sp+26], ax
 401:../src/user_functions.c **** 			count++;
 1894                             		.loc 1 401 0
 1895 0da1 88 1D                   		mov	a, [sp+29]
 1896 0da3 9D F0                   		mov	r8, a
 1897 0da5 81                      		inc	a
 1898 0da6 98 1D                   		mov	[sp+29], a
 1899 0da8 EC 22 0E 00             		br	!!.L63
 1900                             	.L64:
 402:../src/user_functions.c **** 		} else if (record[count] == '\r') {
 1901                             		.loc 1 402 0
 1902 0dac 88 1D                   		mov	a, [sp+29]
 1903 0dae 70                      		mov	x, a 
 1904 0daf 51 00                   		mov	a, #0
 1905 0db1 BD F0                   		movw	r8, ax
 1906 0db3 04 00 00                		addw	ax, #_record
 1907 0db6 16                      		movw	hl, ax
 1908 0db7 8B                      		mov	a, [hl]
 1909 0db8 9D F0                   		mov	r8, a
 1910 0dba 4A F0 0D                		cmp	r8, #13
 1911 0dbd 61 F8                   		 sknz
 1912 0dbf EC 22 0E 00             		 br	!!.L63
 403:../src/user_functions.c **** 
 404:../src/user_functions.c **** 		} else {
 405:../src/user_functions.c **** 			BCDdate[dateCount] = BCDdate[dateCount] << 4;
 1913                             		.loc 1 405 0
 1914 0dc3 AE F8                   		movw	ax, sp
 1915 0dc5 BD F2                   		movw	r10, ax
 1916 0dc7 04 13 00                		addw	ax, #19
 1917 0dca BD F0                   		movw	r8, ax
 1918 0dcc A8 1A                   		movw	ax, [sp+26]
 1919 0dce 06 F0                   		addw	ax, r8
 1920 0dd0 BD F0                   		movw	r8, ax
 1921 0dd2 BD F4                   		movw	r12, ax
 1922 0dd4 FA F4                   		movw	hl, r12
 1923 0dd6 8B                      		mov	a, [hl]
 1924 0dd7 9D F0                   		mov	r8, a
 1925 0dd9 31 49                   		shl	a, 4
 1926 0ddb 9D F2                   		mov	r10, a
 1927 0ddd AE F8                   		movw	ax, sp
 1928 0ddf BD F4                   		movw	r12, ax
 1929 0de1 04 13 00                		addw	ax, #19
 1930 0de4 BD F0                   		movw	r8, ax
 1931 0de6 A8 1A                   		movw	ax, [sp+26]
 1932 0de8 06 F0                   		addw	ax, r8
 1933 0dea BD F0                   		movw	r8, ax
 1934 0dec BD F4                   		movw	r12, ax
 1935 0dee DA F4                   		movw	bc, r12
 1936 0df0 8D F2                   		mov	a, r10
 1937 0df2 48 00 00                		mov	[bc], a
 406:../src/user_functions.c **** 			date[dateCount] = date[dateCount] * 10;
 1938                             		.loc 1 406 0
 1939 0df5 A8 1A                   		movw	ax, [sp+26]
 1940 0df7 04 00 00                		addw	ax, #_date
 1941 0dfa BD F0                   		movw	r8, ax
 1942 0dfc BD F2                   		movw	r10, ax
 1943 0dfe FA F2                   		movw	hl, r10
 1944 0e00 8B                      		mov	a, [hl]
 1945 0e01 9D F0                   		mov	r8, a
 1946 0e03 61 01                   		add	a, a
 1947 0e05 9D F0                   		mov	r8, a
 1948 0e07 31 29                   		shl	a, 2
 1949 0e09 9D F1                   		mov	r9, a
 1950 0e0b 76                      		mov	l, a
 1951 0e0c 8D F0                   		mov	a, r8
 1952 0e0e 61 0E                   		add	a, l
 1953 0e10 9D F2                   		mov	r10, a
 1954 0e12 A8 1A                   		movw	ax, [sp+26]
 1955 0e14 04 00 00                		addw	ax, #_date
 1956 0e17 BD F0                   		movw	r8, ax
 1957 0e19 BD F4                   		movw	r12, ax
 1958 0e1b DA F4                   		movw	bc, r12
 1959 0e1d 8D F2                   		mov	a, r10
 1960 0e1f 48 00 00                		mov	[bc], a
 1961                             	.L63:
 394:../src/user_functions.c **** 
 1962                             		.loc 1 394 0
 1963 0e22 88 1D                   		mov	a, [sp+29]
 1964 0e24 70                      		mov	x, a 
 1965 0e25 51 00                   		mov	a, #0
 1966 0e27 BD F0                   		movw	r8, ax
 1967 0e29 04 00 00                		addw	ax, #_record
 1968 0e2c 16                      		movw	hl, ax
 1969 0e2d 8B                      		mov	a, [hl]
 1970 0e2e 9D F0                   		mov	r8, a
 1971 0e30 4A F0 0D                		cmp	r8, #13
 1972 0e33 61 E8                   		 skz
 1973 0e35 EC 02 0D 00             		 br	!!.L65
 407:../src/user_functions.c **** 		}
 408:../src/user_functions.c **** 
 409:../src/user_functions.c **** 	}
 410:../src/user_functions.c **** 
 411:../src/user_functions.c **** 	if (testDate(date)) {
 1974                             		.loc 1 411 0
 1975 0e39 30 00 00                		movw	ax, #_date
 1976 0e3c B8 00                   		movw	[sp], ax
 1977 0e3e FC 00 00 00             		call	!!%code(_testDate)
 1978 0e42 D4 F0                   		cmp0	r8
 1979 0e44 61 F8                   		 sknz
 1980 0e46 EC AE 0E 00             		 br	!!.L66
 412:../src/user_functions.c **** 
 413:../src/user_functions.c **** 		theDate.year = BCDdate[0];
 1981                             		.loc 1 413 0
 1982 0e4a 88 13                   		mov	a, [sp+19]
 1983 0e4c 9D F0                   		mov	r8, a
 1984 0e4e 98 12                   		mov	[sp+18], a
 414:../src/user_functions.c **** 		theDate.month = BCDdate[1];
 1985                             		.loc 1 414 0
 1986 0e50 88 14                   		mov	a, [sp+20]
 1987 0e52 9D F0                   		mov	r8, a
 1988 0e54 98 11                   		mov	[sp+17], a
 415:../src/user_functions.c **** 		theDate.day = BCDdate[2];
 1989                             		.loc 1 415 0
 1990 0e56 88 15                   		mov	a, [sp+21]
 1991 0e58 9D F0                   		mov	r8, a
 1992 0e5a 98 0F                   		mov	[sp+15], a
 416:../src/user_functions.c **** 		theDate.hour = BCDdate[3];
 1993                             		.loc 1 416 0
 1994 0e5c 88 16                   		mov	a, [sp+22]
 1995 0e5e 9D F0                   		mov	r8, a
 1996 0e60 98 0E                   		mov	[sp+14], a
 417:../src/user_functions.c **** 		theDate.min = BCDdate[4];
 1997                             		.loc 1 417 0
 1998 0e62 88 17                   		mov	a, [sp+23]
 1999 0e64 9D F0                   		mov	r8, a
 2000 0e66 98 0D                   		mov	[sp+13], a
 418:../src/user_functions.c **** 		theDate.sec = BCDdate[5];
 2001                             		.loc 1 418 0
 2002 0e68 88 18                   		mov	a, [sp+24]
 2003 0e6a 9D F0                   		mov	r8, a
 2004 0e6c 98 0C                   		mov	[sp+12], a
 419:../src/user_functions.c **** 
 420:../src/user_functions.c **** 		count = 5;
 2005                             		.loc 1 420 0
 2006 0e6e 51 05                   		mov	a, #5
 2007 0e70 98 1D                   		mov	[sp+29], a
 421:../src/user_functions.c **** 		strcpy(response, "$B0\x0d\x0a");
 2008                             		.loc 1 421 0
 2009 0e72 51 24                   		mov	a, #36
 2010 0e74 9F 08 00                		mov	!_response, a
 2011 0e77 51 42                   		mov	a, #66
 2012 0e79 9F 09 00                		mov	!_response+1, a
 2013 0e7c 51 30                   		mov	a, #48
 2014 0e7e 9F 0A 00                		mov	!_response+2, a
 2015 0e81 51 0D                   		mov	a, #13
 2016 0e83 9F 0B 00                		mov	!_response+3, a
 2017 0e86 51 0A                   		mov	a, #10
 2018 0e88 9F 0C 00                		mov	!_response+4, a
 2019 0e8b F5 0D 00                		clrb	!_response+5
 422:../src/user_functions.c **** 
 423:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 2020                             		.loc 1 423 0
 2021 0e8e A8 0C                   		movw	ax, [sp+12]
 2022 0e90 BD F0                   		movw	r8, ax
 2023 0e92 B8 00                   		movw	[sp], ax
 2024 0e94 A8 0E                   		movw	ax, [sp+14]
 2025 0e96 BD F0                   		movw	r8, ax
 2026 0e98 B8 02                   		movw	[sp+2], ax
 2027 0e9a A8 10                   		movw	ax, [sp+16]
 2028 0e9c BD F0                   		movw	r8, ax
 2029 0e9e B8 04                   		movw	[sp+4], ax
 2030 0ea0 88 12                   		mov	a, [sp+18]
 2031 0ea2 9D F0                   		mov	r8, a
 2032 0ea4 98 06                   		mov	[sp+6], a
 2033 0ea6 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 2034 0eaa EC 07 0F 00             		br	!!.L62
 2035                             	.L66:
 2036                             	.LBB5:
 424:../src/user_functions.c **** 	} else {
 425:../src/user_functions.c **** 		char str[4];
 426:../src/user_functions.c **** 		uint8_t ack = 0;
 2037                             		.loc 1 426 0
 2038 0eae F1                      		clrb	a
 2039 0eaf 98 19                   		mov	[sp+25], a
 427:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 2040                             		.loc 1 427 0
 2041 0eb1 AE F8                   		movw	ax, sp
 2042 0eb3 BD F2                   		movw	r10, ax
 2043 0eb5 04 08 00                		addw	ax, #8
 2044 0eb8 BD F0                   		movw	r8, ax
 2045 0eba BD F4                   		movw	r12, ax
 2046 0ebc DA F4                   		movw	bc, r12
 2047 0ebe 30 24 42                		movw	ax, #16932
 2048 0ec1 78 00 00                		movw	[bc], ax
 2049 0ec4 DA F0                   		movw	bc, r8
 2050 0ec6 30 32 0D                		movw	ax, #3378
 2051 0ec9 78 02 00                		movw	2[bc], ax
 2052 0ecc 30 0A 00                		movw	ax, #10
 2053 0ecf 78 04 00                		movw	4[bc], ax
 428:../src/user_functions.c **** 		count = strlen(str);
 2054                             		.loc 1 428 0
 2055 0ed2 C9 F0 1E 00             		movw	r8, #30
 2056 0ed6 AE F8                   		movw	ax, sp
 2057 0ed8 BD F0                   		movw	r8, ax
 2058 0eda 04 1E 00                		addw	ax, #30
 2059 0edd BD F0                   		movw	r8, ax
 2060 0edf 04 EA FF                		addw	ax, #-22
 2061 0ee2 B8 00                   		movw	[sp], ax
 2062 0ee4 FC 00 00 00             		call	!!%code(_strlen)
 2063 0ee8 8D F0                   		mov	a, r8
 2064 0eea 98 1D                   		mov	[sp+29], a
 429:../src/user_functions.c **** 		strcpy(response, str);
 2065                             		.loc 1 429 0
 2066 0eec 30 08 00                		movw	ax, #_response
 2067 0eef B8 00                   		movw	[sp], ax
 2068 0ef1 C9 F2 1E 00             		movw	r10, #30
 2069 0ef5 AE F8                   		movw	ax, sp
 2070 0ef7 BD F2                   		movw	r10, ax
 2071 0ef9 04 1E 00                		addw	ax, #30
 2072 0efc BD F2                   		movw	r10, ax
 2073 0efe 04 EA FF                		addw	ax, #-22
 2074 0f01 B8 02                   		movw	[sp+2], ax
 2075 0f03 FC 00 00 00             		call	!!%code(_strcpy)
 2076                             	.L62:
 2077                             	.LBE5:
 430:../src/user_functions.c **** 
 431:../src/user_functions.c **** 	}
 432:../src/user_functions.c **** 
 433:../src/user_functions.c **** }
 2078                             		.loc 1 433 0
 2079 0f07 10 1E                   		addw	sp, #30
 2080 0f09 D7                      		ret
 2081                             	.LFE5:
 2083                             		.global	_getRTC
 2085                             	_getRTC:
 2086                             	.LFB6:
 434:../src/user_functions.c **** 
 435:../src/user_functions.c **** void getRTC() {
 2087                             		.loc 1 435 0
 2088                             		; start of function
 2089                             		; locals: 8 bytes
 2090                             		; outgoing: 2 bytes
 2091 0f0a 20 0A                   		subw	sp, #10
 2092                             	.LCFI9:
 436:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 437:../src/user_functions.c **** 
 438:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 2093                             		.loc 1 438 0
 2094 0f0c C9 F0 0A 00             		movw	r8, #10
 2095 0f10 AE F8                   		movw	ax, sp
 2096 0f12 BD F0                   		movw	r8, ax
 2097 0f14 04 0A 00                		addw	ax, #10
 2098 0f17 BD F0                   		movw	r8, ax
 2099 0f19 04 F9 FF                		addw	ax, #-7
 2100 0f1c B8 00                   		movw	[sp], ax
 2101 0f1e FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 439:../src/user_functions.c **** 
 440:../src/user_functions.c **** 	date[0] = theDate.year;
 2102                             		.loc 1 440 0
 2103 0f22 88 09                   		mov	a, [sp+9]
 2104 0f24 9D F0                   		mov	r8, a
 2105 0f26 9F 00 00                		mov	!_date, a
 441:../src/user_functions.c **** 	date[1] = theDate.month;
 2106                             		.loc 1 441 0
 2107 0f29 88 08                   		mov	a, [sp+8]
 2108 0f2b 9D F0                   		mov	r8, a
 2109 0f2d 9F 00 00                		mov	!_date+1, a
 442:../src/user_functions.c **** 	date[2] = theDate.day;
 2110                             		.loc 1 442 0
 2111 0f30 88 06                   		mov	a, [sp+6]
 2112 0f32 9D F0                   		mov	r8, a
 2113 0f34 9F 00 00                		mov	!_date+2, a
 443:../src/user_functions.c **** 	date[3] = theDate.hour;
 2114                             		.loc 1 443 0
 2115 0f37 88 05                   		mov	a, [sp+5]
 2116 0f39 9D F0                   		mov	r8, a
 2117 0f3b 9F 00 00                		mov	!_date+3, a
 444:../src/user_functions.c **** 	date[4] = theDate.min;
 2118                             		.loc 1 444 0
 2119 0f3e 88 04                   		mov	a, [sp+4]
 2120 0f40 9D F0                   		mov	r8, a
 2121 0f42 9F 00 00                		mov	!_date+4, a
 445:../src/user_functions.c **** 	date[5] = theDate.sec;
 2122                             		.loc 1 445 0
 2123 0f45 88 03                   		mov	a, [sp+3]
 2124 0f47 9D F0                   		mov	r8, a
 2125 0f49 9F 00 00                		mov	!_date+5, a
 446:../src/user_functions.c **** 
 447:../src/user_functions.c **** 	BCDtoDEC(date);
 2126                             		.loc 1 447 0
 2127 0f4c 30 00 00                		movw	ax, #_date
 2128 0f4f B8 00                   		movw	[sp], ax
 2129 0f51 FC 00 00 00             		call	!!%code(_BCDtoDEC)
 448:../src/user_functions.c **** 
 449:../src/user_functions.c **** 
 450:../src/user_functions.c **** }
 2130                             		.loc 1 450 0
 2131 0f55 10 0A                   		addw	sp, #10
 2132 0f57 D7                      		ret
 2133                             	.LFE6:
 2135                             		.global	_BCDtoDEC
 2137                             	_BCDtoDEC:
 2138                             	.LFB7:
 451:../src/user_functions.c **** 
 452:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]) {
 2139                             		.loc 1 452 0
 2140                             		; start of function
 2141                             		; locals: 4 bytes
 2142 0f58 20 04                   		subw	sp, #4
 2143                             	.LCFI10:
 453:../src/user_functions.c **** 
 454:../src/user_functions.c **** 	uint8_t upper, lower;
 455:../src/user_functions.c **** 	int i;
 456:../src/user_functions.c **** 	for (i = 0; i < 6; i++) {
 2144                             		.loc 1 456 0
 2145 0f5a F6                      		clrw	ax
 2146 0f5b B8 02                   		movw	[sp+2], ax
 2147 0f5d EC BF 0F 00             		br	!!.L70
 2148                             	.L71:
 457:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2149                             		.loc 1 457 0 discriminator 3
 2150 0f61 A8 02                   		movw	ax, [sp+2]
 2151 0f63 BD F0                   		movw	r8, ax
 2152 0f65 A8 08                   		movw	ax, [sp+8]
 2153 0f67 06 F0                   		addw	ax, r8
 2154 0f69 BD F0                   		movw	r8, ax
 2155 0f6b BD F2                   		movw	r10, ax
 2156 0f6d FA F2                   		movw	hl, r10
 2157 0f6f 8B                      		mov	a, [hl]
 2158 0f70 9D F0                   		mov	r8, a
 2159 0f72 5C 0F                   		and	a, #15
 2160 0f74 98 01                   		mov	[sp+1], a
 458:../src/user_functions.c **** 		upper = (arr[i] & 0xf0) >> 4;
 2161                             		.loc 1 458 0 discriminator 3
 2162 0f76 A8 02                   		movw	ax, [sp+2]
 2163 0f78 BD F0                   		movw	r8, ax
 2164 0f7a A8 08                   		movw	ax, [sp+8]
 2165 0f7c 06 F0                   		addw	ax, r8
 2166 0f7e BD F0                   		movw	r8, ax
 2167 0f80 BD F4                   		movw	r12, ax
 2168 0f82 FA F4                   		movw	hl, r12
 2169 0f84 8B                      		mov	a, [hl]
 2170 0f85 9D F0                   		mov	r8, a
 2171 0f87 31 4A                   		shr	a, 4
 2172 0f89 98 00                   		mov	[sp], a
 459:../src/user_functions.c **** 
 460:../src/user_functions.c **** 		arr[i] = upper * 10 + lower;
 2173                             		.loc 1 460 0 discriminator 3
 2174 0f8b A8 02                   		movw	ax, [sp+2]
 2175 0f8d BD F0                   		movw	r8, ax
 2176 0f8f A8 08                   		movw	ax, [sp+8]
 2177 0f91 06 F0                   		addw	ax, r8
 2178 0f93 BD F2                   		movw	r10, ax
 2179 0f95 88 00                   		mov	a, [sp]
 2180 0f97 9D F0                   		mov	r8, a
 2181 0f99 61 01                   		add	a, a
 2182 0f9b 9D F0                   		mov	r8, a
 2183 0f9d 31 29                   		shl	a, 2
 2184 0f9f 9D F1                   		mov	r9, a
 2185 0fa1 76                      		mov	l, a
 2186 0fa2 8D F0                   		mov	a, r8
 2187 0fa4 61 0E                   		add	a, l
 2188 0fa6 9D F0                   		mov	r8, a
 2189 0fa8 76                      		mov	l, a
 2190 0fa9 88 01                   		mov	a, [sp+1]
 2191 0fab 61 0E                   		add	a, l
 2192 0fad 9D F0                   		mov	r8, a
 2193 0faf AD F2                   		movw	ax, r10
 2194 0fb1 BD F4                   		movw	r12, ax
 2195 0fb3 DA F4                   		movw	bc, r12
 2196 0fb5 8D F0                   		mov	a, r8
 2197 0fb7 48 00 00                		mov	[bc], a
 456:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2198                             		.loc 1 456 0 discriminator 3
 2199 0fba A8 02                   		movw	ax, [sp+2]
 2200 0fbc A1                      		incw	ax
 2201 0fbd B8 02                   		movw	[sp+2], ax
 2202                             	.L70:
 456:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2203                             		.loc 1 456 0 is_stmt 0 discriminator 1
 2204 0fbf A8 02                   		movw	ax, [sp+2]
 2205 0fc1 44 05 00                		cmpw	ax, #5
 2206 0fc4 71 FF                   		 xor1	CY, a.7
 2207 0fc6 61 E3                   		 skh
 2208 0fc8 EC 61 0F 00             		 br	!!.L71
 461:../src/user_functions.c **** 	}
 462:../src/user_functions.c **** }
 2209                             		.loc 1 462 0 is_stmt 1
 2210 0fcc 10 04                   		addw	sp, #4
 2211 0fce D7                      		ret
 2212                             	.LFE7:
 2214                             		.global	_testDate
 2216                             	_testDate:
 2217                             	.LFB8:
 463:../src/user_functions.c **** 
 464:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 465:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]) {
 2218                             		.loc 1 465 0
 2219                             		; start of function
 2220                             		; locals: 24 bytes
 2221 0fcf 20 18                   		subw	sp, #24
 2222                             	.LCFI11:
 466:../src/user_functions.c **** 
 467:../src/user_functions.c **** 	int daysInMonth[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 2223                             		.loc 1 467 0
 2224 0fd1 30 1F 00                		movw	ax, #31
 2225 0fd4 B8 00                   		movw	[sp], ax
 2226 0fd6 30 1C 00                		movw	ax, #28
 2227 0fd9 B8 02                   		movw	[sp+2], ax
 2228 0fdb 30 1F 00                		movw	ax, #31
 2229 0fde B8 04                   		movw	[sp+4], ax
 2230 0fe0 30 1E 00                		movw	ax, #30
 2231 0fe3 B8 06                   		movw	[sp+6], ax
 2232 0fe5 30 1F 00                		movw	ax, #31
 2233 0fe8 B8 08                   		movw	[sp+8], ax
 2234 0fea 30 1E 00                		movw	ax, #30
 2235 0fed B8 0A                   		movw	[sp+10], ax
 2236 0fef 30 1F 00                		movw	ax, #31
 2237 0ff2 B8 0C                   		movw	[sp+12], ax
 2238 0ff4 30 1F 00                		movw	ax, #31
 2239 0ff7 B8 0E                   		movw	[sp+14], ax
 2240 0ff9 30 1E 00                		movw	ax, #30
 2241 0ffc B8 10                   		movw	[sp+16], ax
 2242 0ffe 30 1F 00                		movw	ax, #31
 2243 1001 B8 12                   		movw	[sp+18], ax
 2244 1003 30 1E 00                		movw	ax, #30
 2245 1006 B8 14                   		movw	[sp+20], ax
 2246 1008 30 1F 00                		movw	ax, #31
 2247 100b B8 16                   		movw	[sp+22], ax
 468:../src/user_functions.c **** 
 469:../src/user_functions.c **** 	if (arr[1] > 12 || arr[1] == 0) {
 2248                             		.loc 1 469 0
 2249 100d A8 1C                   		movw	ax, [sp+28]
 2250 100f A1                      		incw	ax
 2251 1010 BD F0                   		movw	r8, ax
 2252 1012 BD F2                   		movw	r10, ax
 2253 1014 FA F2                   		movw	hl, r10
 2254 1016 8B                      		mov	a, [hl]
 2255 1017 9D F0                   		mov	r8, a
 2256 1019 4A F0 0C                		cmp	r8, #12
 2257 101c 61 F3                   		 sknh
 2258 101e EC 36 10 00             		 br	!!.L73
 2259                             		.loc 1 469 0 is_stmt 0 discriminator 1
 2260 1022 A8 1C                   		movw	ax, [sp+28]
 2261 1024 A1                      		incw	ax
 2262 1025 BD F0                   		movw	r8, ax
 2263 1027 BD F4                   		movw	r12, ax
 2264 1029 FA F4                   		movw	hl, r12
 2265 102b 8B                      		mov	a, [hl]
 2266 102c 9D F0                   		mov	r8, a
 2267 102e D4 F0                   		cmp0	r8
 2268 1030 61 E8                   		 skz
 2269 1032 EC 3C 10 00             		 br	!!.L74
 2270                             	.L73:
 470:../src/user_functions.c **** 		return 0;
 2271                             		.loc 1 470 0 is_stmt 1
 2272 1036 F4 F0                   		clrb	r8
 2273 1038 EC 04 11 00             		br	!!.L81
 2274                             	.L74:
 471:../src/user_functions.c **** 	} else if (arr[2] > daysInMonth[arr[1]] || arr[2] == 0) {
 2275                             		.loc 1 471 0
 2276 103c A8 1C                   		movw	ax, [sp+28]
 2277 103e 04 02 00                		addw	ax, #2
 2278 1041 BD F0                   		movw	r8, ax
 2279 1043 BD F2                   		movw	r10, ax
 2280 1045 FA F2                   		movw	hl, r10
 2281 1047 8B                      		mov	a, [hl]
 2282 1048 9D F0                   		mov	r8, a
 2283 104a 70                      		mov	x, a 
 2284 104b 51 00                   		mov	a, #0
 2285 104d BD F2                   		movw	r10, ax
 2286 104f A8 1C                   		movw	ax, [sp+28]
 2287 1051 A1                      		incw	ax
 2288 1052 BD F0                   		movw	r8, ax
 2289 1054 BD F4                   		movw	r12, ax
 2290 1056 FA F4                   		movw	hl, r12
 2291 1058 8B                      		mov	a, [hl]
 2292 1059 9D F0                   		mov	r8, a
 2293 105b CD F1 00                		mov	r9, #0
 2294 105e AD F0                   		movw	ax, r8
 2295 1060 01                      		addw	ax, ax
 2296 1061 BD F0                   		movw	r8, ax
 2297 1063 C9 F4 18 00             		movw	r12, #24
 2298 1067 AE F8                   		movw	ax, sp
 2299 1069 BD F4                   		movw	r12, ax
 2300 106b 04 18 00                		addw	ax, #24
 2301 106e BD F4                   		movw	r12, ax
 2302 1070 06 F0                   		addw	ax, r8
 2303 1072 BD F0                   		movw	r8, ax
 2304 1074 04 E8 FF                		addw	ax, #-24
 2305 1077 BD F0                   		movw	r8, ax
 2306 1079 BD F4                   		movw	r12, ax
 2307 107b FA F4                   		movw	hl, r12
 2308 107d AB                      		movw	ax, [hl]
 2309 107e BD F0                   		movw	r8, ax
 2310 1080 AD F2                   		movw	ax, r10
 2311 1082 46 F0                   		cmpw	ax, r8
 2312 1084 71 FF                   		 xor1	CY, a.7
 2313 1086 71 77 F1                		 xor1	CY, r9.7
 2314 1089 61 F3                   		 sknh
 2315 108b EC A5 10 00             		 br	!!.L76
 2316                             		.loc 1 471 0 is_stmt 0 discriminator 1
 2317 108f A8 1C                   		movw	ax, [sp+28]
 2318 1091 04 02 00                		addw	ax, #2
 2319 1094 BD F0                   		movw	r8, ax
 2320 1096 BD F2                   		movw	r10, ax
 2321 1098 FA F2                   		movw	hl, r10
 2322 109a 8B                      		mov	a, [hl]
 2323 109b 9D F0                   		mov	r8, a
 2324 109d D4 F0                   		cmp0	r8
 2325 109f 61 E8                   		 skz
 2326 10a1 EC AB 10 00             		 br	!!.L77
 2327                             	.L76:
 472:../src/user_functions.c **** 		return 0;
 2328                             		.loc 1 472 0 is_stmt 1
 2329 10a5 F4 F0                   		clrb	r8
 2330 10a7 EC 04 11 00             		br	!!.L81
 2331                             	.L77:
 473:../src/user_functions.c **** 	} else if (arr[3] > 23) {
 2332                             		.loc 1 473 0
 2333 10ab A8 1C                   		movw	ax, [sp+28]
 2334 10ad 04 03 00                		addw	ax, #3
 2335 10b0 BD F0                   		movw	r8, ax
 2336 10b2 BD F4                   		movw	r12, ax
 2337 10b4 FA F4                   		movw	hl, r12
 2338 10b6 8B                      		mov	a, [hl]
 2339 10b7 9D F0                   		mov	r8, a
 2340 10b9 4A F0 17                		cmp	r8, #23
 2341 10bc 61 E3                   		 skh
 2342 10be EC C8 10 00             		 br	!!.L78
 474:../src/user_functions.c **** 		return 0;
 2343                             		.loc 1 474 0
 2344 10c2 F4 F0                   		clrb	r8
 2345 10c4 EC 04 11 00             		br	!!.L81
 2346                             	.L78:
 475:../src/user_functions.c **** 	} else if (arr[4] > 59) {
 2347                             		.loc 1 475 0
 2348 10c8 A8 1C                   		movw	ax, [sp+28]
 2349 10ca 04 04 00                		addw	ax, #4
 2350 10cd BD F0                   		movw	r8, ax
 2351 10cf BD F2                   		movw	r10, ax
 2352 10d1 FA F2                   		movw	hl, r10
 2353 10d3 8B                      		mov	a, [hl]
 2354 10d4 9D F0                   		mov	r8, a
 2355 10d6 4A F0 3B                		cmp	r8, #59
 2356 10d9 61 E3                   		 skh
 2357 10db EC E5 10 00             		 br	!!.L79
 476:../src/user_functions.c **** 		return 0;
 2358                             		.loc 1 476 0
 2359 10df F4 F0                   		clrb	r8
 2360 10e1 EC 04 11 00             		br	!!.L81
 2361                             	.L79:
 477:../src/user_functions.c **** 	} else if (arr[5] > 59) {
 2362                             		.loc 1 477 0
 2363 10e5 A8 1C                   		movw	ax, [sp+28]
 2364 10e7 04 05 00                		addw	ax, #5
 2365 10ea BD F0                   		movw	r8, ax
 2366 10ec BD F4                   		movw	r12, ax
 2367 10ee FA F4                   		movw	hl, r12
 2368 10f0 8B                      		mov	a, [hl]
 2369 10f1 9D F0                   		mov	r8, a
 2370 10f3 4A F0 3B                		cmp	r8, #59
 2371 10f6 61 E3                   		 skh
 2372 10f8 EC 02 11 00             		 br	!!.L80
 478:../src/user_functions.c **** 		return 0;
 2373                             		.loc 1 478 0
 2374 10fc F4 F0                   		clrb	r8
 2375 10fe EC 04 11 00             		br	!!.L81
 2376                             	.L80:
 479:../src/user_functions.c **** 	} else {
 480:../src/user_functions.c **** 		return 1;
 2377                             		.loc 1 480 0
 2378 1102 E4 F0                   		oneb	r8
 2379                             	.L81:
 481:../src/user_functions.c **** 
 482:../src/user_functions.c **** 	}
 483:../src/user_functions.c **** 
 484:../src/user_functions.c **** }
 2380                             		.loc 1 484 0 discriminator 1
 2381 1104 10 18                   		addw	sp, #24
 2382 1106 D7                      		ret
 2383                             	.LFE8:
 2385                             		.global	_checkFlags
 2387                             	_checkFlags:
 2388                             	.LFB9:
 485:../src/user_functions.c **** 
 486:../src/user_functions.c **** void checkFlags() {
 2389                             		.loc 1 486 0
 2390                             		; start of function
 2391                             		; outgoing: 2 bytes
 2392 1107 20 02                   		subw	sp, #2
 2393                             	.LCFI12:
 487:../src/user_functions.c **** 	if (scrollFlag) {
 2394                             		.loc 1 487 0
 2395 1109 8F 00 00                		mov	a, !_scrollFlag
 2396 110c 9D F0                   		mov	r8, a
 2397 110e D4 F0                   		cmp0	r8
 2398 1110 61 F8                   		 sknz
 2399 1112 EC 20 11 00             		 br	!!.L83
 488:../src/user_functions.c **** 		scrollFlag = 0;
 2400                             		.loc 1 488 0
 2401 1116 F5 00 00                		clrb	!_scrollFlag
 489:../src/user_functions.c **** 		displayLCD(0);
 2402                             		.loc 1 489 0
 2403 1119 F6                      		clrw	ax
 2404 111a B8 00                   		movw	[sp], ax
 2405 111c FC 00 00 00             		call	!!%code(_displayLCD)
 2406                             	.L83:
 490:../src/user_functions.c **** 	}
 491:../src/user_functions.c **** 	if (tempFlag) {
 2407                             		.loc 1 491 0
 2408 1120 8F 00 00                		mov	a, !_tempFlag
 2409 1123 9D F0                   		mov	r8, a
 2410 1125 D4 F0                   		cmp0	r8
 2411 1127 61 F8                   		 sknz
 2412 1129 EC 86 11 00             		 br	!!.L84
 492:../src/user_functions.c **** 		tempFlag = 0;
 2413                             		.loc 1 492 0
 2414 112d F5 00 00                		clrb	!_tempFlag
 493:../src/user_functions.c **** 		P1_bit.no7 = !P1_bit.no7;
 2415                             		.loc 1 493 0
 2416 1130 C9 F0 01 FF             		movw	r8, #-255
 2417 1134 C9 F2 01 FF             		movw	r10, #-255
 2418 1138 AD F2                   		movw	ax, r10
 2419 113a BD F4                   		movw	r12, ax
 2420 113c FA F4                   		movw	hl, r12
 2421 113e 8B                      		mov	a, [hl]
 2422 113f 9D F2                   		mov	r10, a
 2423 1141 31 7A                   		shr	a, 7
 2424 1143 9D F2                   		mov	r10, a
 2425 1145 7A F2 01                		xor	r10, #1
 2426 1148 8D F2                   		mov	a, r10
 2427 114a 31 79                   		shl	a, 7
 2428 114c 9D F2                   		mov	r10, a
 2429 114e AD F0                   		movw	ax, r8
 2430 1150 BD F4                   		movw	r12, ax
 2431 1152 FA F4                   		movw	hl, r12
 2432 1154 8B                      		mov	a, [hl]
 2433 1155 9D F3                   		mov	r11, a
 2434 1157 5A F3 7F                		and	r11, #127
 2435 115a 8D F3                   		mov	a, r11
 2436 115c 6B F2                   		or	a, r10
 2437 115e 9D F2                   		mov	r10, a
 2438 1160 AD F0                   		movw	ax, r8
 2439 1162 DA F4                   		movw	bc, r12
 2440 1164 8D F2                   		mov	a, r10
 2441 1166 48 00 00                		mov	[bc], a
 494:../src/user_functions.c **** 
 495:../src/user_functions.c **** 		if (!P1_bit.no7) {
 2442                             		.loc 1 495 0
 2443 1169 C9 F0 01 FF             		movw	r8, #-255
 2444 116d AD F0                   		movw	ax, r8
 2445 116f BD F2                   		movw	r10, ax
 2446 1171 FA F2                   		movw	hl, r10
 2447 1173 8B                      		mov	a, [hl]
 2448 1174 9D F0                   		mov	r8, a
 2449 1176 31 7A                   		shr	a, 7
 2450 1178 9D F0                   		mov	r8, a
 2451 117a D4 F0                   		cmp0	r8
 2452 117c 61 E8                   		 skz
 2453 117e EC 86 11 00             		 br	!!.L84
 496:../src/user_functions.c **** 			setTemp();
 2454                             		.loc 1 496 0
 2455 1182 FC 00 00 00             		call	!!%code(_setTemp)
 2456                             	.L84:
 497:../src/user_functions.c **** 		}
 498:../src/user_functions.c **** 	}
 499:../src/user_functions.c **** 
 500:../src/user_functions.c **** 	if (secFlag) {
 2457                             		.loc 1 500 0
 2458 1186 8F 00 00                		mov	a, !_secFlag
 2459 1189 9D F0                   		mov	r8, a
 2460 118b D4 F0                   		cmp0	r8
 2461 118d 61 F8                   		 sknz
 2462 118f EC 9E 11 00             		 br	!!.L85
 501:../src/user_functions.c **** 		secFlag = 0;
 2463                             		.loc 1 501 0
 2464 1193 F5 00 00                		clrb	!_secFlag
 502:../src/user_functions.c **** 		collectADC();
 2465                             		.loc 1 502 0
 2466 1196 FC 00 00 00             		call	!!%code(_collectADC)
 503:../src/user_functions.c **** 		writeLog();
 2467                             		.loc 1 503 0
 2468 119a FC 00 00 00             		call	!!%code(_writeLog)
 2469                             	.L85:
 504:../src/user_functions.c **** 	}
 505:../src/user_functions.c **** 
 506:../src/user_functions.c **** 	if (mode == 0) {
 2470                             		.loc 1 506 0
 2471 119e AF 3A 00                		movw	ax, !_mode
 2472 11a1 BD F0                   		movw	r8, ax
 2473 11a3 44 00 00                		cmpw	ax, #0
 2474 11a6 61 E8                   		 skz
 2475 11a8 EC 8D 12 00             		 br	!!.L82
 507:../src/user_functions.c **** 		if (tempState == 0) {
 2476                             		.loc 1 507 0
 2477 11ac 8F 41 00                		mov	a, !_tempState
 2478 11af 9D F0                   		mov	r8, a
 2479 11b1 D4 F0                   		cmp0	r8
 2480 11b3 61 E8                   		 skz
 2481 11b5 EC 1E 12 00             		 br	!!.L87
 508:../src/user_functions.c **** 			P4_bit.no1 = 1;
 2482                             		.loc 1 508 0
 2483 11b9 C9 F0 04 FF             		movw	r8, #-252
 2484 11bd AD F0                   		movw	ax, r8
 2485 11bf BD F4                   		movw	r12, ax
 2486 11c1 FA F4                   		movw	hl, r12
 2487 11c3 8B                      		mov	a, [hl]
 2488 11c4 9D F2                   		mov	r10, a
 2489 11c6 6A F2 02                		or	r10, #2
 2490 11c9 AD F0                   		movw	ax, r8
 2491 11cb DA F4                   		movw	bc, r12
 2492 11cd 8D F2                   		mov	a, r10
 2493 11cf 48 00 00                		mov	[bc], a
 509:../src/user_functions.c **** 			P4_bit.no2 = 0;
 2494                             		.loc 1 509 0
 2495 11d2 C9 F0 04 FF             		movw	r8, #-252
 2496 11d6 AD F0                   		movw	ax, r8
 2497 11d8 BD F4                   		movw	r12, ax
 2498 11da FA F4                   		movw	hl, r12
 2499 11dc 8B                      		mov	a, [hl]
 2500 11dd 9D F2                   		mov	r10, a
 2501 11df 5A F2 FB                		and	r10, #-5
 2502 11e2 AD F0                   		movw	ax, r8
 2503 11e4 DA F4                   		movw	bc, r12
 2504 11e6 8D F2                   		mov	a, r10
 2505 11e8 48 00 00                		mov	[bc], a
 510:../src/user_functions.c **** 			P4_bit.no3 = 0;
 2506                             		.loc 1 510 0
 2507 11eb C9 F0 04 FF             		movw	r8, #-252
 2508 11ef AD F0                   		movw	ax, r8
 2509 11f1 BD F4                   		movw	r12, ax
 2510 11f3 FA F4                   		movw	hl, r12
 2511 11f5 8B                      		mov	a, [hl]
 2512 11f6 9D F2                   		mov	r10, a
 2513 11f8 5A F2 F7                		and	r10, #-9
 2514 11fb AD F0                   		movw	ax, r8
 2515 11fd DA F4                   		movw	bc, r12
 2516 11ff 8D F2                   		mov	a, r10
 2517 1201 48 00 00                		mov	[bc], a
 511:../src/user_functions.c **** 			switchState = 2;
 2518                             		.loc 1 511 0
 2519 1204 51 02                   		mov	a, #2
 2520 1206 9F 40 00                		mov	!_switchState, a
 512:../src/user_functions.c **** 			if (finalTemp > 27) {
 2521                             		.loc 1 512 0
 2522 1209 AF 06 00                		movw	ax, !_finalTemp
 2523 120c BD F0                   		movw	r8, ax
 2524 120e 44 1B 00                		cmpw	ax, #27
 2525 1211 61 E3                   		 skh
 2526 1213 EC 8D 12 00             		 br	!!.L82
 513:../src/user_functions.c **** 				tempState = 1;
 2527                             		.loc 1 513 0
 2528 1217 E5 41 00                		oneb	!_tempState
 2529 121a EC 8D 12 00             		br	!!.L82
 2530                             	.L87:
 514:../src/user_functions.c **** 			}
 515:../src/user_functions.c **** 		} else if (tempState == 1) {
 2531                             		.loc 1 515 0
 2532 121e 8F 41 00                		mov	a, !_tempState
 2533 1221 9D F0                   		mov	r8, a
 2534 1223 4A F0 01                		cmp	r8, #1
 2535 1226 61 E8                   		 skz
 2536 1228 EC 8D 12 00             		 br	!!.L82
 516:../src/user_functions.c **** 			P4_bit.no1 = 0;
 2537                             		.loc 1 516 0
 2538 122c C9 F0 04 FF             		movw	r8, #-252
 2539 1230 AD F0                   		movw	ax, r8
 2540 1232 BD F4                   		movw	r12, ax
 2541 1234 FA F4                   		movw	hl, r12
 2542 1236 8B                      		mov	a, [hl]
 2543 1237 9D F2                   		mov	r10, a
 2544 1239 5A F2 FD                		and	r10, #-3
 2545 123c AD F0                   		movw	ax, r8
 2546 123e DA F4                   		movw	bc, r12
 2547 1240 8D F2                   		mov	a, r10
 2548 1242 48 00 00                		mov	[bc], a
 517:../src/user_functions.c **** 			P4_bit.no2 = 1;
 2549                             		.loc 1 517 0
 2550 1245 C9 F0 04 FF             		movw	r8, #-252
 2551 1249 AD F0                   		movw	ax, r8
 2552 124b BD F4                   		movw	r12, ax
 2553 124d FA F4                   		movw	hl, r12
 2554 124f 8B                      		mov	a, [hl]
 2555 1250 9D F2                   		mov	r10, a
 2556 1252 6A F2 04                		or	r10, #4
 2557 1255 AD F0                   		movw	ax, r8
 2558 1257 DA F4                   		movw	bc, r12
 2559 1259 8D F2                   		mov	a, r10
 2560 125b 48 00 00                		mov	[bc], a
 518:../src/user_functions.c **** 			P4_bit.no3 = 0;
 2561                             		.loc 1 518 0
 2562 125e C9 F0 04 FF             		movw	r8, #-252
 2563 1262 AD F0                   		movw	ax, r8
 2564 1264 BD F4                   		movw	r12, ax
 2565 1266 FA F4                   		movw	hl, r12
 2566 1268 8B                      		mov	a, [hl]
 2567 1269 9D F2                   		mov	r10, a
 2568 126b 5A F2 F7                		and	r10, #-9
 2569 126e AD F0                   		movw	ax, r8
 2570 1270 DA F4                   		movw	bc, r12
 2571 1272 8D F2                   		mov	a, r10
 2572 1274 48 00 00                		mov	[bc], a
 519:../src/user_functions.c **** 			switchState = 3;
 2573                             		.loc 1 519 0
 2574 1277 51 03                   		mov	a, #3
 2575 1279 9F 40 00                		mov	!_switchState, a
 520:../src/user_functions.c **** 			if (finalTemp < 24) {
 2576                             		.loc 1 520 0
 2577 127c AF 06 00                		movw	ax, !_finalTemp
 2578 127f BD F0                   		movw	r8, ax
 2579 1281 44 17 00                		cmpw	ax, #23
 2580 1284 61 F3                   		 sknh
 2581 1286 EC 8D 12 00             		 br	!!.L82
 521:../src/user_functions.c **** 				tempState = 1;
 2582                             		.loc 1 521 0
 2583 128a E5 41 00                		oneb	!_tempState
 2584                             	.L82:
 522:../src/user_functions.c **** 			}
 523:../src/user_functions.c **** 		}
 524:../src/user_functions.c **** 	}
 525:../src/user_functions.c **** 
 526:../src/user_functions.c **** }
 2585                             		.loc 1 526 0
 2586 128d 10 02                   		addw	sp, #2
 2587 128f D7                      		ret
 2588                             	.LFE9:
 2590                             		.global	_setTemp
 2592                             	_setTemp:
 2593                             	.LFB10:
 527:../src/user_functions.c **** 
 528:../src/user_functions.c **** void setTemp() {
 2594                             		.loc 1 528 0
 2595                             		; start of function
 2596                             		; locals: 2 bytes
 2597 1290 20 02                   		subw	sp, #2
 2598                             	.LCFI13:
 529:../src/user_functions.c **** 	uint16_t temp = 4096 - TCR01;
 2599                             		.loc 1 529 0
 2600 1292 C9 F0 82 01             		movw	r8, #386
 2601 1296 AD F0                   		movw	ax, r8
 2602 1298 BD F2                   		movw	r10, ax
 2603 129a FA F2                   		movw	hl, r10
 2604 129c AB                      		movw	ax, [hl]
 2605 129d BD F0                   		movw	r8, ax
 2606 129f 30 00 10                		movw	ax, #4096
 2607 12a2 26 F0                   		subw	ax, r8
 2608 12a4 B8 00                   		movw	[sp], ax
 530:../src/user_functions.c **** 	finalTemp = temp / 16;
 2609                             		.loc 1 530 0
 2610 12a6 BD F0                   		movw	r8, ax
 2611 12a8 31 4E                   		shrw	ax, 4
 2612 12aa BD F0                   		movw	r8, ax
 2613 12ac BF 06 00                		movw	!_finalTemp, ax
 531:../src/user_functions.c **** 	finalTemp -= 50;
 2614                             		.loc 1 531 0
 2615 12af BD F0                   		movw	r8, ax
 2616 12b1 04 CE FF                		addw	ax, #-50
 2617 12b4 BD F0                   		movw	r8, ax
 2618 12b6 BF 06 00                		movw	!_finalTemp, ax
 532:../src/user_functions.c **** 	R_TAU0_Channel1_Stop();
 2619                             		.loc 1 532 0
 2620 12b9 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Stop)
 533:../src/user_functions.c **** 	R_TAU0_Channel1_Start();
 2621                             		.loc 1 533 0
 2622 12bd FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Start)
 534:../src/user_functions.c **** 
 535:../src/user_functions.c **** }
 2623                             		.loc 1 535 0
 2624 12c1 10 02                   		addw	sp, #2
 2625 12c3 D7                      		ret
 2626                             	.LFE10:
 2628                             		.global	_writeMem
 2630                             	_writeMem:
 2631                             	.LFB11:
 536:../src/user_functions.c **** 
 537:../src/user_functions.c **** void writeMem(uint16_t addr) {
 2632                             		.loc 1 537 0
 2633                             		; start of function
 2634                             		; locals: 38 bytes
 2635                             		; outgoing: 6 bytes
 2636 12c4 20 2C                   		subw	sp, #44
 2637                             	.LCFI14:
 538:../src/user_functions.c **** 	uint8_t send[35];
 539:../src/user_functions.c **** 	uint8_t recieve[3];
 540:../src/user_functions.c **** 
 541:../src/user_functions.c **** 	send[0] = 6;
 2638                             		.loc 1 541 0
 2639 12c6 51 06                   		mov	a, #6
 2640 12c8 98 09                   		mov	[sp+9], a
 542:../src/user_functions.c **** 
 543:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2641                             		.loc 1 543 0
 2642 12ca C9 F0 01 FF             		movw	r8, #-255
 2643 12ce AD F0                   		movw	ax, r8
 2644 12d0 BD F4                   		movw	r12, ax
 2645 12d2 FA F4                   		movw	hl, r12
 2646 12d4 8B                      		mov	a, [hl]
 2647 12d5 9D F2                   		mov	r10, a
 2648 12d7 5A F2 DF                		and	r10, #-33
 2649 12da AD F0                   		movw	ax, r8
 2650 12dc DA F4                   		movw	bc, r12
 2651 12de 8D F2                   		mov	a, r10
 2652 12e0 48 00 00                		mov	[bc], a
 544:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2653                             		.loc 1 544 0
 2654 12e3 C9 F0 2C 00             		movw	r8, #44
 2655 12e7 AE F8                   		movw	ax, sp
 2656 12e9 BD F0                   		movw	r8, ax
 2657 12eb 04 2C 00                		addw	ax, #44
 2658 12ee BD F0                   		movw	r8, ax
 2659 12f0 04 DD FF                		addw	ax, #-35
 2660 12f3 B8 00                   		movw	[sp], ax
 2661 12f5 E6                      		onew	ax
 2662 12f6 B8 02                   		movw	[sp+2], ax
 2663 12f8 C9 F2 2C 00             		movw	r10, #44
 2664 12fc AE F8                   		movw	ax, sp
 2665 12fe BD F2                   		movw	r10, ax
 2666 1300 04 2C 00                		addw	ax, #44
 2667 1303 BD F2                   		movw	r10, ax
 2668 1305 04 DA FF                		addw	ax, #-38
 2669 1308 B8 04                   		movw	[sp+4], ax
 2670 130a FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 545:../src/user_functions.c **** 
 546:../src/user_functions.c **** 	while (recieveflag) {
 2671                             		.loc 1 546 0
 2672 130e 00                      		nop
 2673                             	.L91:
 2674                             		.loc 1 546 0 is_stmt 0 discriminator 1
 2675 130f 8F 00 00                		mov	a, !_recieveflag
 2676 1312 9D F0                   		mov	r8, a
 2677 1314 D4 F0                   		cmp0	r8
 2678 1316 61 E8                   		 skz
 2679 1318 EC 0F 13 00             		 br	!!.L91
 547:../src/user_functions.c **** 	}
 548:../src/user_functions.c **** 	recieveflag = 1;
 2680                             		.loc 1 548 0 is_stmt 1
 2681 131c E5 00 00                		oneb	!_recieveflag
 549:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2682                             		.loc 1 549 0
 2683 131f C9 F0 01 FF             		movw	r8, #-255
 2684 1323 AD F0                   		movw	ax, r8
 2685 1325 BD F4                   		movw	r12, ax
 2686 1327 FA F4                   		movw	hl, r12
 2687 1329 8B                      		mov	a, [hl]
 2688 132a 9D F2                   		mov	r10, a
 2689 132c 6A F2 20                		or	r10, #32
 2690 132f AD F0                   		movw	ax, r8
 2691 1331 DA F4                   		movw	bc, r12
 2692 1333 8D F2                   		mov	a, r10
 2693 1335 48 00 00                		mov	[bc], a
 550:../src/user_functions.c **** 	delayNoInt(10);
 2694                             		.loc 1 550 0
 2695 1338 30 0A 00                		movw	ax, #10
 2696 133b B8 00                   		movw	[sp], ax
 2697 133d FC 00 00 00             		call	!!%code(_delayNoInt)
 551:../src/user_functions.c **** 
 552:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2698                             		.loc 1 552 0
 2699 1341 C9 F0 01 FF             		movw	r8, #-255
 2700 1345 AD F0                   		movw	ax, r8
 2701 1347 BD F4                   		movw	r12, ax
 2702 1349 FA F4                   		movw	hl, r12
 2703 134b 8B                      		mov	a, [hl]
 2704 134c 9D F2                   		mov	r10, a
 2705 134e 5A F2 DF                		and	r10, #-33
 2706 1351 AD F0                   		movw	ax, r8
 2707 1353 DA F4                   		movw	bc, r12
 2708 1355 8D F2                   		mov	a, r10
 2709 1357 48 00 00                		mov	[bc], a
 553:../src/user_functions.c **** 	send[0] = 2;
 2710                             		.loc 1 553 0
 2711 135a 51 02                   		mov	a, #2
 2712 135c 98 09                   		mov	[sp+9], a
 554:../src/user_functions.c **** 	send[1] = addr >> 4;
 2713                             		.loc 1 554 0
 2714 135e A8 30                   		movw	ax, [sp+48]
 2715 1360 31 4E                   		shrw	ax, 4
 2716 1362 BD F0                   		movw	r8, ax
 2717 1364 8D F0                   		mov	a, r8
 2718 1366 98 0A                   		mov	[sp+10], a
 555:../src/user_functions.c **** 	send[2] = addr & 0x0F;
 2719                             		.loc 1 555 0
 2720 1368 88 30                   		mov	a, [sp+48]
 2721 136a 9D F0                   		mov	r8, a
 2722 136c 5A F0 0F                		and	r8, #15
 2723 136f 8D F0                   		mov	a, r8
 2724 1371 98 0B                   		mov	[sp+11], a
 556:../src/user_functions.c **** 	sprintf(&send[3], "%s", mem);
 2725                             		.loc 1 556 0
 2726 1373 AE F8                   		movw	ax, sp
 2727 1375 BD F2                   		movw	r10, ax
 2728 1377 04 09 00                		addw	ax, #9
 2729 137a BD F0                   		movw	r8, ax
 2730 137c 04 03 00                		addw	ax, #3
 2731 137f B8 00                   		movw	[sp], ax
 2732 1381 30 00 00                		movw	ax, #_mem
 2733 1384 B8 02                   		movw	[sp+2], ax
 2734 1386 FC 00 00 00             		call	!!%code(_strcpy)
 557:../src/user_functions.c **** 
 558:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, strlen(mem) + 3, recieve);
 2735                             		.loc 1 558 0
 2736 138a 30 00 00                		movw	ax, #_mem
 2737 138d B8 00                   		movw	[sp], ax
 2738 138f FC 00 00 00             		call	!!%code(_strlen)
 2739 1393 AD F0                   		movw	ax, r8
 2740 1395 04 03 00                		addw	ax, #3
 2741 1398 BD F0                   		movw	r8, ax
 2742 139a C9 F4 2C 00             		movw	r12, #44
 2743 139e AE F8                   		movw	ax, sp
 2744 13a0 BD F4                   		movw	r12, ax
 2745 13a2 04 2C 00                		addw	ax, #44
 2746 13a5 BD F4                   		movw	r12, ax
 2747 13a7 04 DD FF                		addw	ax, #-35
 2748 13aa B8 00                   		movw	[sp], ax
 2749 13ac AD F0                   		movw	ax, r8
 2750 13ae B8 02                   		movw	[sp+2], ax
 2751 13b0 C9 F0 2C 00             		movw	r8, #44
 2752 13b4 AE F8                   		movw	ax, sp
 2753 13b6 BD F0                   		movw	r8, ax
 2754 13b8 04 2C 00                		addw	ax, #44
 2755 13bb BD F0                   		movw	r8, ax
 2756 13bd 04 DA FF                		addw	ax, #-38
 2757 13c0 B8 04                   		movw	[sp+4], ax
 2758 13c2 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 559:../src/user_functions.c **** 
 560:../src/user_functions.c **** 	while (recieveflag) {
 2759                             		.loc 1 560 0
 2760 13c6 00                      		nop
 2761                             	.L92:
 2762                             		.loc 1 560 0 is_stmt 0 discriminator 1
 2763 13c7 8F 00 00                		mov	a, !_recieveflag
 2764 13ca 9D F0                   		mov	r8, a
 2765 13cc D4 F0                   		cmp0	r8
 2766 13ce 61 E8                   		 skz
 2767 13d0 EC C7 13 00             		 br	!!.L92
 561:../src/user_functions.c **** 	}
 562:../src/user_functions.c **** 	recieveflag = 1;
 2768                             		.loc 1 562 0 is_stmt 1
 2769 13d4 E5 00 00                		oneb	!_recieveflag
 563:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2770                             		.loc 1 563 0
 2771 13d7 C9 F0 01 FF             		movw	r8, #-255
 2772 13db AD F0                   		movw	ax, r8
 2773 13dd BD F4                   		movw	r12, ax
 2774 13df FA F4                   		movw	hl, r12
 2775 13e1 8B                      		mov	a, [hl]
 2776 13e2 9D F2                   		mov	r10, a
 2777 13e4 6A F2 20                		or	r10, #32
 2778 13e7 AD F0                   		movw	ax, r8
 2779 13e9 DA F4                   		movw	bc, r12
 2780 13eb 8D F2                   		mov	a, r10
 2781 13ed 48 00 00                		mov	[bc], a
 564:../src/user_functions.c **** 	delayNoInt(10);
 2782                             		.loc 1 564 0
 2783 13f0 30 0A 00                		movw	ax, #10
 2784 13f3 B8 00                   		movw	[sp], ax
 2785 13f5 FC 00 00 00             		call	!!%code(_delayNoInt)
 565:../src/user_functions.c **** 
 566:../src/user_functions.c **** 	send[0] = 4;
 2786                             		.loc 1 566 0
 2787 13f9 51 04                   		mov	a, #4
 2788 13fb 98 09                   		mov	[sp+9], a
 567:../src/user_functions.c **** 
 568:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2789                             		.loc 1 568 0
 2790 13fd C9 F0 01 FF             		movw	r8, #-255
 2791 1401 AD F0                   		movw	ax, r8
 2792 1403 BD F4                   		movw	r12, ax
 2793 1405 FA F4                   		movw	hl, r12
 2794 1407 8B                      		mov	a, [hl]
 2795 1408 9D F2                   		mov	r10, a
 2796 140a 5A F2 DF                		and	r10, #-33
 2797 140d AD F0                   		movw	ax, r8
 2798 140f DA F4                   		movw	bc, r12
 2799 1411 8D F2                   		mov	a, r10
 2800 1413 48 00 00                		mov	[bc], a
 569:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2801                             		.loc 1 569 0
 2802 1416 C9 F0 2C 00             		movw	r8, #44
 2803 141a AE F8                   		movw	ax, sp
 2804 141c BD F0                   		movw	r8, ax
 2805 141e 04 2C 00                		addw	ax, #44
 2806 1421 BD F0                   		movw	r8, ax
 2807 1423 04 DD FF                		addw	ax, #-35
 2808 1426 B8 00                   		movw	[sp], ax
 2809 1428 E6                      		onew	ax
 2810 1429 B8 02                   		movw	[sp+2], ax
 2811 142b C9 F2 2C 00             		movw	r10, #44
 2812 142f AE F8                   		movw	ax, sp
 2813 1431 BD F2                   		movw	r10, ax
 2814 1433 04 2C 00                		addw	ax, #44
 2815 1436 BD F2                   		movw	r10, ax
 2816 1438 04 DA FF                		addw	ax, #-38
 2817 143b B8 04                   		movw	[sp+4], ax
 2818 143d FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 570:../src/user_functions.c **** 
 571:../src/user_functions.c **** 	while (recieveflag) {
 2819                             		.loc 1 571 0
 2820 1441 00                      		nop
 2821                             	.L93:
 2822                             		.loc 1 571 0 is_stmt 0 discriminator 1
 2823 1442 8F 00 00                		mov	a, !_recieveflag
 2824 1445 9D F0                   		mov	r8, a
 2825 1447 D4 F0                   		cmp0	r8
 2826 1449 61 E8                   		 skz
 2827 144b EC 42 14 00             		 br	!!.L93
 572:../src/user_functions.c **** 	}
 573:../src/user_functions.c **** 	recieveflag = 1;
 2828                             		.loc 1 573 0 is_stmt 1
 2829 144f E5 00 00                		oneb	!_recieveflag
 574:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2830                             		.loc 1 574 0
 2831 1452 C9 F0 01 FF             		movw	r8, #-255
 2832 1456 AD F0                   		movw	ax, r8
 2833 1458 BD F4                   		movw	r12, ax
 2834 145a FA F4                   		movw	hl, r12
 2835 145c 8B                      		mov	a, [hl]
 2836 145d 9D F2                   		mov	r10, a
 2837 145f 6A F2 20                		or	r10, #32
 2838 1462 AD F0                   		movw	ax, r8
 2839 1464 DA F4                   		movw	bc, r12
 2840 1466 8D F2                   		mov	a, r10
 2841 1468 48 00 00                		mov	[bc], a
 575:../src/user_functions.c **** 	delayNoInt(10);
 2842                             		.loc 1 575 0
 2843 146b 30 0A 00                		movw	ax, #10
 2844 146e B8 00                   		movw	[sp], ax
 2845 1470 FC 00 00 00             		call	!!%code(_delayNoInt)
 576:../src/user_functions.c **** 
 577:../src/user_functions.c **** 	sprintf(response, "$J0\x0d\x0a");
 2846                             		.loc 1 577 0
 2847 1474 51 24                   		mov	a, #36
 2848 1476 9F 08 00                		mov	!_response, a
 2849 1479 51 4A                   		mov	a, #74
 2850 147b 9F 09 00                		mov	!_response+1, a
 2851 147e 51 30                   		mov	a, #48
 2852 1480 9F 0A 00                		mov	!_response+2, a
 2853 1483 51 0D                   		mov	a, #13
 2854 1485 9F 0B 00                		mov	!_response+3, a
 2855 1488 51 0A                   		mov	a, #10
 2856 148a 9F 0C 00                		mov	!_response+4, a
 2857 148d F5 0D 00                		clrb	!_response+5
 578:../src/user_functions.c **** 	count = 5;
 2858                             		.loc 1 578 0
 2859 1490 30 05 00                		movw	ax, #5
 2860 1493 BF 04 00                		movw	!_count, ax
 579:../src/user_functions.c **** }
 2861                             		.loc 1 579 0
 2862 1496 10 2C                   		addw	sp, #44
 2863 1498 D7                      		ret
 2864                             	.LFE11:
 2866                             		.global	_writeLog
 2868                             	_writeLog:
 2869                             	.LFB12:
 580:../src/user_functions.c **** 
 581:../src/user_functions.c **** void writeLog() {
 2870                             		.loc 1 581 0
 2871                             		; start of function
 2872                             		; locals: 38 bytes
 2873                             		; outgoing: 6 bytes
 2874 1499 20 2C                   		subw	sp, #44
 2875                             	.LCFI15:
 582:../src/user_functions.c **** 	uint8_t send[35];
 583:../src/user_functions.c **** 	uint8_t recieve[3];
 584:../src/user_functions.c **** 
 585:../src/user_functions.c **** 	send[0] = 6;
 2876                             		.loc 1 585 0
 2877 149b 51 06                   		mov	a, #6
 2878 149d 98 09                   		mov	[sp+9], a
 586:../src/user_functions.c **** 
 587:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2879                             		.loc 1 587 0
 2880 149f C9 F0 01 FF             		movw	r8, #-255
 2881 14a3 AD F0                   		movw	ax, r8
 2882 14a5 BD F4                   		movw	r12, ax
 2883 14a7 FA F4                   		movw	hl, r12
 2884 14a9 8B                      		mov	a, [hl]
 2885 14aa 9D F2                   		mov	r10, a
 2886 14ac 5A F2 DF                		and	r10, #-33
 2887 14af AD F0                   		movw	ax, r8
 2888 14b1 DA F4                   		movw	bc, r12
 2889 14b3 8D F2                   		mov	a, r10
 2890 14b5 48 00 00                		mov	[bc], a
 588:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2891                             		.loc 1 588 0
 2892 14b8 C9 F0 2C 00             		movw	r8, #44
 2893 14bc AE F8                   		movw	ax, sp
 2894 14be BD F0                   		movw	r8, ax
 2895 14c0 04 2C 00                		addw	ax, #44
 2896 14c3 BD F0                   		movw	r8, ax
 2897 14c5 04 DD FF                		addw	ax, #-35
 2898 14c8 B8 00                   		movw	[sp], ax
 2899 14ca E6                      		onew	ax
 2900 14cb B8 02                   		movw	[sp+2], ax
 2901 14cd C9 F4 2C 00             		movw	r12, #44
 2902 14d1 AE F8                   		movw	ax, sp
 2903 14d3 BD F4                   		movw	r12, ax
 2904 14d5 04 2C 00                		addw	ax, #44
 2905 14d8 BD F4                   		movw	r12, ax
 2906 14da 04 DA FF                		addw	ax, #-38
 2907 14dd B8 04                   		movw	[sp+4], ax
 2908 14df FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 589:../src/user_functions.c **** 
 590:../src/user_functions.c **** 	while (recieveflag) {
 2909                             		.loc 1 590 0
 2910 14e3 00                      		nop
 2911                             	.L95:
 2912                             		.loc 1 590 0 is_stmt 0 discriminator 1
 2913 14e4 8F 00 00                		mov	a, !_recieveflag
 2914 14e7 9D F0                   		mov	r8, a
 2915 14e9 D4 F0                   		cmp0	r8
 2916 14eb 61 E8                   		 skz
 2917 14ed EC E4 14 00             		 br	!!.L95
 591:../src/user_functions.c **** 	}
 592:../src/user_functions.c **** 	recieveflag = 1;
 2918                             		.loc 1 592 0 is_stmt 1
 2919 14f1 E5 00 00                		oneb	!_recieveflag
 593:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2920                             		.loc 1 593 0
 2921 14f4 C9 F0 01 FF             		movw	r8, #-255
 2922 14f8 AD F0                   		movw	ax, r8
 2923 14fa BD F4                   		movw	r12, ax
 2924 14fc FA F4                   		movw	hl, r12
 2925 14fe 8B                      		mov	a, [hl]
 2926 14ff 9D F2                   		mov	r10, a
 2927 1501 6A F2 20                		or	r10, #32
 2928 1504 AD F0                   		movw	ax, r8
 2929 1506 DA F4                   		movw	bc, r12
 2930 1508 8D F2                   		mov	a, r10
 2931 150a 48 00 00                		mov	[bc], a
 594:../src/user_functions.c **** 	delayNoInt(10);
 2932                             		.loc 1 594 0
 2933 150d 30 0A 00                		movw	ax, #10
 2934 1510 B8 00                   		movw	[sp], ax
 2935 1512 FC 00 00 00             		call	!!%code(_delayNoInt)
 595:../src/user_functions.c **** 
 596:../src/user_functions.c **** 	getRTC();
 2936                             		.loc 1 596 0
 2937 1516 FC 00 00 00             		call	!!%code(_getRTC)
 597:../src/user_functions.c **** 	count = 0;
 2938                             		.loc 1 597 0
 2939 151a F6                      		clrw	ax
 2940 151b BF 04 00                		movw	!_count, ax
 598:../src/user_functions.c **** 
 599:../src/user_functions.c **** 	send[0] = 2;
 2941                             		.loc 1 599 0
 2942 151e 51 02                   		mov	a, #2
 2943 1520 98 09                   		mov	[sp+9], a
 600:../src/user_functions.c **** 	send[1] = logCount >> 4;
 2944                             		.loc 1 600 0
 2945 1522 AF 42 00                		movw	ax, !_logCount
 2946 1525 BD F0                   		movw	r8, ax
 2947 1527 31 4E                   		shrw	ax, 4
 2948 1529 BD F0                   		movw	r8, ax
 2949 152b 8D F0                   		mov	a, r8
 2950 152d 98 0A                   		mov	[sp+10], a
 601:../src/user_functions.c **** 	send[2] = logCount & 0x0F;
 2951                             		.loc 1 601 0
 2952 152f AF 42 00                		movw	ax, !_logCount
 2953 1532 BD F0                   		movw	r8, ax
 2954 1534 5A F0 0F                		and	r8, #15
 2955 1537 8D F0                   		mov	a, r8
 2956 1539 98 0B                   		mov	[sp+11], a
 602:../src/user_functions.c **** 	send[3] = date[0];
 2957                             		.loc 1 602 0
 2958 153b 8F 00 00                		mov	a, !_date
 2959 153e 9D F0                   		mov	r8, a
 2960 1540 98 0C                   		mov	[sp+12], a
 603:../src/user_functions.c **** 	send[4] = date[1];
 2961                             		.loc 1 603 0
 2962 1542 8F 00 00                		mov	a, !_date+1
 2963 1545 9D F0                   		mov	r8, a
 2964 1547 98 0D                   		mov	[sp+13], a
 604:../src/user_functions.c **** 	send[5] = date[2];
 2965                             		.loc 1 604 0
 2966 1549 8F 00 00                		mov	a, !_date+2
 2967 154c 9D F0                   		mov	r8, a
 2968 154e 98 0E                   		mov	[sp+14], a
 605:../src/user_functions.c **** 	send[6] = date[3];
 2969                             		.loc 1 605 0
 2970 1550 8F 00 00                		mov	a, !_date+3
 2971 1553 9D F0                   		mov	r8, a
 2972 1555 98 0F                   		mov	[sp+15], a
 606:../src/user_functions.c **** 	send[7] = date[4];
 2973                             		.loc 1 606 0
 2974 1557 8F 00 00                		mov	a, !_date+4
 2975 155a 9D F0                   		mov	r8, a
 2976 155c 98 10                   		mov	[sp+16], a
 607:../src/user_functions.c **** 	send[8] = date[5];
 2977                             		.loc 1 607 0
 2978 155e 8F 00 00                		mov	a, !_date+5
 2979 1561 9D F0                   		mov	r8, a
 2980 1563 98 11                   		mov	[sp+17], a
 608:../src/user_functions.c **** 	send[9] = switchState;
 2981                             		.loc 1 608 0
 2982 1565 8F 40 00                		mov	a, !_switchState
 2983 1568 9D F0                   		mov	r8, a
 2984 156a 98 12                   		mov	[sp+18], a
 609:../src/user_functions.c **** 	send[10] = finalTemp;
 2985                             		.loc 1 609 0
 2986 156c AF 06 00                		movw	ax, !_finalTemp
 2987 156f BD F0                   		movw	r8, ax
 2988 1571 8D F0                   		mov	a, r8
 2989 1573 98 13                   		mov	[sp+19], a
 610:../src/user_functions.c **** 	send[11] = voltage;
 2990                             		.loc 1 610 0
 2991 1575 8F 00 00                		mov	a, !_voltage
 2992 1578 9D F0                   		mov	r8, a
 2993 157a 98 14                   		mov	[sp+20], a
 611:../src/user_functions.c **** 	send[12] = current1;
 2994                             		.loc 1 611 0
 2995 157c 8F 00 00                		mov	a, !_current1
 2996 157f 9D F0                   		mov	r8, a
 2997 1581 98 15                   		mov	[sp+21], a
 612:../src/user_functions.c **** 	send[13] = 24;
 2998                             		.loc 1 612 0
 2999 1583 51 18                   		mov	a, #24
 3000 1585 98 16                   		mov	[sp+22], a
 613:../src/user_functions.c **** 	send[14] = 27;
 3001                             		.loc 1 613 0
 3002 1587 51 1B                   		mov	a, #27
 3003 1589 98 17                   		mov	[sp+23], a
 614:../src/user_functions.c **** 	send[15] = '\n';
 3004                             		.loc 1 614 0
 3005 158b 51 0A                   		mov	a, #10
 3006 158d 98 18                   		mov	[sp+24], a
 615:../src/user_functions.c **** 	send[16] = 0;
 3007                             		.loc 1 615 0
 3008 158f F1                      		clrb	a
 3009 1590 98 19                   		mov	[sp+25], a
 616:../src/user_functions.c **** 	send[17] = 0;
 3010                             		.loc 1 616 0
 3011 1592 F1                      		clrb	a
 3012 1593 98 1A                   		mov	[sp+26], a
 617:../src/user_functions.c **** 	send[18] = 0;
 3013                             		.loc 1 617 0
 3014 1595 F1                      		clrb	a
 3015 1596 98 1B                   		mov	[sp+27], a
 618:../src/user_functions.c **** 	send[19] = 0;
 3016                             		.loc 1 618 0
 3017 1598 F1                      		clrb	a
 3018 1599 98 1C                   		mov	[sp+28], a
 619:../src/user_functions.c **** 
 620:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3019                             		.loc 1 620 0
 3020 159b C9 F0 01 FF             		movw	r8, #-255
 3021 159f AD F0                   		movw	ax, r8
 3022 15a1 BD F4                   		movw	r12, ax
 3023 15a3 FA F4                   		movw	hl, r12
 3024 15a5 8B                      		mov	a, [hl]
 3025 15a6 9D F2                   		mov	r10, a
 3026 15a8 5A F2 DF                		and	r10, #-33
 3027 15ab AD F0                   		movw	ax, r8
 3028 15ad DA F4                   		movw	bc, r12
 3029 15af 8D F2                   		mov	a, r10
 3030 15b1 48 00 00                		mov	[bc], a
 621:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 19, recieve);
 3031                             		.loc 1 621 0
 3032 15b4 C9 F0 2C 00             		movw	r8, #44
 3033 15b8 AE F8                   		movw	ax, sp
 3034 15ba BD F0                   		movw	r8, ax
 3035 15bc 04 2C 00                		addw	ax, #44
 3036 15bf BD F0                   		movw	r8, ax
 3037 15c1 04 DD FF                		addw	ax, #-35
 3038 15c4 B8 00                   		movw	[sp], ax
 3039 15c6 30 13 00                		movw	ax, #19
 3040 15c9 B8 02                   		movw	[sp+2], ax
 3041 15cb C9 F4 2C 00             		movw	r12, #44
 3042 15cf AE F8                   		movw	ax, sp
 3043 15d1 BD F4                   		movw	r12, ax
 3044 15d3 04 2C 00                		addw	ax, #44
 3045 15d6 BD F4                   		movw	r12, ax
 3046 15d8 04 DA FF                		addw	ax, #-38
 3047 15db B8 04                   		movw	[sp+4], ax
 3048 15dd FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 622:../src/user_functions.c **** 
 623:../src/user_functions.c **** 	while (recieveflag) {
 3049                             		.loc 1 623 0
 3050 15e1 00                      		nop
 3051                             	.L96:
 3052                             		.loc 1 623 0 is_stmt 0 discriminator 1
 3053 15e2 8F 00 00                		mov	a, !_recieveflag
 3054 15e5 9D F0                   		mov	r8, a
 3055 15e7 D4 F0                   		cmp0	r8
 3056 15e9 61 E8                   		 skz
 3057 15eb EC E2 15 00             		 br	!!.L96
 624:../src/user_functions.c **** 	}
 625:../src/user_functions.c **** 	recieveflag = 1;
 3058                             		.loc 1 625 0 is_stmt 1
 3059 15ef E5 00 00                		oneb	!_recieveflag
 626:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3060                             		.loc 1 626 0
 3061 15f2 C9 F0 01 FF             		movw	r8, #-255
 3062 15f6 AD F0                   		movw	ax, r8
 3063 15f8 BD F4                   		movw	r12, ax
 3064 15fa FA F4                   		movw	hl, r12
 3065 15fc 8B                      		mov	a, [hl]
 3066 15fd 9D F2                   		mov	r10, a
 3067 15ff 6A F2 20                		or	r10, #32
 3068 1602 AD F0                   		movw	ax, r8
 3069 1604 DA F4                   		movw	bc, r12
 3070 1606 8D F2                   		mov	a, r10
 3071 1608 48 00 00                		mov	[bc], a
 627:../src/user_functions.c **** 	delayNoInt(10);
 3072                             		.loc 1 627 0
 3073 160b 30 0A 00                		movw	ax, #10
 3074 160e B8 00                   		movw	[sp], ax
 3075 1610 FC 00 00 00             		call	!!%code(_delayNoInt)
 628:../src/user_functions.c **** 
 629:../src/user_functions.c **** 	send[0] = 4;
 3076                             		.loc 1 629 0
 3077 1614 51 04                   		mov	a, #4
 3078 1616 98 09                   		mov	[sp+9], a
 630:../src/user_functions.c **** 
 631:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3079                             		.loc 1 631 0
 3080 1618 C9 F0 01 FF             		movw	r8, #-255
 3081 161c AD F0                   		movw	ax, r8
 3082 161e BD F4                   		movw	r12, ax
 3083 1620 FA F4                   		movw	hl, r12
 3084 1622 8B                      		mov	a, [hl]
 3085 1623 9D F2                   		mov	r10, a
 3086 1625 5A F2 DF                		and	r10, #-33
 3087 1628 AD F0                   		movw	ax, r8
 3088 162a DA F4                   		movw	bc, r12
 3089 162c 8D F2                   		mov	a, r10
 3090 162e 48 00 00                		mov	[bc], a
 632:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 3091                             		.loc 1 632 0
 3092 1631 C9 F0 2C 00             		movw	r8, #44
 3093 1635 AE F8                   		movw	ax, sp
 3094 1637 BD F0                   		movw	r8, ax
 3095 1639 04 2C 00                		addw	ax, #44
 3096 163c BD F0                   		movw	r8, ax
 3097 163e 04 DD FF                		addw	ax, #-35
 3098 1641 B8 00                   		movw	[sp], ax
 3099 1643 E6                      		onew	ax
 3100 1644 B8 02                   		movw	[sp+2], ax
 3101 1646 C9 F4 2C 00             		movw	r12, #44
 3102 164a AE F8                   		movw	ax, sp
 3103 164c BD F4                   		movw	r12, ax
 3104 164e 04 2C 00                		addw	ax, #44
 3105 1651 BD F4                   		movw	r12, ax
 3106 1653 04 DA FF                		addw	ax, #-38
 3107 1656 B8 04                   		movw	[sp+4], ax
 3108 1658 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 633:../src/user_functions.c **** 
 634:../src/user_functions.c **** 	while (recieveflag) {
 3109                             		.loc 1 634 0
 3110 165c 00                      		nop
 3111                             	.L97:
 3112                             		.loc 1 634 0 is_stmt 0 discriminator 1
 3113 165d 8F 00 00                		mov	a, !_recieveflag
 3114 1660 9D F0                   		mov	r8, a
 3115 1662 D4 F0                   		cmp0	r8
 3116 1664 61 E8                   		 skz
 3117 1666 EC 5D 16 00             		 br	!!.L97
 635:../src/user_functions.c **** 	}
 636:../src/user_functions.c **** 	sendflag = 1;
 3118                             		.loc 1 636 0 is_stmt 1
 3119 166a E5 00 00                		oneb	!_sendflag
 637:../src/user_functions.c **** 	recieveflag = 1;
 3120                             		.loc 1 637 0
 3121 166d E5 00 00                		oneb	!_recieveflag
 638:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3122                             		.loc 1 638 0
 3123 1670 C9 F0 01 FF             		movw	r8, #-255
 3124 1674 AD F0                   		movw	ax, r8
 3125 1676 BD F4                   		movw	r12, ax
 3126 1678 FA F4                   		movw	hl, r12
 3127 167a 8B                      		mov	a, [hl]
 3128 167b 9D F2                   		mov	r10, a
 3129 167d 6A F2 20                		or	r10, #32
 3130 1680 AD F0                   		movw	ax, r8
 3131 1682 DA F4                   		movw	bc, r12
 3132 1684 8D F2                   		mov	a, r10
 3133 1686 48 00 00                		mov	[bc], a
 639:../src/user_functions.c **** 	delayNoInt(10);
 3134                             		.loc 1 639 0
 3135 1689 30 0A 00                		movw	ax, #10
 3136 168c B8 00                   		movw	[sp], ax
 3137 168e FC 00 00 00             		call	!!%code(_delayNoInt)
 640:../src/user_functions.c **** 
 641:../src/user_functions.c **** 	if (logCount <= 8192) {
 3138                             		.loc 1 641 0
 3139 1692 AF 42 00                		movw	ax, !_logCount
 3140 1695 BD F0                   		movw	r8, ax
 3141 1697 44 00 20                		cmpw	ax, #8192
 3142 169a 61 F3                   		 sknh
 3143 169c EC AD 16 00             		 br	!!.L94
 642:../src/user_functions.c **** 		logCount += 16;
 3144                             		.loc 1 642 0
 3145 16a0 AF 42 00                		movw	ax, !_logCount
 3146 16a3 BD F0                   		movw	r8, ax
 3147 16a5 04 10 00                		addw	ax, #16
 3148 16a8 BD F0                   		movw	r8, ax
 3149 16aa BF 42 00                		movw	!_logCount, ax
 3150                             	.L94:
 643:../src/user_functions.c **** 	}
 644:../src/user_functions.c **** }
 3151                             		.loc 1 644 0
 3152 16ad 10 2C                   		addw	sp, #44
 3153 16af D7                      		ret
 3154                             	.LFE12:
 3156                             		.section	.rodata
 3157                             	.LC6:
 3158 004a 24 4B 30 25 73 0D 0A 00 		.string	"$K0%s\r\n"
 3159                             	.text
 3160                             		.global	_read
 3162                             	_read:
 3163                             	.LFB13:
 645:../src/user_functions.c **** 
 646:../src/user_functions.c **** void read(uint16_t addr, uint8_t len) {
 3164                             		.loc 1 646 0
 3165                             		; start of function
 3166                             		; locals: 46 bytes
 3167                             		; outgoing: 6 bytes
 3168 16b0 20 34                   		subw	sp, #52
 3169                             	.LCFI16:
 647:../src/user_functions.c **** 	uint8_t send[10];
 648:../src/user_functions.c **** 	uint8_t recieve[35];
 649:../src/user_functions.c **** 
 650:../src/user_functions.c **** 	send[0] = 3;
 3170                             		.loc 1 650 0
 3171 16b2 51 03                   		mov	a, #3
 3172 16b4 98 2A                   		mov	[sp+42], a
 651:../src/user_functions.c **** 	send[1] = addr >> 4;
 3173                             		.loc 1 651 0
 3174 16b6 A8 38                   		movw	ax, [sp+56]
 3175 16b8 31 4E                   		shrw	ax, 4
 3176 16ba BD F0                   		movw	r8, ax
 3177 16bc 8D F0                   		mov	a, r8
 3178 16be 98 2B                   		mov	[sp+43], a
 652:../src/user_functions.c **** 	send[2] = addr & 0x0F;
 3179                             		.loc 1 652 0
 3180 16c0 88 38                   		mov	a, [sp+56]
 3181 16c2 9D F0                   		mov	r8, a
 3182 16c4 5A F0 0F                		and	r8, #15
 3183 16c7 8D F0                   		mov	a, r8
 3184 16c9 98 2C                   		mov	[sp+44], a
 653:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3185                             		.loc 1 653 0
 3186 16cb C9 F0 01 FF             		movw	r8, #-255
 3187 16cf AD F0                   		movw	ax, r8
 3188 16d1 BD F4                   		movw	r12, ax
 3189 16d3 FA F4                   		movw	hl, r12
 3190 16d5 8B                      		mov	a, [hl]
 3191 16d6 9D F2                   		mov	r10, a
 3192 16d8 5A F2 DF                		and	r10, #-33
 3193 16db AD F0                   		movw	ax, r8
 3194 16dd DA F4                   		movw	bc, r12
 3195 16df 8D F2                   		mov	a, r10
 3196 16e1 48 00 00                		mov	[bc], a
 654:../src/user_functions.c **** 	recieveflag = 1;
 3197                             		.loc 1 654 0
 3198 16e4 E5 00 00                		oneb	!_recieveflag
 655:../src/user_functions.c **** 	sendflag = 1;
 3199                             		.loc 1 655 0
 3200 16e7 E5 00 00                		oneb	!_sendflag
 656:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, len + 3, recieve);
 3201                             		.loc 1 656 0
 3202 16ea 88 3A                   		mov	a, [sp+58]
 3203 16ec 70                      		mov	x, a 
 3204 16ed 51 00                   		mov	a, #0
 3205 16ef BD F0                   		movw	r8, ax
 3206 16f1 04 03 00                		addw	ax, #3
 3207 16f4 BD F0                   		movw	r8, ax
 3208 16f6 C9 F2 34 00             		movw	r10, #52
 3209 16fa AE F8                   		movw	ax, sp
 3210 16fc BD F2                   		movw	r10, ax
 3211 16fe 04 34 00                		addw	ax, #52
 3212 1701 BD F2                   		movw	r10, ax
 3213 1703 04 F6 FF                		addw	ax, #-10
 3214 1706 B8 00                   		movw	[sp], ax
 3215 1708 AD F0                   		movw	ax, r8
 3216 170a B8 02                   		movw	[sp+2], ax
 3217 170c C9 F4 34 00             		movw	r12, #52
 3218 1710 AE F8                   		movw	ax, sp
 3219 1712 BD F4                   		movw	r12, ax
 3220 1714 04 34 00                		addw	ax, #52
 3221 1717 BD F4                   		movw	r12, ax
 3222 1719 04 D3 FF                		addw	ax, #-45
 3223 171c B8 04                   		movw	[sp+4], ax
 3224 171e FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 657:../src/user_functions.c **** 
 658:../src/user_functions.c **** 	while (recieveflag || sendflag) {
 3225                             		.loc 1 658 0
 3226 1722 00                      		nop
 3227                             	.L100:
 3228                             		.loc 1 658 0 is_stmt 0 discriminator 3
 3229 1723 8F 00 00                		mov	a, !_recieveflag
 3230 1726 9D F0                   		mov	r8, a
 3231 1728 D4 F0                   		cmp0	r8
 3232 172a 61 E8                   		 skz
 3233 172c EC 23 17 00             		 br	!!.L100
 3234                             		.loc 1 658 0 discriminator 2
 3235 1730 8F 00 00                		mov	a, !_sendflag
 3236 1733 9D F0                   		mov	r8, a
 3237 1735 D4 F0                   		cmp0	r8
 3238 1737 61 E8                   		 skz
 3239 1739 EC 23 17 00             		 br	!!.L100
 659:../src/user_functions.c **** 	}
 660:../src/user_functions.c **** 
 661:../src/user_functions.c **** 	recieveflag = 1;
 3240                             		.loc 1 661 0 is_stmt 1
 3241 173d E5 00 00                		oneb	!_recieveflag
 662:../src/user_functions.c **** 	sendflag = 1;
 3242                             		.loc 1 662 0
 3243 1740 E5 00 00                		oneb	!_sendflag
 663:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3244                             		.loc 1 663 0
 3245 1743 C9 F0 01 FF             		movw	r8, #-255
 3246 1747 AD F0                   		movw	ax, r8
 3247 1749 BD F4                   		movw	r12, ax
 3248 174b FA F4                   		movw	hl, r12
 3249 174d 8B                      		mov	a, [hl]
 3250 174e 9D F2                   		mov	r10, a
 3251 1750 6A F2 20                		or	r10, #32
 3252 1753 AD F0                   		movw	ax, r8
 3253 1755 DA F4                   		movw	bc, r12
 3254 1757 8D F2                   		mov	a, r10
 3255 1759 48 00 00                		mov	[bc], a
 664:../src/user_functions.c **** 	count = len + 3;
 3256                             		.loc 1 664 0
 3257 175c 88 3A                   		mov	a, [sp+58]
 3258 175e 70                      		mov	x, a 
 3259 175f 51 00                   		mov	a, #0
 3260 1761 BD F0                   		movw	r8, ax
 3261 1763 04 03 00                		addw	ax, #3
 3262 1766 BD F0                   		movw	r8, ax
 3263 1768 BF 04 00                		movw	!_count, ax
 665:../src/user_functions.c **** 	sprintf(response, "$K0%s\x0d\x0a", &recieve[3]);
 3264                             		.loc 1 665 0
 3265 176b 30 08 00                		movw	ax, #_response
 3266 176e B8 00                   		movw	[sp], ax
 3267 1770 30 4A 00                		movw	ax, #.LC6
 3268 1773 B8 02                   		movw	[sp+2], ax
 3269 1775 AE F8                   		movw	ax, sp
 3270 1777 BD F2                   		movw	r10, ax
 3271 1779 04 07 00                		addw	ax, #7
 3272 177c BD F0                   		movw	r8, ax
 3273 177e 04 03 00                		addw	ax, #3
 3274 1781 B8 04                   		movw	[sp+4], ax
 3275 1783 FC 00 00 00             		call	!!%code(_sprintf)
 666:../src/user_functions.c **** }
 3276                             		.loc 1 666 0
 3277 1787 10 34                   		addw	sp, #52
 3278 1789 D7                      		ret
 3279                             	.LFE13:
 3281                             		.section	.rodata
 3282                             	.LC7:
 3283 0052 24 4D 30 32 30 25 64 2C 		.string	"$M020%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n"
 3283      25 64 2C 25 64 2C 25 64 
 3283      2C 25 64 2C 25 64 2C 25 
 3283      64 2C 25 64 2C 25 64 2C 
 3283      25 64 2C 25 64 2C 25 64 
 3284                             	.text
 3285                             		.global	_readLog
 3287                             	_readLog:
 3288                             	.LFB14:
 667:../src/user_functions.c **** 
 668:../src/user_functions.c **** void readLog(uint16_t logNum) {
 3289                             		.loc 1 668 0
 3290                             		; start of function
 3291                             		; push 6: r16 r18 r20
 3292                             		; locals: 56 bytes
 3293                             		; outgoing: 28 bytes
 3294 178a 61 EF                   		sel	rb2
 3295 178c C1                      		push	ax ; r16
 3296                             	.LCFI17:
 3297 178d C3                      		push	bc ; r18
 3298                             	.LCFI18:
 3299 178e C5                      		push	de ; r20
 3300                             	.LCFI19:
 3301 178f 61 CF                   		sel	rb0
 3302 1791 20 54                   		subw	sp, #84
 3303                             	.LCFI20:
 669:../src/user_functions.c **** 	uint8_t send[10];
 670:../src/user_functions.c **** 	uint8_t recieve[35];
 671:../src/user_functions.c **** 
 672:../src/user_functions.c **** 	logNum = (logNum - 1) * 16;
 3304                             		.loc 1 672 0
 3305 1793 A8 5E                   		movw	ax, [sp+94]
 3306 1795 04 FF 0F                		addw	ax, #4095
 3307 1798 BD F0                   		movw	r8, ax
 3308 179a 31 4D                   		shlw	ax, 4
 3309 179c B8 5E                   		movw	[sp+94], ax
 673:../src/user_functions.c **** 	send[0] = 3;
 3310                             		.loc 1 673 0
 3311 179e 51 03                   		mov	a, #3
 3312 17a0 98 4A                   		mov	[sp+74], a
 674:../src/user_functions.c **** 	send[1] = logNum >> 4;
 3313                             		.loc 1 674 0
 3314 17a2 A8 5E                   		movw	ax, [sp+94]
 3315 17a4 31 4E                   		shrw	ax, 4
 3316 17a6 BD F0                   		movw	r8, ax
 3317 17a8 8D F0                   		mov	a, r8
 3318 17aa 98 4B                   		mov	[sp+75], a
 675:../src/user_functions.c **** 	send[2] = logNum & 0x0F;
 3319                             		.loc 1 675 0
 3320 17ac 88 5E                   		mov	a, [sp+94]
 3321 17ae 9D F0                   		mov	r8, a
 3322 17b0 5A F0 0F                		and	r8, #15
 3323 17b3 8D F0                   		mov	a, r8
 3324 17b5 98 4C                   		mov	[sp+76], a
 676:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3325                             		.loc 1 676 0
 3326 17b7 C9 F0 01 FF             		movw	r8, #-255
 3327 17bb AD F0                   		movw	ax, r8
 3328 17bd BD F4                   		movw	r12, ax
 3329 17bf FA F4                   		movw	hl, r12
 3330 17c1 8B                      		mov	a, [hl]
 3331 17c2 9D F2                   		mov	r10, a
 3332 17c4 5A F2 DF                		and	r10, #-33
 3333 17c7 AD F0                   		movw	ax, r8
 3334 17c9 BD F6                   		movw	r14, ax
 3335 17cb DA F6                   		movw	bc, r14
 3336 17cd 8D F2                   		mov	a, r10
 3337 17cf 48 00 00                		mov	[bc], a
 677:../src/user_functions.c **** 	recieveflag = 1;
 3338                             		.loc 1 677 0
 3339 17d2 E5 00 00                		oneb	!_recieveflag
 678:../src/user_functions.c **** 	sendflag = 1;
 3340                             		.loc 1 678 0
 3341 17d5 E5 00 00                		oneb	!_sendflag
 679:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 17, recieve);
 3342                             		.loc 1 679 0
 3343 17d8 C9 F0 54 00             		movw	r8, #84
 3344 17dc AE F8                   		movw	ax, sp
 3345 17de BD F0                   		movw	r8, ax
 3346 17e0 04 54 00                		addw	ax, #84
 3347 17e3 BD F0                   		movw	r8, ax
 3348 17e5 04 F6 FF                		addw	ax, #-10
 3349 17e8 B8 00                   		movw	[sp], ax
 3350 17ea 30 11 00                		movw	ax, #17
 3351 17ed B8 02                   		movw	[sp+2], ax
 3352 17ef C9 F4 54 00             		movw	r12, #84
 3353 17f3 AE F8                   		movw	ax, sp
 3354 17f5 BD F4                   		movw	r12, ax
 3355 17f7 04 54 00                		addw	ax, #84
 3356 17fa BD F4                   		movw	r12, ax
 3357 17fc 04 D3 FF                		addw	ax, #-45
 3358 17ff B8 04                   		movw	[sp+4], ax
 3359 1801 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 680:../src/user_functions.c **** 
 681:../src/user_functions.c **** 	while (recieveflag || sendflag) {
 3360                             		.loc 1 681 0
 3361 1805 00                      		nop
 3362                             	.L102:
 3363                             		.loc 1 681 0 is_stmt 0 discriminator 3
 3364 1806 8F 00 00                		mov	a, !_recieveflag
 3365 1809 9D F0                   		mov	r8, a
 3366 180b D4 F0                   		cmp0	r8
 3367 180d 61 E8                   		 skz
 3368 180f EC 06 18 00             		 br	!!.L102
 3369                             		.loc 1 681 0 discriminator 2
 3370 1813 8F 00 00                		mov	a, !_sendflag
 3371 1816 9D F0                   		mov	r8, a
 3372 1818 D4 F0                   		cmp0	r8
 3373 181a 61 E8                   		 skz
 3374 181c EC 06 18 00             		 br	!!.L102
 682:../src/user_functions.c **** 	}
 683:../src/user_functions.c **** 	recieveflag = 1;
 3375                             		.loc 1 683 0 is_stmt 1
 3376 1820 E5 00 00                		oneb	!_recieveflag
 684:../src/user_functions.c **** 	sendflag = 1;
 3377                             		.loc 1 684 0
 3378 1823 E5 00 00                		oneb	!_sendflag
 685:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3379                             		.loc 1 685 0
 3380 1826 C9 F0 01 FF             		movw	r8, #-255
 3381 182a AD F0                   		movw	ax, r8
 3382 182c BD F6                   		movw	r14, ax
 3383 182e FA F6                   		movw	hl, r14
 3384 1830 8B                      		mov	a, [hl]
 3385 1831 9D F2                   		mov	r10, a
 3386 1833 6A F2 20                		or	r10, #32
 3387 1836 AD F0                   		movw	ax, r8
 3388 1838 BD F4                   		movw	r12, ax
 3389 183a DA F4                   		movw	bc, r12
 3390 183c 8D F2                   		mov	a, r10
 3391 183e 48 00 00                		mov	[bc], a
 686:../src/user_functions.c **** 
 687:../src/user_functions.c **** 	if (logNum > logCount) {
 3392                             		.loc 1 687 0
 3393 1841 AF 42 00                		movw	ax, !_logCount
 3394 1844 BD F0                   		movw	r8, ax
 3395 1846 A8 5E                   		movw	ax, [sp+94]
 3396 1848 46 F0                   		cmpw	ax, r8
 3397 184a 61 E3                   		 skh
 3398 184c EC 7E 18 00             		 br	!!.L103
 688:../src/user_functions.c **** 		sprintf(response, "$M2\x0d\x0a");
 3399                             		.loc 1 688 0
 3400 1850 51 24                   		mov	a, #36
 3401 1852 9F 08 00                		mov	!_response, a
 3402 1855 51 4D                   		mov	a, #77
 3403 1857 9F 09 00                		mov	!_response+1, a
 3404 185a 51 32                   		mov	a, #50
 3405 185c 9F 0A 00                		mov	!_response+2, a
 3406 185f 51 0D                   		mov	a, #13
 3407 1861 9F 0B 00                		mov	!_response+3, a
 3408 1864 51 0A                   		mov	a, #10
 3409 1866 9F 0C 00                		mov	!_response+4, a
 3410 1869 F5 0D 00                		clrb	!_response+5
 689:../src/user_functions.c **** 		count = strlen(response);
 3411                             		.loc 1 689 0
 3412 186c 30 08 00                		movw	ax, #_response
 3413 186f B8 00                   		movw	[sp], ax
 3414 1871 FC 00 00 00             		call	!!%code(_strlen)
 3415 1875 AD F0                   		movw	ax, r8
 3416 1877 BF 04 00                		movw	!_count, ax
 3417 187a EC 3E 19 00             		br	!!.L101
 3418                             	.L103:
 690:../src/user_functions.c **** 	} else {
 691:../src/user_functions.c **** 		sprintf(response, "$M020%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\x0d\x0a",
 692:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3419                             		.loc 1 692 0
 3420 187e 88 2A                   		mov	a, [sp+42]
 3421 1880 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3422                             		.loc 1 691 0
 3423 1882 70                      		mov	x, a 
 3424 1883 51 00                   		mov	a, #0
 3425 1885 BD F6                   		movw	r14, ax
 3426                             		.loc 1 692 0
 3427 1887 88 2B                   		mov	a, [sp+43]
 3428 1889 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3429                             		.loc 1 691 0
 3430 188b 70                      		mov	x, a 
 3431 188c 51 00                   		mov	a, #0
 3432 188e BD E8                   		movw	r16, ax
 3433                             		.loc 1 692 0
 3434 1890 88 2C                   		mov	a, [sp+44]
 3435 1892 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3436                             		.loc 1 691 0
 3437 1894 70                      		mov	x, a 
 3438 1895 51 00                   		mov	a, #0
 3439 1897 BD EC                   		movw	r20, ax
 3440                             		.loc 1 692 0
 3441 1899 88 2D                   		mov	a, [sp+45]
 3442 189b 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3443                             		.loc 1 691 0
 3444 189d 70                      		mov	x, a 
 3445 189e 51 00                   		mov	a, #0
 3446 18a0 B8 24                   		movw	[sp+36], ax
 3447                             		.loc 1 692 0
 3448 18a2 88 2E                   		mov	a, [sp+46]
 3449 18a4 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3450                             		.loc 1 691 0
 3451 18a6 70                      		mov	x, a 
 3452 18a7 51 00                   		mov	a, #0
 3453 18a9 B8 22                   		movw	[sp+34], ax
 693:../src/user_functions.c **** 				recieve[8], recieve[9], recieve[10], recieve[11], recieve[12],
 3454                             		.loc 1 693 0
 3455 18ab 88 2F                   		mov	a, [sp+47]
 3456 18ad 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3457                             		.loc 1 691 0
 3458 18af 70                      		mov	x, a 
 3459 18b0 51 00                   		mov	a, #0
 3460 18b2 B8 20                   		movw	[sp+32], ax
 3461                             		.loc 1 693 0
 3462 18b4 88 30                   		mov	a, [sp+48]
 3463 18b6 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3464                             		.loc 1 691 0
 3465 18b8 70                      		mov	x, a 
 3466 18b9 51 00                   		mov	a, #0
 3467 18bb B8 1E                   		movw	[sp+30], ax
 3468                             		.loc 1 693 0
 3469 18bd 88 31                   		mov	a, [sp+49]
 3470 18bf 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3471                             		.loc 1 691 0
 3472 18c1 70                      		mov	x, a 
 3473 18c2 51 00                   		mov	a, #0
 3474 18c4 B8 1C                   		movw	[sp+28], ax
 3475                             		.loc 1 693 0
 3476 18c6 88 32                   		mov	a, [sp+50]
 3477 18c8 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3478                             		.loc 1 691 0
 3479 18ca 70                      		mov	x, a 
 3480 18cb 51 00                   		mov	a, #0
 3481 18cd BD EA                   		movw	r18, ax
 3482                             		.loc 1 693 0
 3483 18cf 88 33                   		mov	a, [sp+51]
 3484 18d1 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3485                             		.loc 1 691 0
 3486 18d3 70                      		mov	x, a 
 3487 18d4 51 00                   		mov	a, #0
 3488 18d6 BD F4                   		movw	r12, ax
 694:../src/user_functions.c **** 				recieve[13], recieve[14]);
 3489                             		.loc 1 694 0
 3490 18d8 88 34                   		mov	a, [sp+52]
 3491 18da 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3492                             		.loc 1 691 0
 3493 18dc 70                      		mov	x, a 
 3494 18dd 51 00                   		mov	a, #0
 3495 18df BD F2                   		movw	r10, ax
 3496                             		.loc 1 694 0
 3497 18e1 88 35                   		mov	a, [sp+53]
 3498 18e3 9D F0                   		mov	r8, a
 691:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3499                             		.loc 1 691 0
 3500 18e5 CD F1 00                		mov	r9, #0
 3501 18e8 30 08 00                		movw	ax, #_response
 3502 18eb B8 00                   		movw	[sp], ax
 3503 18ed 30 52 00                		movw	ax, #.LC7
 3504 18f0 B8 02                   		movw	[sp+2], ax
 3505 18f2 AD F6                   		movw	ax, r14
 3506 18f4 B8 04                   		movw	[sp+4], ax
 3507 18f6 AD E8                   		movw	ax, r16
 3508 18f8 B8 06                   		movw	[sp+6], ax
 3509 18fa AD EC                   		movw	ax, r20
 3510 18fc B8 08                   		movw	[sp+8], ax
 3511 18fe A8 24                   		movw	ax, [sp+36]
 3512 1900 BD F6                   		movw	r14, ax
 3513 1902 B8 0A                   		movw	[sp+10], ax
 3514 1904 A8 22                   		movw	ax, [sp+34]
 3515 1906 BD F6                   		movw	r14, ax
 3516 1908 B8 0C                   		movw	[sp+12], ax
 3517 190a A8 20                   		movw	ax, [sp+32]
 3518 190c BD F6                   		movw	r14, ax
 3519 190e B8 0E                   		movw	[sp+14], ax
 3520 1910 A8 1E                   		movw	ax, [sp+30]
 3521 1912 BD F6                   		movw	r14, ax
 3522 1914 B8 10                   		movw	[sp+16], ax
 3523 1916 A8 1C                   		movw	ax, [sp+28]
 3524 1918 BD F6                   		movw	r14, ax
 3525 191a B8 12                   		movw	[sp+18], ax
 3526 191c AD EA                   		movw	ax, r18
 3527 191e B8 14                   		movw	[sp+20], ax
 3528 1920 AD F4                   		movw	ax, r12
 3529 1922 B8 16                   		movw	[sp+22], ax
 3530 1924 AD F2                   		movw	ax, r10
 3531 1926 B8 18                   		movw	[sp+24], ax
 3532 1928 AD F0                   		movw	ax, r8
 3533 192a B8 1A                   		movw	[sp+26], ax
 3534 192c FC 00 00 00             		call	!!%code(_sprintf)
 695:../src/user_functions.c **** 		count = strlen(response);
 3535                             		.loc 1 695 0
 3536 1930 30 08 00                		movw	ax, #_response
 3537 1933 B8 00                   		movw	[sp], ax
 3538 1935 FC 00 00 00             		call	!!%code(_strlen)
 3539 1939 AD F0                   		movw	ax, r8
 3540 193b BF 04 00                		movw	!_count, ax
 3541                             	.L101:
 696:../src/user_functions.c **** 	}
 697:../src/user_functions.c **** 
 698:../src/user_functions.c **** }
 3542                             		.loc 1 698 0
 3543 193e 10 54                   		addw	sp, #84
 3544 1940 61 EF                   		sel	rb2
 3545 1942 C4                      		pop	de ; r20
 3546 1943 C2                      		pop	bc ; r18
 3547 1944 C0                      		pop	ax ; r16
 3548 1945 61 CF                   		sel	rb0
 3549 1947 D7                      		ret
 3550                             	.LFE14:
 3774                             	.Letext0:
 3775                             		.file 2 "../src/iodefine.h"
 3776                             		.file 3 "../src/r_cg_macrodriver.h"
 3777                             		.file 4 "../src/r_cg_rtc.h"
 3778                             		.file 5 "../src/globals.h"
