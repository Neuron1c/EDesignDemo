   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_scrollFlag,1,1
  31                             		.comm	_tempFlag,1,1
  32                             		.comm	_scrollCount,2,2
  33                             		.comm	_timerFlag,2,2
  34                             		.comm	_count,2,2
  35                             		.local	_finalTemp
  36                             		.comm	_finalTemp,2,2
  37                             		.local	_response
  38                             		.comm	_response,50,1
  39                             		.local	_mode
  40                             		.comm	_mode,2,2
  41                             		.local	_display
  42                             		.comm	_display,2,2
  43                             		.local	_offset
  44                             		.comm	_offset,2,2
  45                             		.global	_D
  46                             	.bss
  47                             		.balign 2
  50                             	_D:
  51 0000 00 00                   		.zero	2
  52                             		.global	_flag
  53                             		.balign 2
  56                             	_flag:
  57 0002 00 00                   		.zero	2
  58                             		.comm	_voltage,1,1
  59                             		.comm	_current1,1,1
  60                             		.comm	_current2,1,1
  61                             		.section	.rodata
  62                             	.LC0:
  63 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  64                             	.text
  65                             		.global	_populate
  67                             	_populate:
  68                             	.LFB0:
  69                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** extern int count;
  22:../src/user_functions.c **** extern uint16_t scrollCount;
  23:../src/user_functions.c **** extern uint8_t scrollFlag;
  24:../src/user_functions.c **** extern uint8_t tempFlag;
  25:../src/user_functions.c **** extern uint8_t recieveflag;
  26:../src/user_functions.c **** extern uint8_t sendflag;
  27:../src/user_functions.c **** 
  28:../src/user_functions.c **** static uint16_t finalTemp;
  29:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  30:../src/user_functions.c **** static int mode = 0;
  31:../src/user_functions.c **** static int display = 0;
  32:../src/user_functions.c **** static int offset = 0;
  33:../src/user_functions.c **** int D = 0;
  34:../src/user_functions.c **** int flag = 0;
  35:../src/user_functions.c **** uint8_t voltage, current1, current2;
  36:../src/user_functions.c **** 
  37:../src/user_functions.c **** 
  38:../src/user_functions.c **** void processMSG();
  39:../src/user_functions.c **** int errorTest();
  40:../src/user_functions.c **** void displayLCD();
  41:../src/user_functions.c **** void readRTC();
  42:../src/user_functions.c **** void setRTC();
  43:../src/user_functions.c **** void getRTC();
  44:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  45:../src/user_functions.c **** void collectADC();
  46:../src/user_functions.c **** void checkFlags();
  47:../src/user_functions.c **** void measureTemp();
  48:../src/user_functions.c **** void setTemp();
  49:../src/user_functions.c **** void read();
  50:../src/user_functions.c **** void write();
  51:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  52:../src/user_functions.c **** 
  53:../src/user_functions.c **** 
  54:../src/user_functions.c **** char populate(char recieved){
  70                             		.loc 1 54 0
  71                             		; start of function
  72                             		; outgoing: 4 bytes
  73 0000 20 04                   		subw	sp, #4
  74                             	.LCFI0:
  55:../src/user_functions.c **** 
  56:../src/user_functions.c **** 	if(recieved == '$'){
  75                             		.loc 1 56 0
  76 0002 88 08                   		mov	a, [sp+8]
  77 0004 4C 24                   		cmp	a, #36
  78 0006 61 E8                   		 skz
  79 0008 EC 2A 00 00             		 br	!!.L2
  57:../src/user_functions.c **** 		record[count] = recieved;
  80                             		.loc 1 57 0
  81 000c AF 00 00                		movw	ax, !_count
  82 000f BD F0                   		movw	r8, ax
  83 0011 88 08                   		mov	a, [sp+8]
  84 0013 9D F2                   		mov	r10, a
  85 0015 DA F0                   		movw	bc, r8
  86 0017 48 00 00                		mov	_record[bc], a
  58:../src/user_functions.c **** 		count++;
  87                             		.loc 1 58 0
  88 001a AF 00 00                		movw	ax, !_count
  89 001d BD F0                   		movw	r8, ax
  90 001f A6 F0                   		incw	r8
  91 0021 AD F0                   		movw	ax, r8
  92 0023 BF 00 00                		movw	!_count, ax
  93 0026 EC E3 00 00             		br	!!.L3
  94                             	.L2:
  59:../src/user_functions.c **** 	}
  60:../src/user_functions.c **** 	else if(recieved == '\x0a'){
  95                             		.loc 1 60 0
  96 002a 88 08                   		mov	a, [sp+8]
  97 002c 4C 0A                   		cmp	a, #10
  98 002e 61 E8                   		 skz
  99 0030 EC 8D 00 00             		 br	!!.L4
  61:../src/user_functions.c **** 		if(record[count - 1] == '\x0d'){
 100                             		.loc 1 61 0
 101 0034 AF 00 00                		movw	ax, !_count
 102 0037 BD F0                   		movw	r8, ax
 103 0039 B6 F0                   		decw	r8
 104 003b AD F0                   		movw	ax, r8
 105 003d 04 00 00                		addw	ax, #_record
 106 0040 16                      		movw	hl, ax
 107 0041 8B                      		mov	a, [hl]
 108 0042 9D F0                   		mov	r8, a
 109 0044 4A F0 0D                		cmp	r8, #13
 110 0047 61 E8                   		 skz
 111 0049 EC 7A 00 00             		 br	!!.L5
  62:../src/user_functions.c **** 			if(!flag){
 112                             		.loc 1 62 0
 113 004d AF 00 00                		movw	ax, !_flag
 114 0050 BD F0                   		movw	r8, ax
 115 0052 44 00 00                		cmpw	ax, #0
 116 0055 61 E8                   		 skz
 117 0057 EC 7A 00 00             		 br	!!.L5
  63:../src/user_functions.c **** 				record[count] = recieved;
 118                             		.loc 1 63 0
 119 005b AF 00 00                		movw	ax, !_count
 120 005e BD F0                   		movw	r8, ax
 121 0060 88 08                   		mov	a, [sp+8]
 122 0062 9D F2                   		mov	r10, a
 123 0064 DA F0                   		movw	bc, r8
 124 0066 48 00 00                		mov	_record[bc], a
  64:../src/user_functions.c **** 				record[count + 1] = '\0';
 125                             		.loc 1 64 0
 126 0069 AF 00 00                		movw	ax, !_count
 127 006c BD F0                   		movw	r8, ax
 128 006e A6 F0                   		incw	r8
 129 0070 DA F0                   		movw	bc, r8
 130 0072 F1                      		clrb	a
 131 0073 48 00 00                		mov	_record[bc], a
  65:../src/user_functions.c **** 				processMSG();
 132                             		.loc 1 65 0
 133 0076 FC 00 00 00             		call	!!%code(_processMSG)
 134                             	.L5:
  66:../src/user_functions.c **** 			}
  67:../src/user_functions.c **** 		}
  68:../src/user_functions.c **** 		strcpy(record,"");
 135                             		.loc 1 68 0
 136 007a F4 F0                   		clrb	r8
 137 007c 8D F0                   		mov	a, r8
 138 007e 9F 00 00                		mov	!_record, a
  69:../src/user_functions.c **** 		count = 0;
 139                             		.loc 1 69 0
 140 0081 F6                      		clrw	ax
 141 0082 BF 00 00                		movw	!_count, ax
  70:../src/user_functions.c **** 		flag = 0;
 142                             		.loc 1 70 0
 143 0085 F6                      		clrw	ax
 144 0086 BF 00 00                		movw	!_flag, ax
 145 0089 EC E3 00 00             		br	!!.L3
 146                             	.L4:
  71:../src/user_functions.c **** 	}
  72:../src/user_functions.c **** 	else if(flag){
 147                             		.loc 1 72 0
 148 008d AF 00 00                		movw	ax, !_flag
 149 0090 BD F0                   		movw	r8, ax
 150 0092 44 00 00                		cmpw	ax, #0
 151 0095 61 E8                   		 skz
 152 0097 EC E3 00 00             		 br	!!.L3
  73:../src/user_functions.c **** 
  74:../src/user_functions.c **** 	}
  75:../src/user_functions.c **** 	else if(count == 0 && recieved != '$'){
 153                             		.loc 1 75 0
 154 009b AF 00 00                		movw	ax, !_count
 155 009e BD F0                   		movw	r8, ax
 156 00a0 44 00 00                		cmpw	ax, #0
 157 00a3 61 E8                   		 skz
 158 00a5 EC C9 00 00             		 br	!!.L6
 159                             		.loc 1 75 0 is_stmt 0 discriminator 1
 160 00a9 88 08                   		mov	a, [sp+8]
 161 00ab 4C 24                   		cmp	a, #36
 162 00ad 61 F8                   		 sknz
 163 00af EC C9 00 00             		 br	!!.L6
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a",7);
 164                             		.loc 1 77 0 is_stmt 1
 165 00b3 30 00 00                		movw	ax, #.LC0
 166 00b6 B8 00                   		movw	[sp], ax
 167 00b8 30 07 00                		movw	ax, #7
 168 00bb B8 02                   		movw	[sp+2], ax
 169 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  78:../src/user_functions.c **** 		flag = 1;
 170                             		.loc 1 78 0
 171 00c1 E6                      		onew	ax
 172 00c2 BF 00 00                		movw	!_flag, ax
 173 00c5 EC E3 00 00             		br	!!.L3
 174                             	.L6:
  79:../src/user_functions.c **** 	}
  80:../src/user_functions.c **** 
  81:../src/user_functions.c **** 	else{
  82:../src/user_functions.c **** 		record[count] = recieved;
 175                             		.loc 1 82 0
 176 00c9 AF 00 00                		movw	ax, !_count
 177 00cc BD F0                   		movw	r8, ax
 178 00ce 88 08                   		mov	a, [sp+8]
 179 00d0 9D F2                   		mov	r10, a
 180 00d2 DA F0                   		movw	bc, r8
 181 00d4 48 00 00                		mov	_record[bc], a
  83:../src/user_functions.c **** 		count++;
 182                             		.loc 1 83 0
 183 00d7 AF 00 00                		movw	ax, !_count
 184 00da BD F0                   		movw	r8, ax
 185 00dc A6 F0                   		incw	r8
 186 00de AD F0                   		movw	ax, r8
 187 00e0 BF 00 00                		movw	!_count, ax
 188                             	.L3:
  84:../src/user_functions.c **** 	}
  85:../src/user_functions.c **** 
  86:../src/user_functions.c **** 
  87:../src/user_functions.c **** 
  88:../src/user_functions.c **** 	return recieved;
 189                             		.loc 1 88 0
 190 00e3 88 08                   		mov	a, [sp+8]
 191 00e5 9D F0                   		mov	r8, a
  89:../src/user_functions.c **** }
 192                             		.loc 1 89 0
 193 00e7 10 04                   		addw	sp, #4
 194 00e9 D7                      		ret
 195                             	.LFE0:
 197                             		.section	.rodata
 198                             	.LC1:
 199 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,%02d,%0d\r\n"
 199      25 30 32 64 2C 25 30 64 
 199      0D 0A 00 
 200                             	.LC2:
 201 001b 24 49 30 25 30 33 64 0D 		.string	"$I0%03d\r\n"
 201      0A 00 
 202                             	.LC3:
 203 0025 24 25 63 31 0D 0A 00    		.string	"$%c1\r\n"
 204                             	.text
 205                             		.global	_processMSG
 207                             	_processMSG:
 208                             	.LFB1:
  90:../src/user_functions.c **** 
  91:../src/user_functions.c **** void processMSG(){
 209                             		.loc 1 91 0
 210                             		; start of function
 211                             		; locals: 34 bytes
 212                             		; outgoing: 10 bytes
 213 00ea 20 2C                   		subw	sp, #44
 214                             	.LCFI1:
  92:../src/user_functions.c **** 	char ack[3];
  93:../src/user_functions.c **** 	char str[30];
  94:../src/user_functions.c **** 	if(errorTest()){
 215                             		.loc 1 94 0
 216 00ec FC 00 00 00             		call	!!%code(_errorTest)
 217 00f0 AD F0                   		movw	ax, r8
 218 00f2 44 00 00                		cmpw	ax, #0
 219 00f5 61 F8                   		 sknz
 220 00f7 EC 4B 07 00             		 br	!!.L9
  95:../src/user_functions.c **** 
  96:../src/user_functions.c **** 		switch(record[1]){
 221                             		.loc 1 96 0
 222 00fb 8F 00 00                		mov	a, !_record+1
 223 00fe 9D F0                   		mov	r8, a
 224 0100 CD F1 00                		mov	r9, #0
 225 0103 AD F0                   		movw	ax, r8
 226 0105 44 43 00                		cmpw	ax, #67
 227 0108 61 F8                   		 sknz
 228 010a EC EA 06 00             		 br	!!.L11
 229 010e AD F0                   		movw	ax, r8
 230 0110 44 43 00                		cmpw	ax, #67
 231 0113 71 FF                   		 xor1	CY, a.7
 232 0115 61 F3                   		 sknh
 233 0117 EC 67 01 00             		 br	!!.L12
 234 011b AD F0                   		movw	ax, r8
 235 011d 44 32 00                		cmpw	ax, #50
 236 0120 61 F8                   		 sknz
 237 0122 EC 80 02 00             		 br	!!.L13
 238 0126 AD F0                   		movw	ax, r8
 239 0128 44 32 00                		cmpw	ax, #50
 240 012b 71 FF                   		 xor1	CY, a.7
 241 012d 61 F3                   		 sknh
 242 012f EC 4D 01 00             		 br	!!.L14
 243 0133 AD F0                   		movw	ax, r8
 244 0135 44 30 00                		cmpw	ax, #48
 245 0138 61 F8                   		 sknz
 246 013a EC BE 01 00             		 br	!!.L15
 247 013e AD F0                   		movw	ax, r8
 248 0140 44 31 00                		cmpw	ax, #49
 249 0143 61 F8                   		 sknz
 250 0145 EC 1F 02 00             		 br	!!.L16
 251 0149 EC 2B 07 00             		br	!!.L10
 252                             	.L14:
 253 014d AD F0                   		movw	ax, r8
 254 014f 44 33 00                		cmpw	ax, #51
 255 0152 61 F8                   		 sknz
 256 0154 EC B4 02 00             		 br	!!.L17
 257 0158 AD F0                   		movw	ax, r8
 258 015a 44 42 00                		cmpw	ax, #66
 259 015d 61 F8                   		 sknz
 260 015f EC E2 06 00             		 br	!!.L18
 261 0163 EC 2B 07 00             		br	!!.L10
 262                             	.L12:
 263 0167 AD F0                   		movw	ax, r8
 264 0169 44 49 00                		cmpw	ax, #73
 265 016c 61 F8                   		 sknz
 266 016e EC F2 06 00             		 br	!!.L19
 267 0172 AD F0                   		movw	ax, r8
 268 0174 44 49 00                		cmpw	ax, #73
 269 0177 71 FF                   		 xor1	CY, a.7
 270 0179 61 F3                   		 sknh
 271 017b EC 99 01 00             		 br	!!.L20
 272 017f AD F0                   		movw	ax, r8
 273 0181 44 44 00                		cmpw	ax, #68
 274 0184 61 F8                   		 sknz
 275 0186 EC 02 03 00             		 br	!!.L21
 276 018a AD F0                   		movw	ax, r8
 277 018c 44 45 00                		cmpw	ax, #69
 278 018f 61 F8                   		 sknz
 279 0191 EC 61 06 00             		 br	!!.L22
 280 0195 EC 2B 07 00             		br	!!.L10
 281                             	.L20:
 282 0199 AD F0                   		movw	ax, r8
 283 019b 44 58 00                		cmpw	ax, #88
 284 019e 61 F8                   		 sknz
 285 01a0 EC 1B 07 00             		 br	!!.L23
 286 01a4 AD F0                   		movw	ax, r8
 287 01a6 44 59 00                		cmpw	ax, #89
 288 01a9 61 F8                   		 sknz
 289 01ab EC 23 07 00             		 br	!!.L24
 290 01af AD F0                   		movw	ax, r8
 291 01b1 44 4C 00                		cmpw	ax, #76
 292 01b4 61 F8                   		 sknz
 293 01b6 EC 9E 03 00             		 br	!!.L25
 294 01ba EC 2B 07 00             		br	!!.L10
 295                             	.L15:
  97:../src/user_functions.c **** 		case '0': if(mode == 1){
 296                             		.loc 1 97 0
 297 01be AF 38 00                		movw	ax, !_mode
 298 01c1 BD F0                   		movw	r8, ax
 299 01c3 44 01 00                		cmpw	ax, #1
 300 01c6 61 E8                   		 skz
 301 01c8 EC D8 01 00             		 br	!!.L26
  98:../src/user_functions.c **** 					 ack[0] = '0'; mode = 0;
 302                             		.loc 1 98 0
 303 01cc 51 30                   		mov	a, #48
 304 01ce 98 29                   		mov	[sp+41], a
 305 01d0 F6                      		clrw	ax
 306 01d1 BF 38 00                		movw	!_mode, ax
 307 01d4 EC DC 01 00             		br	!!.L27
 308                             	.L26:
  99:../src/user_functions.c **** 				  }
 100:../src/user_functions.c **** 
 101:../src/user_functions.c **** 				  else{
 102:../src/user_functions.c **** 					  ack[0] = '3';
 309                             		.loc 1 102 0
 310 01d8 51 33                   		mov	a, #51
 311 01da 98 29                   		mov	[sp+41], a
 312                             	.L27:
 103:../src/user_functions.c **** 				  }
 104:../src/user_functions.c **** 
 105:../src/user_functions.c **** 				  ack[1] = '\x0d';
 313                             		.loc 1 105 0
 314 01dc 51 0D                   		mov	a, #13
 315 01de 98 2A                   		mov	[sp+42], a
 106:../src/user_functions.c **** 				  ack[2] = '\x0a';
 316                             		.loc 1 106 0
 317 01e0 51 0A                   		mov	a, #10
 318 01e2 98 2B                   		mov	[sp+43], a
 107:../src/user_functions.c **** 				  strcpy(response, "$0");
 319                             		.loc 1 107 0
 320 01e4 51 24                   		mov	a, #36
 321 01e6 9F 06 00                		mov	!_response, a
 322 01e9 51 30                   		mov	a, #48
 323 01eb 9F 07 00                		mov	!_response+1, a
 324 01ee F5 08 00                		clrb	!_response+2
 108:../src/user_functions.c **** 				  strcat(response, ack);
 325                             		.loc 1 108 0
 326 01f1 30 06 00                		movw	ax, #_response
 327 01f4 B8 00                   		movw	[sp], ax
 328 01f6 C9 F0 2C 00             		movw	r8, #44
 329 01fa AE F8                   		movw	ax, sp
 330 01fc BD F0                   		movw	r8, ax
 331 01fe 04 2C 00                		addw	ax, #44
 332 0201 BD F0                   		movw	r8, ax
 333 0203 04 FD FF                		addw	ax, #-3
 334 0206 B8 02                   		movw	[sp+2], ax
 335 0208 FC 00 00 00             		call	!!%code(_strcat)
 109:../src/user_functions.c **** 				  recieveInstruction(7);
 336                             		.loc 1 109 0
 337 020c 30 07 00                		movw	ax, #7
 338 020f B8 00                   		movw	[sp], ax
 339 0211 FC 00 00 00             		call	!!%code(_recieveInstruction)
 110:../src/user_functions.c **** 				  count = 5; break;
 340                             		.loc 1 110 0
 341 0215 30 05 00                		movw	ax, #5
 342 0218 BF 00 00                		movw	!_count, ax
 343 021b EC 4B 07 00             		br	!!.L9
 344                             	.L16:
 111:../src/user_functions.c **** 
 112:../src/user_functions.c **** 
 113:../src/user_functions.c **** 		case '1': if(mode == 0){
 345                             		.loc 1 113 0
 346 021f AF 38 00                		movw	ax, !_mode
 347 0222 BD F0                   		movw	r8, ax
 348 0224 44 00 00                		cmpw	ax, #0
 349 0227 61 E8                   		 skz
 350 0229 EC 39 02 00             		 br	!!.L28
 114:../src/user_functions.c **** 					  ack[0] = '0'; mode = 1;
 351                             		.loc 1 114 0
 352 022d 51 30                   		mov	a, #48
 353 022f 98 29                   		mov	[sp+41], a
 354 0231 E6                      		onew	ax
 355 0232 BF 38 00                		movw	!_mode, ax
 356 0235 EC 3D 02 00             		br	!!.L29
 357                             	.L28:
 115:../src/user_functions.c **** 				  }
 116:../src/user_functions.c **** 
 117:../src/user_functions.c **** 		  	  	  else{
 118:../src/user_functions.c **** 		  	  		  ack[0] = '3';
 358                             		.loc 1 118 0
 359 0239 51 33                   		mov	a, #51
 360 023b 98 29                   		mov	[sp+41], a
 361                             	.L29:
 119:../src/user_functions.c **** 		  	  	  }
 120:../src/user_functions.c **** 
 121:../src/user_functions.c **** 				  ack[1] = '\x0d';
 362                             		.loc 1 121 0
 363 023d 51 0D                   		mov	a, #13
 364 023f 98 2A                   		mov	[sp+42], a
 122:../src/user_functions.c **** 				  ack[2] = '\x0a';
 365                             		.loc 1 122 0
 366 0241 51 0A                   		mov	a, #10
 367 0243 98 2B                   		mov	[sp+43], a
 123:../src/user_functions.c **** 				  strcpy(response, "$1");
 368                             		.loc 1 123 0
 369 0245 51 24                   		mov	a, #36
 370 0247 9F 06 00                		mov	!_response, a
 371 024a 51 31                   		mov	a, #49
 372 024c 9F 07 00                		mov	!_response+1, a
 373 024f F5 08 00                		clrb	!_response+2
 124:../src/user_functions.c **** 				  strcat(response, ack);
 374                             		.loc 1 124 0
 375 0252 30 06 00                		movw	ax, #_response
 376 0255 B8 00                   		movw	[sp], ax
 377 0257 C9 F4 2C 00             		movw	r12, #44
 378 025b AE F8                   		movw	ax, sp
 379 025d BD F4                   		movw	r12, ax
 380 025f 04 2C 00                		addw	ax, #44
 381 0262 BD F4                   		movw	r12, ax
 382 0264 04 FD FF                		addw	ax, #-3
 383 0267 B8 02                   		movw	[sp+2], ax
 384 0269 FC 00 00 00             		call	!!%code(_strcat)
 125:../src/user_functions.c **** 				  recieveInstruction(6);
 385                             		.loc 1 125 0
 386 026d 30 06 00                		movw	ax, #6
 387 0270 B8 00                   		movw	[sp], ax
 388 0272 FC 00 00 00             		call	!!%code(_recieveInstruction)
 126:../src/user_functions.c **** 				  count = 5; break;
 389                             		.loc 1 126 0
 390 0276 30 05 00                		movw	ax, #5
 391 0279 BF 00 00                		movw	!_count, ax
 392 027c EC 4B 07 00             		br	!!.L9
 393                             	.L13:
 127:../src/user_functions.c **** 
 128:../src/user_functions.c **** 		case '2': strcpy(mem, &record[2]);
 394                             		.loc 1 128 0
 395 0280 30 00 00                		movw	ax, #_mem
 396 0283 B8 00                   		movw	[sp], ax
 397 0285 30 00 00                		movw	ax, #_record+2
 398 0288 B8 02                   		movw	[sp+2], ax
 399 028a FC 00 00 00             		call	!!%code(_strcpy)
 129:../src/user_functions.c **** 				  strcpy(response, "$20\x0d\x0a"); count = 5; break;
 400                             		.loc 1 129 0
 401 028e 51 24                   		mov	a, #36
 402 0290 9F 06 00                		mov	!_response, a
 403 0293 51 32                   		mov	a, #50
 404 0295 9F 07 00                		mov	!_response+1, a
 405 0298 51 30                   		mov	a, #48
 406 029a 9F 08 00                		mov	!_response+2, a
 407 029d 51 0D                   		mov	a, #13
 408 029f 9F 09 00                		mov	!_response+3, a
 409 02a2 51 0A                   		mov	a, #10
 410 02a4 9F 0A 00                		mov	!_response+4, a
 411 02a7 F5 0B 00                		clrb	!_response+5
 412 02aa 30 05 00                		movw	ax, #5
 413 02ad BF 00 00                		movw	!_count, ax
 414 02b0 EC 4B 07 00             		br	!!.L9
 415                             	.L17:
 130:../src/user_functions.c **** 
 131:../src/user_functions.c **** 		case '3': strcpy(response, "$3019119038\x0d\x0a"); count = 13; break;
 416                             		.loc 1 131 0
 417 02b4 51 24                   		mov	a, #36
 418 02b6 9F 06 00                		mov	!_response, a
 419 02b9 51 33                   		mov	a, #51
 420 02bb 9F 07 00                		mov	!_response+1, a
 421 02be 51 30                   		mov	a, #48
 422 02c0 9F 08 00                		mov	!_response+2, a
 423 02c3 51 31                   		mov	a, #49
 424 02c5 9F 09 00                		mov	!_response+3, a
 425 02c8 51 39                   		mov	a, #57
 426 02ca 9F 0A 00                		mov	!_response+4, a
 427 02cd 51 31                   		mov	a, #49
 428 02cf 9F 0B 00                		mov	!_response+5, a
 429 02d2 51 31                   		mov	a, #49
 430 02d4 9F 0C 00                		mov	!_response+6, a
 431 02d7 51 39                   		mov	a, #57
 432 02d9 9F 0D 00                		mov	!_response+7, a
 433 02dc 51 30                   		mov	a, #48
 434 02de 9F 0E 00                		mov	!_response+8, a
 435 02e1 51 33                   		mov	a, #51
 436 02e3 9F 0F 00                		mov	!_response+9, a
 437 02e6 51 38                   		mov	a, #56
 438 02e8 9F 10 00                		mov	!_response+10, a
 439 02eb 51 0D                   		mov	a, #13
 440 02ed 9F 11 00                		mov	!_response+11, a
 441 02f0 51 0A                   		mov	a, #10
 442 02f2 9F 12 00                		mov	!_response+12, a
 443 02f5 F5 13 00                		clrb	!_response+13
 444 02f8 30 0D 00                		movw	ax, #13
 445 02fb BF 00 00                		movw	!_count, ax
 446 02fe EC 4B 07 00             		br	!!.L9
 447                             	.L21:
 132:../src/user_functions.c **** 
 133:../src/user_functions.c **** 		case 'D': if(strlen(mem) <= 32){
 448                             		.loc 1 133 0
 449 0302 30 00 00                		movw	ax, #_mem
 450 0305 B8 00                   		movw	[sp], ax
 451 0307 FC 00 00 00             		call	!!%code(_strlen)
 452 030b AD F0                   		movw	ax, r8
 453 030d 44 20 00                		cmpw	ax, #32
 454 0310 61 F3                   		 sknh
 455 0312 EC 51 03 00             		 br	!!.L30
 134:../src/user_functions.c **** 
 135:../src/user_functions.c **** 					strcpy(response, "$D0\x0d\x0a"); count = 5;
 456                             		.loc 1 135 0
 457 0316 51 24                   		mov	a, #36
 458 0318 9F 06 00                		mov	!_response, a
 459 031b 51 44                   		mov	a, #68
 460 031d 9F 07 00                		mov	!_response+1, a
 461 0320 51 30                   		mov	a, #48
 462 0322 9F 08 00                		mov	!_response+2, a
 463 0325 51 0D                   		mov	a, #13
 464 0327 9F 09 00                		mov	!_response+3, a
 465 032a 51 0A                   		mov	a, #10
 466 032c 9F 0A 00                		mov	!_response+4, a
 467 032f F5 0B 00                		clrb	!_response+5
 468 0332 30 05 00                		movw	ax, #5
 469 0335 BF 00 00                		movw	!_count, ax
 136:../src/user_functions.c **** 
 137:../src/user_functions.c **** 					strcpy(display_string,mem);
 470                             		.loc 1 137 0
 471 0338 30 00 00                		movw	ax, #_display_string
 472 033b B8 00                   		movw	[sp], ax
 473 033d 30 00 00                		movw	ax, #_mem
 474 0340 B8 02                   		movw	[sp+2], ax
 475 0342 FC 00 00 00             		call	!!%code(_strcpy)
 138:../src/user_functions.c **** 					displayLCD(1);
 476                             		.loc 1 138 0
 477 0346 E6                      		onew	ax
 478 0347 B8 00                   		movw	[sp], ax
 479 0349 FC 00 00 00             		call	!!%code(_displayLCD)
 139:../src/user_functions.c **** 				  }
 140:../src/user_functions.c **** 				  else{
 141:../src/user_functions.c **** 				    writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 142:../src/user_functions.c **** 					delayNoInt(1640);
 143:../src/user_functions.c **** 
 144:../src/user_functions.c **** 					writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 145:../src/user_functions.c **** 					delayNoInt(1640);
 146:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 147:../src/user_functions.c **** 				  }
 148:../src/user_functions.c **** 				  break;
 480                             		.loc 1 148 0
 481 034d EC 4B 07 00             		br	!!.L9
 482                             	.L30:
 141:../src/user_functions.c **** 					delayNoInt(1640);
 483                             		.loc 1 141 0
 484 0351 F1                      		clrb	a
 485 0352 98 00                   		mov	[sp], a
 486 0354 E1                      		oneb	a
 487 0355 98 02                   		mov	[sp+2], a
 488 0357 FC 00 00 00             		call	!!%code(_writeByteLcd)
 142:../src/user_functions.c **** 
 489                             		.loc 1 142 0
 490 035b 30 68 06                		movw	ax, #1640
 491 035e B8 00                   		movw	[sp], ax
 492 0360 FC 00 00 00             		call	!!%code(_delayNoInt)
 144:../src/user_functions.c **** 					delayNoInt(1640);
 493                             		.loc 1 144 0
 494 0364 F1                      		clrb	a
 495 0365 98 00                   		mov	[sp], a
 496 0367 51 80                   		mov	a, #-128
 497 0369 98 02                   		mov	[sp+2], a
 498 036b FC 00 00 00             		call	!!%code(_writeByteLcd)
 145:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 499                             		.loc 1 145 0
 500 036f 30 68 06                		movw	ax, #1640
 501 0372 B8 00                   		movw	[sp], ax
 502 0374 FC 00 00 00             		call	!!%code(_delayNoInt)
 146:../src/user_functions.c **** 				  }
 503                             		.loc 1 146 0
 504 0378 51 24                   		mov	a, #36
 505 037a 9F 06 00                		mov	!_response, a
 506 037d 51 44                   		mov	a, #68
 507 037f 9F 07 00                		mov	!_response+1, a
 508 0382 51 33                   		mov	a, #51
 509 0384 9F 08 00                		mov	!_response+2, a
 510 0387 51 0D                   		mov	a, #13
 511 0389 9F 09 00                		mov	!_response+3, a
 512 038c 51 0A                   		mov	a, #10
 513 038e 9F 0A 00                		mov	!_response+4, a
 514 0391 F5 0B 00                		clrb	!_response+5
 515 0394 30 05 00                		movw	ax, #5
 516 0397 BF 00 00                		movw	!_count, ax
 517                             		.loc 1 148 0
 518 039a EC 4B 07 00             		br	!!.L9
 519                             	.L25:
 149:../src/user_functions.c **** 
 150:../src/user_functions.c **** 		case 'L': if(record[2] == '0'){
 520                             		.loc 1 150 0
 521 039e 8F 00 00                		mov	a, !_record+2
 522 03a1 9D F0                   		mov	r8, a
 523 03a3 4A F0 30                		cmp	r8, #48
 524 03a6 61 E8                   		 skz
 525 03a8 EC 23 04 00             		 br	!!.L32
 151:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 526                             		.loc 1 151 0
 527 03ac C9 F0 04 FF             		movw	r8, #-252
 528 03b0 AD F0                   		movw	ax, r8
 529 03b2 BD F6                   		movw	r14, ax
 530 03b4 FA F6                   		movw	hl, r14
 531 03b6 8B                      		mov	a, [hl]
 532 03b7 9D F2                   		mov	r10, a
 533 03b9 5A F2 FD                		and	r10, #-3
 534 03bc AD F0                   		movw	ax, r8
 535 03be BD F4                   		movw	r12, ax
 536 03c0 DA F4                   		movw	bc, r12
 537 03c2 8D F2                   		mov	a, r10
 538 03c4 48 00 00                		mov	[bc], a
 152:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 539                             		.loc 1 152 0
 540 03c7 C9 F0 04 FF             		movw	r8, #-252
 541 03cb AD F0                   		movw	ax, r8
 542 03cd BD F6                   		movw	r14, ax
 543 03cf FA F6                   		movw	hl, r14
 544 03d1 8B                      		mov	a, [hl]
 545 03d2 9D F2                   		mov	r10, a
 546 03d4 5A F2 FB                		and	r10, #-5
 547 03d7 AD F0                   		movw	ax, r8
 548 03d9 BD F4                   		movw	r12, ax
 549 03db DA F4                   		movw	bc, r12
 550 03dd 8D F2                   		mov	a, r10
 551 03df 48 00 00                		mov	[bc], a
 153:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 552                             		.loc 1 153 0
 553 03e2 C9 F0 04 FF             		movw	r8, #-252
 554 03e6 AD F0                   		movw	ax, r8
 555 03e8 BD F6                   		movw	r14, ax
 556 03ea FA F6                   		movw	hl, r14
 557 03ec 8B                      		mov	a, [hl]
 558 03ed 9D F2                   		mov	r10, a
 559 03ef 5A F2 F7                		and	r10, #-9
 560 03f2 AD F0                   		movw	ax, r8
 561 03f4 BD F4                   		movw	r12, ax
 562 03f6 DA F4                   		movw	bc, r12
 563 03f8 8D F2                   		mov	a, r10
 564 03fa 48 00 00                		mov	[bc], a
 154:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 565                             		.loc 1 154 0
 566 03fd 51 24                   		mov	a, #36
 567 03ff 9F 06 00                		mov	!_response, a
 568 0402 51 4C                   		mov	a, #76
 569 0404 9F 07 00                		mov	!_response+1, a
 570 0407 51 30                   		mov	a, #48
 571 0409 9F 08 00                		mov	!_response+2, a
 572 040c 51 0D                   		mov	a, #13
 573 040e 9F 09 00                		mov	!_response+3, a
 574 0411 51 0A                   		mov	a, #10
 575 0413 9F 0A 00                		mov	!_response+4, a
 576 0416 F5 0B 00                		clrb	!_response+5
 577 0419 30 05 00                		movw	ax, #5
 578 041c BF 00 00                		movw	!_count, ax
 579 041f EC 5D 06 00             		br	!!.L33
 580                             	.L32:
 155:../src/user_functions.c **** 				  }
 156:../src/user_functions.c **** 				  else if(record[2] == '1'){
 581                             		.loc 1 156 0
 582 0423 8F 00 00                		mov	a, !_record+2
 583 0426 9D F0                   		mov	r8, a
 584 0428 4A F0 31                		cmp	r8, #49
 585 042b 61 E8                   		 skz
 586 042d EC A8 04 00             		 br	!!.L34
 157:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 587                             		.loc 1 157 0
 588 0431 C9 F0 04 FF             		movw	r8, #-252
 589 0435 AD F0                   		movw	ax, r8
 590 0437 BD F6                   		movw	r14, ax
 591 0439 FA F6                   		movw	hl, r14
 592 043b 8B                      		mov	a, [hl]
 593 043c 9D F2                   		mov	r10, a
 594 043e 5A F2 FD                		and	r10, #-3
 595 0441 AD F0                   		movw	ax, r8
 596 0443 BD F4                   		movw	r12, ax
 597 0445 DA F4                   		movw	bc, r12
 598 0447 8D F2                   		mov	a, r10
 599 0449 48 00 00                		mov	[bc], a
 158:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 600                             		.loc 1 158 0
 601 044c C9 F0 04 FF             		movw	r8, #-252
 602 0450 AD F0                   		movw	ax, r8
 603 0452 BD F6                   		movw	r14, ax
 604 0454 FA F6                   		movw	hl, r14
 605 0456 8B                      		mov	a, [hl]
 606 0457 9D F2                   		mov	r10, a
 607 0459 5A F2 FB                		and	r10, #-5
 608 045c AD F0                   		movw	ax, r8
 609 045e BD F4                   		movw	r12, ax
 610 0460 DA F4                   		movw	bc, r12
 611 0462 8D F2                   		mov	a, r10
 612 0464 48 00 00                		mov	[bc], a
 159:../src/user_functions.c **** 					  P4_bit.no3 = 1;
 613                             		.loc 1 159 0
 614 0467 C9 F0 04 FF             		movw	r8, #-252
 615 046b AD F0                   		movw	ax, r8
 616 046d BD F6                   		movw	r14, ax
 617 046f FA F6                   		movw	hl, r14
 618 0471 8B                      		mov	a, [hl]
 619 0472 9D F2                   		mov	r10, a
 620 0474 6A F2 08                		or	r10, #8
 621 0477 AD F0                   		movw	ax, r8
 622 0479 BD F4                   		movw	r12, ax
 623 047b DA F4                   		movw	bc, r12
 624 047d 8D F2                   		mov	a, r10
 625 047f 48 00 00                		mov	[bc], a
 160:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 626                             		.loc 1 160 0
 627 0482 51 24                   		mov	a, #36
 628 0484 9F 06 00                		mov	!_response, a
 629 0487 51 4C                   		mov	a, #76
 630 0489 9F 07 00                		mov	!_response+1, a
 631 048c 51 30                   		mov	a, #48
 632 048e 9F 08 00                		mov	!_response+2, a
 633 0491 51 0D                   		mov	a, #13
 634 0493 9F 09 00                		mov	!_response+3, a
 635 0496 51 0A                   		mov	a, #10
 636 0498 9F 0A 00                		mov	!_response+4, a
 637 049b F5 0B 00                		clrb	!_response+5
 638 049e 30 05 00                		movw	ax, #5
 639 04a1 BF 00 00                		movw	!_count, ax
 640 04a4 EC 5D 06 00             		br	!!.L33
 641                             	.L34:
 161:../src/user_functions.c **** 				  }
 162:../src/user_functions.c **** 				  else if(record[2] == '2'){
 642                             		.loc 1 162 0
 643 04a8 8F 00 00                		mov	a, !_record+2
 644 04ab 9D F0                   		mov	r8, a
 645 04ad 4A F0 32                		cmp	r8, #50
 646 04b0 61 E8                   		 skz
 647 04b2 EC 2D 05 00             		 br	!!.L35
 163:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 648                             		.loc 1 163 0
 649 04b6 C9 F0 04 FF             		movw	r8, #-252
 650 04ba AD F0                   		movw	ax, r8
 651 04bc BD F6                   		movw	r14, ax
 652 04be FA F6                   		movw	hl, r14
 653 04c0 8B                      		mov	a, [hl]
 654 04c1 9D F2                   		mov	r10, a
 655 04c3 6A F2 02                		or	r10, #2
 656 04c6 AD F0                   		movw	ax, r8
 657 04c8 BD F4                   		movw	r12, ax
 658 04ca DA F4                   		movw	bc, r12
 659 04cc 8D F2                   		mov	a, r10
 660 04ce 48 00 00                		mov	[bc], a
 164:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 661                             		.loc 1 164 0
 662 04d1 C9 F0 04 FF             		movw	r8, #-252
 663 04d5 AD F0                   		movw	ax, r8
 664 04d7 BD F6                   		movw	r14, ax
 665 04d9 FA F6                   		movw	hl, r14
 666 04db 8B                      		mov	a, [hl]
 667 04dc 9D F2                   		mov	r10, a
 668 04de 5A F2 FB                		and	r10, #-5
 669 04e1 AD F0                   		movw	ax, r8
 670 04e3 BD F4                   		movw	r12, ax
 671 04e5 DA F4                   		movw	bc, r12
 672 04e7 8D F2                   		mov	a, r10
 673 04e9 48 00 00                		mov	[bc], a
 165:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 674                             		.loc 1 165 0
 675 04ec C9 F0 04 FF             		movw	r8, #-252
 676 04f0 AD F0                   		movw	ax, r8
 677 04f2 BD F6                   		movw	r14, ax
 678 04f4 FA F6                   		movw	hl, r14
 679 04f6 8B                      		mov	a, [hl]
 680 04f7 9D F2                   		mov	r10, a
 681 04f9 5A F2 F7                		and	r10, #-9
 682 04fc AD F0                   		movw	ax, r8
 683 04fe BD F4                   		movw	r12, ax
 684 0500 DA F4                   		movw	bc, r12
 685 0502 8D F2                   		mov	a, r10
 686 0504 48 00 00                		mov	[bc], a
 166:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 687                             		.loc 1 166 0
 688 0507 51 24                   		mov	a, #36
 689 0509 9F 06 00                		mov	!_response, a
 690 050c 51 4C                   		mov	a, #76
 691 050e 9F 07 00                		mov	!_response+1, a
 692 0511 51 30                   		mov	a, #48
 693 0513 9F 08 00                		mov	!_response+2, a
 694 0516 51 0D                   		mov	a, #13
 695 0518 9F 09 00                		mov	!_response+3, a
 696 051b 51 0A                   		mov	a, #10
 697 051d 9F 0A 00                		mov	!_response+4, a
 698 0520 F5 0B 00                		clrb	!_response+5
 699 0523 30 05 00                		movw	ax, #5
 700 0526 BF 00 00                		movw	!_count, ax
 701 0529 EC 5D 06 00             		br	!!.L33
 702                             	.L35:
 167:../src/user_functions.c **** 				  }
 168:../src/user_functions.c **** 				  else if(record[2] == '3'){
 703                             		.loc 1 168 0
 704 052d 8F 00 00                		mov	a, !_record+2
 705 0530 9D F0                   		mov	r8, a
 706 0532 4A F0 33                		cmp	r8, #51
 707 0535 61 E8                   		 skz
 708 0537 EC B2 05 00             		 br	!!.L36
 169:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 709                             		.loc 1 169 0
 710 053b C9 F0 04 FF             		movw	r8, #-252
 711 053f AD F0                   		movw	ax, r8
 712 0541 BD F6                   		movw	r14, ax
 713 0543 FA F6                   		movw	hl, r14
 714 0545 8B                      		mov	a, [hl]
 715 0546 9D F2                   		mov	r10, a
 716 0548 5A F2 FD                		and	r10, #-3
 717 054b AD F0                   		movw	ax, r8
 718 054d BD F4                   		movw	r12, ax
 719 054f DA F4                   		movw	bc, r12
 720 0551 8D F2                   		mov	a, r10
 721 0553 48 00 00                		mov	[bc], a
 170:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 722                             		.loc 1 170 0
 723 0556 C9 F0 04 FF             		movw	r8, #-252
 724 055a AD F0                   		movw	ax, r8
 725 055c BD F6                   		movw	r14, ax
 726 055e FA F6                   		movw	hl, r14
 727 0560 8B                      		mov	a, [hl]
 728 0561 9D F2                   		mov	r10, a
 729 0563 6A F2 04                		or	r10, #4
 730 0566 AD F0                   		movw	ax, r8
 731 0568 BD F4                   		movw	r12, ax
 732 056a DA F4                   		movw	bc, r12
 733 056c 8D F2                   		mov	a, r10
 734 056e 48 00 00                		mov	[bc], a
 171:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 735                             		.loc 1 171 0
 736 0571 C9 F0 04 FF             		movw	r8, #-252
 737 0575 AD F0                   		movw	ax, r8
 738 0577 BD F6                   		movw	r14, ax
 739 0579 FA F6                   		movw	hl, r14
 740 057b 8B                      		mov	a, [hl]
 741 057c 9D F2                   		mov	r10, a
 742 057e 5A F2 F7                		and	r10, #-9
 743 0581 AD F0                   		movw	ax, r8
 744 0583 BD F4                   		movw	r12, ax
 745 0585 DA F4                   		movw	bc, r12
 746 0587 8D F2                   		mov	a, r10
 747 0589 48 00 00                		mov	[bc], a
 172:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 748                             		.loc 1 172 0
 749 058c 51 24                   		mov	a, #36
 750 058e 9F 06 00                		mov	!_response, a
 751 0591 51 4C                   		mov	a, #76
 752 0593 9F 07 00                		mov	!_response+1, a
 753 0596 51 30                   		mov	a, #48
 754 0598 9F 08 00                		mov	!_response+2, a
 755 059b 51 0D                   		mov	a, #13
 756 059d 9F 09 00                		mov	!_response+3, a
 757 05a0 51 0A                   		mov	a, #10
 758 05a2 9F 0A 00                		mov	!_response+4, a
 759 05a5 F5 0B 00                		clrb	!_response+5
 760 05a8 30 05 00                		movw	ax, #5
 761 05ab BF 00 00                		movw	!_count, ax
 762 05ae EC 5D 06 00             		br	!!.L33
 763                             	.L36:
 173:../src/user_functions.c **** 				  }
 174:../src/user_functions.c **** 				  else if(record[2] == '4'){
 764                             		.loc 1 174 0
 765 05b2 8F 00 00                		mov	a, !_record+2
 766 05b5 9D F0                   		mov	r8, a
 767 05b7 4A F0 34                		cmp	r8, #52
 768 05ba 61 E8                   		 skz
 769 05bc EC 37 06 00             		 br	!!.L37
 175:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 770                             		.loc 1 175 0
 771 05c0 C9 F0 04 FF             		movw	r8, #-252
 772 05c4 AD F0                   		movw	ax, r8
 773 05c6 BD F6                   		movw	r14, ax
 774 05c8 FA F6                   		movw	hl, r14
 775 05ca 8B                      		mov	a, [hl]
 776 05cb 9D F2                   		mov	r10, a
 777 05cd 6A F2 02                		or	r10, #2
 778 05d0 AD F0                   		movw	ax, r8
 779 05d2 BD F4                   		movw	r12, ax
 780 05d4 DA F4                   		movw	bc, r12
 781 05d6 8D F2                   		mov	a, r10
 782 05d8 48 00 00                		mov	[bc], a
 176:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 783                             		.loc 1 176 0
 784 05db C9 F0 04 FF             		movw	r8, #-252
 785 05df AD F0                   		movw	ax, r8
 786 05e1 BD F6                   		movw	r14, ax
 787 05e3 FA F6                   		movw	hl, r14
 788 05e5 8B                      		mov	a, [hl]
 789 05e6 9D F2                   		mov	r10, a
 790 05e8 6A F2 04                		or	r10, #4
 791 05eb AD F0                   		movw	ax, r8
 792 05ed BD F4                   		movw	r12, ax
 793 05ef DA F4                   		movw	bc, r12
 794 05f1 8D F2                   		mov	a, r10
 795 05f3 48 00 00                		mov	[bc], a
 177:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 796                             		.loc 1 177 0
 797 05f6 C9 F0 04 FF             		movw	r8, #-252
 798 05fa AD F0                   		movw	ax, r8
 799 05fc BD F6                   		movw	r14, ax
 800 05fe FA F6                   		movw	hl, r14
 801 0600 8B                      		mov	a, [hl]
 802 0601 9D F2                   		mov	r10, a
 803 0603 5A F2 F7                		and	r10, #-9
 804 0606 AD F0                   		movw	ax, r8
 805 0608 BD F4                   		movw	r12, ax
 806 060a DA F4                   		movw	bc, r12
 807 060c 8D F2                   		mov	a, r10
 808 060e 48 00 00                		mov	[bc], a
 178:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 809                             		.loc 1 178 0
 810 0611 51 24                   		mov	a, #36
 811 0613 9F 06 00                		mov	!_response, a
 812 0616 51 4C                   		mov	a, #76
 813 0618 9F 07 00                		mov	!_response+1, a
 814 061b 51 30                   		mov	a, #48
 815 061d 9F 08 00                		mov	!_response+2, a
 816 0620 51 0D                   		mov	a, #13
 817 0622 9F 09 00                		mov	!_response+3, a
 818 0625 51 0A                   		mov	a, #10
 819 0627 9F 0A 00                		mov	!_response+4, a
 820 062a F5 0B 00                		clrb	!_response+5
 821 062d 30 05 00                		movw	ax, #5
 822 0630 BF 00 00                		movw	!_count, ax
 823 0633 EC 5D 06 00             		br	!!.L33
 824                             	.L37:
 179:../src/user_functions.c **** 				  }
 180:../src/user_functions.c **** 				  else{
 181:../src/user_functions.c **** 					  strcpy(response, "$L2\x0d\x0a"); count = 5;
 825                             		.loc 1 181 0
 826 0637 51 24                   		mov	a, #36
 827 0639 9F 06 00                		mov	!_response, a
 828 063c 51 4C                   		mov	a, #76
 829 063e 9F 07 00                		mov	!_response+1, a
 830 0641 51 32                   		mov	a, #50
 831 0643 9F 08 00                		mov	!_response+2, a
 832 0646 51 0D                   		mov	a, #13
 833 0648 9F 09 00                		mov	!_response+3, a
 834 064b 51 0A                   		mov	a, #10
 835 064d 9F 0A 00                		mov	!_response+4, a
 836 0650 F5 0B 00                		clrb	!_response+5
 837 0653 30 05 00                		movw	ax, #5
 838 0656 BF 00 00                		movw	!_count, ax
 182:../src/user_functions.c **** 				  }
 183:../src/user_functions.c **** 				  break;
 839                             		.loc 1 183 0
 840 0659 EC 4B 07 00             		br	!!.L9
 841                             	.L33:
 842 065d EC 4B 07 00             		br	!!.L9
 843                             	.L22:
 184:../src/user_functions.c **** 		case 'E':
 185:../src/user_functions.c **** 
 186:../src/user_functions.c **** 					 collectADC();
 844                             		.loc 1 186 0
 845 0661 FC 00 00 00             		call	!!%code(_collectADC)
 187:../src/user_functions.c **** 					 sprintf(str, "$E0%02d,%02d,%0d\x0d\x0a", voltage, current2, current1);
 846                             		.loc 1 187 0
 847 0665 8F 00 00                		mov	a, !_voltage
 848 0668 9D F0                   		mov	r8, a
 849 066a 70                      		mov	x, a 
 850 066b 51 00                   		mov	a, #0
 851 066d BD F4                   		movw	r12, ax
 852 066f 8F 00 00                		mov	a, !_current2
 853 0672 9D F0                   		mov	r8, a
 854 0674 70                      		mov	x, a 
 855 0675 51 00                   		mov	a, #0
 856 0677 BD F2                   		movw	r10, ax
 857 0679 8F 00 00                		mov	a, !_current1
 858 067c 9D F0                   		mov	r8, a
 859 067e CD F1 00                		mov	r9, #0
 860 0681 C9 F6 2C 00             		movw	r14, #44
 861 0685 AE F8                   		movw	ax, sp
 862 0687 BD F6                   		movw	r14, ax
 863 0689 04 2C 00                		addw	ax, #44
 864 068c BD F6                   		movw	r14, ax
 865 068e 04 DF FF                		addw	ax, #-33
 866 0691 B8 00                   		movw	[sp], ax
 867 0693 30 08 00                		movw	ax, #.LC1
 868 0696 B8 02                   		movw	[sp+2], ax
 869 0698 AD F4                   		movw	ax, r12
 870 069a B8 04                   		movw	[sp+4], ax
 871 069c AD F2                   		movw	ax, r10
 872 069e B8 06                   		movw	[sp+6], ax
 873 06a0 AD F0                   		movw	ax, r8
 874 06a2 B8 08                   		movw	[sp+8], ax
 875 06a4 FC 00 00 00             		call	!!%code(_sprintf)
 188:../src/user_functions.c **** 
 189:../src/user_functions.c **** 	//				  sprintf(str, "%d", voltage);
 190:../src/user_functions.c **** 
 191:../src/user_functions.c **** 					  strcpy(response, str); count = strlen(str);
 876                             		.loc 1 191 0
 877 06a8 30 06 00                		movw	ax, #_response
 878 06ab B8 00                   		movw	[sp], ax
 879 06ad C9 F0 2C 00             		movw	r8, #44
 880 06b1 AE F8                   		movw	ax, sp
 881 06b3 BD F0                   		movw	r8, ax
 882 06b5 04 2C 00                		addw	ax, #44
 883 06b8 BD F0                   		movw	r8, ax
 884 06ba 04 DF FF                		addw	ax, #-33
 885 06bd B8 02                   		movw	[sp+2], ax
 886 06bf FC 00 00 00             		call	!!%code(_strcpy)
 887 06c3 C9 F4 2C 00             		movw	r12, #44
 888 06c7 AE F8                   		movw	ax, sp
 889 06c9 BD F4                   		movw	r12, ax
 890 06cb 04 2C 00                		addw	ax, #44
 891 06ce BD F4                   		movw	r12, ax
 892 06d0 04 DF FF                		addw	ax, #-33
 893 06d3 B8 00                   		movw	[sp], ax
 894 06d5 FC 00 00 00             		call	!!%code(_strlen)
 895 06d9 AD F0                   		movw	ax, r8
 896 06db BF 00 00                		movw	!_count, ax
 192:../src/user_functions.c **** 
 193:../src/user_functions.c **** 					  break;
 897                             		.loc 1 193 0
 898 06de EC 4B 07 00             		br	!!.L9
 899                             	.L18:
 194:../src/user_functions.c **** 
 195:../src/user_functions.c **** 	     case 'B':    setRTC();
 900                             		.loc 1 195 0
 901 06e2 FC 00 00 00             		call	!!%code(_setRTC)
 196:../src/user_functions.c **** 					  break;
 902                             		.loc 1 196 0
 903 06e6 EC 4B 07 00             		br	!!.L9
 904                             	.L11:
 197:../src/user_functions.c **** 		 case 'C':	  getRTC();
 905                             		.loc 1 197 0
 906 06ea FC 00 00 00             		call	!!%code(_getRTC)
 198:../src/user_functions.c **** 		 	 	 	  break;
 907                             		.loc 1 198 0
 908 06ee EC 4B 07 00             		br	!!.L9
 909                             	.L19:
 199:../src/user_functions.c **** 		 case 'I':	  sprintf(response, "$I0%03d\x0d\x0a", finalTemp);
 910                             		.loc 1 199 0
 911 06f2 AF 04 00                		movw	ax, !_finalTemp
 912 06f5 BD F0                   		movw	r8, ax
 913 06f7 30 06 00                		movw	ax, #_response
 914 06fa B8 00                   		movw	[sp], ax
 915 06fc 30 1B 00                		movw	ax, #.LC2
 916 06ff B8 02                   		movw	[sp+2], ax
 917 0701 AD F0                   		movw	ax, r8
 918 0703 B8 04                   		movw	[sp+4], ax
 919 0705 FC 00 00 00             		call	!!%code(_sprintf)
 200:../src/user_functions.c **** 		 	 	 	  count = strlen(response);
 920                             		.loc 1 200 0
 921 0709 30 06 00                		movw	ax, #_response
 922 070c B8 00                   		movw	[sp], ax
 923 070e FC 00 00 00             		call	!!%code(_strlen)
 924 0712 AD F0                   		movw	ax, r8
 925 0714 BF 00 00                		movw	!_count, ax
 201:../src/user_functions.c **** 		 	 	 	  break;
 926                             		.loc 1 201 0
 927 0717 EC 4B 07 00             		br	!!.L9
 928                             	.L23:
 202:../src/user_functions.c **** 		 case 'X': 	  write();
 929                             		.loc 1 202 0
 930 071b FC 00 00 00             		call	!!%code(_write)
 203:../src/user_functions.c **** 			 	 	  break;
 931                             		.loc 1 203 0
 932 071f EC 4B 07 00             		br	!!.L9
 933                             	.L24:
 204:../src/user_functions.c **** 		 case 'Y': 	  read();
 934                             		.loc 1 204 0
 935 0723 FC 00 00 00             		call	!!%code(_read)
 205:../src/user_functions.c **** 			 	 	  break;
 936                             		.loc 1 205 0
 937 0727 EC 4B 07 00             		br	!!.L9
 938                             	.L10:
 206:../src/user_functions.c **** 
 207:../src/user_functions.c **** 
 208:../src/user_functions.c **** 		default:
 209:../src/user_functions.c **** 				 sprintf(response, "$%c1\x0d\x0a", record[1]);
 939                             		.loc 1 209 0
 940 072b 8F 00 00                		mov	a, !_record+1
 941 072e 9D F0                   		mov	r8, a
 942 0730 CD F1 00                		mov	r9, #0
 943 0733 30 06 00                		movw	ax, #_response
 944 0736 B8 00                   		movw	[sp], ax
 945 0738 30 25 00                		movw	ax, #.LC3
 946 073b B8 02                   		movw	[sp+2], ax
 947 073d AD F0                   		movw	ax, r8
 948 073f B8 04                   		movw	[sp+4], ax
 949 0741 FC 00 00 00             		call	!!%code(_sprintf)
 210:../src/user_functions.c **** 				 count = 5;
 950                             		.loc 1 210 0
 951 0745 30 05 00                		movw	ax, #5
 952 0748 BF 00 00                		movw	!_count, ax
 953                             	.L9:
 211:../src/user_functions.c **** //				 strcpy(response, "$");
 212:../src/user_functions.c **** //				 strcat(response, &record[1]);
 213:../src/user_functions.c **** //				 strcat(response, "1\x0d\x0a"); count = 5;
 214:../src/user_functions.c **** 
 215:../src/user_functions.c **** 		}
 216:../src/user_functions.c **** 	}
 217:../src/user_functions.c **** 
 218:../src/user_functions.c **** 	R_UART1_Send(response, count);
 954                             		.loc 1 218 0
 955 074b AF 00 00                		movw	ax, !_count
 956 074e BD F0                   		movw	r8, ax
 957 0750 30 06 00                		movw	ax, #_response
 958 0753 B8 00                   		movw	[sp], ax
 959 0755 AD F0                   		movw	ax, r8
 960 0757 B8 02                   		movw	[sp+2], ax
 961 0759 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 219:../src/user_functions.c **** }
 962                             		.loc 1 219 0
 963 075d 10 2C                   		addw	sp, #44
 964 075f D7                      		ret
 965                             	.LFE1:
 967                             		.global	_errorTest
 969                             	_errorTest:
 970                             	.LFB2:
 220:../src/user_functions.c **** 
 221:../src/user_functions.c **** int errorTest(){
 971                             		.loc 1 221 0
 972                             		; start of function
 973                             		; locals: 8 bytes
 974                             		; outgoing: 4 bytes
 975 0760 20 0C                   		subw	sp, #12
 976                             	.LCFI2:
 222:../src/user_functions.c **** 
 223:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 224:../src/user_functions.c **** //	}
 225:../src/user_functions.c **** //	else{
 226:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 227:../src/user_functions.c **** //		strcpy(record, validChar);
 228:../src/user_functions.c **** //		count = 5;
 229:../src/user_functions.c **** //		return 0;
 230:../src/user_functions.c **** //	}
 231:../src/user_functions.c **** 
 232:../src/user_functions.c **** 	if(record[strlen(record) - 1] != '\x0a'){	//INVALID PARAMETERS
 977                             		.loc 1 232 0
 978 0762 30 00 00                		movw	ax, #_record
 979 0765 B8 00                   		movw	[sp], ax
 980 0767 FC 00 00 00             		call	!!%code(_strlen)
 981 076b B6 F0                   		decw	r8
 982 076d AD F0                   		movw	ax, r8
 983 076f 04 00 00                		addw	ax, #_record
 984 0772 16                      		movw	hl, ax
 985 0773 8B                      		mov	a, [hl]
 986 0774 9D F0                   		mov	r8, a
 987 0776 4A F0 0A                		cmp	r8, #10
 988 0779 61 F8                   		 sknz
 989 077b EC BE 07 00             		 br	!!.L39
 990                             	.LBB2:
 233:../src/user_functions.c **** 		char validChar[] = {'$',record[1],'2','\x0d','\x0a'};
 991                             		.loc 1 233 0
 992 077f 51 24                   		mov	a, #36
 993 0781 98 07                   		mov	[sp+7], a
 994 0783 8F 00 00                		mov	a, !_record+1
 995 0786 9D F0                   		mov	r8, a
 996 0788 98 08                   		mov	[sp+8], a
 997 078a 51 32                   		mov	a, #50
 998 078c 98 09                   		mov	[sp+9], a
 999 078e 51 0D                   		mov	a, #13
 1000 0790 98 0A                   		mov	[sp+10], a
 1001 0792 51 0A                   		mov	a, #10
 1002 0794 98 0B                   		mov	[sp+11], a
 234:../src/user_functions.c **** 		strcpy(record, validChar);
 1003                             		.loc 1 234 0
 1004 0796 30 00 00                		movw	ax, #_record
 1005 0799 B8 00                   		movw	[sp], ax
 1006 079b C9 F0 0C 00             		movw	r8, #12
 1007 079f AE F8                   		movw	ax, sp
 1008 07a1 BD F0                   		movw	r8, ax
 1009 07a3 04 0C 00                		addw	ax, #12
 1010 07a6 BD F0                   		movw	r8, ax
 1011 07a8 04 FB FF                		addw	ax, #-5
 1012 07ab B8 02                   		movw	[sp+2], ax
 1013 07ad FC 00 00 00             		call	!!%code(_strcpy)
 235:../src/user_functions.c **** 		count = 5;
 1014                             		.loc 1 235 0
 1015 07b1 30 05 00                		movw	ax, #5
 1016 07b4 BF 00 00                		movw	!_count, ax
 236:../src/user_functions.c **** 		return 0;
 1017                             		.loc 1 236 0
 1018 07b7 F6                      		clrw	ax
 1019 07b8 B8 04                   		movw	[sp+4], ax
 1020 07ba EC C1 07 00             		br	!!.L40
 1021                             	.L39:
 1022                             	.LBE2:
 237:../src/user_functions.c **** 	}
 238:../src/user_functions.c **** 
 239:../src/user_functions.c **** 	return 1;
 1023                             		.loc 1 239 0
 1024 07be E6                      		onew	ax
 1025 07bf B8 04                   		movw	[sp+4], ax
 1026                             	.L40:
 1027 07c1 A8 04                   		movw	ax, [sp+4]
 1028 07c3 BD F0                   		movw	r8, ax
 240:../src/user_functions.c **** }
 1029                             		.loc 1 240 0 discriminator 1
 1030 07c5 10 0C                   		addw	sp, #12
 1031 07c7 D7                      		ret
 1032                             	.LFE2:
 1034                             		.global	_displayLCD
 1036                             	_displayLCD:
 1037                             	.LFB3:
 241:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 242:../src/user_functions.c **** //reset = 0 just keep going
 243:../src/user_functions.c **** 
 244:../src/user_functions.c **** void displayLCD(int reset){
 1038                             		.loc 1 244 0
 1039                             		; start of function
 1040                             		; push 2: r16
 1041                             		; locals: 2 bytes
 1042                             		; outgoing: 4 bytes
 1043 07c8 61 EF                   		sel	rb2
 1044 07ca C1                      		push	ax ; r16
 1045                             	.LCFI3:
 1046 07cb 61 CF                   		sel	rb0
 1047 07cd 20 06                   		subw	sp, #6
 1048                             	.LCFI4:
 245:../src/user_functions.c **** 
 246:../src/user_functions.c **** if(reset){
 1049                             		.loc 1 246 0
 1050 07cf A8 0C                   		movw	ax, [sp+12]
 1051 07d1 44 00 00                		cmpw	ax, #0
 1052 07d4 61 F8                   		 sknz
 1053 07d6 EC E6 07 00             		 br	!!.L42
 247:../src/user_functions.c **** 	offset = 0;
 1054                             		.loc 1 247 0
 1055 07da F6                      		clrw	ax
 1056 07db BF 3C 00                		movw	!_offset, ax
 248:../src/user_functions.c **** 	display = 1;
 1057                             		.loc 1 248 0
 1058 07de E6                      		onew	ax
 1059 07df BF 3A 00                		movw	!_display, ax
 249:../src/user_functions.c **** 	scrollCount = 0;
 1060                             		.loc 1 249 0
 1061 07e2 F6                      		clrw	ax
 1062 07e3 BF 00 00                		movw	!_scrollCount, ax
 1063                             	.L42:
 250:../src/user_functions.c **** }
 251:../src/user_functions.c **** 
 252:../src/user_functions.c **** if(display){
 1064                             		.loc 1 252 0
 1065 07e6 AF 3A 00                		movw	ax, !_display
 1066 07e9 BD F0                   		movw	r8, ax
 1067 07eb 44 00 00                		cmpw	ax, #0
 1068 07ee 61 F8                   		 sknz
 1069 07f0 EC A0 08 00             		 br	!!.L43
 1070                             	.LBB3:
 253:../src/user_functions.c **** 
 254:../src/user_functions.c **** 	int i;
 255:../src/user_functions.c **** 
 256:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1071                             		.loc 1 256 0
 1072 07f4 F1                      		clrb	a
 1073 07f5 98 00                   		mov	[sp], a
 1074 07f7 E1                      		oneb	a
 1075 07f8 98 02                   		mov	[sp+2], a
 1076 07fa FC 00 00 00             		call	!!%code(_writeByteLcd)
 257:../src/user_functions.c **** 	delayNoInt(1640);
 1077                             		.loc 1 257 0
 1078 07fe 30 68 06                		movw	ax, #1640
 1079 0801 B8 00                   		movw	[sp], ax
 1080 0803 FC 00 00 00             		call	!!%code(_delayNoInt)
 258:../src/user_functions.c **** 
 259:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1081                             		.loc 1 259 0
 1082 0807 F1                      		clrb	a
 1083 0808 98 00                   		mov	[sp], a
 1084 080a 51 80                   		mov	a, #-128
 1085 080c 98 02                   		mov	[sp+2], a
 1086 080e FC 00 00 00             		call	!!%code(_writeByteLcd)
 260:../src/user_functions.c **** 	delayNoInt(1640);
 1087                             		.loc 1 260 0
 1088 0812 30 68 06                		movw	ax, #1640
 1089 0815 B8 00                   		movw	[sp], ax
 1090 0817 FC 00 00 00             		call	!!%code(_delayNoInt)
 261:../src/user_functions.c **** 
 262:../src/user_functions.c **** 	for(i = offset; i < strlen(display_string) - 2; i++){
 1091                             		.loc 1 262 0
 1092 081b AF 3C 00                		movw	ax, !_offset
 1093 081e BD F0                   		movw	r8, ax
 1094 0820 B8 04                   		movw	[sp+4], ax
 1095 0822 EC 79 08 00             		br	!!.L44
 1096                             	.L46:
 263:../src/user_functions.c **** 
 264:../src/user_functions.c **** 		if(i == (8 + offset)){
 1097                             		.loc 1 264 0
 1098 0826 AF 3C 00                		movw	ax, !_offset
 1099 0829 BD F0                   		movw	r8, ax
 1100 082b 04 08 00                		addw	ax, #8
 1101 082e BD F2                   		movw	r10, ax
 1102 0830 A8 04                   		movw	ax, [sp+4]
 1103 0832 BD F0                   		movw	r8, ax
 1104 0834 AD F2                   		movw	ax, r10
 1105 0836 46 F0                   		cmpw	ax, r8
 1106 0838 61 E8                   		 skz
 1107 083a EC 52 08 00             		 br	!!.L45
 265:../src/user_functions.c **** 			writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1108                             		.loc 1 265 0
 1109 083e F1                      		clrb	a
 1110 083f 98 00                   		mov	[sp], a
 1111 0841 51 C0                   		mov	a, #-64
 1112 0843 98 02                   		mov	[sp+2], a
 1113 0845 FC 00 00 00             		call	!!%code(_writeByteLcd)
 266:../src/user_functions.c **** 			delayNoInt(1640);
 1114                             		.loc 1 266 0
 1115 0849 30 68 06                		movw	ax, #1640
 1116 084c B8 00                   		movw	[sp], ax
 1117 084e FC 00 00 00             		call	!!%code(_delayNoInt)
 1118                             	.L45:
 267:../src/user_functions.c **** 		}
 268:../src/user_functions.c **** 
 269:../src/user_functions.c **** 		writeByteLcd(LCD_DATA_WR, display_string[i]);
 1119                             		.loc 1 269 0 discriminator 2
 1120 0852 A8 04                   		movw	ax, [sp+4]
 1121 0854 04 00 00                		addw	ax, #_display_string
 1122 0857 BD F0                   		movw	r8, ax
 1123 0859 BD F2                   		movw	r10, ax
 1124 085b FA F2                   		movw	hl, r10
 1125 085d 8B                      		mov	a, [hl]
 1126 085e 9D F0                   		mov	r8, a
 1127 0860 E1                      		oneb	a
 1128 0861 98 00                   		mov	[sp], a
 1129 0863 8D F0                   		mov	a, r8
 1130 0865 98 02                   		mov	[sp+2], a
 1131 0867 FC 00 00 00             		call	!!%code(_writeByteLcd)
 270:../src/user_functions.c **** 		delayNoInt(40);
 1132                             		.loc 1 270 0 discriminator 2
 1133 086b 30 28 00                		movw	ax, #40
 1134 086e B8 00                   		movw	[sp], ax
 1135 0870 FC 00 00 00             		call	!!%code(_delayNoInt)
 262:../src/user_functions.c **** 
 1136                             		.loc 1 262 0 discriminator 2
 1137 0874 A8 04                   		movw	ax, [sp+4]
 1138 0876 A1                      		incw	ax
 1139 0877 B8 04                   		movw	[sp+4], ax
 1140                             	.L44:
 262:../src/user_functions.c **** 
 1141                             		.loc 1 262 0 is_stmt 0 discriminator 1
 1142 0879 A8 04                   		movw	ax, [sp+4]
 1143 087b BD E8                   		movw	r16, ax
 1144 087d 30 00 00                		movw	ax, #_display_string
 1145 0880 B8 00                   		movw	[sp], ax
 1146 0882 FC 00 00 00             		call	!!%code(_strlen)
 1147 0886 B6 F0                   		decw	r8 
 1148 0888 B6 F0                   		decw	r8
 1149 088a AD E8                   		movw	ax, r16
 1150 088c 46 F0                   		cmpw	ax, r8
 1151 088e 61 D8                   		 sknc
 1152 0890 EC 26 08 00             		 br	!!.L46
 271:../src/user_functions.c **** 
 272:../src/user_functions.c **** 	}
 273:../src/user_functions.c **** 	offset++;
 1153                             		.loc 1 273 0 is_stmt 1
 1154 0894 AF 3C 00                		movw	ax, !_offset
 1155 0897 BD F0                   		movw	r8, ax
 1156 0899 A6 F0                   		incw	r8
 1157 089b AD F0                   		movw	ax, r8
 1158 089d BF 3C 00                		movw	!_offset, ax
 1159                             	.L43:
 1160                             	.LBE3:
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** }
 276:../src/user_functions.c **** 
 277:../src/user_functions.c **** if(offset >= (strlen(display_string) - 17) || strlen(display_string) <= 18 ){
 1161                             		.loc 1 277 0
 1162 08a0 AF 3C 00                		movw	ax, !_offset
 1163 08a3 BD F0                   		movw	r8, ax
 1164 08a5 BD E8                   		movw	r16, ax
 1165 08a7 30 00 00                		movw	ax, #_display_string
 1166 08aa B8 00                   		movw	[sp], ax
 1167 08ac FC 00 00 00             		call	!!%code(_strlen)
 1168 08b0 AD F0                   		movw	ax, r8
 1169 08b2 04 EF FF                		addw	ax, #-17
 1170 08b5 BD F0                   		movw	r8, ax
 1171 08b7 AD E8                   		movw	ax, r16
 1172 08b9 46 F0                   		cmpw	ax, r8
 1173 08bb 61 C8                   		 skc
 1174 08bd EC D5 08 00             		 br	!!.L47
 1175                             		.loc 1 277 0 is_stmt 0 discriminator 1
 1176 08c1 30 00 00                		movw	ax, #_display_string
 1177 08c4 B8 00                   		movw	[sp], ax
 1178 08c6 FC 00 00 00             		call	!!%code(_strlen)
 1179 08ca AD F0                   		movw	ax, r8
 1180 08cc 44 12 00                		cmpw	ax, #18
 1181 08cf 61 F3                   		 sknh
 1182 08d1 EC D9 08 00             		 br	!!.L41
 1183                             	.L47:
 278:../src/user_functions.c **** 	display = 0;
 1184                             		.loc 1 278 0 is_stmt 1
 1185 08d5 F6                      		clrw	ax
 1186 08d6 BF 3A 00                		movw	!_display, ax
 1187                             	.L41:
 279:../src/user_functions.c **** }
 280:../src/user_functions.c **** 
 281:../src/user_functions.c **** }
 1188                             		.loc 1 281 0
 1189 08d9 10 06                   		addw	sp, #6
 1190 08db 61 EF                   		sel	rb2
 1191 08dd C0                      		pop	ax ; r16
 1192 08de 61 CF                   		sel	rb0
 1193 08e0 D7                      		ret
 1194                             	.LFE3:
 1196                             		.global	_collectADC
 1198                             	_collectADC:
 1199                             	.LFB4:
 282:../src/user_functions.c **** 
 283:../src/user_functions.c **** void collectADC(){
 1200                             		.loc 1 283 0
 1201                             		; start of function
 1202                             		; outgoing: 2 bytes
 1203 08e1 20 02                   		subw	sp, #2
 1204                             	.LCFI5:
 284:../src/user_functions.c **** 
 285:../src/user_functions.c **** 	 ADS = _00_AD_INPUT_CHANNEL_0;
 1205                             		.loc 1 285 0
 1206 08e3 C9 F0 31 FF             		movw	r8, #-207
 1207 08e7 AD F0                   		movw	ax, r8
 1208 08e9 BD F2                   		movw	r10, ax
 1209 08eb DA F2                   		movw	bc, r10
 1210 08ed F1                      		clrb	a
 1211 08ee 48 00 00                		mov	[bc], a
 286:../src/user_functions.c **** 	 R_ADC_Start();
 1212                             		.loc 1 286 0
 1213 08f1 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 287:../src/user_functions.c **** 	 while(ADCS);
 1214                             		.loc 1 287 0
 1215 08f5 00                      		nop
 1216                             	.L50:
 1217                             		.loc 1 287 0 is_stmt 0 discriminator 1
 1218 08f6 C9 F0 30 FF             		movw	r8, #-208
 1219 08fa AD F0                   		movw	ax, r8
 1220 08fc BD F2                   		movw	r10, ax
 1221 08fe FA F2                   		movw	hl, r10
 1222 0900 8B                      		mov	a, [hl]
 1223 0901 9D F0                   		mov	r8, a
 1224 0903 31 7A                   		shr	a, 7
 1225 0905 9D F0                   		mov	r8, a
 1226 0907 D4 F0                   		cmp0	r8
 1227 0909 61 E8                   		 skz
 1228 090b EC F6 08 00             		 br	!!.L50
 288:../src/user_functions.c **** 	 R_ADC_Start();
 1229                             		.loc 1 288 0 is_stmt 1
 1230 090f FC 00 00 00             		call	!!%code(_R_ADC_Start)
 289:../src/user_functions.c **** 	 while(ADCS);
 1231                             		.loc 1 289 0
 1232 0913 00                      		nop
 1233                             	.L51:
 1234                             		.loc 1 289 0 is_stmt 0 discriminator 1
 1235 0914 C9 F0 30 FF             		movw	r8, #-208
 1236 0918 AD F0                   		movw	ax, r8
 1237 091a BD F2                   		movw	r10, ax
 1238 091c FA F2                   		movw	hl, r10
 1239 091e 8B                      		mov	a, [hl]
 1240 091f 9D F0                   		mov	r8, a
 1241 0921 31 7A                   		shr	a, 7
 1242 0923 9D F0                   		mov	r8, a
 1243 0925 D4 F0                   		cmp0	r8
 1244 0927 61 E8                   		 skz
 1245 0929 EC 14 09 00             		 br	!!.L51
 290:../src/user_functions.c **** 
 291:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&voltage);
 1246                             		.loc 1 291 0 is_stmt 1
 1247 092d 30 00 00                		movw	ax, #_voltage
 1248 0930 B8 00                   		movw	[sp], ax
 1249 0932 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 292:../src/user_functions.c **** 	 voltage = voltage >> 1;
 1250                             		.loc 1 292 0
 1251 0936 8F 00 00                		mov	a, !_voltage
 1252 0939 9D F0                   		mov	r8, a
 1253 093b 31 1A                   		shr	a, 1
 1254 093d 9D F0                   		mov	r8, a
 1255 093f 9F 00 00                		mov	!_voltage, a
 293:../src/user_functions.c **** 
 294:../src/user_functions.c **** 	 ADS = _01_AD_INPUT_CHANNEL_1;
 1256                             		.loc 1 294 0
 1257 0942 C9 F0 31 FF             		movw	r8, #-207
 1258 0946 AD F0                   		movw	ax, r8
 1259 0948 BD F2                   		movw	r10, ax
 1260 094a DA F2                   		movw	bc, r10
 1261 094c E1                      		oneb	a
 1262 094d 48 00 00                		mov	[bc], a
 295:../src/user_functions.c **** 	 R_ADC_Start();
 1263                             		.loc 1 295 0
 1264 0950 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 296:../src/user_functions.c **** 	 while(ADCS);
 1265                             		.loc 1 296 0
 1266 0954 00                      		nop
 1267                             	.L52:
 1268                             		.loc 1 296 0 is_stmt 0 discriminator 1
 1269 0955 C9 F0 30 FF             		movw	r8, #-208
 1270 0959 AD F0                   		movw	ax, r8
 1271 095b BD F2                   		movw	r10, ax
 1272 095d FA F2                   		movw	hl, r10
 1273 095f 8B                      		mov	a, [hl]
 1274 0960 9D F0                   		mov	r8, a
 1275 0962 31 7A                   		shr	a, 7
 1276 0964 9D F0                   		mov	r8, a
 1277 0966 D4 F0                   		cmp0	r8
 1278 0968 61 E8                   		 skz
 1279 096a EC 55 09 00             		 br	!!.L52
 297:../src/user_functions.c **** 	 R_ADC_Start();
 1280                             		.loc 1 297 0 is_stmt 1
 1281 096e FC 00 00 00             		call	!!%code(_R_ADC_Start)
 298:../src/user_functions.c **** 	 while(ADCS);
 1282                             		.loc 1 298 0
 1283 0972 00                      		nop
 1284                             	.L53:
 1285                             		.loc 1 298 0 is_stmt 0 discriminator 1
 1286 0973 C9 F0 30 FF             		movw	r8, #-208
 1287 0977 AD F0                   		movw	ax, r8
 1288 0979 BD F2                   		movw	r10, ax
 1289 097b FA F2                   		movw	hl, r10
 1290 097d 8B                      		mov	a, [hl]
 1291 097e 9D F0                   		mov	r8, a
 1292 0980 31 7A                   		shr	a, 7
 1293 0982 9D F0                   		mov	r8, a
 1294 0984 D4 F0                   		cmp0	r8
 1295 0986 61 E8                   		 skz
 1296 0988 EC 73 09 00             		 br	!!.L53
 299:../src/user_functions.c **** 
 300:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current1);
 1297                             		.loc 1 300 0 is_stmt 1
 1298 098c 30 00 00                		movw	ax, #_current1
 1299 098f B8 00                   		movw	[sp], ax
 1300 0991 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 301:../src/user_functions.c **** 	 current1 = current1 >> 2;
 1301                             		.loc 1 301 0
 1302 0995 8F 00 00                		mov	a, !_current1
 1303 0998 9D F0                   		mov	r8, a
 1304 099a 31 2A                   		shr	a, 2
 1305 099c 9D F0                   		mov	r8, a
 1306 099e 9F 00 00                		mov	!_current1, a
 302:../src/user_functions.c **** 
 303:../src/user_functions.c **** 	 ADS = _02_AD_INPUT_CHANNEL_2;
 1307                             		.loc 1 303 0
 1308 09a1 C9 F0 31 FF             		movw	r8, #-207
 1309 09a5 AD F0                   		movw	ax, r8
 1310 09a7 BD F2                   		movw	r10, ax
 1311 09a9 DA F2                   		movw	bc, r10
 1312 09ab 51 02                   		mov	a, #2
 1313 09ad 48 00 00                		mov	[bc], a
 304:../src/user_functions.c **** 	 R_ADC_Start();
 1314                             		.loc 1 304 0
 1315 09b0 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 305:../src/user_functions.c **** 	 while(ADCS);
 1316                             		.loc 1 305 0
 1317 09b4 00                      		nop
 1318                             	.L54:
 1319                             		.loc 1 305 0 is_stmt 0 discriminator 1
 1320 09b5 C9 F0 30 FF             		movw	r8, #-208
 1321 09b9 AD F0                   		movw	ax, r8
 1322 09bb BD F2                   		movw	r10, ax
 1323 09bd FA F2                   		movw	hl, r10
 1324 09bf 8B                      		mov	a, [hl]
 1325 09c0 9D F0                   		mov	r8, a
 1326 09c2 31 7A                   		shr	a, 7
 1327 09c4 9D F0                   		mov	r8, a
 1328 09c6 D4 F0                   		cmp0	r8
 1329 09c8 61 E8                   		 skz
 1330 09ca EC B5 09 00             		 br	!!.L54
 306:../src/user_functions.c **** 	 R_ADC_Start();
 1331                             		.loc 1 306 0 is_stmt 1
 1332 09ce FC 00 00 00             		call	!!%code(_R_ADC_Start)
 307:../src/user_functions.c **** 	 while(ADCS);
 1333                             		.loc 1 307 0
 1334 09d2 00                      		nop
 1335                             	.L55:
 1336                             		.loc 1 307 0 is_stmt 0 discriminator 1
 1337 09d3 C9 F0 30 FF             		movw	r8, #-208
 1338 09d7 AD F0                   		movw	ax, r8
 1339 09d9 BD F2                   		movw	r10, ax
 1340 09db FA F2                   		movw	hl, r10
 1341 09dd 8B                      		mov	a, [hl]
 1342 09de 9D F0                   		mov	r8, a
 1343 09e0 31 7A                   		shr	a, 7
 1344 09e2 9D F0                   		mov	r8, a
 1345 09e4 D4 F0                   		cmp0	r8
 1346 09e6 61 E8                   		 skz
 1347 09e8 EC D3 09 00             		 br	!!.L55
 308:../src/user_functions.c **** 
 309:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current2);
 1348                             		.loc 1 309 0 is_stmt 1
 1349 09ec 30 00 00                		movw	ax, #_current2
 1350 09ef B8 00                   		movw	[sp], ax
 1351 09f1 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 310:../src/user_functions.c **** 	 current2 = current2 >> 2;
 1352                             		.loc 1 310 0
 1353 09f5 8F 00 00                		mov	a, !_current2
 1354 09f8 9D F0                   		mov	r8, a
 1355 09fa 31 2A                   		shr	a, 2
 1356 09fc 9D F0                   		mov	r8, a
 1357 09fe 9F 00 00                		mov	!_current2, a
 311:../src/user_functions.c **** 
 312:../src/user_functions.c **** }
 1358                             		.loc 1 312 0
 1359 0a01 10 02                   		addw	sp, #2
 1360 0a03 D7                      		ret
 1361                             	.LFE4:
 1363                             		.global	_setRTC
 1365                             	_setRTC:
 1366                             	.LFB5:
 313:../src/user_functions.c **** 
 314:../src/user_functions.c **** void setRTC(){
 1367                             		.loc 1 314 0
 1368                             		; start of function
 1369                             		; locals: 26 bytes
 1370                             		; outgoing: 8 bytes
 1371 0a04 20 22                   		subw	sp, #34
 1372                             	.LCFI6:
 315:../src/user_functions.c **** 	uint8_t date[6] = {0,0,0,0,0,0};
 1373                             		.loc 1 315 0
 1374 0a06 F1                      		clrb	a
 1375 0a07 98 19                   		mov	[sp+25], a
 1376 0a09 F1                      		clrb	a
 1377 0a0a 98 1A                   		mov	[sp+26], a
 1378 0a0c F1                      		clrb	a
 1379 0a0d 98 1B                   		mov	[sp+27], a
 1380 0a0f F1                      		clrb	a
 1381 0a10 98 1C                   		mov	[sp+28], a
 1382 0a12 F1                      		clrb	a
 1383 0a13 98 1D                   		mov	[sp+29], a
 1384 0a15 F1                      		clrb	a
 1385 0a16 98 1E                   		mov	[sp+30], a
 316:../src/user_functions.c **** 	uint8_t actualDate[6] = {0,0,0,0,0,0};
 1386                             		.loc 1 316 0
 1387 0a18 F1                      		clrb	a
 1388 0a19 98 13                   		mov	[sp+19], a
 1389 0a1b F1                      		clrb	a
 1390 0a1c 98 14                   		mov	[sp+20], a
 1391 0a1e F1                      		clrb	a
 1392 0a1f 98 15                   		mov	[sp+21], a
 1393 0a21 F1                      		clrb	a
 1394 0a22 98 16                   		mov	[sp+22], a
 1395 0a24 F1                      		clrb	a
 1396 0a25 98 17                   		mov	[sp+23], a
 1397 0a27 F1                      		clrb	a
 1398 0a28 98 18                   		mov	[sp+24], a
 317:../src/user_functions.c **** 	count = 4;
 1399                             		.loc 1 317 0
 1400 0a2a 30 04 00                		movw	ax, #4
 1401 0a2d BF 00 00                		movw	!_count, ax
 318:../src/user_functions.c **** 	int dateCount = 0;
 1402                             		.loc 1 318 0
 1403 0a30 F6                      		clrw	ax
 1404 0a31 B8 20                   		movw	[sp+32], ax
 319:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 320:../src/user_functions.c **** 
 321:../src/user_functions.c **** 	while(record[count] != '\r'){
 1405                             		.loc 1 321 0
 1406 0a33 EC 78 0B 00             		br	!!.L57
 1407                             	.L59:
 322:../src/user_functions.c **** 
 323:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1408                             		.loc 1 323 0
 1409 0a37 AE F8                   		movw	ax, sp
 1410 0a39 BD F2                   		movw	r10, ax
 1411 0a3b 04 19 00                		addw	ax, #25
 1412 0a3e BD F0                   		movw	r8, ax
 1413 0a40 A8 20                   		movw	ax, [sp+32]
 1414 0a42 06 F0                   		addw	ax, r8
 1415 0a44 BD F0                   		movw	r8, ax
 1416 0a46 BD F4                   		movw	r12, ax
 1417 0a48 FA F4                   		movw	hl, r12
 1418 0a4a 8B                      		mov	a, [hl]
 1419 0a4b 9D F2                   		mov	r10, a
 1420 0a4d AF 00 00                		movw	ax, !_count
 1421 0a50 BD F0                   		movw	r8, ax
 1422 0a52 04 00 00                		addw	ax, #_record
 1423 0a55 16                      		movw	hl, ax
 1424 0a56 8B                      		mov	a, [hl]
 1425 0a57 9D F0                   		mov	r8, a
 1426 0a59 76                      		mov	l, a
 1427 0a5a 8D F2                   		mov	a, r10
 1428 0a5c 61 0E                   		add	a, l
 1429 0a5e 9D F0                   		mov	r8, a
 1430 0a60 0C D0                   		add	a, #-48
 1431 0a62 9D F2                   		mov	r10, a
 1432 0a64 AE F8                   		movw	ax, sp
 1433 0a66 BD F4                   		movw	r12, ax
 1434 0a68 04 19 00                		addw	ax, #25
 1435 0a6b BD F0                   		movw	r8, ax
 1436 0a6d A8 20                   		movw	ax, [sp+32]
 1437 0a6f 06 F0                   		addw	ax, r8
 1438 0a71 BD F0                   		movw	r8, ax
 1439 0a73 BD F4                   		movw	r12, ax
 1440 0a75 DA F4                   		movw	bc, r12
 1441 0a77 8D F2                   		mov	a, r10
 1442 0a79 48 00 00                		mov	[bc], a
 324:../src/user_functions.c **** 		actualDate[dateCount] += record[count] - '0';
 1443                             		.loc 1 324 0
 1444 0a7c AE F8                   		movw	ax, sp
 1445 0a7e BD F2                   		movw	r10, ax
 1446 0a80 04 13 00                		addw	ax, #19
 1447 0a83 BD F0                   		movw	r8, ax
 1448 0a85 A8 20                   		movw	ax, [sp+32]
 1449 0a87 06 F0                   		addw	ax, r8
 1450 0a89 BD F0                   		movw	r8, ax
 1451 0a8b BD F4                   		movw	r12, ax
 1452 0a8d FA F4                   		movw	hl, r12
 1453 0a8f 8B                      		mov	a, [hl]
 1454 0a90 9D F2                   		mov	r10, a
 1455 0a92 AF 00 00                		movw	ax, !_count
 1456 0a95 BD F0                   		movw	r8, ax
 1457 0a97 04 00 00                		addw	ax, #_record
 1458 0a9a 16                      		movw	hl, ax
 1459 0a9b 8B                      		mov	a, [hl]
 1460 0a9c 9D F0                   		mov	r8, a
 1461 0a9e 76                      		mov	l, a
 1462 0a9f 8D F2                   		mov	a, r10
 1463 0aa1 61 0E                   		add	a, l
 1464 0aa3 9D F0                   		mov	r8, a
 1465 0aa5 0C D0                   		add	a, #-48
 1466 0aa7 9D F2                   		mov	r10, a
 1467 0aa9 AE F8                   		movw	ax, sp
 1468 0aab BD F4                   		movw	r12, ax
 1469 0aad 04 13 00                		addw	ax, #19
 1470 0ab0 BD F0                   		movw	r8, ax
 1471 0ab2 A8 20                   		movw	ax, [sp+32]
 1472 0ab4 06 F0                   		addw	ax, r8
 1473 0ab6 BD F0                   		movw	r8, ax
 1474 0ab8 BD F4                   		movw	r12, ax
 1475 0aba DA F4                   		movw	bc, r12
 1476 0abc 8D F2                   		mov	a, r10
 1477 0abe 48 00 00                		mov	[bc], a
 325:../src/user_functions.c **** 		count++;
 1478                             		.loc 1 325 0
 1479 0ac1 AF 00 00                		movw	ax, !_count
 1480 0ac4 BD F0                   		movw	r8, ax
 1481 0ac6 A6 F0                   		incw	r8
 1482 0ac8 AD F0                   		movw	ax, r8
 1483 0aca BF 00 00                		movw	!_count, ax
 326:../src/user_functions.c **** 		if(record[count] == ','){
 1484                             		.loc 1 326 0
 1485 0acd BD F0                   		movw	r8, ax
 1486 0acf 04 00 00                		addw	ax, #_record
 1487 0ad2 16                      		movw	hl, ax
 1488 0ad3 8B                      		mov	a, [hl]
 1489 0ad4 9D F0                   		mov	r8, a
 1490 0ad6 4A F0 2C                		cmp	r8, #44
 1491 0ad9 61 E8                   		 skz
 1492 0adb EC F4 0A 00             		 br	!!.L58
 327:../src/user_functions.c **** 			dateCount++;
 1493                             		.loc 1 327 0
 1494 0adf A8 20                   		movw	ax, [sp+32]
 1495 0ae1 A1                      		incw	ax
 1496 0ae2 B8 20                   		movw	[sp+32], ax
 328:../src/user_functions.c **** 			count++;
 1497                             		.loc 1 328 0
 1498 0ae4 AF 00 00                		movw	ax, !_count
 1499 0ae7 BD F0                   		movw	r8, ax
 1500 0ae9 A6 F0                   		incw	r8
 1501 0aeb AD F0                   		movw	ax, r8
 1502 0aed BF 00 00                		movw	!_count, ax
 1503 0af0 EC 78 0B 00             		br	!!.L57
 1504                             	.L58:
 329:../src/user_functions.c **** 		}
 330:../src/user_functions.c **** 		else if(record[count] == '\r'){
 1505                             		.loc 1 330 0
 1506 0af4 AF 00 00                		movw	ax, !_count
 1507 0af7 BD F0                   		movw	r8, ax
 1508 0af9 04 00 00                		addw	ax, #_record
 1509 0afc 16                      		movw	hl, ax
 1510 0afd 8B                      		mov	a, [hl]
 1511 0afe 9D F0                   		mov	r8, a
 1512 0b00 4A F0 0D                		cmp	r8, #13
 1513 0b03 61 F8                   		 sknz
 1514 0b05 EC 78 0B 00             		 br	!!.L57
 331:../src/user_functions.c **** 
 332:../src/user_functions.c **** 		}
 333:../src/user_functions.c **** 		else{
 334:../src/user_functions.c **** 			date[dateCount] = date[dateCount]<<4;
 1515                             		.loc 1 334 0
 1516 0b09 AE F8                   		movw	ax, sp
 1517 0b0b BD F2                   		movw	r10, ax
 1518 0b0d 04 19 00                		addw	ax, #25
 1519 0b10 BD F0                   		movw	r8, ax
 1520 0b12 A8 20                   		movw	ax, [sp+32]
 1521 0b14 06 F0                   		addw	ax, r8
 1522 0b16 BD F0                   		movw	r8, ax
 1523 0b18 BD F4                   		movw	r12, ax
 1524 0b1a FA F4                   		movw	hl, r12
 1525 0b1c 8B                      		mov	a, [hl]
 1526 0b1d 9D F0                   		mov	r8, a
 1527 0b1f 31 49                   		shl	a, 4
 1528 0b21 9D F2                   		mov	r10, a
 1529 0b23 AE F8                   		movw	ax, sp
 1530 0b25 BD F4                   		movw	r12, ax
 1531 0b27 04 19 00                		addw	ax, #25
 1532 0b2a BD F0                   		movw	r8, ax
 1533 0b2c A8 20                   		movw	ax, [sp+32]
 1534 0b2e 06 F0                   		addw	ax, r8
 1535 0b30 BD F0                   		movw	r8, ax
 1536 0b32 BD F4                   		movw	r12, ax
 1537 0b34 DA F4                   		movw	bc, r12
 1538 0b36 8D F2                   		mov	a, r10
 1539 0b38 48 00 00                		mov	[bc], a
 335:../src/user_functions.c **** 			actualDate[dateCount] = actualDate[dateCount]*10;
 1540                             		.loc 1 335 0
 1541 0b3b AE F8                   		movw	ax, sp
 1542 0b3d BD F2                   		movw	r10, ax
 1543 0b3f 04 13 00                		addw	ax, #19
 1544 0b42 BD F0                   		movw	r8, ax
 1545 0b44 A8 20                   		movw	ax, [sp+32]
 1546 0b46 06 F0                   		addw	ax, r8
 1547 0b48 BD F0                   		movw	r8, ax
 1548 0b4a BD F4                   		movw	r12, ax
 1549 0b4c FA F4                   		movw	hl, r12
 1550 0b4e 8B                      		mov	a, [hl]
 1551 0b4f 9D F0                   		mov	r8, a
 1552 0b51 61 01                   		add	a, a
 1553 0b53 9D F0                   		mov	r8, a
 1554 0b55 31 29                   		shl	a, 2
 1555 0b57 9D F1                   		mov	r9, a
 1556 0b59 76                      		mov	l, a
 1557 0b5a 8D F0                   		mov	a, r8
 1558 0b5c 61 0E                   		add	a, l
 1559 0b5e 9D F2                   		mov	r10, a
 1560 0b60 AE F8                   		movw	ax, sp
 1561 0b62 BD F4                   		movw	r12, ax
 1562 0b64 04 13 00                		addw	ax, #19
 1563 0b67 BD F0                   		movw	r8, ax
 1564 0b69 A8 20                   		movw	ax, [sp+32]
 1565 0b6b 06 F0                   		addw	ax, r8
 1566 0b6d BD F0                   		movw	r8, ax
 1567 0b6f BD F4                   		movw	r12, ax
 1568 0b71 DA F4                   		movw	bc, r12
 1569 0b73 8D F2                   		mov	a, r10
 1570 0b75 48 00 00                		mov	[bc], a
 1571                             	.L57:
 321:../src/user_functions.c **** 
 1572                             		.loc 1 321 0
 1573 0b78 AF 00 00                		movw	ax, !_count
 1574 0b7b BD F0                   		movw	r8, ax
 1575 0b7d 04 00 00                		addw	ax, #_record
 1576 0b80 16                      		movw	hl, ax
 1577 0b81 8B                      		mov	a, [hl]
 1578 0b82 9D F0                   		mov	r8, a
 1579 0b84 4A F0 0D                		cmp	r8, #13
 1580 0b87 61 E8                   		 skz
 1581 0b89 EC 37 0A 00             		 br	!!.L59
 336:../src/user_functions.c **** 		}
 337:../src/user_functions.c **** 
 338:../src/user_functions.c **** 	}
 339:../src/user_functions.c **** 
 340:../src/user_functions.c **** 	if(testDate(actualDate)){
 1582                             		.loc 1 340 0
 1583 0b8d C9 F0 22 00             		movw	r8, #34
 1584 0b91 AE F8                   		movw	ax, sp
 1585 0b93 BD F0                   		movw	r8, ax
 1586 0b95 04 22 00                		addw	ax, #34
 1587 0b98 BD F0                   		movw	r8, ax
 1588 0b9a 04 F1 FF                		addw	ax, #-15
 1589 0b9d B8 00                   		movw	[sp], ax
 1590 0b9f FC 00 00 00             		call	!!%code(_testDate)
 1591 0ba3 D4 F0                   		cmp0	r8
 1592 0ba5 61 F8                   		 sknz
 1593 0ba7 EC 11 0C 00             		 br	!!.L60
 341:../src/user_functions.c **** 
 342:../src/user_functions.c **** 		theDate.year = date[0];
 1594                             		.loc 1 342 0
 1595 0bab 88 19                   		mov	a, [sp+25]
 1596 0bad 9D F0                   		mov	r8, a
 1597 0baf 98 12                   		mov	[sp+18], a
 343:../src/user_functions.c **** 		theDate.month = date[1];
 1598                             		.loc 1 343 0
 1599 0bb1 88 1A                   		mov	a, [sp+26]
 1600 0bb3 9D F0                   		mov	r8, a
 1601 0bb5 98 11                   		mov	[sp+17], a
 344:../src/user_functions.c **** 		theDate.day = date[2];
 1602                             		.loc 1 344 0
 1603 0bb7 88 1B                   		mov	a, [sp+27]
 1604 0bb9 9D F0                   		mov	r8, a
 1605 0bbb 98 0F                   		mov	[sp+15], a
 345:../src/user_functions.c **** 		theDate.hour = date[3];
 1606                             		.loc 1 345 0
 1607 0bbd 88 1C                   		mov	a, [sp+28]
 1608 0bbf 9D F0                   		mov	r8, a
 1609 0bc1 98 0E                   		mov	[sp+14], a
 346:../src/user_functions.c **** 		theDate.min = date[4];
 1610                             		.loc 1 346 0
 1611 0bc3 88 1D                   		mov	a, [sp+29]
 1612 0bc5 9D F0                   		mov	r8, a
 1613 0bc7 98 0D                   		mov	[sp+13], a
 347:../src/user_functions.c **** 		theDate.sec = date[5];
 1614                             		.loc 1 347 0
 1615 0bc9 88 1E                   		mov	a, [sp+30]
 1616 0bcb 9D F0                   		mov	r8, a
 1617 0bcd 98 0C                   		mov	[sp+12], a
 348:../src/user_functions.c **** 
 349:../src/user_functions.c **** 		count = 5;
 1618                             		.loc 1 349 0
 1619 0bcf 30 05 00                		movw	ax, #5
 1620 0bd2 BF 00 00                		movw	!_count, ax
 350:../src/user_functions.c **** 		strcpy(response, "$B0\x0d\x0a");
 1621                             		.loc 1 350 0
 1622 0bd5 51 24                   		mov	a, #36
 1623 0bd7 9F 06 00                		mov	!_response, a
 1624 0bda 51 42                   		mov	a, #66
 1625 0bdc 9F 07 00                		mov	!_response+1, a
 1626 0bdf 51 30                   		mov	a, #48
 1627 0be1 9F 08 00                		mov	!_response+2, a
 1628 0be4 51 0D                   		mov	a, #13
 1629 0be6 9F 09 00                		mov	!_response+3, a
 1630 0be9 51 0A                   		mov	a, #10
 1631 0beb 9F 0A 00                		mov	!_response+4, a
 1632 0bee F5 0B 00                		clrb	!_response+5
 351:../src/user_functions.c **** 
 352:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 1633                             		.loc 1 352 0
 1634 0bf1 A8 0C                   		movw	ax, [sp+12]
 1635 0bf3 BD F0                   		movw	r8, ax
 1636 0bf5 B8 00                   		movw	[sp], ax
 1637 0bf7 A8 0E                   		movw	ax, [sp+14]
 1638 0bf9 BD F0                   		movw	r8, ax
 1639 0bfb B8 02                   		movw	[sp+2], ax
 1640 0bfd A8 10                   		movw	ax, [sp+16]
 1641 0bff BD F0                   		movw	r8, ax
 1642 0c01 B8 04                   		movw	[sp+4], ax
 1643 0c03 88 12                   		mov	a, [sp+18]
 1644 0c05 9D F0                   		mov	r8, a
 1645 0c07 98 06                   		mov	[sp+6], a
 1646 0c09 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1647 0c0d EC 6B 0C 00             		br	!!.L56
 1648                             	.L60:
 1649                             	.LBB4:
 353:../src/user_functions.c **** 	}
 354:../src/user_functions.c **** 	else{
 355:../src/user_functions.c **** 		char str[4];
 356:../src/user_functions.c **** 		uint8_t ack = 0;
 1650                             		.loc 1 356 0
 1651 0c11 F1                      		clrb	a
 1652 0c12 98 1F                   		mov	[sp+31], a
 357:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 1653                             		.loc 1 357 0
 1654 0c14 AE F8                   		movw	ax, sp
 1655 0c16 BD F2                   		movw	r10, ax
 1656 0c18 04 08 00                		addw	ax, #8
 1657 0c1b BD F0                   		movw	r8, ax
 1658 0c1d BD F4                   		movw	r12, ax
 1659 0c1f DA F4                   		movw	bc, r12
 1660 0c21 30 24 42                		movw	ax, #16932
 1661 0c24 78 00 00                		movw	[bc], ax
 1662 0c27 DA F0                   		movw	bc, r8
 1663 0c29 30 32 0D                		movw	ax, #3378
 1664 0c2c 78 02 00                		movw	2[bc], ax
 1665 0c2f 30 0A 00                		movw	ax, #10
 1666 0c32 78 04 00                		movw	4[bc], ax
 358:../src/user_functions.c **** 		count = strlen(str);
 1667                             		.loc 1 358 0
 1668 0c35 C9 F0 22 00             		movw	r8, #34
 1669 0c39 AE F8                   		movw	ax, sp
 1670 0c3b BD F0                   		movw	r8, ax
 1671 0c3d 04 22 00                		addw	ax, #34
 1672 0c40 BD F0                   		movw	r8, ax
 1673 0c42 04 E6 FF                		addw	ax, #-26
 1674 0c45 B8 00                   		movw	[sp], ax
 1675 0c47 FC 00 00 00             		call	!!%code(_strlen)
 1676 0c4b AD F0                   		movw	ax, r8
 1677 0c4d BF 00 00                		movw	!_count, ax
 359:../src/user_functions.c **** 		strcpy(response, str);
 1678                             		.loc 1 359 0
 1679 0c50 30 06 00                		movw	ax, #_response
 1680 0c53 B8 00                   		movw	[sp], ax
 1681 0c55 C9 F2 22 00             		movw	r10, #34
 1682 0c59 AE F8                   		movw	ax, sp
 1683 0c5b BD F2                   		movw	r10, ax
 1684 0c5d 04 22 00                		addw	ax, #34
 1685 0c60 BD F2                   		movw	r10, ax
 1686 0c62 04 E6 FF                		addw	ax, #-26
 1687 0c65 B8 02                   		movw	[sp+2], ax
 1688 0c67 FC 00 00 00             		call	!!%code(_strcpy)
 1689                             	.L56:
 1690                             	.LBE4:
 360:../src/user_functions.c **** 
 361:../src/user_functions.c **** 	}
 362:../src/user_functions.c **** 
 363:../src/user_functions.c **** }
 1691                             		.loc 1 363 0
 1692 0c6b 10 22                   		addw	sp, #34
 1693 0c6d D7                      		ret
 1694                             	.LFE5:
 1696                             		.section	.rodata
 1697                             	.LC4:
 1698 002c 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 1698      25 64 2C 25 64 2C 25 64 
 1698      2C 25 64 2C 25 64 0D 0A 
 1698      00 
 1699                             	.text
 1700                             		.global	_getRTC
 1702                             	_getRTC:
 1703                             	.LFB6:
 364:../src/user_functions.c **** 
 365:../src/user_functions.c **** void getRTC(){
 1704                             		.loc 1 365 0
 1705                             		; start of function
 1706                             		; push 6: r16 r18 r20
 1707                             		; locals: 16 bytes
 1708                             		; outgoing: 16 bytes
 1709 0c6e 61 EF                   		sel	rb2
 1710 0c70 C1                      		push	ax ; r16
 1711                             	.LCFI7:
 1712 0c71 C3                      		push	bc ; r18
 1713                             	.LCFI8:
 1714 0c72 C5                      		push	de ; r20
 1715                             	.LCFI9:
 1716 0c73 61 CF                   		sel	rb0
 1717 0c75 20 20                   		subw	sp, #32
 1718                             	.LCFI10:
 366:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 367:../src/user_functions.c **** 	uint8_t date[] = {0,0,0,0,0,0};
 1719                             		.loc 1 367 0
 1720 0c77 F1                      		clrb	a
 1721 0c78 98 11                   		mov	[sp+17], a
 1722 0c7a F1                      		clrb	a
 1723 0c7b 98 12                   		mov	[sp+18], a
 1724 0c7d F1                      		clrb	a
 1725 0c7e 98 13                   		mov	[sp+19], a
 1726 0c80 F1                      		clrb	a
 1727 0c81 98 14                   		mov	[sp+20], a
 1728 0c83 F1                      		clrb	a
 1729 0c84 98 15                   		mov	[sp+21], a
 1730 0c86 F1                      		clrb	a
 1731 0c87 98 16                   		mov	[sp+22], a
 368:../src/user_functions.c **** 
 369:../src/user_functions.c **** 
 370:../src/user_functions.c **** 
 371:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 1732                             		.loc 1 371 0
 1733 0c89 C9 F0 20 00             		movw	r8, #32
 1734 0c8d AE F8                   		movw	ax, sp
 1735 0c8f BD F0                   		movw	r8, ax
 1736 0c91 04 20 00                		addw	ax, #32
 1737 0c94 BD F0                   		movw	r8, ax
 1738 0c96 04 F7 FF                		addw	ax, #-9
 1739 0c99 B8 00                   		movw	[sp], ax
 1740 0c9b FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 372:../src/user_functions.c **** 
 373:../src/user_functions.c **** 	date[0] = theDate.year;
 1741                             		.loc 1 373 0
 1742 0c9f 88 1D                   		mov	a, [sp+29]
 1743 0ca1 9D F0                   		mov	r8, a
 1744 0ca3 98 11                   		mov	[sp+17], a
 374:../src/user_functions.c **** 	date[1] = theDate.month;
 1745                             		.loc 1 374 0
 1746 0ca5 88 1C                   		mov	a, [sp+28]
 1747 0ca7 9D F0                   		mov	r8, a
 1748 0ca9 98 12                   		mov	[sp+18], a
 375:../src/user_functions.c **** 	date[2] = theDate.day;
 1749                             		.loc 1 375 0
 1750 0cab 88 1A                   		mov	a, [sp+26]
 1751 0cad 9D F0                   		mov	r8, a
 1752 0caf 98 13                   		mov	[sp+19], a
 376:../src/user_functions.c **** 	date[3] = theDate.hour;
 1753                             		.loc 1 376 0
 1754 0cb1 88 19                   		mov	a, [sp+25]
 1755 0cb3 9D F0                   		mov	r8, a
 1756 0cb5 98 14                   		mov	[sp+20], a
 377:../src/user_functions.c **** 	date[4] = theDate.min;
 1757                             		.loc 1 377 0
 1758 0cb7 88 18                   		mov	a, [sp+24]
 1759 0cb9 9D F0                   		mov	r8, a
 1760 0cbb 98 15                   		mov	[sp+21], a
 378:../src/user_functions.c **** 	date[5] = theDate.sec;
 1761                             		.loc 1 378 0
 1762 0cbd 88 17                   		mov	a, [sp+23]
 1763 0cbf 9D F0                   		mov	r8, a
 1764 0cc1 98 16                   		mov	[sp+22], a
 379:../src/user_functions.c **** 
 380:../src/user_functions.c **** 	BCDtoDEC(date);
 1765                             		.loc 1 380 0
 1766 0cc3 C9 F0 20 00             		movw	r8, #32
 1767 0cc7 AE F8                   		movw	ax, sp
 1768 0cc9 BD F0                   		movw	r8, ax
 1769 0ccb 04 20 00                		addw	ax, #32
 1770 0cce BD F0                   		movw	r8, ax
 1771 0cd0 04 F1 FF                		addw	ax, #-15
 1772 0cd3 B8 00                   		movw	[sp], ax
 1773 0cd5 FC 00 00 00             		call	!!%code(_BCDtoDEC)
 381:../src/user_functions.c **** 
 382:../src/user_functions.c **** 	char *str;
 383:../src/user_functions.c **** 	str = (char *)malloc(32);
 1774                             		.loc 1 383 0
 1775 0cd9 30 20 00                		movw	ax, #32
 1776 0cdc B8 00                   		movw	[sp], ax
 1777 0cde FC 00 00 00             		call	!!%code(_malloc)
 1778 0ce2 AD F0                   		movw	ax, r8
 1779 0ce4 B8 1E                   		movw	[sp+30], ax
 384:../src/user_functions.c **** 	sprintf(str, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2], date[3], date[4], date[5
 1780                             		.loc 1 384 0
 1781 0ce6 88 11                   		mov	a, [sp+17]
 1782 0ce8 9D F0                   		mov	r8, a
 1783 0cea 70                      		mov	x, a 
 1784 0ceb 51 00                   		mov	a, #0
 1785 0ced BD EC                   		movw	r20, ax
 1786 0cef 88 12                   		mov	a, [sp+18]
 1787 0cf1 9D F0                   		mov	r8, a
 1788 0cf3 70                      		mov	x, a 
 1789 0cf4 51 00                   		mov	a, #0
 1790 0cf6 BD EA                   		movw	r18, ax
 1791 0cf8 88 13                   		mov	a, [sp+19]
 1792 0cfa 9D F0                   		mov	r8, a
 1793 0cfc 70                      		mov	x, a 
 1794 0cfd 51 00                   		mov	a, #0
 1795 0cff BD E8                   		movw	r16, ax
 1796 0d01 88 14                   		mov	a, [sp+20]
 1797 0d03 9D F0                   		mov	r8, a
 1798 0d05 70                      		mov	x, a 
 1799 0d06 51 00                   		mov	a, #0
 1800 0d08 BD F6                   		movw	r14, ax
 1801 0d0a 88 15                   		mov	a, [sp+21]
 1802 0d0c 9D F0                   		mov	r8, a
 1803 0d0e 70                      		mov	x, a 
 1804 0d0f 51 00                   		mov	a, #0
 1805 0d11 BD F4                   		movw	r12, ax
 1806 0d13 88 16                   		mov	a, [sp+22]
 1807 0d15 9D F0                   		mov	r8, a
 1808 0d17 70                      		mov	x, a 
 1809 0d18 51 00                   		mov	a, #0
 1810 0d1a BD F2                   		movw	r10, ax
 1811 0d1c A8 1E                   		movw	ax, [sp+30]
 1812 0d1e BD F0                   		movw	r8, ax
 1813 0d20 B8 00                   		movw	[sp], ax
 1814 0d22 30 2C 00                		movw	ax, #.LC4
 1815 0d25 B8 02                   		movw	[sp+2], ax
 1816 0d27 AD EC                   		movw	ax, r20
 1817 0d29 B8 04                   		movw	[sp+4], ax
 1818 0d2b AD EA                   		movw	ax, r18
 1819 0d2d B8 06                   		movw	[sp+6], ax
 1820 0d2f AD E8                   		movw	ax, r16
 1821 0d31 B8 08                   		movw	[sp+8], ax
 1822 0d33 AD F6                   		movw	ax, r14
 1823 0d35 B8 0A                   		movw	[sp+10], ax
 1824 0d37 AD F4                   		movw	ax, r12
 1825 0d39 B8 0C                   		movw	[sp+12], ax
 1826 0d3b AD F2                   		movw	ax, r10
 1827 0d3d B8 0E                   		movw	[sp+14], ax
 1828 0d3f FC 00 00 00             		call	!!%code(_sprintf)
 385:../src/user_functions.c **** //	free(date);
 386:../src/user_functions.c **** 	count = strlen(str);
 1829                             		.loc 1 386 0
 1830 0d43 A8 1E                   		movw	ax, [sp+30]
 1831 0d45 BD F0                   		movw	r8, ax
 1832 0d47 B8 00                   		movw	[sp], ax
 1833 0d49 FC 00 00 00             		call	!!%code(_strlen)
 1834 0d4d AD F0                   		movw	ax, r8
 1835 0d4f BF 00 00                		movw	!_count, ax
 387:../src/user_functions.c **** 	strcpy(response, str);
 1836                             		.loc 1 387 0
 1837 0d52 30 06 00                		movw	ax, #_response
 1838 0d55 B8 00                   		movw	[sp], ax
 1839 0d57 A8 1E                   		movw	ax, [sp+30]
 1840 0d59 BD F0                   		movw	r8, ax
 1841 0d5b B8 02                   		movw	[sp+2], ax
 1842 0d5d FC 00 00 00             		call	!!%code(_strcpy)
 388:../src/user_functions.c **** 	free(str);
 1843                             		.loc 1 388 0
 1844 0d61 A8 1E                   		movw	ax, [sp+30]
 1845 0d63 BD F0                   		movw	r8, ax
 1846 0d65 B8 00                   		movw	[sp], ax
 1847 0d67 FC 00 00 00             		call	!!%code(_free)
 389:../src/user_functions.c **** 
 390:../src/user_functions.c **** }
 1848                             		.loc 1 390 0
 1849 0d6b 10 20                   		addw	sp, #32
 1850 0d6d 61 EF                   		sel	rb2
 1851 0d6f C4                      		pop	de ; r20
 1852 0d70 C2                      		pop	bc ; r18
 1853 0d71 C0                      		pop	ax ; r16
 1854 0d72 61 CF                   		sel	rb0
 1855 0d74 D7                      		ret
 1856                             	.LFE6:
 1858                             		.global	_BCDtoDEC
 1860                             	_BCDtoDEC:
 1861                             	.LFB7:
 391:../src/user_functions.c **** 
 392:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]){
 1862                             		.loc 1 392 0
 1863                             		; start of function
 1864                             		; locals: 6 bytes
 1865 0d75 20 06                   		subw	sp, #6
 1866                             	.LCFI11:
 393:../src/user_functions.c **** 
 394:../src/user_functions.c **** 	uint8_t len =  6;
 1867                             		.loc 1 394 0
 1868 0d77 51 06                   		mov	a, #6
 1869 0d79 98 03                   		mov	[sp+3], a
 395:../src/user_functions.c **** 	uint8_t upper, lower;
 396:../src/user_functions.c **** 	int i;
 397:../src/user_functions.c **** 	for(i = 0; i < len; i++){
 1870                             		.loc 1 397 0
 1871 0d7b F6                      		clrw	ax
 1872 0d7c B8 04                   		movw	[sp+4], ax
 1873 0d7e EC E0 0D 00             		br	!!.L64
 1874                             	.L65:
 398:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1875                             		.loc 1 398 0 discriminator 3
 1876 0d82 A8 04                   		movw	ax, [sp+4]
 1877 0d84 BD F0                   		movw	r8, ax
 1878 0d86 A8 0A                   		movw	ax, [sp+10]
 1879 0d88 06 F0                   		addw	ax, r8
 1880 0d8a BD F0                   		movw	r8, ax
 1881 0d8c BD F2                   		movw	r10, ax
 1882 0d8e FA F2                   		movw	hl, r10
 1883 0d90 8B                      		mov	a, [hl]
 1884 0d91 9D F0                   		mov	r8, a
 1885 0d93 5C 0F                   		and	a, #15
 1886 0d95 98 02                   		mov	[sp+2], a
 399:../src/user_functions.c **** 		upper = (arr[i] & 0xf0)>>4;
 1887                             		.loc 1 399 0 discriminator 3
 1888 0d97 A8 04                   		movw	ax, [sp+4]
 1889 0d99 BD F0                   		movw	r8, ax
 1890 0d9b A8 0A                   		movw	ax, [sp+10]
 1891 0d9d 06 F0                   		addw	ax, r8
 1892 0d9f BD F0                   		movw	r8, ax
 1893 0da1 BD F4                   		movw	r12, ax
 1894 0da3 FA F4                   		movw	hl, r12
 1895 0da5 8B                      		mov	a, [hl]
 1896 0da6 9D F0                   		mov	r8, a
 1897 0da8 31 4A                   		shr	a, 4
 1898 0daa 98 01                   		mov	[sp+1], a
 400:../src/user_functions.c **** 
 401:../src/user_functions.c **** 		arr[i] = upper*10 + lower;
 1899                             		.loc 1 401 0 discriminator 3
 1900 0dac A8 04                   		movw	ax, [sp+4]
 1901 0dae BD F0                   		movw	r8, ax
 1902 0db0 A8 0A                   		movw	ax, [sp+10]
 1903 0db2 06 F0                   		addw	ax, r8
 1904 0db4 BD F2                   		movw	r10, ax
 1905 0db6 88 01                   		mov	a, [sp+1]
 1906 0db8 9D F0                   		mov	r8, a
 1907 0dba 61 01                   		add	a, a
 1908 0dbc 9D F0                   		mov	r8, a
 1909 0dbe 31 29                   		shl	a, 2
 1910 0dc0 9D F1                   		mov	r9, a
 1911 0dc2 76                      		mov	l, a
 1912 0dc3 8D F0                   		mov	a, r8
 1913 0dc5 61 0E                   		add	a, l
 1914 0dc7 9D F0                   		mov	r8, a
 1915 0dc9 76                      		mov	l, a
 1916 0dca 88 02                   		mov	a, [sp+2]
 1917 0dcc 61 0E                   		add	a, l
 1918 0dce 9D F0                   		mov	r8, a
 1919 0dd0 AD F2                   		movw	ax, r10
 1920 0dd2 BD F4                   		movw	r12, ax
 1921 0dd4 DA F4                   		movw	bc, r12
 1922 0dd6 8D F0                   		mov	a, r8
 1923 0dd8 48 00 00                		mov	[bc], a
 397:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1924                             		.loc 1 397 0 discriminator 3
 1925 0ddb A8 04                   		movw	ax, [sp+4]
 1926 0ddd A1                      		incw	ax
 1927 0dde B8 04                   		movw	[sp+4], ax
 1928                             	.L64:
 397:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1929                             		.loc 1 397 0 is_stmt 0 discriminator 1
 1930 0de0 88 03                   		mov	a, [sp+3]
 1931 0de2 70                      		mov	x, a 
 1932 0de3 51 00                   		mov	a, #0
 1933 0de5 BD F2                   		movw	r10, ax
 1934 0de7 A8 04                   		movw	ax, [sp+4]
 1935 0de9 BD F0                   		movw	r8, ax
 1936 0deb AD F2                   		movw	ax, r10
 1937 0ded 46 F0                   		cmpw	ax, r8
 1938 0def 71 FF                   		 xor1	CY, a.7
 1939 0df1 71 77 F1                		 xor1	CY, r9.7
 1940 0df4 61 F3                   		 sknh
 1941 0df6 EC 82 0D 00             		 br	!!.L65
 402:../src/user_functions.c **** 	}
 403:../src/user_functions.c **** }
 1942                             		.loc 1 403 0 is_stmt 1
 1943 0dfa 10 06                   		addw	sp, #6
 1944 0dfc D7                      		ret
 1945                             	.LFE7:
 1947                             		.global	_testDate
 1949                             	_testDate:
 1950                             	.LFB8:
 404:../src/user_functions.c **** 
 405:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 406:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]){
 1951                             		.loc 1 406 0
 1952                             		; start of function
 1953                             		; locals: 24 bytes
 1954 0dfd 20 18                   		subw	sp, #24
 1955                             	.LCFI12:
 407:../src/user_functions.c **** 
 408:../src/user_functions.c **** 	int daysInMonth[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 1956                             		.loc 1 408 0
 1957 0dff 30 1F 00                		movw	ax, #31
 1958 0e02 B8 00                   		movw	[sp], ax
 1959 0e04 30 1C 00                		movw	ax, #28
 1960 0e07 B8 02                   		movw	[sp+2], ax
 1961 0e09 30 1F 00                		movw	ax, #31
 1962 0e0c B8 04                   		movw	[sp+4], ax
 1963 0e0e 30 1E 00                		movw	ax, #30
 1964 0e11 B8 06                   		movw	[sp+6], ax
 1965 0e13 30 1F 00                		movw	ax, #31
 1966 0e16 B8 08                   		movw	[sp+8], ax
 1967 0e18 30 1E 00                		movw	ax, #30
 1968 0e1b B8 0A                   		movw	[sp+10], ax
 1969 0e1d 30 1F 00                		movw	ax, #31
 1970 0e20 B8 0C                   		movw	[sp+12], ax
 1971 0e22 30 1F 00                		movw	ax, #31
 1972 0e25 B8 0E                   		movw	[sp+14], ax
 1973 0e27 30 1E 00                		movw	ax, #30
 1974 0e2a B8 10                   		movw	[sp+16], ax
 1975 0e2c 30 1F 00                		movw	ax, #31
 1976 0e2f B8 12                   		movw	[sp+18], ax
 1977 0e31 30 1E 00                		movw	ax, #30
 1978 0e34 B8 14                   		movw	[sp+20], ax
 1979 0e36 30 1F 00                		movw	ax, #31
 1980 0e39 B8 16                   		movw	[sp+22], ax
 409:../src/user_functions.c **** 
 410:../src/user_functions.c **** 	if(arr[1] > 12 || arr[1] == 0){
 1981                             		.loc 1 410 0
 1982 0e3b A8 1C                   		movw	ax, [sp+28]
 1983 0e3d A1                      		incw	ax
 1984 0e3e BD F0                   		movw	r8, ax
 1985 0e40 BD F2                   		movw	r10, ax
 1986 0e42 FA F2                   		movw	hl, r10
 1987 0e44 8B                      		mov	a, [hl]
 1988 0e45 9D F0                   		mov	r8, a
 1989 0e47 4A F0 0C                		cmp	r8, #12
 1990 0e4a 61 F3                   		 sknh
 1991 0e4c EC 64 0E 00             		 br	!!.L67
 1992                             		.loc 1 410 0 is_stmt 0 discriminator 1
 1993 0e50 A8 1C                   		movw	ax, [sp+28]
 1994 0e52 A1                      		incw	ax
 1995 0e53 BD F0                   		movw	r8, ax
 1996 0e55 BD F4                   		movw	r12, ax
 1997 0e57 FA F4                   		movw	hl, r12
 1998 0e59 8B                      		mov	a, [hl]
 1999 0e5a 9D F0                   		mov	r8, a
 2000 0e5c D4 F0                   		cmp0	r8
 2001 0e5e 61 E8                   		 skz
 2002 0e60 EC 6A 0E 00             		 br	!!.L68
 2003                             	.L67:
 411:../src/user_functions.c **** 		return 0;
 2004                             		.loc 1 411 0 is_stmt 1
 2005 0e64 F4 F0                   		clrb	r8
 2006 0e66 EC 32 0F 00             		br	!!.L75
 2007                             	.L68:
 412:../src/user_functions.c **** 	}
 413:../src/user_functions.c **** 	else if(arr[2] > daysInMonth[arr[1]] || arr[2] == 0){
 2008                             		.loc 1 413 0
 2009 0e6a A8 1C                   		movw	ax, [sp+28]
 2010 0e6c 04 02 00                		addw	ax, #2
 2011 0e6f BD F0                   		movw	r8, ax
 2012 0e71 BD F2                   		movw	r10, ax
 2013 0e73 FA F2                   		movw	hl, r10
 2014 0e75 8B                      		mov	a, [hl]
 2015 0e76 9D F0                   		mov	r8, a
 2016 0e78 70                      		mov	x, a 
 2017 0e79 51 00                   		mov	a, #0
 2018 0e7b BD F2                   		movw	r10, ax
 2019 0e7d A8 1C                   		movw	ax, [sp+28]
 2020 0e7f A1                      		incw	ax
 2021 0e80 BD F0                   		movw	r8, ax
 2022 0e82 BD F4                   		movw	r12, ax
 2023 0e84 FA F4                   		movw	hl, r12
 2024 0e86 8B                      		mov	a, [hl]
 2025 0e87 9D F0                   		mov	r8, a
 2026 0e89 CD F1 00                		mov	r9, #0
 2027 0e8c AD F0                   		movw	ax, r8
 2028 0e8e 01                      		addw	ax, ax
 2029 0e8f BD F0                   		movw	r8, ax
 2030 0e91 C9 F4 18 00             		movw	r12, #24
 2031 0e95 AE F8                   		movw	ax, sp
 2032 0e97 BD F4                   		movw	r12, ax
 2033 0e99 04 18 00                		addw	ax, #24
 2034 0e9c BD F4                   		movw	r12, ax
 2035 0e9e 06 F0                   		addw	ax, r8
 2036 0ea0 BD F0                   		movw	r8, ax
 2037 0ea2 04 E8 FF                		addw	ax, #-24
 2038 0ea5 BD F0                   		movw	r8, ax
 2039 0ea7 BD F4                   		movw	r12, ax
 2040 0ea9 FA F4                   		movw	hl, r12
 2041 0eab AB                      		movw	ax, [hl]
 2042 0eac BD F0                   		movw	r8, ax
 2043 0eae AD F2                   		movw	ax, r10
 2044 0eb0 46 F0                   		cmpw	ax, r8
 2045 0eb2 71 FF                   		 xor1	CY, a.7
 2046 0eb4 71 77 F1                		 xor1	CY, r9.7
 2047 0eb7 61 F3                   		 sknh
 2048 0eb9 EC D3 0E 00             		 br	!!.L70
 2049                             		.loc 1 413 0 is_stmt 0 discriminator 1
 2050 0ebd A8 1C                   		movw	ax, [sp+28]
 2051 0ebf 04 02 00                		addw	ax, #2
 2052 0ec2 BD F0                   		movw	r8, ax
 2053 0ec4 BD F2                   		movw	r10, ax
 2054 0ec6 FA F2                   		movw	hl, r10
 2055 0ec8 8B                      		mov	a, [hl]
 2056 0ec9 9D F0                   		mov	r8, a
 2057 0ecb D4 F0                   		cmp0	r8
 2058 0ecd 61 E8                   		 skz
 2059 0ecf EC D9 0E 00             		 br	!!.L71
 2060                             	.L70:
 414:../src/user_functions.c **** 		return 0;
 2061                             		.loc 1 414 0 is_stmt 1
 2062 0ed3 F4 F0                   		clrb	r8
 2063 0ed5 EC 32 0F 00             		br	!!.L75
 2064                             	.L71:
 415:../src/user_functions.c **** 	}
 416:../src/user_functions.c **** 	else if(arr[3] > 23){
 2065                             		.loc 1 416 0
 2066 0ed9 A8 1C                   		movw	ax, [sp+28]
 2067 0edb 04 03 00                		addw	ax, #3
 2068 0ede BD F0                   		movw	r8, ax
 2069 0ee0 BD F4                   		movw	r12, ax
 2070 0ee2 FA F4                   		movw	hl, r12
 2071 0ee4 8B                      		mov	a, [hl]
 2072 0ee5 9D F0                   		mov	r8, a
 2073 0ee7 4A F0 17                		cmp	r8, #23
 2074 0eea 61 E3                   		 skh
 2075 0eec EC F6 0E 00             		 br	!!.L72
 417:../src/user_functions.c **** 		return 0;
 2076                             		.loc 1 417 0
 2077 0ef0 F4 F0                   		clrb	r8
 2078 0ef2 EC 32 0F 00             		br	!!.L75
 2079                             	.L72:
 418:../src/user_functions.c **** 	}
 419:../src/user_functions.c **** 	else if(arr[4] > 59){
 2080                             		.loc 1 419 0
 2081 0ef6 A8 1C                   		movw	ax, [sp+28]
 2082 0ef8 04 04 00                		addw	ax, #4
 2083 0efb BD F0                   		movw	r8, ax
 2084 0efd BD F2                   		movw	r10, ax
 2085 0eff FA F2                   		movw	hl, r10
 2086 0f01 8B                      		mov	a, [hl]
 2087 0f02 9D F0                   		mov	r8, a
 2088 0f04 4A F0 3B                		cmp	r8, #59
 2089 0f07 61 E3                   		 skh
 2090 0f09 EC 13 0F 00             		 br	!!.L73
 420:../src/user_functions.c **** 		return 0;
 2091                             		.loc 1 420 0
 2092 0f0d F4 F0                   		clrb	r8
 2093 0f0f EC 32 0F 00             		br	!!.L75
 2094                             	.L73:
 421:../src/user_functions.c **** 	}
 422:../src/user_functions.c **** 	else if(arr[5] > 59){
 2095                             		.loc 1 422 0
 2096 0f13 A8 1C                   		movw	ax, [sp+28]
 2097 0f15 04 05 00                		addw	ax, #5
 2098 0f18 BD F0                   		movw	r8, ax
 2099 0f1a BD F4                   		movw	r12, ax
 2100 0f1c FA F4                   		movw	hl, r12
 2101 0f1e 8B                      		mov	a, [hl]
 2102 0f1f 9D F0                   		mov	r8, a
 2103 0f21 4A F0 3B                		cmp	r8, #59
 2104 0f24 61 E3                   		 skh
 2105 0f26 EC 30 0F 00             		 br	!!.L74
 423:../src/user_functions.c **** 		return 0;
 2106                             		.loc 1 423 0
 2107 0f2a F4 F0                   		clrb	r8
 2108 0f2c EC 32 0F 00             		br	!!.L75
 2109                             	.L74:
 424:../src/user_functions.c **** 	}
 425:../src/user_functions.c **** 	else{
 426:../src/user_functions.c **** 		return 1;
 2110                             		.loc 1 426 0
 2111 0f30 E4 F0                   		oneb	r8
 2112                             	.L75:
 427:../src/user_functions.c **** 
 428:../src/user_functions.c **** 	}
 429:../src/user_functions.c **** 
 430:../src/user_functions.c **** }
 2113                             		.loc 1 430 0 discriminator 1
 2114 0f32 10 18                   		addw	sp, #24
 2115 0f34 D7                      		ret
 2116                             	.LFE8:
 2118                             		.global	_checkFlags
 2120                             	_checkFlags:
 2121                             	.LFB9:
 431:../src/user_functions.c **** 
 432:../src/user_functions.c **** void checkFlags(){
 2122                             		.loc 1 432 0
 2123                             		; start of function
 2124                             		; outgoing: 2 bytes
 2125 0f35 20 02                   		subw	sp, #2
 2126                             	.LCFI13:
 433:../src/user_functions.c **** 	 if(scrollFlag){
 2127                             		.loc 1 433 0
 2128 0f37 8F 00 00                		mov	a, !_scrollFlag
 2129 0f3a 9D F0                   		mov	r8, a
 2130 0f3c D4 F0                   		cmp0	r8
 2131 0f3e 61 F8                   		 sknz
 2132 0f40 EC 4E 0F 00             		 br	!!.L77
 434:../src/user_functions.c **** 		 scrollFlag = 0;
 2133                             		.loc 1 434 0
 2134 0f44 F5 00 00                		clrb	!_scrollFlag
 435:../src/user_functions.c **** 		 displayLCD(0);
 2135                             		.loc 1 435 0
 2136 0f47 F6                      		clrw	ax
 2137 0f48 B8 00                   		movw	[sp], ax
 2138 0f4a FC 00 00 00             		call	!!%code(_displayLCD)
 2139                             	.L77:
 436:../src/user_functions.c **** 	 }
 437:../src/user_functions.c **** 	 if(tempFlag){
 2140                             		.loc 1 437 0
 2141 0f4e 8F 00 00                		mov	a, !_tempFlag
 2142 0f51 9D F0                   		mov	r8, a
 2143 0f53 D4 F0                   		cmp0	r8
 2144 0f55 61 F8                   		 sknz
 2145 0f57 EC B4 0F 00             		 br	!!.L76
 438:../src/user_functions.c **** 		 tempFlag = 0;
 2146                             		.loc 1 438 0
 2147 0f5b F5 00 00                		clrb	!_tempFlag
 439:../src/user_functions.c **** 		 P1_bit.no7 = !P1_bit.no7;
 2148                             		.loc 1 439 0
 2149 0f5e C9 F0 01 FF             		movw	r8, #-255
 2150 0f62 C9 F2 01 FF             		movw	r10, #-255
 2151 0f66 AD F2                   		movw	ax, r10
 2152 0f68 BD F4                   		movw	r12, ax
 2153 0f6a FA F4                   		movw	hl, r12
 2154 0f6c 8B                      		mov	a, [hl]
 2155 0f6d 9D F2                   		mov	r10, a
 2156 0f6f 31 7A                   		shr	a, 7
 2157 0f71 9D F2                   		mov	r10, a
 2158 0f73 7A F2 01                		xor	r10, #1
 2159 0f76 8D F2                   		mov	a, r10
 2160 0f78 31 79                   		shl	a, 7
 2161 0f7a 9D F2                   		mov	r10, a
 2162 0f7c AD F0                   		movw	ax, r8
 2163 0f7e BD F4                   		movw	r12, ax
 2164 0f80 FA F4                   		movw	hl, r12
 2165 0f82 8B                      		mov	a, [hl]
 2166 0f83 9D F3                   		mov	r11, a
 2167 0f85 5A F3 7F                		and	r11, #127
 2168 0f88 8D F3                   		mov	a, r11
 2169 0f8a 6B F2                   		or	a, r10
 2170 0f8c 9D F2                   		mov	r10, a
 2171 0f8e AD F0                   		movw	ax, r8
 2172 0f90 DA F4                   		movw	bc, r12
 2173 0f92 8D F2                   		mov	a, r10
 2174 0f94 48 00 00                		mov	[bc], a
 440:../src/user_functions.c **** 
 441:../src/user_functions.c **** 		 if(!P1_bit.no7){
 2175                             		.loc 1 441 0
 2176 0f97 C9 F0 01 FF             		movw	r8, #-255
 2177 0f9b AD F0                   		movw	ax, r8
 2178 0f9d BD F2                   		movw	r10, ax
 2179 0f9f FA F2                   		movw	hl, r10
 2180 0fa1 8B                      		mov	a, [hl]
 2181 0fa2 9D F0                   		mov	r8, a
 2182 0fa4 31 7A                   		shr	a, 7
 2183 0fa6 9D F0                   		mov	r8, a
 2184 0fa8 D4 F0                   		cmp0	r8
 2185 0faa 61 E8                   		 skz
 2186 0fac EC B4 0F 00             		 br	!!.L76
 442:../src/user_functions.c **** 			 setTemp();
 2187                             		.loc 1 442 0
 2188 0fb0 FC 00 00 00             		call	!!%code(_setTemp)
 2189                             	.L76:
 443:../src/user_functions.c **** 		 }
 444:../src/user_functions.c **** 	 }
 445:../src/user_functions.c **** }
 2190                             		.loc 1 445 0
 2191 0fb4 10 02                   		addw	sp, #2
 2192 0fb6 D7                      		ret
 2193                             	.LFE9:
 2195                             		.global	_setTemp
 2197                             	_setTemp:
 2198                             	.LFB10:
 446:../src/user_functions.c **** 
 447:../src/user_functions.c **** void setTemp(){
 2199                             		.loc 1 447 0
 2200                             		; start of function
 2201                             		; locals: 2 bytes
 2202 0fb7 20 02                   		subw	sp, #2
 2203                             	.LCFI14:
 448:../src/user_functions.c **** 	uint16_t temp = 4096 - TCR01;
 2204                             		.loc 1 448 0
 2205 0fb9 C9 F0 82 01             		movw	r8, #386
 2206 0fbd AD F0                   		movw	ax, r8
 2207 0fbf BD F2                   		movw	r10, ax
 2208 0fc1 FA F2                   		movw	hl, r10
 2209 0fc3 AB                      		movw	ax, [hl]
 2210 0fc4 BD F0                   		movw	r8, ax
 2211 0fc6 30 00 10                		movw	ax, #4096
 2212 0fc9 26 F0                   		subw	ax, r8
 2213 0fcb B8 00                   		movw	[sp], ax
 449:../src/user_functions.c **** 	finalTemp = temp/16;
 2214                             		.loc 1 449 0
 2215 0fcd BD F0                   		movw	r8, ax
 2216 0fcf 31 4E                   		shrw	ax, 4
 2217 0fd1 BD F0                   		movw	r8, ax
 2218 0fd3 BF 04 00                		movw	!_finalTemp, ax
 450:../src/user_functions.c **** 	finalTemp -= 50;
 2219                             		.loc 1 450 0
 2220 0fd6 BD F0                   		movw	r8, ax
 2221 0fd8 04 CE FF                		addw	ax, #-50
 2222 0fdb BD F0                   		movw	r8, ax
 2223 0fdd BF 04 00                		movw	!_finalTemp, ax
 451:../src/user_functions.c **** 	R_TAU0_Channel1_Stop();
 2224                             		.loc 1 451 0
 2225 0fe0 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Stop)
 452:../src/user_functions.c **** 	R_TAU0_Channel1_Start();
 2226                             		.loc 1 452 0
 2227 0fe4 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Start)
 453:../src/user_functions.c **** 
 454:../src/user_functions.c **** }
 2228                             		.loc 1 454 0
 2229 0fe8 10 02                   		addw	sp, #2
 2230 0fea D7                      		ret
 2231                             	.LFE10:
 2233                             		.global	_write
 2235                             	_write:
 2236                             	.LFB11:
 455:../src/user_functions.c **** 
 456:../src/user_functions.c **** void write(){
 2237                             		.loc 1 456 0
 2238                             		; start of function
 2239                             		; locals: 46 bytes
 2240                             		; outgoing: 6 bytes
 2241 0feb 20 34                   		subw	sp, #52
 2242                             	.LCFI15:
 457:../src/user_functions.c **** 	uint8_t send[35];
 458:../src/user_functions.c **** 	uint8_t recieve[10];
 459:../src/user_functions.c **** 
 460:../src/user_functions.c **** 
 461:../src/user_functions.c **** 	 send[0] = 6;
 2243                             		.loc 1 461 0
 2244 0fed 51 06                   		mov	a, #6
 2245 0fef 98 11                   		mov	[sp+17], a
 462:../src/user_functions.c **** 
 463:../src/user_functions.c **** 	 P1_bit.no5 = 0;
 2246                             		.loc 1 463 0
 2247 0ff1 C9 F0 01 FF             		movw	r8, #-255
 2248 0ff5 AD F0                   		movw	ax, r8
 2249 0ff7 BD F4                   		movw	r12, ax
 2250 0ff9 FA F4                   		movw	hl, r12
 2251 0ffb 8B                      		mov	a, [hl]
 2252 0ffc 9D F2                   		mov	r10, a
 2253 0ffe 5A F2 DF                		and	r10, #-33
 2254 1001 AD F0                   		movw	ax, r8
 2255 1003 DA F4                   		movw	bc, r12
 2256 1005 8D F2                   		mov	a, r10
 2257 1007 48 00 00                		mov	[bc], a
 464:../src/user_functions.c **** 	 R_CSI00_Send_Receive(send, 1, recieve);
 2258                             		.loc 1 464 0
 2259 100a C9 F0 34 00             		movw	r8, #52
 2260 100e AE F8                   		movw	ax, sp
 2261 1010 BD F0                   		movw	r8, ax
 2262 1012 04 34 00                		addw	ax, #52
 2263 1015 BD F0                   		movw	r8, ax
 2264 1017 04 DD FF                		addw	ax, #-35
 2265 101a B8 00                   		movw	[sp], ax
 2266 101c E6                      		onew	ax
 2267 101d B8 02                   		movw	[sp+2], ax
 2268 101f C9 F4 34 00             		movw	r12, #52
 2269 1023 AE F8                   		movw	ax, sp
 2270 1025 BD F4                   		movw	r12, ax
 2271 1027 04 34 00                		addw	ax, #52
 2272 102a BD F4                   		movw	r12, ax
 2273 102c 04 D3 FF                		addw	ax, #-45
 2274 102f B8 04                   		movw	[sp+4], ax
 2275 1031 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 465:../src/user_functions.c **** 
 466:../src/user_functions.c **** 	 while(recieveflag){
 2276                             		.loc 1 466 0
 2277 1035 00                      		nop
 2278                             	.L81:
 2279                             		.loc 1 466 0 is_stmt 0 discriminator 1
 2280 1036 8F 00 00                		mov	a, !_recieveflag
 2281 1039 9D F0                   		mov	r8, a
 2282 103b D4 F0                   		cmp0	r8
 2283 103d 61 E8                   		 skz
 2284 103f EC 36 10 00             		 br	!!.L81
 467:../src/user_functions.c **** 	 }
 468:../src/user_functions.c **** 	 sendflag = 1;
 2285                             		.loc 1 468 0 is_stmt 1
 2286 1043 E5 00 00                		oneb	!_sendflag
 469:../src/user_functions.c **** 	 recieveflag = 1;
 2287                             		.loc 1 469 0
 2288 1046 E5 00 00                		oneb	!_recieveflag
 470:../src/user_functions.c **** 	 P1_bit.no5 = 1;
 2289                             		.loc 1 470 0
 2290 1049 C9 F0 01 FF             		movw	r8, #-255
 2291 104d AD F0                   		movw	ax, r8
 2292 104f BD F4                   		movw	r12, ax
 2293 1051 FA F4                   		movw	hl, r12
 2294 1053 8B                      		mov	a, [hl]
 2295 1054 9D F2                   		mov	r10, a
 2296 1056 6A F2 20                		or	r10, #32
 2297 1059 AD F0                   		movw	ax, r8
 2298 105b DA F4                   		movw	bc, r12
 2299 105d 8D F2                   		mov	a, r10
 2300 105f 48 00 00                		mov	[bc], a
 471:../src/user_functions.c **** 	 delayNoInt(100);
 2301                             		.loc 1 471 0
 2302 1062 30 64 00                		movw	ax, #100
 2303 1065 B8 00                   		movw	[sp], ax
 2304 1067 FC 00 00 00             		call	!!%code(_delayNoInt)
 472:../src/user_functions.c **** 
 473:../src/user_functions.c **** 	 send[0] = 2;
 2305                             		.loc 1 473 0
 2306 106b 51 02                   		mov	a, #2
 2307 106d 98 11                   		mov	[sp+17], a
 474:../src/user_functions.c **** 	 send[1] = 0;
 2308                             		.loc 1 474 0
 2309 106f F1                      		clrb	a
 2310 1070 98 12                   		mov	[sp+18], a
 475:../src/user_functions.c **** 	 send[2] = 0;
 2311                             		.loc 1 475 0
 2312 1072 F1                      		clrb	a
 2313 1073 98 13                   		mov	[sp+19], a
 476:../src/user_functions.c **** 	 send[3] = 'I';
 2314                             		.loc 1 476 0
 2315 1075 51 49                   		mov	a, #73
 2316 1077 98 14                   		mov	[sp+20], a
 477:../src/user_functions.c **** 
 478:../src/user_functions.c **** 	 P1_bit.no5 = 0;
 2317                             		.loc 1 478 0
 2318 1079 C9 F0 01 FF             		movw	r8, #-255
 2319 107d AD F0                   		movw	ax, r8
 2320 107f BD F4                   		movw	r12, ax
 2321 1081 FA F4                   		movw	hl, r12
 2322 1083 8B                      		mov	a, [hl]
 2323 1084 9D F2                   		mov	r10, a
 2324 1086 5A F2 DF                		and	r10, #-33
 2325 1089 AD F0                   		movw	ax, r8
 2326 108b DA F4                   		movw	bc, r12
 2327 108d 8D F2                   		mov	a, r10
 2328 108f 48 00 00                		mov	[bc], a
 479:../src/user_functions.c **** 	 R_CSI00_Send_Receive(send, 4, recieve);
 2329                             		.loc 1 479 0
 2330 1092 C9 F0 34 00             		movw	r8, #52
 2331 1096 AE F8                   		movw	ax, sp
 2332 1098 BD F0                   		movw	r8, ax
 2333 109a 04 34 00                		addw	ax, #52
 2334 109d BD F0                   		movw	r8, ax
 2335 109f 04 DD FF                		addw	ax, #-35
 2336 10a2 B8 00                   		movw	[sp], ax
 2337 10a4 30 04 00                		movw	ax, #4
 2338 10a7 B8 02                   		movw	[sp+2], ax
 2339 10a9 C9 F4 34 00             		movw	r12, #52
 2340 10ad AE F8                   		movw	ax, sp
 2341 10af BD F4                   		movw	r12, ax
 2342 10b1 04 34 00                		addw	ax, #52
 2343 10b4 BD F4                   		movw	r12, ax
 2344 10b6 04 D3 FF                		addw	ax, #-45
 2345 10b9 B8 04                   		movw	[sp+4], ax
 2346 10bb FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 480:../src/user_functions.c **** 
 481:../src/user_functions.c **** 	 while(recieveflag){
 2347                             		.loc 1 481 0
 2348 10bf 00                      		nop
 2349                             	.L82:
 2350                             		.loc 1 481 0 is_stmt 0 discriminator 1
 2351 10c0 8F 00 00                		mov	a, !_recieveflag
 2352 10c3 9D F0                   		mov	r8, a
 2353 10c5 D4 F0                   		cmp0	r8
 2354 10c7 61 E8                   		 skz
 2355 10c9 EC C0 10 00             		 br	!!.L82
 482:../src/user_functions.c **** 	 }
 483:../src/user_functions.c **** 	 sendflag = 1;
 2356                             		.loc 1 483 0 is_stmt 1
 2357 10cd E5 00 00                		oneb	!_sendflag
 484:../src/user_functions.c **** 	 recieveflag = 1;
 2358                             		.loc 1 484 0
 2359 10d0 E5 00 00                		oneb	!_recieveflag
 485:../src/user_functions.c **** 	 P1_bit.no5 = 1;
 2360                             		.loc 1 485 0
 2361 10d3 C9 F0 01 FF             		movw	r8, #-255
 2362 10d7 AD F0                   		movw	ax, r8
 2363 10d9 BD F4                   		movw	r12, ax
 2364 10db FA F4                   		movw	hl, r12
 2365 10dd 8B                      		mov	a, [hl]
 2366 10de 9D F2                   		mov	r10, a
 2367 10e0 6A F2 20                		or	r10, #32
 2368 10e3 AD F0                   		movw	ax, r8
 2369 10e5 DA F4                   		movw	bc, r12
 2370 10e7 8D F2                   		mov	a, r10
 2371 10e9 48 00 00                		mov	[bc], a
 486:../src/user_functions.c **** 	 delayNoInt(100);
 2372                             		.loc 1 486 0
 2373 10ec 30 64 00                		movw	ax, #100
 2374 10ef B8 00                   		movw	[sp], ax
 2375 10f1 FC 00 00 00             		call	!!%code(_delayNoInt)
 487:../src/user_functions.c **** 
 488:../src/user_functions.c **** 	 send[0] = 4;
 2376                             		.loc 1 488 0
 2377 10f5 51 04                   		mov	a, #4
 2378 10f7 98 11                   		mov	[sp+17], a
 489:../src/user_functions.c **** 
 490:../src/user_functions.c **** 	 P1_bit.no5 = 0;
 2379                             		.loc 1 490 0
 2380 10f9 C9 F0 01 FF             		movw	r8, #-255
 2381 10fd AD F0                   		movw	ax, r8
 2382 10ff BD F4                   		movw	r12, ax
 2383 1101 FA F4                   		movw	hl, r12
 2384 1103 8B                      		mov	a, [hl]
 2385 1104 9D F2                   		mov	r10, a
 2386 1106 5A F2 DF                		and	r10, #-33
 2387 1109 AD F0                   		movw	ax, r8
 2388 110b DA F4                   		movw	bc, r12
 2389 110d 8D F2                   		mov	a, r10
 2390 110f 48 00 00                		mov	[bc], a
 491:../src/user_functions.c **** 	 R_CSI00_Send_Receive(send, 1, recieve);
 2391                             		.loc 1 491 0
 2392 1112 C9 F0 34 00             		movw	r8, #52
 2393 1116 AE F8                   		movw	ax, sp
 2394 1118 BD F0                   		movw	r8, ax
 2395 111a 04 34 00                		addw	ax, #52
 2396 111d BD F0                   		movw	r8, ax
 2397 111f 04 DD FF                		addw	ax, #-35
 2398 1122 B8 00                   		movw	[sp], ax
 2399 1124 E6                      		onew	ax
 2400 1125 B8 02                   		movw	[sp+2], ax
 2401 1127 C9 F4 34 00             		movw	r12, #52
 2402 112b AE F8                   		movw	ax, sp
 2403 112d BD F4                   		movw	r12, ax
 2404 112f 04 34 00                		addw	ax, #52
 2405 1132 BD F4                   		movw	r12, ax
 2406 1134 04 D3 FF                		addw	ax, #-45
 2407 1137 B8 04                   		movw	[sp+4], ax
 2408 1139 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 492:../src/user_functions.c **** 
 493:../src/user_functions.c **** 	 while(recieveflag){
 2409                             		.loc 1 493 0
 2410 113d 00                      		nop
 2411                             	.L83:
 2412                             		.loc 1 493 0 is_stmt 0 discriminator 1
 2413 113e 8F 00 00                		mov	a, !_recieveflag
 2414 1141 9D F0                   		mov	r8, a
 2415 1143 D4 F0                   		cmp0	r8
 2416 1145 61 E8                   		 skz
 2417 1147 EC 3E 11 00             		 br	!!.L83
 494:../src/user_functions.c **** 	 }
 495:../src/user_functions.c **** 	 sendflag = 1;
 2418                             		.loc 1 495 0 is_stmt 1
 2419 114b E5 00 00                		oneb	!_sendflag
 496:../src/user_functions.c **** 	 recieveflag = 1;
 2420                             		.loc 1 496 0
 2421 114e E5 00 00                		oneb	!_recieveflag
 497:../src/user_functions.c **** 	 P1_bit.no5 = 1;
 2422                             		.loc 1 497 0
 2423 1151 C9 F0 01 FF             		movw	r8, #-255
 2424 1155 AD F0                   		movw	ax, r8
 2425 1157 BD F4                   		movw	r12, ax
 2426 1159 FA F4                   		movw	hl, r12
 2427 115b 8B                      		mov	a, [hl]
 2428 115c 9D F2                   		mov	r10, a
 2429 115e 6A F2 20                		or	r10, #32
 2430 1161 AD F0                   		movw	ax, r8
 2431 1163 DA F4                   		movw	bc, r12
 2432 1165 8D F2                   		mov	a, r10
 2433 1167 48 00 00                		mov	[bc], a
 498:../src/user_functions.c **** 	 delayNoInt(100);
 2434                             		.loc 1 498 0
 2435 116a 30 64 00                		movw	ax, #100
 2436 116d B8 00                   		movw	[sp], ax
 2437 116f FC 00 00 00             		call	!!%code(_delayNoInt)
 499:../src/user_functions.c **** 
 500:../src/user_functions.c **** 	strcpy(response, "$X\x0d\x0a"); count = 4;
 2438                             		.loc 1 500 0
 2439 1173 51 24                   		mov	a, #36
 2440 1175 9F 06 00                		mov	!_response, a
 2441 1178 51 58                   		mov	a, #88
 2442 117a 9F 07 00                		mov	!_response+1, a
 2443 117d 51 0D                   		mov	a, #13
 2444 117f 9F 08 00                		mov	!_response+2, a
 2445 1182 51 0A                   		mov	a, #10
 2446 1184 9F 09 00                		mov	!_response+3, a
 2447 1187 F5 0A 00                		clrb	!_response+4
 2448 118a 30 04 00                		movw	ax, #4
 2449 118d BF 00 00                		movw	!_count, ax
 501:../src/user_functions.c **** }
 2450                             		.loc 1 501 0
 2451 1190 10 34                   		addw	sp, #52
 2452 1192 D7                      		ret
 2453                             	.LFE11:
 2455                             		.section	.rodata
 2456                             	.LC5:
 2457 0045 25 63 00                		.string	"%c"
 2458                             	.text
 2459                             		.global	_read
 2461                             	_read:
 2462                             	.LFB12:
 502:../src/user_functions.c **** void read(){
 2463                             		.loc 1 502 0
 2464                             		; start of function
 2465                             		; locals: 46 bytes
 2466                             		; outgoing: 6 bytes
 2467 1193 20 34                   		subw	sp, #52
 2468                             	.LCFI16:
 503:../src/user_functions.c **** 	uint8_t send[10];
 504:../src/user_functions.c **** 	uint8_t recieve[35];
 505:../src/user_functions.c **** 
 506:../src/user_functions.c **** 	send[0] = 3;
 2469                             		.loc 1 506 0
 2470 1195 51 03                   		mov	a, #3
 2471 1197 98 2A                   		mov	[sp+42], a
 507:../src/user_functions.c **** 	send[1] = 0;
 2472                             		.loc 1 507 0
 2473 1199 F1                      		clrb	a
 2474 119a 98 2B                   		mov	[sp+43], a
 508:../src/user_functions.c **** 	send[2] = 0;
 2475                             		.loc 1 508 0
 2476 119c F1                      		clrb	a
 2477 119d 98 2C                   		mov	[sp+44], a
 509:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2478                             		.loc 1 509 0
 2479 119f C9 F0 01 FF             		movw	r8, #-255
 2480 11a3 AD F0                   		movw	ax, r8
 2481 11a5 BD F4                   		movw	r12, ax
 2482 11a7 FA F4                   		movw	hl, r12
 2483 11a9 8B                      		mov	a, [hl]
 2484 11aa 9D F2                   		mov	r10, a
 2485 11ac 5A F2 DF                		and	r10, #-33
 2486 11af AD F0                   		movw	ax, r8
 2487 11b1 DA F4                   		movw	bc, r12
 2488 11b3 8D F2                   		mov	a, r10
 2489 11b5 48 00 00                		mov	[bc], a
 510:../src/user_functions.c **** 	recieveflag = 1;
 2490                             		.loc 1 510 0
 2491 11b8 E5 00 00                		oneb	!_recieveflag
 511:../src/user_functions.c **** 	sendflag = 1;
 2492                             		.loc 1 511 0
 2493 11bb E5 00 00                		oneb	!_sendflag
 512:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 4, recieve);
 2494                             		.loc 1 512 0
 2495 11be C9 F0 34 00             		movw	r8, #52
 2496 11c2 AE F8                   		movw	ax, sp
 2497 11c4 BD F0                   		movw	r8, ax
 2498 11c6 04 34 00                		addw	ax, #52
 2499 11c9 BD F0                   		movw	r8, ax
 2500 11cb 04 F6 FF                		addw	ax, #-10
 2501 11ce B8 00                   		movw	[sp], ax
 2502 11d0 30 04 00                		movw	ax, #4
 2503 11d3 B8 02                   		movw	[sp+2], ax
 2504 11d5 C9 F4 34 00             		movw	r12, #52
 2505 11d9 AE F8                   		movw	ax, sp
 2506 11db BD F4                   		movw	r12, ax
 2507 11dd 04 34 00                		addw	ax, #52
 2508 11e0 BD F4                   		movw	r12, ax
 2509 11e2 04 D3 FF                		addw	ax, #-45
 2510 11e5 B8 04                   		movw	[sp+4], ax
 2511 11e7 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 513:../src/user_functions.c **** 
 514:../src/user_functions.c **** 	while(recieveflag || sendflag){
 2512                             		.loc 1 514 0
 2513 11eb 00                      		nop
 2514                             	.L85:
 2515                             		.loc 1 514 0 is_stmt 0 discriminator 3
 2516 11ec 8F 00 00                		mov	a, !_recieveflag
 2517 11ef 9D F0                   		mov	r8, a
 2518 11f1 D4 F0                   		cmp0	r8
 2519 11f3 61 E8                   		 skz
 2520 11f5 EC EC 11 00             		 br	!!.L85
 2521                             		.loc 1 514 0 discriminator 2
 2522 11f9 8F 00 00                		mov	a, !_sendflag
 2523 11fc 9D F0                   		mov	r8, a
 2524 11fe D4 F0                   		cmp0	r8
 2525 1200 61 E8                   		 skz
 2526 1202 EC EC 11 00             		 br	!!.L85
 515:../src/user_functions.c **** 	}
 516:../src/user_functions.c **** 	recieveflag = 1;
 2527                             		.loc 1 516 0 is_stmt 1
 2528 1206 E5 00 00                		oneb	!_recieveflag
 517:../src/user_functions.c **** 	sendflag = 1;
 2529                             		.loc 1 517 0
 2530 1209 E5 00 00                		oneb	!_sendflag
 518:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2531                             		.loc 1 518 0
 2532 120c C9 F0 01 FF             		movw	r8, #-255
 2533 1210 AD F0                   		movw	ax, r8
 2534 1212 BD F4                   		movw	r12, ax
 2535 1214 FA F4                   		movw	hl, r12
 2536 1216 8B                      		mov	a, [hl]
 2537 1217 9D F2                   		mov	r10, a
 2538 1219 6A F2 20                		or	r10, #32
 2539 121c AD F0                   		movw	ax, r8
 2540 121e DA F4                   		movw	bc, r12
 2541 1220 8D F2                   		mov	a, r10
 2542 1222 48 00 00                		mov	[bc], a
 519:../src/user_functions.c **** 	count = 1;
 2543                             		.loc 1 519 0
 2544 1225 E6                      		onew	ax
 2545 1226 BF 00 00                		movw	!_count, ax
 520:../src/user_functions.c **** 	sprintf(response, "%c", recieve[3]);
 2546                             		.loc 1 520 0
 2547 1229 88 0A                   		mov	a, [sp+10]
 2548 122b 9D F0                   		mov	r8, a
 2549 122d CD F1 00                		mov	r9, #0
 2550 1230 30 06 00                		movw	ax, #_response
 2551 1233 B8 00                   		movw	[sp], ax
 2552 1235 30 45 00                		movw	ax, #.LC5
 2553 1238 B8 02                   		movw	[sp+2], ax
 2554 123a AD F0                   		movw	ax, r8
 2555 123c B8 04                   		movw	[sp+4], ax
 2556 123e FC 00 00 00             		call	!!%code(_sprintf)
 521:../src/user_functions.c **** }
 2557                             		.loc 1 521 0
 2558 1242 10 34                   		addw	sp, #52
 2559 1244 D7                      		ret
 2560                             	.LFE12:
 2752                             	.Letext0:
 2753                             		.file 2 "../src/iodefine.h"
 2754                             		.file 3 "../src/r_cg_macrodriver.h"
 2755                             		.file 4 "../src/r_cg_rtc.h"
 2756                             		.file 5 "../src/globals.h"
