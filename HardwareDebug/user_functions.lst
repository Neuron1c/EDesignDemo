   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_timerFlag,2,2
  31                             		.comm	_count,2,2
  32                             		.comm	_interval_timer_count,2,2
  33                             		.local	_response
  34                             		.comm	_response,50,1
  35                             		.local	_mode
  36                             		.comm	_mode,2,2
  37                             		.local	_display
  38                             		.comm	_display,2,2
  39                             		.local	_offset
  40                             		.comm	_offset,2,2
  41                             		.global	_D
  42                             	.bss
  43                             		.balign 2
  46                             	_D:
  47 0000 00 00                   		.zero	2
  48                             		.global	_flag
  49                             		.balign 2
  52                             	_flag:
  53 0002 00 00                   		.zero	2
  54                             		.comm	_voltage,1,1
  55                             		.comm	_current1,1,1
  56                             		.comm	_current2,1,1
  57                             		.section	.rodata
  58                             	.LC0:
  59 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  60                             	.text
  61                             		.global	_populate
  63                             	_populate:
  64                             	.LFB0:
  65                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** extern int count;
  22:../src/user_functions.c **** extern int interval_timer_count;
  23:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  24:../src/user_functions.c **** static int mode = 0;
  25:../src/user_functions.c **** static int display = 0;
  26:../src/user_functions.c **** static int offset = 0;
  27:../src/user_functions.c **** int D = 0;
  28:../src/user_functions.c **** int flag = 0;
  29:../src/user_functions.c **** uint8_t voltage, current1, current2;
  30:../src/user_functions.c **** 
  31:../src/user_functions.c **** 
  32:../src/user_functions.c **** void processMSG();
  33:../src/user_functions.c **** int errorTest();
  34:../src/user_functions.c **** void displayLCD();
  35:../src/user_functions.c **** void readRTC();
  36:../src/user_functions.c **** void setRTC();
  37:../src/user_functions.c **** void getRTC();
  38:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  39:../src/user_functions.c **** void collectADC();
  40:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  41:../src/user_functions.c **** 
  42:../src/user_functions.c **** 
  43:../src/user_functions.c **** char populate(char recieved){
  66                             		.loc 1 43 0
  67                             		; start of function
  68                             		; outgoing: 4 bytes
  69 0000 20 04                   		subw	sp, #4
  70                             	.LCFI0:
  44:../src/user_functions.c **** 
  45:../src/user_functions.c **** 	if(recieved == '$'){
  71                             		.loc 1 45 0
  72 0002 88 08                   		mov	a, [sp+8]
  73 0004 4C 24                   		cmp	a, #36
  74 0006 61 E8                   		 skz
  75 0008 EC 2A 00 00             		 br	!!.L2
  46:../src/user_functions.c **** 		record[count] = recieved;
  76                             		.loc 1 46 0
  77 000c AF 00 00                		movw	ax, !_count
  78 000f BD F0                   		movw	r8, ax
  79 0011 88 08                   		mov	a, [sp+8]
  80 0013 9D F2                   		mov	r10, a
  81 0015 DA F0                   		movw	bc, r8
  82 0017 48 00 00                		mov	_record[bc], a
  47:../src/user_functions.c **** 		count++;
  83                             		.loc 1 47 0
  84 001a AF 00 00                		movw	ax, !_count
  85 001d BD F0                   		movw	r8, ax
  86 001f A6 F0                   		incw	r8
  87 0021 AD F0                   		movw	ax, r8
  88 0023 BF 00 00                		movw	!_count, ax
  89 0026 EC E3 00 00             		br	!!.L3
  90                             	.L2:
  48:../src/user_functions.c **** 	}
  49:../src/user_functions.c **** 	else if(recieved == '\x0a'){
  91                             		.loc 1 49 0
  92 002a 88 08                   		mov	a, [sp+8]
  93 002c 4C 0A                   		cmp	a, #10
  94 002e 61 E8                   		 skz
  95 0030 EC 8D 00 00             		 br	!!.L4
  50:../src/user_functions.c **** 		if(record[count - 1] == '\x0d'){
  96                             		.loc 1 50 0
  97 0034 AF 00 00                		movw	ax, !_count
  98 0037 BD F0                   		movw	r8, ax
  99 0039 B6 F0                   		decw	r8
 100 003b AD F0                   		movw	ax, r8
 101 003d 04 00 00                		addw	ax, #_record
 102 0040 16                      		movw	hl, ax
 103 0041 8B                      		mov	a, [hl]
 104 0042 9D F0                   		mov	r8, a
 105 0044 4A F0 0D                		cmp	r8, #13
 106 0047 61 E8                   		 skz
 107 0049 EC 7A 00 00             		 br	!!.L5
  51:../src/user_functions.c **** 			if(!flag){
 108                             		.loc 1 51 0
 109 004d AF 00 00                		movw	ax, !_flag
 110 0050 BD F0                   		movw	r8, ax
 111 0052 44 00 00                		cmpw	ax, #0
 112 0055 61 E8                   		 skz
 113 0057 EC 7A 00 00             		 br	!!.L5
  52:../src/user_functions.c **** 				record[count] = recieved;
 114                             		.loc 1 52 0
 115 005b AF 00 00                		movw	ax, !_count
 116 005e BD F0                   		movw	r8, ax
 117 0060 88 08                   		mov	a, [sp+8]
 118 0062 9D F2                   		mov	r10, a
 119 0064 DA F0                   		movw	bc, r8
 120 0066 48 00 00                		mov	_record[bc], a
  53:../src/user_functions.c **** 				record[count + 1] = '\0';
 121                             		.loc 1 53 0
 122 0069 AF 00 00                		movw	ax, !_count
 123 006c BD F0                   		movw	r8, ax
 124 006e A6 F0                   		incw	r8
 125 0070 DA F0                   		movw	bc, r8
 126 0072 F1                      		clrb	a
 127 0073 48 00 00                		mov	_record[bc], a
  54:../src/user_functions.c **** 				processMSG();
 128                             		.loc 1 54 0
 129 0076 FC 00 00 00             		call	!!%code(_processMSG)
 130                             	.L5:
  55:../src/user_functions.c **** 			}
  56:../src/user_functions.c **** 		}
  57:../src/user_functions.c **** 		strcpy(record,"");
 131                             		.loc 1 57 0
 132 007a F4 F0                   		clrb	r8
 133 007c 8D F0                   		mov	a, r8
 134 007e 9F 00 00                		mov	!_record, a
  58:../src/user_functions.c **** 		count = 0;
 135                             		.loc 1 58 0
 136 0081 F6                      		clrw	ax
 137 0082 BF 00 00                		movw	!_count, ax
  59:../src/user_functions.c **** 		flag = 0;
 138                             		.loc 1 59 0
 139 0085 F6                      		clrw	ax
 140 0086 BF 00 00                		movw	!_flag, ax
 141 0089 EC E3 00 00             		br	!!.L3
 142                             	.L4:
  60:../src/user_functions.c **** 	}
  61:../src/user_functions.c **** 	else if(flag){
 143                             		.loc 1 61 0
 144 008d AF 00 00                		movw	ax, !_flag
 145 0090 BD F0                   		movw	r8, ax
 146 0092 44 00 00                		cmpw	ax, #0
 147 0095 61 E8                   		 skz
 148 0097 EC E3 00 00             		 br	!!.L3
  62:../src/user_functions.c **** 
  63:../src/user_functions.c **** 	}
  64:../src/user_functions.c **** 	else if(count == 0 && recieved != '$'){
 149                             		.loc 1 64 0
 150 009b AF 00 00                		movw	ax, !_count
 151 009e BD F0                   		movw	r8, ax
 152 00a0 44 00 00                		cmpw	ax, #0
 153 00a3 61 E8                   		 skz
 154 00a5 EC C9 00 00             		 br	!!.L6
 155                             		.loc 1 64 0 is_stmt 0 discriminator 1
 156 00a9 88 08                   		mov	a, [sp+8]
 157 00ab 4C 24                   		cmp	a, #36
 158 00ad 61 F8                   		 sknz
 159 00af EC C9 00 00             		 br	!!.L6
  65:../src/user_functions.c **** 
  66:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a",7);
 160                             		.loc 1 66 0 is_stmt 1
 161 00b3 30 00 00                		movw	ax, #.LC0
 162 00b6 B8 00                   		movw	[sp], ax
 163 00b8 30 07 00                		movw	ax, #7
 164 00bb B8 02                   		movw	[sp+2], ax
 165 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  67:../src/user_functions.c **** 		flag = 1;
 166                             		.loc 1 67 0
 167 00c1 E6                      		onew	ax
 168 00c2 BF 00 00                		movw	!_flag, ax
 169 00c5 EC E3 00 00             		br	!!.L3
 170                             	.L6:
  68:../src/user_functions.c **** 	}
  69:../src/user_functions.c **** 
  70:../src/user_functions.c **** 	else{
  71:../src/user_functions.c **** 		record[count] = recieved;
 171                             		.loc 1 71 0
 172 00c9 AF 00 00                		movw	ax, !_count
 173 00cc BD F0                   		movw	r8, ax
 174 00ce 88 08                   		mov	a, [sp+8]
 175 00d0 9D F2                   		mov	r10, a
 176 00d2 DA F0                   		movw	bc, r8
 177 00d4 48 00 00                		mov	_record[bc], a
  72:../src/user_functions.c **** 		count++;
 178                             		.loc 1 72 0
 179 00d7 AF 00 00                		movw	ax, !_count
 180 00da BD F0                   		movw	r8, ax
 181 00dc A6 F0                   		incw	r8
 182 00de AD F0                   		movw	ax, r8
 183 00e0 BF 00 00                		movw	!_count, ax
 184                             	.L3:
  73:../src/user_functions.c **** 	}
  74:../src/user_functions.c **** 
  75:../src/user_functions.c **** 
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** 	return recieved;
 185                             		.loc 1 77 0
 186 00e3 88 08                   		mov	a, [sp+8]
 187 00e5 9D F0                   		mov	r8, a
  78:../src/user_functions.c **** }
 188                             		.loc 1 78 0
 189 00e7 10 04                   		addw	sp, #4
 190 00e9 D7                      		ret
 191                             	.LFE0:
 193                             		.section	.rodata
 194                             	.LC1:
 195 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,%02d,%0d\r\n"
 195      25 30 32 64 2C 25 30 64 
 195      0D 0A 00 
 196                             	.LC2:
 197 001b 24 25 63 31 0D 0A 00    		.string	"$%c1\r\n"
 198                             	.text
 199                             		.global	_processMSG
 201                             	_processMSG:
 202                             	.LFB1:
  79:../src/user_functions.c **** 
  80:../src/user_functions.c **** void processMSG(){
 203                             		.loc 1 80 0
 204                             		; start of function
 205                             		; locals: 34 bytes
 206                             		; outgoing: 10 bytes
 207 00ea 20 2C                   		subw	sp, #44
 208                             	.LCFI1:
  81:../src/user_functions.c **** 	char ack[3];
  82:../src/user_functions.c **** 	char str[30];
  83:../src/user_functions.c **** 	if(errorTest()){
 209                             		.loc 1 83 0
 210 00ec FC 00 00 00             		call	!!%code(_errorTest)
 211 00f0 AD F0                   		movw	ax, r8
 212 00f2 44 00 00                		cmpw	ax, #0
 213 00f5 61 F8                   		 sknz
 214 00f7 EC E2 06 00             		 br	!!.L9
  84:../src/user_functions.c **** 
  85:../src/user_functions.c **** 		switch(record[1]){
 215                             		.loc 1 85 0
 216 00fb 8F 00 00                		mov	a, !_record+1
 217 00fe 9D F0                   		mov	r8, a
 218 0100 CD F1 00                		mov	r9, #0
 219 0103 AD F0                   		movw	ax, r8
 220 0105 44 42 00                		cmpw	ax, #66
 221 0108 61 F8                   		 sknz
 222 010a EC B2 06 00             		 br	!!.L11
 223 010e AD F0                   		movw	ax, r8
 224 0110 44 42 00                		cmpw	ax, #66
 225 0113 71 FF                   		 xor1	CY, a.7
 226 0115 61 F3                   		 sknh
 227 0117 EC 5C 01 00             		 br	!!.L12
 228 011b AD F0                   		movw	ax, r8
 229 011d 44 31 00                		cmpw	ax, #49
 230 0120 61 F8                   		 sknz
 231 0122 EC EF 01 00             		 br	!!.L13
 232 0126 AD F0                   		movw	ax, r8
 233 0128 44 31 00                		cmpw	ax, #49
 234 012b 71 FF                   		 xor1	CY, a.7
 235 012d 61 F3                   		 sknh
 236 012f EC 42 01 00             		 br	!!.L14
 237 0133 AD F0                   		movw	ax, r8
 238 0135 44 30 00                		cmpw	ax, #48
 239 0138 61 F8                   		 sknz
 240 013a EC 8E 01 00             		 br	!!.L15
 241 013e EC C2 06 00             		br	!!.L10
 242                             	.L14:
 243 0142 AD F0                   		movw	ax, r8
 244 0144 44 32 00                		cmpw	ax, #50
 245 0147 61 F8                   		 sknz
 246 0149 EC 50 02 00             		 br	!!.L16
 247 014d AD F0                   		movw	ax, r8
 248 014f 44 33 00                		cmpw	ax, #51
 249 0152 61 F8                   		 sknz
 250 0154 EC 84 02 00             		 br	!!.L17
 251 0158 EC C2 06 00             		br	!!.L10
 252                             	.L12:
 253 015c AD F0                   		movw	ax, r8
 254 015e 44 44 00                		cmpw	ax, #68
 255 0161 61 F8                   		 sknz
 256 0163 EC D2 02 00             		 br	!!.L18
 257 0167 AD F0                   		movw	ax, r8
 258 0169 44 44 00                		cmpw	ax, #68
 259 016c 71 FF                   		 xor1	CY, a.7
 260 016e 61 D8                   		 sknc
 261 0170 EC BA 06 00             		 br	!!.L19
 262 0174 AD F0                   		movw	ax, r8
 263 0176 44 45 00                		cmpw	ax, #69
 264 0179 61 F8                   		 sknz
 265 017b EC 31 06 00             		 br	!!.L20
 266 017f AD F0                   		movw	ax, r8
 267 0181 44 4C 00                		cmpw	ax, #76
 268 0184 61 F8                   		 sknz
 269 0186 EC 6E 03 00             		 br	!!.L21
 270 018a EC C2 06 00             		br	!!.L10
 271                             	.L15:
  86:../src/user_functions.c **** 		case '0': if(mode == 1){
 272                             		.loc 1 86 0
 273 018e AF 36 00                		movw	ax, !_mode
 274 0191 BD F0                   		movw	r8, ax
 275 0193 44 01 00                		cmpw	ax, #1
 276 0196 61 E8                   		 skz
 277 0198 EC A8 01 00             		 br	!!.L22
  87:../src/user_functions.c **** 					 ack[0] = '0'; mode = 0;
 278                             		.loc 1 87 0
 279 019c 51 30                   		mov	a, #48
 280 019e 98 29                   		mov	[sp+41], a
 281 01a0 F6                      		clrw	ax
 282 01a1 BF 36 00                		movw	!_mode, ax
 283 01a4 EC AC 01 00             		br	!!.L23
 284                             	.L22:
  88:../src/user_functions.c **** 				  }
  89:../src/user_functions.c **** 
  90:../src/user_functions.c **** 				  else{
  91:../src/user_functions.c **** 					  ack[0] = '3';
 285                             		.loc 1 91 0
 286 01a8 51 33                   		mov	a, #51
 287 01aa 98 29                   		mov	[sp+41], a
 288                             	.L23:
  92:../src/user_functions.c **** 				  }
  93:../src/user_functions.c **** 
  94:../src/user_functions.c **** 				  ack[1] = '\x0d';
 289                             		.loc 1 94 0
 290 01ac 51 0D                   		mov	a, #13
 291 01ae 98 2A                   		mov	[sp+42], a
  95:../src/user_functions.c **** 				  ack[2] = '\x0a';
 292                             		.loc 1 95 0
 293 01b0 51 0A                   		mov	a, #10
 294 01b2 98 2B                   		mov	[sp+43], a
  96:../src/user_functions.c **** 				  strcpy(response, "$0");
 295                             		.loc 1 96 0
 296 01b4 51 24                   		mov	a, #36
 297 01b6 9F 04 00                		mov	!_response, a
 298 01b9 51 30                   		mov	a, #48
 299 01bb 9F 05 00                		mov	!_response+1, a
 300 01be F5 06 00                		clrb	!_response+2
  97:../src/user_functions.c **** 				  strcat(response, ack);
 301                             		.loc 1 97 0
 302 01c1 30 04 00                		movw	ax, #_response
 303 01c4 B8 00                   		movw	[sp], ax
 304 01c6 C9 F0 2C 00             		movw	r8, #44
 305 01ca AE F8                   		movw	ax, sp
 306 01cc BD F0                   		movw	r8, ax
 307 01ce 04 2C 00                		addw	ax, #44
 308 01d1 BD F0                   		movw	r8, ax
 309 01d3 04 FD FF                		addw	ax, #-3
 310 01d6 B8 02                   		movw	[sp+2], ax
 311 01d8 FC 00 00 00             		call	!!%code(_strcat)
  98:../src/user_functions.c **** 				  recieveInstruction(7);
 312                             		.loc 1 98 0
 313 01dc 30 07 00                		movw	ax, #7
 314 01df B8 00                   		movw	[sp], ax
 315 01e1 FC 00 00 00             		call	!!%code(_recieveInstruction)
  99:../src/user_functions.c **** 				  count = 5; break;
 316                             		.loc 1 99 0
 317 01e5 30 05 00                		movw	ax, #5
 318 01e8 BF 00 00                		movw	!_count, ax
 319 01eb EC E2 06 00             		br	!!.L9
 320                             	.L13:
 100:../src/user_functions.c **** 
 101:../src/user_functions.c **** 
 102:../src/user_functions.c **** 		case '1': if(mode == 0){
 321                             		.loc 1 102 0
 322 01ef AF 36 00                		movw	ax, !_mode
 323 01f2 BD F0                   		movw	r8, ax
 324 01f4 44 00 00                		cmpw	ax, #0
 325 01f7 61 E8                   		 skz
 326 01f9 EC 09 02 00             		 br	!!.L24
 103:../src/user_functions.c **** 					  ack[0] = '0'; mode = 1;
 327                             		.loc 1 103 0
 328 01fd 51 30                   		mov	a, #48
 329 01ff 98 29                   		mov	[sp+41], a
 330 0201 E6                      		onew	ax
 331 0202 BF 36 00                		movw	!_mode, ax
 332 0205 EC 0D 02 00             		br	!!.L25
 333                             	.L24:
 104:../src/user_functions.c **** 				  }
 105:../src/user_functions.c **** 
 106:../src/user_functions.c **** 		  	  	  else{
 107:../src/user_functions.c **** 		  	  		  ack[0] = '3';
 334                             		.loc 1 107 0
 335 0209 51 33                   		mov	a, #51
 336 020b 98 29                   		mov	[sp+41], a
 337                             	.L25:
 108:../src/user_functions.c **** 		  	  	  }
 109:../src/user_functions.c **** 
 110:../src/user_functions.c **** 				  ack[1] = '\x0d';
 338                             		.loc 1 110 0
 339 020d 51 0D                   		mov	a, #13
 340 020f 98 2A                   		mov	[sp+42], a
 111:../src/user_functions.c **** 				  ack[2] = '\x0a';
 341                             		.loc 1 111 0
 342 0211 51 0A                   		mov	a, #10
 343 0213 98 2B                   		mov	[sp+43], a
 112:../src/user_functions.c **** 				  strcpy(response, "$1");
 344                             		.loc 1 112 0
 345 0215 51 24                   		mov	a, #36
 346 0217 9F 04 00                		mov	!_response, a
 347 021a 51 31                   		mov	a, #49
 348 021c 9F 05 00                		mov	!_response+1, a
 349 021f F5 06 00                		clrb	!_response+2
 113:../src/user_functions.c **** 				  strcat(response, ack);
 350                             		.loc 1 113 0
 351 0222 30 04 00                		movw	ax, #_response
 352 0225 B8 00                   		movw	[sp], ax
 353 0227 C9 F4 2C 00             		movw	r12, #44
 354 022b AE F8                   		movw	ax, sp
 355 022d BD F4                   		movw	r12, ax
 356 022f 04 2C 00                		addw	ax, #44
 357 0232 BD F4                   		movw	r12, ax
 358 0234 04 FD FF                		addw	ax, #-3
 359 0237 B8 02                   		movw	[sp+2], ax
 360 0239 FC 00 00 00             		call	!!%code(_strcat)
 114:../src/user_functions.c **** 				  recieveInstruction(6);
 361                             		.loc 1 114 0
 362 023d 30 06 00                		movw	ax, #6
 363 0240 B8 00                   		movw	[sp], ax
 364 0242 FC 00 00 00             		call	!!%code(_recieveInstruction)
 115:../src/user_functions.c **** 				  count = 5; break;
 365                             		.loc 1 115 0
 366 0246 30 05 00                		movw	ax, #5
 367 0249 BF 00 00                		movw	!_count, ax
 368 024c EC E2 06 00             		br	!!.L9
 369                             	.L16:
 116:../src/user_functions.c **** 
 117:../src/user_functions.c **** 		case '2': strcpy(mem, &record[2]);
 370                             		.loc 1 117 0
 371 0250 30 00 00                		movw	ax, #_mem
 372 0253 B8 00                   		movw	[sp], ax
 373 0255 30 00 00                		movw	ax, #_record+2
 374 0258 B8 02                   		movw	[sp+2], ax
 375 025a FC 00 00 00             		call	!!%code(_strcpy)
 118:../src/user_functions.c **** 				  strcpy(response, "$20\x0d\x0a"); count = 5; break;
 376                             		.loc 1 118 0
 377 025e 51 24                   		mov	a, #36
 378 0260 9F 04 00                		mov	!_response, a
 379 0263 51 32                   		mov	a, #50
 380 0265 9F 05 00                		mov	!_response+1, a
 381 0268 51 30                   		mov	a, #48
 382 026a 9F 06 00                		mov	!_response+2, a
 383 026d 51 0D                   		mov	a, #13
 384 026f 9F 07 00                		mov	!_response+3, a
 385 0272 51 0A                   		mov	a, #10
 386 0274 9F 08 00                		mov	!_response+4, a
 387 0277 F5 09 00                		clrb	!_response+5
 388 027a 30 05 00                		movw	ax, #5
 389 027d BF 00 00                		movw	!_count, ax
 390 0280 EC E2 06 00             		br	!!.L9
 391                             	.L17:
 119:../src/user_functions.c **** 
 120:../src/user_functions.c **** 		case '3': strcpy(response, "$3019119038\x0d\x0a"); count = 13; break;
 392                             		.loc 1 120 0
 393 0284 51 24                   		mov	a, #36
 394 0286 9F 04 00                		mov	!_response, a
 395 0289 51 33                   		mov	a, #51
 396 028b 9F 05 00                		mov	!_response+1, a
 397 028e 51 30                   		mov	a, #48
 398 0290 9F 06 00                		mov	!_response+2, a
 399 0293 51 31                   		mov	a, #49
 400 0295 9F 07 00                		mov	!_response+3, a
 401 0298 51 39                   		mov	a, #57
 402 029a 9F 08 00                		mov	!_response+4, a
 403 029d 51 31                   		mov	a, #49
 404 029f 9F 09 00                		mov	!_response+5, a
 405 02a2 51 31                   		mov	a, #49
 406 02a4 9F 0A 00                		mov	!_response+6, a
 407 02a7 51 39                   		mov	a, #57
 408 02a9 9F 0B 00                		mov	!_response+7, a
 409 02ac 51 30                   		mov	a, #48
 410 02ae 9F 0C 00                		mov	!_response+8, a
 411 02b1 51 33                   		mov	a, #51
 412 02b3 9F 0D 00                		mov	!_response+9, a
 413 02b6 51 38                   		mov	a, #56
 414 02b8 9F 0E 00                		mov	!_response+10, a
 415 02bb 51 0D                   		mov	a, #13
 416 02bd 9F 0F 00                		mov	!_response+11, a
 417 02c0 51 0A                   		mov	a, #10
 418 02c2 9F 10 00                		mov	!_response+12, a
 419 02c5 F5 11 00                		clrb	!_response+13
 420 02c8 30 0D 00                		movw	ax, #13
 421 02cb BF 00 00                		movw	!_count, ax
 422 02ce EC E2 06 00             		br	!!.L9
 423                             	.L18:
 121:../src/user_functions.c **** 
 122:../src/user_functions.c **** 		case 'D': if(strlen(mem) <= 32){
 424                             		.loc 1 122 0
 425 02d2 30 00 00                		movw	ax, #_mem
 426 02d5 B8 00                   		movw	[sp], ax
 427 02d7 FC 00 00 00             		call	!!%code(_strlen)
 428 02db AD F0                   		movw	ax, r8
 429 02dd 44 20 00                		cmpw	ax, #32
 430 02e0 61 F3                   		 sknh
 431 02e2 EC 21 03 00             		 br	!!.L26
 123:../src/user_functions.c **** 
 124:../src/user_functions.c **** 					strcpy(response, "$D0\x0d\x0a"); count = 5;
 432                             		.loc 1 124 0
 433 02e6 51 24                   		mov	a, #36
 434 02e8 9F 04 00                		mov	!_response, a
 435 02eb 51 44                   		mov	a, #68
 436 02ed 9F 05 00                		mov	!_response+1, a
 437 02f0 51 30                   		mov	a, #48
 438 02f2 9F 06 00                		mov	!_response+2, a
 439 02f5 51 0D                   		mov	a, #13
 440 02f7 9F 07 00                		mov	!_response+3, a
 441 02fa 51 0A                   		mov	a, #10
 442 02fc 9F 08 00                		mov	!_response+4, a
 443 02ff F5 09 00                		clrb	!_response+5
 444 0302 30 05 00                		movw	ax, #5
 445 0305 BF 00 00                		movw	!_count, ax
 125:../src/user_functions.c **** 
 126:../src/user_functions.c **** 					strcpy(display_string,mem);
 446                             		.loc 1 126 0
 447 0308 30 00 00                		movw	ax, #_display_string
 448 030b B8 00                   		movw	[sp], ax
 449 030d 30 00 00                		movw	ax, #_mem
 450 0310 B8 02                   		movw	[sp+2], ax
 451 0312 FC 00 00 00             		call	!!%code(_strcpy)
 127:../src/user_functions.c **** 					displayLCD(1);
 452                             		.loc 1 127 0
 453 0316 E6                      		onew	ax
 454 0317 B8 00                   		movw	[sp], ax
 455 0319 FC 00 00 00             		call	!!%code(_displayLCD)
 128:../src/user_functions.c **** 				  }
 129:../src/user_functions.c **** 				  else{
 130:../src/user_functions.c **** 				    writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 131:../src/user_functions.c **** 					delayNoInt(1640);
 132:../src/user_functions.c **** 
 133:../src/user_functions.c **** 					writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 134:../src/user_functions.c **** 					delayNoInt(1640);
 135:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 136:../src/user_functions.c **** 				  }
 137:../src/user_functions.c **** 				  break;
 456                             		.loc 1 137 0
 457 031d EC E2 06 00             		br	!!.L9
 458                             	.L26:
 130:../src/user_functions.c **** 					delayNoInt(1640);
 459                             		.loc 1 130 0
 460 0321 F1                      		clrb	a
 461 0322 98 00                   		mov	[sp], a
 462 0324 E1                      		oneb	a
 463 0325 98 02                   		mov	[sp+2], a
 464 0327 FC 00 00 00             		call	!!%code(_writeByteLcd)
 131:../src/user_functions.c **** 
 465                             		.loc 1 131 0
 466 032b 30 68 06                		movw	ax, #1640
 467 032e B8 00                   		movw	[sp], ax
 468 0330 FC 00 00 00             		call	!!%code(_delayNoInt)
 133:../src/user_functions.c **** 					delayNoInt(1640);
 469                             		.loc 1 133 0
 470 0334 F1                      		clrb	a
 471 0335 98 00                   		mov	[sp], a
 472 0337 51 80                   		mov	a, #-128
 473 0339 98 02                   		mov	[sp+2], a
 474 033b FC 00 00 00             		call	!!%code(_writeByteLcd)
 134:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 475                             		.loc 1 134 0
 476 033f 30 68 06                		movw	ax, #1640
 477 0342 B8 00                   		movw	[sp], ax
 478 0344 FC 00 00 00             		call	!!%code(_delayNoInt)
 135:../src/user_functions.c **** 				  }
 479                             		.loc 1 135 0
 480 0348 51 24                   		mov	a, #36
 481 034a 9F 04 00                		mov	!_response, a
 482 034d 51 44                   		mov	a, #68
 483 034f 9F 05 00                		mov	!_response+1, a
 484 0352 51 33                   		mov	a, #51
 485 0354 9F 06 00                		mov	!_response+2, a
 486 0357 51 0D                   		mov	a, #13
 487 0359 9F 07 00                		mov	!_response+3, a
 488 035c 51 0A                   		mov	a, #10
 489 035e 9F 08 00                		mov	!_response+4, a
 490 0361 F5 09 00                		clrb	!_response+5
 491 0364 30 05 00                		movw	ax, #5
 492 0367 BF 00 00                		movw	!_count, ax
 493                             		.loc 1 137 0
 494 036a EC E2 06 00             		br	!!.L9
 495                             	.L21:
 138:../src/user_functions.c **** 
 139:../src/user_functions.c **** 		case 'L': if(record[2] == '0'){
 496                             		.loc 1 139 0
 497 036e 8F 00 00                		mov	a, !_record+2
 498 0371 9D F0                   		mov	r8, a
 499 0373 4A F0 30                		cmp	r8, #48
 500 0376 61 E8                   		 skz
 501 0378 EC F3 03 00             		 br	!!.L28
 140:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 502                             		.loc 1 140 0
 503 037c C9 F0 04 FF             		movw	r8, #-252
 504 0380 AD F0                   		movw	ax, r8
 505 0382 BD F6                   		movw	r14, ax
 506 0384 FA F6                   		movw	hl, r14
 507 0386 8B                      		mov	a, [hl]
 508 0387 9D F2                   		mov	r10, a
 509 0389 5A F2 FD                		and	r10, #-3
 510 038c AD F0                   		movw	ax, r8
 511 038e BD F4                   		movw	r12, ax
 512 0390 DA F4                   		movw	bc, r12
 513 0392 8D F2                   		mov	a, r10
 514 0394 48 00 00                		mov	[bc], a
 141:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 515                             		.loc 1 141 0
 516 0397 C9 F0 04 FF             		movw	r8, #-252
 517 039b AD F0                   		movw	ax, r8
 518 039d BD F6                   		movw	r14, ax
 519 039f FA F6                   		movw	hl, r14
 520 03a1 8B                      		mov	a, [hl]
 521 03a2 9D F2                   		mov	r10, a
 522 03a4 5A F2 FB                		and	r10, #-5
 523 03a7 AD F0                   		movw	ax, r8
 524 03a9 BD F4                   		movw	r12, ax
 525 03ab DA F4                   		movw	bc, r12
 526 03ad 8D F2                   		mov	a, r10
 527 03af 48 00 00                		mov	[bc], a
 142:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 528                             		.loc 1 142 0
 529 03b2 C9 F0 04 FF             		movw	r8, #-252
 530 03b6 AD F0                   		movw	ax, r8
 531 03b8 BD F6                   		movw	r14, ax
 532 03ba FA F6                   		movw	hl, r14
 533 03bc 8B                      		mov	a, [hl]
 534 03bd 9D F2                   		mov	r10, a
 535 03bf 5A F2 F7                		and	r10, #-9
 536 03c2 AD F0                   		movw	ax, r8
 537 03c4 BD F4                   		movw	r12, ax
 538 03c6 DA F4                   		movw	bc, r12
 539 03c8 8D F2                   		mov	a, r10
 540 03ca 48 00 00                		mov	[bc], a
 143:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 541                             		.loc 1 143 0
 542 03cd 51 24                   		mov	a, #36
 543 03cf 9F 04 00                		mov	!_response, a
 544 03d2 51 4C                   		mov	a, #76
 545 03d4 9F 05 00                		mov	!_response+1, a
 546 03d7 51 30                   		mov	a, #48
 547 03d9 9F 06 00                		mov	!_response+2, a
 548 03dc 51 0D                   		mov	a, #13
 549 03de 9F 07 00                		mov	!_response+3, a
 550 03e1 51 0A                   		mov	a, #10
 551 03e3 9F 08 00                		mov	!_response+4, a
 552 03e6 F5 09 00                		clrb	!_response+5
 553 03e9 30 05 00                		movw	ax, #5
 554 03ec BF 00 00                		movw	!_count, ax
 555 03ef EC 2D 06 00             		br	!!.L29
 556                             	.L28:
 144:../src/user_functions.c **** 				  }
 145:../src/user_functions.c **** 				  else if(record[2] == '1'){
 557                             		.loc 1 145 0
 558 03f3 8F 00 00                		mov	a, !_record+2
 559 03f6 9D F0                   		mov	r8, a
 560 03f8 4A F0 31                		cmp	r8, #49
 561 03fb 61 E8                   		 skz
 562 03fd EC 78 04 00             		 br	!!.L30
 146:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 563                             		.loc 1 146 0
 564 0401 C9 F0 04 FF             		movw	r8, #-252
 565 0405 AD F0                   		movw	ax, r8
 566 0407 BD F6                   		movw	r14, ax
 567 0409 FA F6                   		movw	hl, r14
 568 040b 8B                      		mov	a, [hl]
 569 040c 9D F2                   		mov	r10, a
 570 040e 5A F2 FD                		and	r10, #-3
 571 0411 AD F0                   		movw	ax, r8
 572 0413 BD F4                   		movw	r12, ax
 573 0415 DA F4                   		movw	bc, r12
 574 0417 8D F2                   		mov	a, r10
 575 0419 48 00 00                		mov	[bc], a
 147:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 576                             		.loc 1 147 0
 577 041c C9 F0 04 FF             		movw	r8, #-252
 578 0420 AD F0                   		movw	ax, r8
 579 0422 BD F6                   		movw	r14, ax
 580 0424 FA F6                   		movw	hl, r14
 581 0426 8B                      		mov	a, [hl]
 582 0427 9D F2                   		mov	r10, a
 583 0429 5A F2 FB                		and	r10, #-5
 584 042c AD F0                   		movw	ax, r8
 585 042e BD F4                   		movw	r12, ax
 586 0430 DA F4                   		movw	bc, r12
 587 0432 8D F2                   		mov	a, r10
 588 0434 48 00 00                		mov	[bc], a
 148:../src/user_functions.c **** 					  P4_bit.no3 = 1;
 589                             		.loc 1 148 0
 590 0437 C9 F0 04 FF             		movw	r8, #-252
 591 043b AD F0                   		movw	ax, r8
 592 043d BD F6                   		movw	r14, ax
 593 043f FA F6                   		movw	hl, r14
 594 0441 8B                      		mov	a, [hl]
 595 0442 9D F2                   		mov	r10, a
 596 0444 6A F2 08                		or	r10, #8
 597 0447 AD F0                   		movw	ax, r8
 598 0449 BD F4                   		movw	r12, ax
 599 044b DA F4                   		movw	bc, r12
 600 044d 8D F2                   		mov	a, r10
 601 044f 48 00 00                		mov	[bc], a
 149:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 602                             		.loc 1 149 0
 603 0452 51 24                   		mov	a, #36
 604 0454 9F 04 00                		mov	!_response, a
 605 0457 51 4C                   		mov	a, #76
 606 0459 9F 05 00                		mov	!_response+1, a
 607 045c 51 30                   		mov	a, #48
 608 045e 9F 06 00                		mov	!_response+2, a
 609 0461 51 0D                   		mov	a, #13
 610 0463 9F 07 00                		mov	!_response+3, a
 611 0466 51 0A                   		mov	a, #10
 612 0468 9F 08 00                		mov	!_response+4, a
 613 046b F5 09 00                		clrb	!_response+5
 614 046e 30 05 00                		movw	ax, #5
 615 0471 BF 00 00                		movw	!_count, ax
 616 0474 EC 2D 06 00             		br	!!.L29
 617                             	.L30:
 150:../src/user_functions.c **** 				  }
 151:../src/user_functions.c **** 				  else if(record[2] == '2'){
 618                             		.loc 1 151 0
 619 0478 8F 00 00                		mov	a, !_record+2
 620 047b 9D F0                   		mov	r8, a
 621 047d 4A F0 32                		cmp	r8, #50
 622 0480 61 E8                   		 skz
 623 0482 EC FD 04 00             		 br	!!.L31
 152:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 624                             		.loc 1 152 0
 625 0486 C9 F0 04 FF             		movw	r8, #-252
 626 048a AD F0                   		movw	ax, r8
 627 048c BD F6                   		movw	r14, ax
 628 048e FA F6                   		movw	hl, r14
 629 0490 8B                      		mov	a, [hl]
 630 0491 9D F2                   		mov	r10, a
 631 0493 6A F2 02                		or	r10, #2
 632 0496 AD F0                   		movw	ax, r8
 633 0498 BD F4                   		movw	r12, ax
 634 049a DA F4                   		movw	bc, r12
 635 049c 8D F2                   		mov	a, r10
 636 049e 48 00 00                		mov	[bc], a
 153:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 637                             		.loc 1 153 0
 638 04a1 C9 F0 04 FF             		movw	r8, #-252
 639 04a5 AD F0                   		movw	ax, r8
 640 04a7 BD F6                   		movw	r14, ax
 641 04a9 FA F6                   		movw	hl, r14
 642 04ab 8B                      		mov	a, [hl]
 643 04ac 9D F2                   		mov	r10, a
 644 04ae 5A F2 FB                		and	r10, #-5
 645 04b1 AD F0                   		movw	ax, r8
 646 04b3 BD F4                   		movw	r12, ax
 647 04b5 DA F4                   		movw	bc, r12
 648 04b7 8D F2                   		mov	a, r10
 649 04b9 48 00 00                		mov	[bc], a
 154:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 650                             		.loc 1 154 0
 651 04bc C9 F0 04 FF             		movw	r8, #-252
 652 04c0 AD F0                   		movw	ax, r8
 653 04c2 BD F6                   		movw	r14, ax
 654 04c4 FA F6                   		movw	hl, r14
 655 04c6 8B                      		mov	a, [hl]
 656 04c7 9D F2                   		mov	r10, a
 657 04c9 5A F2 F7                		and	r10, #-9
 658 04cc AD F0                   		movw	ax, r8
 659 04ce BD F4                   		movw	r12, ax
 660 04d0 DA F4                   		movw	bc, r12
 661 04d2 8D F2                   		mov	a, r10
 662 04d4 48 00 00                		mov	[bc], a
 155:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 663                             		.loc 1 155 0
 664 04d7 51 24                   		mov	a, #36
 665 04d9 9F 04 00                		mov	!_response, a
 666 04dc 51 4C                   		mov	a, #76
 667 04de 9F 05 00                		mov	!_response+1, a
 668 04e1 51 30                   		mov	a, #48
 669 04e3 9F 06 00                		mov	!_response+2, a
 670 04e6 51 0D                   		mov	a, #13
 671 04e8 9F 07 00                		mov	!_response+3, a
 672 04eb 51 0A                   		mov	a, #10
 673 04ed 9F 08 00                		mov	!_response+4, a
 674 04f0 F5 09 00                		clrb	!_response+5
 675 04f3 30 05 00                		movw	ax, #5
 676 04f6 BF 00 00                		movw	!_count, ax
 677 04f9 EC 2D 06 00             		br	!!.L29
 678                             	.L31:
 156:../src/user_functions.c **** 				  }
 157:../src/user_functions.c **** 				  else if(record[2] == '3'){
 679                             		.loc 1 157 0
 680 04fd 8F 00 00                		mov	a, !_record+2
 681 0500 9D F0                   		mov	r8, a
 682 0502 4A F0 33                		cmp	r8, #51
 683 0505 61 E8                   		 skz
 684 0507 EC 82 05 00             		 br	!!.L32
 158:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 685                             		.loc 1 158 0
 686 050b C9 F0 04 FF             		movw	r8, #-252
 687 050f AD F0                   		movw	ax, r8
 688 0511 BD F6                   		movw	r14, ax
 689 0513 FA F6                   		movw	hl, r14
 690 0515 8B                      		mov	a, [hl]
 691 0516 9D F2                   		mov	r10, a
 692 0518 5A F2 FD                		and	r10, #-3
 693 051b AD F0                   		movw	ax, r8
 694 051d BD F4                   		movw	r12, ax
 695 051f DA F4                   		movw	bc, r12
 696 0521 8D F2                   		mov	a, r10
 697 0523 48 00 00                		mov	[bc], a
 159:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 698                             		.loc 1 159 0
 699 0526 C9 F0 04 FF             		movw	r8, #-252
 700 052a AD F0                   		movw	ax, r8
 701 052c BD F6                   		movw	r14, ax
 702 052e FA F6                   		movw	hl, r14
 703 0530 8B                      		mov	a, [hl]
 704 0531 9D F2                   		mov	r10, a
 705 0533 6A F2 04                		or	r10, #4
 706 0536 AD F0                   		movw	ax, r8
 707 0538 BD F4                   		movw	r12, ax
 708 053a DA F4                   		movw	bc, r12
 709 053c 8D F2                   		mov	a, r10
 710 053e 48 00 00                		mov	[bc], a
 160:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 711                             		.loc 1 160 0
 712 0541 C9 F0 04 FF             		movw	r8, #-252
 713 0545 AD F0                   		movw	ax, r8
 714 0547 BD F6                   		movw	r14, ax
 715 0549 FA F6                   		movw	hl, r14
 716 054b 8B                      		mov	a, [hl]
 717 054c 9D F2                   		mov	r10, a
 718 054e 5A F2 F7                		and	r10, #-9
 719 0551 AD F0                   		movw	ax, r8
 720 0553 BD F4                   		movw	r12, ax
 721 0555 DA F4                   		movw	bc, r12
 722 0557 8D F2                   		mov	a, r10
 723 0559 48 00 00                		mov	[bc], a
 161:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 724                             		.loc 1 161 0
 725 055c 51 24                   		mov	a, #36
 726 055e 9F 04 00                		mov	!_response, a
 727 0561 51 4C                   		mov	a, #76
 728 0563 9F 05 00                		mov	!_response+1, a
 729 0566 51 30                   		mov	a, #48
 730 0568 9F 06 00                		mov	!_response+2, a
 731 056b 51 0D                   		mov	a, #13
 732 056d 9F 07 00                		mov	!_response+3, a
 733 0570 51 0A                   		mov	a, #10
 734 0572 9F 08 00                		mov	!_response+4, a
 735 0575 F5 09 00                		clrb	!_response+5
 736 0578 30 05 00                		movw	ax, #5
 737 057b BF 00 00                		movw	!_count, ax
 738 057e EC 2D 06 00             		br	!!.L29
 739                             	.L32:
 162:../src/user_functions.c **** 				  }
 163:../src/user_functions.c **** 				  else if(record[2] == '4'){
 740                             		.loc 1 163 0
 741 0582 8F 00 00                		mov	a, !_record+2
 742 0585 9D F0                   		mov	r8, a
 743 0587 4A F0 34                		cmp	r8, #52
 744 058a 61 E8                   		 skz
 745 058c EC 07 06 00             		 br	!!.L33
 164:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 746                             		.loc 1 164 0
 747 0590 C9 F0 04 FF             		movw	r8, #-252
 748 0594 AD F0                   		movw	ax, r8
 749 0596 BD F6                   		movw	r14, ax
 750 0598 FA F6                   		movw	hl, r14
 751 059a 8B                      		mov	a, [hl]
 752 059b 9D F2                   		mov	r10, a
 753 059d 6A F2 02                		or	r10, #2
 754 05a0 AD F0                   		movw	ax, r8
 755 05a2 BD F4                   		movw	r12, ax
 756 05a4 DA F4                   		movw	bc, r12
 757 05a6 8D F2                   		mov	a, r10
 758 05a8 48 00 00                		mov	[bc], a
 165:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 759                             		.loc 1 165 0
 760 05ab C9 F0 04 FF             		movw	r8, #-252
 761 05af AD F0                   		movw	ax, r8
 762 05b1 BD F6                   		movw	r14, ax
 763 05b3 FA F6                   		movw	hl, r14
 764 05b5 8B                      		mov	a, [hl]
 765 05b6 9D F2                   		mov	r10, a
 766 05b8 6A F2 04                		or	r10, #4
 767 05bb AD F0                   		movw	ax, r8
 768 05bd BD F4                   		movw	r12, ax
 769 05bf DA F4                   		movw	bc, r12
 770 05c1 8D F2                   		mov	a, r10
 771 05c3 48 00 00                		mov	[bc], a
 166:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 772                             		.loc 1 166 0
 773 05c6 C9 F0 04 FF             		movw	r8, #-252
 774 05ca AD F0                   		movw	ax, r8
 775 05cc BD F6                   		movw	r14, ax
 776 05ce FA F6                   		movw	hl, r14
 777 05d0 8B                      		mov	a, [hl]
 778 05d1 9D F2                   		mov	r10, a
 779 05d3 5A F2 F7                		and	r10, #-9
 780 05d6 AD F0                   		movw	ax, r8
 781 05d8 BD F4                   		movw	r12, ax
 782 05da DA F4                   		movw	bc, r12
 783 05dc 8D F2                   		mov	a, r10
 784 05de 48 00 00                		mov	[bc], a
 167:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 785                             		.loc 1 167 0
 786 05e1 51 24                   		mov	a, #36
 787 05e3 9F 04 00                		mov	!_response, a
 788 05e6 51 4C                   		mov	a, #76
 789 05e8 9F 05 00                		mov	!_response+1, a
 790 05eb 51 30                   		mov	a, #48
 791 05ed 9F 06 00                		mov	!_response+2, a
 792 05f0 51 0D                   		mov	a, #13
 793 05f2 9F 07 00                		mov	!_response+3, a
 794 05f5 51 0A                   		mov	a, #10
 795 05f7 9F 08 00                		mov	!_response+4, a
 796 05fa F5 09 00                		clrb	!_response+5
 797 05fd 30 05 00                		movw	ax, #5
 798 0600 BF 00 00                		movw	!_count, ax
 799 0603 EC 2D 06 00             		br	!!.L29
 800                             	.L33:
 168:../src/user_functions.c **** 				  }
 169:../src/user_functions.c **** 				  else{
 170:../src/user_functions.c **** 					  strcpy(response, "$L2\x0d\x0a"); count = 5;
 801                             		.loc 1 170 0
 802 0607 51 24                   		mov	a, #36
 803 0609 9F 04 00                		mov	!_response, a
 804 060c 51 4C                   		mov	a, #76
 805 060e 9F 05 00                		mov	!_response+1, a
 806 0611 51 32                   		mov	a, #50
 807 0613 9F 06 00                		mov	!_response+2, a
 808 0616 51 0D                   		mov	a, #13
 809 0618 9F 07 00                		mov	!_response+3, a
 810 061b 51 0A                   		mov	a, #10
 811 061d 9F 08 00                		mov	!_response+4, a
 812 0620 F5 09 00                		clrb	!_response+5
 813 0623 30 05 00                		movw	ax, #5
 814 0626 BF 00 00                		movw	!_count, ax
 171:../src/user_functions.c **** 				  }
 172:../src/user_functions.c **** 				  break;
 815                             		.loc 1 172 0
 816 0629 EC E2 06 00             		br	!!.L9
 817                             	.L29:
 818 062d EC E2 06 00             		br	!!.L9
 819                             	.L20:
 173:../src/user_functions.c **** 		case 'E':
 174:../src/user_functions.c **** 
 175:../src/user_functions.c **** 					 collectADC();
 820                             		.loc 1 175 0
 821 0631 FC 00 00 00             		call	!!%code(_collectADC)
 176:../src/user_functions.c **** 					 sprintf(str, "$E0%02d,%02d,%0d\x0d\x0a", voltage, current2, current1);
 822                             		.loc 1 176 0
 823 0635 8F 00 00                		mov	a, !_voltage
 824 0638 9D F0                   		mov	r8, a
 825 063a 70                      		mov	x, a 
 826 063b 51 00                   		mov	a, #0
 827 063d BD F4                   		movw	r12, ax
 828 063f 8F 00 00                		mov	a, !_current2
 829 0642 9D F0                   		mov	r8, a
 830 0644 70                      		mov	x, a 
 831 0645 51 00                   		mov	a, #0
 832 0647 BD F2                   		movw	r10, ax
 833 0649 8F 00 00                		mov	a, !_current1
 834 064c 9D F0                   		mov	r8, a
 835 064e CD F1 00                		mov	r9, #0
 836 0651 C9 F6 2C 00             		movw	r14, #44
 837 0655 AE F8                   		movw	ax, sp
 838 0657 BD F6                   		movw	r14, ax
 839 0659 04 2C 00                		addw	ax, #44
 840 065c BD F6                   		movw	r14, ax
 841 065e 04 DF FF                		addw	ax, #-33
 842 0661 B8 00                   		movw	[sp], ax
 843 0663 30 08 00                		movw	ax, #.LC1
 844 0666 B8 02                   		movw	[sp+2], ax
 845 0668 AD F4                   		movw	ax, r12
 846 066a B8 04                   		movw	[sp+4], ax
 847 066c AD F2                   		movw	ax, r10
 848 066e B8 06                   		movw	[sp+6], ax
 849 0670 AD F0                   		movw	ax, r8
 850 0672 B8 08                   		movw	[sp+8], ax
 851 0674 FC 00 00 00             		call	!!%code(_sprintf)
 177:../src/user_functions.c **** 
 178:../src/user_functions.c **** 	//				  sprintf(str, "%d", voltage);
 179:../src/user_functions.c **** 
 180:../src/user_functions.c **** 					  strcpy(response, str); count = strlen(str);
 852                             		.loc 1 180 0
 853 0678 30 04 00                		movw	ax, #_response
 854 067b B8 00                   		movw	[sp], ax
 855 067d C9 F0 2C 00             		movw	r8, #44
 856 0681 AE F8                   		movw	ax, sp
 857 0683 BD F0                   		movw	r8, ax
 858 0685 04 2C 00                		addw	ax, #44
 859 0688 BD F0                   		movw	r8, ax
 860 068a 04 DF FF                		addw	ax, #-33
 861 068d B8 02                   		movw	[sp+2], ax
 862 068f FC 00 00 00             		call	!!%code(_strcpy)
 863 0693 C9 F4 2C 00             		movw	r12, #44
 864 0697 AE F8                   		movw	ax, sp
 865 0699 BD F4                   		movw	r12, ax
 866 069b 04 2C 00                		addw	ax, #44
 867 069e BD F4                   		movw	r12, ax
 868 06a0 04 DF FF                		addw	ax, #-33
 869 06a3 B8 00                   		movw	[sp], ax
 870 06a5 FC 00 00 00             		call	!!%code(_strlen)
 871 06a9 AD F0                   		movw	ax, r8
 872 06ab BF 00 00                		movw	!_count, ax
 181:../src/user_functions.c **** 
 182:../src/user_functions.c **** 					  break;
 873                             		.loc 1 182 0
 874 06ae EC E2 06 00             		br	!!.L9
 875                             	.L11:
 183:../src/user_functions.c **** 
 184:../src/user_functions.c **** 	     case 'B':    setRTC();
 876                             		.loc 1 184 0
 877 06b2 FC 00 00 00             		call	!!%code(_setRTC)
 185:../src/user_functions.c **** 					  break;
 878                             		.loc 1 185 0
 879 06b6 EC E2 06 00             		br	!!.L9
 880                             	.L19:
 186:../src/user_functions.c **** 		 case 'C':	  getRTC();
 881                             		.loc 1 186 0
 882 06ba FC 00 00 00             		call	!!%code(_getRTC)
 187:../src/user_functions.c **** 		 	 	 	  break;
 883                             		.loc 1 187 0
 884 06be EC E2 06 00             		br	!!.L9
 885                             	.L10:
 188:../src/user_functions.c **** 
 189:../src/user_functions.c **** 
 190:../src/user_functions.c **** 		default:
 191:../src/user_functions.c **** 				 sprintf(response, "$%c1\x0d\x0a", record[1]);
 886                             		.loc 1 191 0
 887 06c2 8F 00 00                		mov	a, !_record+1
 888 06c5 9D F0                   		mov	r8, a
 889 06c7 CD F1 00                		mov	r9, #0
 890 06ca 30 04 00                		movw	ax, #_response
 891 06cd B8 00                   		movw	[sp], ax
 892 06cf 30 1B 00                		movw	ax, #.LC2
 893 06d2 B8 02                   		movw	[sp+2], ax
 894 06d4 AD F0                   		movw	ax, r8
 895 06d6 B8 04                   		movw	[sp+4], ax
 896 06d8 FC 00 00 00             		call	!!%code(_sprintf)
 192:../src/user_functions.c **** 				 count = 5;
 897                             		.loc 1 192 0
 898 06dc 30 05 00                		movw	ax, #5
 899 06df BF 00 00                		movw	!_count, ax
 900                             	.L9:
 193:../src/user_functions.c **** //				 strcpy(response, "$");
 194:../src/user_functions.c **** //				 strcat(response, &record[1]);
 195:../src/user_functions.c **** //				 strcat(response, "1\x0d\x0a"); count = 5;
 196:../src/user_functions.c **** 
 197:../src/user_functions.c **** 		}
 198:../src/user_functions.c **** 	}
 199:../src/user_functions.c **** 
 200:../src/user_functions.c **** 	R_UART1_Send(response, count);
 901                             		.loc 1 200 0
 902 06e2 AF 00 00                		movw	ax, !_count
 903 06e5 BD F0                   		movw	r8, ax
 904 06e7 30 04 00                		movw	ax, #_response
 905 06ea B8 00                   		movw	[sp], ax
 906 06ec AD F0                   		movw	ax, r8
 907 06ee B8 02                   		movw	[sp+2], ax
 908 06f0 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 201:../src/user_functions.c **** }
 909                             		.loc 1 201 0
 910 06f4 10 2C                   		addw	sp, #44
 911 06f6 D7                      		ret
 912                             	.LFE1:
 914                             		.global	_errorTest
 916                             	_errorTest:
 917                             	.LFB2:
 202:../src/user_functions.c **** 
 203:../src/user_functions.c **** int errorTest(){
 918                             		.loc 1 203 0
 919                             		; start of function
 920                             		; locals: 8 bytes
 921                             		; outgoing: 4 bytes
 922 06f7 20 0C                   		subw	sp, #12
 923                             	.LCFI2:
 204:../src/user_functions.c **** 
 205:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 206:../src/user_functions.c **** //	}
 207:../src/user_functions.c **** //	else{
 208:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 209:../src/user_functions.c **** //		strcpy(record, validChar);
 210:../src/user_functions.c **** //		count = 5;
 211:../src/user_functions.c **** //		return 0;
 212:../src/user_functions.c **** //	}
 213:../src/user_functions.c **** 
 214:../src/user_functions.c **** 	if(record[strlen(record) - 1] != '\x0a'){	//INVALID PARAMETERS
 924                             		.loc 1 214 0
 925 06f9 30 00 00                		movw	ax, #_record
 926 06fc B8 00                   		movw	[sp], ax
 927 06fe FC 00 00 00             		call	!!%code(_strlen)
 928 0702 B6 F0                   		decw	r8
 929 0704 AD F0                   		movw	ax, r8
 930 0706 04 00 00                		addw	ax, #_record
 931 0709 16                      		movw	hl, ax
 932 070a 8B                      		mov	a, [hl]
 933 070b 9D F0                   		mov	r8, a
 934 070d 4A F0 0A                		cmp	r8, #10
 935 0710 61 F8                   		 sknz
 936 0712 EC 55 07 00             		 br	!!.L35
 937                             	.LBB2:
 215:../src/user_functions.c **** 		char validChar[] = {'$',record[1],'2','\x0d','\x0a'};
 938                             		.loc 1 215 0
 939 0716 51 24                   		mov	a, #36
 940 0718 98 07                   		mov	[sp+7], a
 941 071a 8F 00 00                		mov	a, !_record+1
 942 071d 9D F0                   		mov	r8, a
 943 071f 98 08                   		mov	[sp+8], a
 944 0721 51 32                   		mov	a, #50
 945 0723 98 09                   		mov	[sp+9], a
 946 0725 51 0D                   		mov	a, #13
 947 0727 98 0A                   		mov	[sp+10], a
 948 0729 51 0A                   		mov	a, #10
 949 072b 98 0B                   		mov	[sp+11], a
 216:../src/user_functions.c **** 		strcpy(record, validChar);
 950                             		.loc 1 216 0
 951 072d 30 00 00                		movw	ax, #_record
 952 0730 B8 00                   		movw	[sp], ax
 953 0732 C9 F0 0C 00             		movw	r8, #12
 954 0736 AE F8                   		movw	ax, sp
 955 0738 BD F0                   		movw	r8, ax
 956 073a 04 0C 00                		addw	ax, #12
 957 073d BD F0                   		movw	r8, ax
 958 073f 04 FB FF                		addw	ax, #-5
 959 0742 B8 02                   		movw	[sp+2], ax
 960 0744 FC 00 00 00             		call	!!%code(_strcpy)
 217:../src/user_functions.c **** 		count = 5;
 961                             		.loc 1 217 0
 962 0748 30 05 00                		movw	ax, #5
 963 074b BF 00 00                		movw	!_count, ax
 218:../src/user_functions.c **** 		return 0;
 964                             		.loc 1 218 0
 965 074e F6                      		clrw	ax
 966 074f B8 04                   		movw	[sp+4], ax
 967 0751 EC 58 07 00             		br	!!.L36
 968                             	.L35:
 969                             	.LBE2:
 219:../src/user_functions.c **** 	}
 220:../src/user_functions.c **** 
 221:../src/user_functions.c **** 	return 1;
 970                             		.loc 1 221 0
 971 0755 E6                      		onew	ax
 972 0756 B8 04                   		movw	[sp+4], ax
 973                             	.L36:
 974 0758 A8 04                   		movw	ax, [sp+4]
 975 075a BD F0                   		movw	r8, ax
 222:../src/user_functions.c **** }
 976                             		.loc 1 222 0 discriminator 1
 977 075c 10 0C                   		addw	sp, #12
 978 075e D7                      		ret
 979                             	.LFE2:
 981                             		.global	_displayLCD
 983                             	_displayLCD:
 984                             	.LFB3:
 223:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 224:../src/user_functions.c **** //reset = 0 just keep going
 225:../src/user_functions.c **** 
 226:../src/user_functions.c **** void displayLCD(int reset){
 985                             		.loc 1 226 0
 986                             		; start of function
 987                             		; push 2: r16
 988                             		; locals: 2 bytes
 989                             		; outgoing: 4 bytes
 990 075f 61 EF                   		sel	rb2
 991 0761 C1                      		push	ax ; r16
 992                             	.LCFI3:
 993 0762 61 CF                   		sel	rb0
 994 0764 20 06                   		subw	sp, #6
 995                             	.LCFI4:
 227:../src/user_functions.c **** 
 228:../src/user_functions.c **** if(reset){
 996                             		.loc 1 228 0
 997 0766 A8 0C                   		movw	ax, [sp+12]
 998 0768 44 00 00                		cmpw	ax, #0
 999 076b 61 F8                   		 sknz
 1000 076d EC 81 07 00             		 br	!!.L38
 1001                             	.LBB3:
 229:../src/user_functions.c **** 	offset = 0;
 1002                             		.loc 1 229 0
 1003 0771 F6                      		clrw	ax
 1004 0772 BF 3A 00                		movw	!_offset, ax
 230:../src/user_functions.c **** 	display = 1;
 1005                             		.loc 1 230 0
 1006 0775 E6                      		onew	ax
 1007 0776 BF 38 00                		movw	!_display, ax
 231:../src/user_functions.c **** 	interval_timer_count = 0;
 1008                             		.loc 1 231 0
 1009 0779 F6                      		clrw	ax
 1010 077a BF 00 00                		movw	!_interval_timer_count, ax
 232:../src/user_functions.c **** 	R_IT_Start();
 1011                             		.loc 1 232 0
 1012 077d FC 00 00 00             		call	!!%code(_R_IT_Start)
 1013                             	.L38:
 1014                             	.LBE3:
 233:../src/user_functions.c **** }
 234:../src/user_functions.c **** 
 235:../src/user_functions.c **** if(display){
 1015                             		.loc 1 235 0
 1016 0781 AF 38 00                		movw	ax, !_display
 1017 0784 BD F0                   		movw	r8, ax
 1018 0786 44 00 00                		cmpw	ax, #0
 1019 0789 61 F8                   		 sknz
 1020 078b EC 3B 08 00             		 br	!!.L39
 1021                             	.LBB4:
 236:../src/user_functions.c **** 
 237:../src/user_functions.c **** 	int i;
 238:../src/user_functions.c **** 
 239:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1022                             		.loc 1 239 0
 1023 078f F1                      		clrb	a
 1024 0790 98 00                   		mov	[sp], a
 1025 0792 E1                      		oneb	a
 1026 0793 98 02                   		mov	[sp+2], a
 1027 0795 FC 00 00 00             		call	!!%code(_writeByteLcd)
 240:../src/user_functions.c **** 	delayNoInt(1640);
 1028                             		.loc 1 240 0
 1029 0799 30 68 06                		movw	ax, #1640
 1030 079c B8 00                   		movw	[sp], ax
 1031 079e FC 00 00 00             		call	!!%code(_delayNoInt)
 241:../src/user_functions.c **** 
 242:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1032                             		.loc 1 242 0
 1033 07a2 F1                      		clrb	a
 1034 07a3 98 00                   		mov	[sp], a
 1035 07a5 51 80                   		mov	a, #-128
 1036 07a7 98 02                   		mov	[sp+2], a
 1037 07a9 FC 00 00 00             		call	!!%code(_writeByteLcd)
 243:../src/user_functions.c **** 	delayNoInt(1640);
 1038                             		.loc 1 243 0
 1039 07ad 30 68 06                		movw	ax, #1640
 1040 07b0 B8 00                   		movw	[sp], ax
 1041 07b2 FC 00 00 00             		call	!!%code(_delayNoInt)
 244:../src/user_functions.c **** 
 245:../src/user_functions.c **** 	for(i = offset; i < strlen(display_string) - 2; i++){
 1042                             		.loc 1 245 0
 1043 07b6 AF 3A 00                		movw	ax, !_offset
 1044 07b9 BD F0                   		movw	r8, ax
 1045 07bb B8 04                   		movw	[sp+4], ax
 1046 07bd EC 14 08 00             		br	!!.L40
 1047                             	.L42:
 246:../src/user_functions.c **** 
 247:../src/user_functions.c **** 		if(i == (8 + offset)){
 1048                             		.loc 1 247 0
 1049 07c1 AF 3A 00                		movw	ax, !_offset
 1050 07c4 BD F0                   		movw	r8, ax
 1051 07c6 04 08 00                		addw	ax, #8
 1052 07c9 BD F2                   		movw	r10, ax
 1053 07cb A8 04                   		movw	ax, [sp+4]
 1054 07cd BD F0                   		movw	r8, ax
 1055 07cf AD F2                   		movw	ax, r10
 1056 07d1 46 F0                   		cmpw	ax, r8
 1057 07d3 61 E8                   		 skz
 1058 07d5 EC ED 07 00             		 br	!!.L41
 248:../src/user_functions.c **** 			writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1059                             		.loc 1 248 0
 1060 07d9 F1                      		clrb	a
 1061 07da 98 00                   		mov	[sp], a
 1062 07dc 51 C0                   		mov	a, #-64
 1063 07de 98 02                   		mov	[sp+2], a
 1064 07e0 FC 00 00 00             		call	!!%code(_writeByteLcd)
 249:../src/user_functions.c **** 			delayNoInt(1640);
 1065                             		.loc 1 249 0
 1066 07e4 30 68 06                		movw	ax, #1640
 1067 07e7 B8 00                   		movw	[sp], ax
 1068 07e9 FC 00 00 00             		call	!!%code(_delayNoInt)
 1069                             	.L41:
 250:../src/user_functions.c **** 		}
 251:../src/user_functions.c **** 
 252:../src/user_functions.c **** 		writeByteLcd(LCD_DATA_WR, display_string[i]);
 1070                             		.loc 1 252 0 discriminator 2
 1071 07ed A8 04                   		movw	ax, [sp+4]
 1072 07ef 04 00 00                		addw	ax, #_display_string
 1073 07f2 BD F0                   		movw	r8, ax
 1074 07f4 BD F2                   		movw	r10, ax
 1075 07f6 FA F2                   		movw	hl, r10
 1076 07f8 8B                      		mov	a, [hl]
 1077 07f9 9D F0                   		mov	r8, a
 1078 07fb E1                      		oneb	a
 1079 07fc 98 00                   		mov	[sp], a
 1080 07fe 8D F0                   		mov	a, r8
 1081 0800 98 02                   		mov	[sp+2], a
 1082 0802 FC 00 00 00             		call	!!%code(_writeByteLcd)
 253:../src/user_functions.c **** 		delayNoInt(40);
 1083                             		.loc 1 253 0 discriminator 2
 1084 0806 30 28 00                		movw	ax, #40
 1085 0809 B8 00                   		movw	[sp], ax
 1086 080b FC 00 00 00             		call	!!%code(_delayNoInt)
 245:../src/user_functions.c **** 
 1087                             		.loc 1 245 0 discriminator 2
 1088 080f A8 04                   		movw	ax, [sp+4]
 1089 0811 A1                      		incw	ax
 1090 0812 B8 04                   		movw	[sp+4], ax
 1091                             	.L40:
 245:../src/user_functions.c **** 
 1092                             		.loc 1 245 0 is_stmt 0 discriminator 1
 1093 0814 A8 04                   		movw	ax, [sp+4]
 1094 0816 BD E8                   		movw	r16, ax
 1095 0818 30 00 00                		movw	ax, #_display_string
 1096 081b B8 00                   		movw	[sp], ax
 1097 081d FC 00 00 00             		call	!!%code(_strlen)
 1098 0821 B6 F0                   		decw	r8 
 1099 0823 B6 F0                   		decw	r8
 1100 0825 AD E8                   		movw	ax, r16
 1101 0827 46 F0                   		cmpw	ax, r8
 1102 0829 61 D8                   		 sknc
 1103 082b EC C1 07 00             		 br	!!.L42
 254:../src/user_functions.c **** 
 255:../src/user_functions.c **** 	}
 256:../src/user_functions.c **** 	offset++;
 1104                             		.loc 1 256 0 is_stmt 1
 1105 082f AF 3A 00                		movw	ax, !_offset
 1106 0832 BD F0                   		movw	r8, ax
 1107 0834 A6 F0                   		incw	r8
 1108 0836 AD F0                   		movw	ax, r8
 1109 0838 BF 3A 00                		movw	!_offset, ax
 1110                             	.L39:
 1111                             	.LBE4:
 257:../src/user_functions.c **** 
 258:../src/user_functions.c **** }
 259:../src/user_functions.c **** 
 260:../src/user_functions.c **** if(offset >= (strlen(display_string) - 17) || strlen(display_string) <= 18 ){
 1112                             		.loc 1 260 0
 1113 083b AF 3A 00                		movw	ax, !_offset
 1114 083e BD F0                   		movw	r8, ax
 1115 0840 BD E8                   		movw	r16, ax
 1116 0842 30 00 00                		movw	ax, #_display_string
 1117 0845 B8 00                   		movw	[sp], ax
 1118 0847 FC 00 00 00             		call	!!%code(_strlen)
 1119 084b AD F0                   		movw	ax, r8
 1120 084d 04 EF FF                		addw	ax, #-17
 1121 0850 BD F0                   		movw	r8, ax
 1122 0852 AD E8                   		movw	ax, r16
 1123 0854 46 F0                   		cmpw	ax, r8
 1124 0856 61 C8                   		 skc
 1125 0858 EC 70 08 00             		 br	!!.L43
 1126                             		.loc 1 260 0 is_stmt 0 discriminator 1
 1127 085c 30 00 00                		movw	ax, #_display_string
 1128 085f B8 00                   		movw	[sp], ax
 1129 0861 FC 00 00 00             		call	!!%code(_strlen)
 1130 0865 AD F0                   		movw	ax, r8
 1131 0867 44 12 00                		cmpw	ax, #18
 1132 086a 61 F3                   		 sknh
 1133 086c EC 78 08 00             		 br	!!.L37
 1134                             	.L43:
 1135                             	.LBB5:
 261:../src/user_functions.c **** 	display = 0;
 1136                             		.loc 1 261 0 is_stmt 1
 1137 0870 F6                      		clrw	ax
 1138 0871 BF 38 00                		movw	!_display, ax
 262:../src/user_functions.c **** 	R_IT_Stop();
 1139                             		.loc 1 262 0
 1140 0874 FC 00 00 00             		call	!!%code(_R_IT_Stop)
 1141                             	.L37:
 1142                             	.LBE5:
 263:../src/user_functions.c **** }
 264:../src/user_functions.c **** 
 265:../src/user_functions.c **** }
 1143                             		.loc 1 265 0
 1144 0878 10 06                   		addw	sp, #6
 1145 087a 61 EF                   		sel	rb2
 1146 087c C0                      		pop	ax ; r16
 1147 087d 61 CF                   		sel	rb0
 1148 087f D7                      		ret
 1149                             	.LFE3:
 1151                             		.global	_collectADC
 1153                             	_collectADC:
 1154                             	.LFB4:
 266:../src/user_functions.c **** 
 267:../src/user_functions.c **** void collectADC(){
 1155                             		.loc 1 267 0
 1156                             		; start of function
 1157                             		; outgoing: 2 bytes
 1158 0880 20 02                   		subw	sp, #2
 1159                             	.LCFI5:
 268:../src/user_functions.c **** 
 269:../src/user_functions.c **** 	 ADS = _00_AD_INPUT_CHANNEL_0;
 1160                             		.loc 1 269 0
 1161 0882 C9 F0 31 FF             		movw	r8, #-207
 1162 0886 AD F0                   		movw	ax, r8
 1163 0888 BD F2                   		movw	r10, ax
 1164 088a DA F2                   		movw	bc, r10
 1165 088c F1                      		clrb	a
 1166 088d 48 00 00                		mov	[bc], a
 270:../src/user_functions.c **** 	 R_ADC_Start();
 1167                             		.loc 1 270 0
 1168 0890 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 271:../src/user_functions.c **** 	 while(ADCS);
 1169                             		.loc 1 271 0
 1170 0894 00                      		nop
 1171                             	.L46:
 1172                             		.loc 1 271 0 is_stmt 0 discriminator 1
 1173 0895 C9 F0 30 FF             		movw	r8, #-208
 1174 0899 AD F0                   		movw	ax, r8
 1175 089b BD F2                   		movw	r10, ax
 1176 089d FA F2                   		movw	hl, r10
 1177 089f 8B                      		mov	a, [hl]
 1178 08a0 9D F0                   		mov	r8, a
 1179 08a2 31 7A                   		shr	a, 7
 1180 08a4 9D F0                   		mov	r8, a
 1181 08a6 D4 F0                   		cmp0	r8
 1182 08a8 61 E8                   		 skz
 1183 08aa EC 95 08 00             		 br	!!.L46
 272:../src/user_functions.c **** 	 R_ADC_Start();
 1184                             		.loc 1 272 0 is_stmt 1
 1185 08ae FC 00 00 00             		call	!!%code(_R_ADC_Start)
 273:../src/user_functions.c **** 	 while(ADCS);
 1186                             		.loc 1 273 0
 1187 08b2 00                      		nop
 1188                             	.L47:
 1189                             		.loc 1 273 0 is_stmt 0 discriminator 1
 1190 08b3 C9 F0 30 FF             		movw	r8, #-208
 1191 08b7 AD F0                   		movw	ax, r8
 1192 08b9 BD F2                   		movw	r10, ax
 1193 08bb FA F2                   		movw	hl, r10
 1194 08bd 8B                      		mov	a, [hl]
 1195 08be 9D F0                   		mov	r8, a
 1196 08c0 31 7A                   		shr	a, 7
 1197 08c2 9D F0                   		mov	r8, a
 1198 08c4 D4 F0                   		cmp0	r8
 1199 08c6 61 E8                   		 skz
 1200 08c8 EC B3 08 00             		 br	!!.L47
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&voltage);
 1201                             		.loc 1 275 0 is_stmt 1
 1202 08cc 30 00 00                		movw	ax, #_voltage
 1203 08cf B8 00                   		movw	[sp], ax
 1204 08d1 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 276:../src/user_functions.c **** 	 voltage = voltage >> 1;
 1205                             		.loc 1 276 0
 1206 08d5 8F 00 00                		mov	a, !_voltage
 1207 08d8 9D F0                   		mov	r8, a
 1208 08da 31 1A                   		shr	a, 1
 1209 08dc 9D F0                   		mov	r8, a
 1210 08de 9F 00 00                		mov	!_voltage, a
 277:../src/user_functions.c **** 
 278:../src/user_functions.c **** 	 ADS = _01_AD_INPUT_CHANNEL_1;
 1211                             		.loc 1 278 0
 1212 08e1 C9 F0 31 FF             		movw	r8, #-207
 1213 08e5 AD F0                   		movw	ax, r8
 1214 08e7 BD F2                   		movw	r10, ax
 1215 08e9 DA F2                   		movw	bc, r10
 1216 08eb E1                      		oneb	a
 1217 08ec 48 00 00                		mov	[bc], a
 279:../src/user_functions.c **** 	 R_ADC_Start();
 1218                             		.loc 1 279 0
 1219 08ef FC 00 00 00             		call	!!%code(_R_ADC_Start)
 280:../src/user_functions.c **** 	 while(ADCS);
 1220                             		.loc 1 280 0
 1221 08f3 00                      		nop
 1222                             	.L48:
 1223                             		.loc 1 280 0 is_stmt 0 discriminator 1
 1224 08f4 C9 F0 30 FF             		movw	r8, #-208
 1225 08f8 AD F0                   		movw	ax, r8
 1226 08fa BD F2                   		movw	r10, ax
 1227 08fc FA F2                   		movw	hl, r10
 1228 08fe 8B                      		mov	a, [hl]
 1229 08ff 9D F0                   		mov	r8, a
 1230 0901 31 7A                   		shr	a, 7
 1231 0903 9D F0                   		mov	r8, a
 1232 0905 D4 F0                   		cmp0	r8
 1233 0907 61 E8                   		 skz
 1234 0909 EC F4 08 00             		 br	!!.L48
 281:../src/user_functions.c **** 	 R_ADC_Start();
 1235                             		.loc 1 281 0 is_stmt 1
 1236 090d FC 00 00 00             		call	!!%code(_R_ADC_Start)
 282:../src/user_functions.c **** 	 while(ADCS);
 1237                             		.loc 1 282 0
 1238 0911 00                      		nop
 1239                             	.L49:
 1240                             		.loc 1 282 0 is_stmt 0 discriminator 1
 1241 0912 C9 F0 30 FF             		movw	r8, #-208
 1242 0916 AD F0                   		movw	ax, r8
 1243 0918 BD F2                   		movw	r10, ax
 1244 091a FA F2                   		movw	hl, r10
 1245 091c 8B                      		mov	a, [hl]
 1246 091d 9D F0                   		mov	r8, a
 1247 091f 31 7A                   		shr	a, 7
 1248 0921 9D F0                   		mov	r8, a
 1249 0923 D4 F0                   		cmp0	r8
 1250 0925 61 E8                   		 skz
 1251 0927 EC 12 09 00             		 br	!!.L49
 283:../src/user_functions.c **** 
 284:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current1);
 1252                             		.loc 1 284 0 is_stmt 1
 1253 092b 30 00 00                		movw	ax, #_current1
 1254 092e B8 00                   		movw	[sp], ax
 1255 0930 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 285:../src/user_functions.c **** 	 current1 = current1 >> 2;
 1256                             		.loc 1 285 0
 1257 0934 8F 00 00                		mov	a, !_current1
 1258 0937 9D F0                   		mov	r8, a
 1259 0939 31 2A                   		shr	a, 2
 1260 093b 9D F0                   		mov	r8, a
 1261 093d 9F 00 00                		mov	!_current1, a
 286:../src/user_functions.c **** 
 287:../src/user_functions.c **** 	 ADS = _02_AD_INPUT_CHANNEL_2;
 1262                             		.loc 1 287 0
 1263 0940 C9 F0 31 FF             		movw	r8, #-207
 1264 0944 AD F0                   		movw	ax, r8
 1265 0946 BD F2                   		movw	r10, ax
 1266 0948 DA F2                   		movw	bc, r10
 1267 094a 51 02                   		mov	a, #2
 1268 094c 48 00 00                		mov	[bc], a
 288:../src/user_functions.c **** 	 R_ADC_Start();
 1269                             		.loc 1 288 0
 1270 094f FC 00 00 00             		call	!!%code(_R_ADC_Start)
 289:../src/user_functions.c **** 	 while(ADCS);
 1271                             		.loc 1 289 0
 1272 0953 00                      		nop
 1273                             	.L50:
 1274                             		.loc 1 289 0 is_stmt 0 discriminator 1
 1275 0954 C9 F0 30 FF             		movw	r8, #-208
 1276 0958 AD F0                   		movw	ax, r8
 1277 095a BD F2                   		movw	r10, ax
 1278 095c FA F2                   		movw	hl, r10
 1279 095e 8B                      		mov	a, [hl]
 1280 095f 9D F0                   		mov	r8, a
 1281 0961 31 7A                   		shr	a, 7
 1282 0963 9D F0                   		mov	r8, a
 1283 0965 D4 F0                   		cmp0	r8
 1284 0967 61 E8                   		 skz
 1285 0969 EC 54 09 00             		 br	!!.L50
 290:../src/user_functions.c **** 	 R_ADC_Start();
 1286                             		.loc 1 290 0 is_stmt 1
 1287 096d FC 00 00 00             		call	!!%code(_R_ADC_Start)
 291:../src/user_functions.c **** 	 while(ADCS);
 1288                             		.loc 1 291 0
 1289 0971 00                      		nop
 1290                             	.L51:
 1291                             		.loc 1 291 0 is_stmt 0 discriminator 1
 1292 0972 C9 F0 30 FF             		movw	r8, #-208
 1293 0976 AD F0                   		movw	ax, r8
 1294 0978 BD F2                   		movw	r10, ax
 1295 097a FA F2                   		movw	hl, r10
 1296 097c 8B                      		mov	a, [hl]
 1297 097d 9D F0                   		mov	r8, a
 1298 097f 31 7A                   		shr	a, 7
 1299 0981 9D F0                   		mov	r8, a
 1300 0983 D4 F0                   		cmp0	r8
 1301 0985 61 E8                   		 skz
 1302 0987 EC 72 09 00             		 br	!!.L51
 292:../src/user_functions.c **** 
 293:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current2);
 1303                             		.loc 1 293 0 is_stmt 1
 1304 098b 30 00 00                		movw	ax, #_current2
 1305 098e B8 00                   		movw	[sp], ax
 1306 0990 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 294:../src/user_functions.c **** 	 current2 = current2 >> 2;
 1307                             		.loc 1 294 0
 1308 0994 8F 00 00                		mov	a, !_current2
 1309 0997 9D F0                   		mov	r8, a
 1310 0999 31 2A                   		shr	a, 2
 1311 099b 9D F0                   		mov	r8, a
 1312 099d 9F 00 00                		mov	!_current2, a
 295:../src/user_functions.c **** 
 296:../src/user_functions.c **** }
 1313                             		.loc 1 296 0
 1314 09a0 10 02                   		addw	sp, #2
 1315 09a2 D7                      		ret
 1316                             	.LFE4:
 1318                             		.global	_setRTC
 1320                             	_setRTC:
 1321                             	.LFB5:
 297:../src/user_functions.c **** 
 298:../src/user_functions.c **** void setRTC(){
 1322                             		.loc 1 298 0
 1323                             		; start of function
 1324                             		; locals: 26 bytes
 1325                             		; outgoing: 8 bytes
 1326 09a3 20 22                   		subw	sp, #34
 1327                             	.LCFI6:
 299:../src/user_functions.c **** 	uint8_t date[6] = {0,0,0,0,0,0};
 1328                             		.loc 1 299 0
 1329 09a5 F1                      		clrb	a
 1330 09a6 98 19                   		mov	[sp+25], a
 1331 09a8 F1                      		clrb	a
 1332 09a9 98 1A                   		mov	[sp+26], a
 1333 09ab F1                      		clrb	a
 1334 09ac 98 1B                   		mov	[sp+27], a
 1335 09ae F1                      		clrb	a
 1336 09af 98 1C                   		mov	[sp+28], a
 1337 09b1 F1                      		clrb	a
 1338 09b2 98 1D                   		mov	[sp+29], a
 1339 09b4 F1                      		clrb	a
 1340 09b5 98 1E                   		mov	[sp+30], a
 300:../src/user_functions.c **** 	uint8_t actualDate[6] = {0,0,0,0,0,0};
 1341                             		.loc 1 300 0
 1342 09b7 F1                      		clrb	a
 1343 09b8 98 13                   		mov	[sp+19], a
 1344 09ba F1                      		clrb	a
 1345 09bb 98 14                   		mov	[sp+20], a
 1346 09bd F1                      		clrb	a
 1347 09be 98 15                   		mov	[sp+21], a
 1348 09c0 F1                      		clrb	a
 1349 09c1 98 16                   		mov	[sp+22], a
 1350 09c3 F1                      		clrb	a
 1351 09c4 98 17                   		mov	[sp+23], a
 1352 09c6 F1                      		clrb	a
 1353 09c7 98 18                   		mov	[sp+24], a
 301:../src/user_functions.c **** 	count = 4;
 1354                             		.loc 1 301 0
 1355 09c9 30 04 00                		movw	ax, #4
 1356 09cc BF 00 00                		movw	!_count, ax
 302:../src/user_functions.c **** 	int dateCount = 0;
 1357                             		.loc 1 302 0
 1358 09cf F6                      		clrw	ax
 1359 09d0 B8 20                   		movw	[sp+32], ax
 303:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 304:../src/user_functions.c **** 
 305:../src/user_functions.c **** 	while(record[count] != '\r'){
 1360                             		.loc 1 305 0
 1361 09d2 EC 17 0B 00             		br	!!.L53
 1362                             	.L55:
 306:../src/user_functions.c **** 
 307:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1363                             		.loc 1 307 0
 1364 09d6 AE F8                   		movw	ax, sp
 1365 09d8 BD F2                   		movw	r10, ax
 1366 09da 04 19 00                		addw	ax, #25
 1367 09dd BD F0                   		movw	r8, ax
 1368 09df A8 20                   		movw	ax, [sp+32]
 1369 09e1 06 F0                   		addw	ax, r8
 1370 09e3 BD F0                   		movw	r8, ax
 1371 09e5 BD F4                   		movw	r12, ax
 1372 09e7 FA F4                   		movw	hl, r12
 1373 09e9 8B                      		mov	a, [hl]
 1374 09ea 9D F2                   		mov	r10, a
 1375 09ec AF 00 00                		movw	ax, !_count
 1376 09ef BD F0                   		movw	r8, ax
 1377 09f1 04 00 00                		addw	ax, #_record
 1378 09f4 16                      		movw	hl, ax
 1379 09f5 8B                      		mov	a, [hl]
 1380 09f6 9D F0                   		mov	r8, a
 1381 09f8 76                      		mov	l, a
 1382 09f9 8D F2                   		mov	a, r10
 1383 09fb 61 0E                   		add	a, l
 1384 09fd 9D F0                   		mov	r8, a
 1385 09ff 0C D0                   		add	a, #-48
 1386 0a01 9D F2                   		mov	r10, a
 1387 0a03 AE F8                   		movw	ax, sp
 1388 0a05 BD F4                   		movw	r12, ax
 1389 0a07 04 19 00                		addw	ax, #25
 1390 0a0a BD F0                   		movw	r8, ax
 1391 0a0c A8 20                   		movw	ax, [sp+32]
 1392 0a0e 06 F0                   		addw	ax, r8
 1393 0a10 BD F0                   		movw	r8, ax
 1394 0a12 BD F4                   		movw	r12, ax
 1395 0a14 DA F4                   		movw	bc, r12
 1396 0a16 8D F2                   		mov	a, r10
 1397 0a18 48 00 00                		mov	[bc], a
 308:../src/user_functions.c **** 		actualDate[dateCount] += record[count] - '0';
 1398                             		.loc 1 308 0
 1399 0a1b AE F8                   		movw	ax, sp
 1400 0a1d BD F2                   		movw	r10, ax
 1401 0a1f 04 13 00                		addw	ax, #19
 1402 0a22 BD F0                   		movw	r8, ax
 1403 0a24 A8 20                   		movw	ax, [sp+32]
 1404 0a26 06 F0                   		addw	ax, r8
 1405 0a28 BD F0                   		movw	r8, ax
 1406 0a2a BD F4                   		movw	r12, ax
 1407 0a2c FA F4                   		movw	hl, r12
 1408 0a2e 8B                      		mov	a, [hl]
 1409 0a2f 9D F2                   		mov	r10, a
 1410 0a31 AF 00 00                		movw	ax, !_count
 1411 0a34 BD F0                   		movw	r8, ax
 1412 0a36 04 00 00                		addw	ax, #_record
 1413 0a39 16                      		movw	hl, ax
 1414 0a3a 8B                      		mov	a, [hl]
 1415 0a3b 9D F0                   		mov	r8, a
 1416 0a3d 76                      		mov	l, a
 1417 0a3e 8D F2                   		mov	a, r10
 1418 0a40 61 0E                   		add	a, l
 1419 0a42 9D F0                   		mov	r8, a
 1420 0a44 0C D0                   		add	a, #-48
 1421 0a46 9D F2                   		mov	r10, a
 1422 0a48 AE F8                   		movw	ax, sp
 1423 0a4a BD F4                   		movw	r12, ax
 1424 0a4c 04 13 00                		addw	ax, #19
 1425 0a4f BD F0                   		movw	r8, ax
 1426 0a51 A8 20                   		movw	ax, [sp+32]
 1427 0a53 06 F0                   		addw	ax, r8
 1428 0a55 BD F0                   		movw	r8, ax
 1429 0a57 BD F4                   		movw	r12, ax
 1430 0a59 DA F4                   		movw	bc, r12
 1431 0a5b 8D F2                   		mov	a, r10
 1432 0a5d 48 00 00                		mov	[bc], a
 309:../src/user_functions.c **** 		count++;
 1433                             		.loc 1 309 0
 1434 0a60 AF 00 00                		movw	ax, !_count
 1435 0a63 BD F0                   		movw	r8, ax
 1436 0a65 A6 F0                   		incw	r8
 1437 0a67 AD F0                   		movw	ax, r8
 1438 0a69 BF 00 00                		movw	!_count, ax
 310:../src/user_functions.c **** 		if(record[count] == ','){
 1439                             		.loc 1 310 0
 1440 0a6c BD F0                   		movw	r8, ax
 1441 0a6e 04 00 00                		addw	ax, #_record
 1442 0a71 16                      		movw	hl, ax
 1443 0a72 8B                      		mov	a, [hl]
 1444 0a73 9D F0                   		mov	r8, a
 1445 0a75 4A F0 2C                		cmp	r8, #44
 1446 0a78 61 E8                   		 skz
 1447 0a7a EC 93 0A 00             		 br	!!.L54
 311:../src/user_functions.c **** 			dateCount++;
 1448                             		.loc 1 311 0
 1449 0a7e A8 20                   		movw	ax, [sp+32]
 1450 0a80 A1                      		incw	ax
 1451 0a81 B8 20                   		movw	[sp+32], ax
 312:../src/user_functions.c **** 			count++;
 1452                             		.loc 1 312 0
 1453 0a83 AF 00 00                		movw	ax, !_count
 1454 0a86 BD F0                   		movw	r8, ax
 1455 0a88 A6 F0                   		incw	r8
 1456 0a8a AD F0                   		movw	ax, r8
 1457 0a8c BF 00 00                		movw	!_count, ax
 1458 0a8f EC 17 0B 00             		br	!!.L53
 1459                             	.L54:
 313:../src/user_functions.c **** 		}
 314:../src/user_functions.c **** 		else if(record[count] == '\r'){
 1460                             		.loc 1 314 0
 1461 0a93 AF 00 00                		movw	ax, !_count
 1462 0a96 BD F0                   		movw	r8, ax
 1463 0a98 04 00 00                		addw	ax, #_record
 1464 0a9b 16                      		movw	hl, ax
 1465 0a9c 8B                      		mov	a, [hl]
 1466 0a9d 9D F0                   		mov	r8, a
 1467 0a9f 4A F0 0D                		cmp	r8, #13
 1468 0aa2 61 F8                   		 sknz
 1469 0aa4 EC 17 0B 00             		 br	!!.L53
 315:../src/user_functions.c **** 
 316:../src/user_functions.c **** 		}
 317:../src/user_functions.c **** 		else{
 318:../src/user_functions.c **** 			date[dateCount] = date[dateCount]<<4;
 1470                             		.loc 1 318 0
 1471 0aa8 AE F8                   		movw	ax, sp
 1472 0aaa BD F2                   		movw	r10, ax
 1473 0aac 04 19 00                		addw	ax, #25
 1474 0aaf BD F0                   		movw	r8, ax
 1475 0ab1 A8 20                   		movw	ax, [sp+32]
 1476 0ab3 06 F0                   		addw	ax, r8
 1477 0ab5 BD F0                   		movw	r8, ax
 1478 0ab7 BD F4                   		movw	r12, ax
 1479 0ab9 FA F4                   		movw	hl, r12
 1480 0abb 8B                      		mov	a, [hl]
 1481 0abc 9D F0                   		mov	r8, a
 1482 0abe 31 49                   		shl	a, 4
 1483 0ac0 9D F2                   		mov	r10, a
 1484 0ac2 AE F8                   		movw	ax, sp
 1485 0ac4 BD F4                   		movw	r12, ax
 1486 0ac6 04 19 00                		addw	ax, #25
 1487 0ac9 BD F0                   		movw	r8, ax
 1488 0acb A8 20                   		movw	ax, [sp+32]
 1489 0acd 06 F0                   		addw	ax, r8
 1490 0acf BD F0                   		movw	r8, ax
 1491 0ad1 BD F4                   		movw	r12, ax
 1492 0ad3 DA F4                   		movw	bc, r12
 1493 0ad5 8D F2                   		mov	a, r10
 1494 0ad7 48 00 00                		mov	[bc], a
 319:../src/user_functions.c **** 			actualDate[dateCount] = actualDate[dateCount]*10;
 1495                             		.loc 1 319 0
 1496 0ada AE F8                   		movw	ax, sp
 1497 0adc BD F2                   		movw	r10, ax
 1498 0ade 04 13 00                		addw	ax, #19
 1499 0ae1 BD F0                   		movw	r8, ax
 1500 0ae3 A8 20                   		movw	ax, [sp+32]
 1501 0ae5 06 F0                   		addw	ax, r8
 1502 0ae7 BD F0                   		movw	r8, ax
 1503 0ae9 BD F4                   		movw	r12, ax
 1504 0aeb FA F4                   		movw	hl, r12
 1505 0aed 8B                      		mov	a, [hl]
 1506 0aee 9D F0                   		mov	r8, a
 1507 0af0 61 01                   		add	a, a
 1508 0af2 9D F0                   		mov	r8, a
 1509 0af4 31 29                   		shl	a, 2
 1510 0af6 9D F1                   		mov	r9, a
 1511 0af8 76                      		mov	l, a
 1512 0af9 8D F0                   		mov	a, r8
 1513 0afb 61 0E                   		add	a, l
 1514 0afd 9D F2                   		mov	r10, a
 1515 0aff AE F8                   		movw	ax, sp
 1516 0b01 BD F4                   		movw	r12, ax
 1517 0b03 04 13 00                		addw	ax, #19
 1518 0b06 BD F0                   		movw	r8, ax
 1519 0b08 A8 20                   		movw	ax, [sp+32]
 1520 0b0a 06 F0                   		addw	ax, r8
 1521 0b0c BD F0                   		movw	r8, ax
 1522 0b0e BD F4                   		movw	r12, ax
 1523 0b10 DA F4                   		movw	bc, r12
 1524 0b12 8D F2                   		mov	a, r10
 1525 0b14 48 00 00                		mov	[bc], a
 1526                             	.L53:
 305:../src/user_functions.c **** 
 1527                             		.loc 1 305 0
 1528 0b17 AF 00 00                		movw	ax, !_count
 1529 0b1a BD F0                   		movw	r8, ax
 1530 0b1c 04 00 00                		addw	ax, #_record
 1531 0b1f 16                      		movw	hl, ax
 1532 0b20 8B                      		mov	a, [hl]
 1533 0b21 9D F0                   		mov	r8, a
 1534 0b23 4A F0 0D                		cmp	r8, #13
 1535 0b26 61 E8                   		 skz
 1536 0b28 EC D6 09 00             		 br	!!.L55
 320:../src/user_functions.c **** 		}
 321:../src/user_functions.c **** 
 322:../src/user_functions.c **** 	}
 323:../src/user_functions.c **** 
 324:../src/user_functions.c **** 	if(testDate(actualDate)){
 1537                             		.loc 1 324 0
 1538 0b2c C9 F0 22 00             		movw	r8, #34
 1539 0b30 AE F8                   		movw	ax, sp
 1540 0b32 BD F0                   		movw	r8, ax
 1541 0b34 04 22 00                		addw	ax, #34
 1542 0b37 BD F0                   		movw	r8, ax
 1543 0b39 04 F1 FF                		addw	ax, #-15
 1544 0b3c B8 00                   		movw	[sp], ax
 1545 0b3e FC 00 00 00             		call	!!%code(_testDate)
 1546 0b42 D4 F0                   		cmp0	r8
 1547 0b44 61 F8                   		 sknz
 1548 0b46 EC B0 0B 00             		 br	!!.L56
 325:../src/user_functions.c **** 
 326:../src/user_functions.c **** 		theDate.year = date[0];
 1549                             		.loc 1 326 0
 1550 0b4a 88 19                   		mov	a, [sp+25]
 1551 0b4c 9D F0                   		mov	r8, a
 1552 0b4e 98 12                   		mov	[sp+18], a
 327:../src/user_functions.c **** 		theDate.month = date[1];
 1553                             		.loc 1 327 0
 1554 0b50 88 1A                   		mov	a, [sp+26]
 1555 0b52 9D F0                   		mov	r8, a
 1556 0b54 98 11                   		mov	[sp+17], a
 328:../src/user_functions.c **** 		theDate.day = date[2];
 1557                             		.loc 1 328 0
 1558 0b56 88 1B                   		mov	a, [sp+27]
 1559 0b58 9D F0                   		mov	r8, a
 1560 0b5a 98 0F                   		mov	[sp+15], a
 329:../src/user_functions.c **** 		theDate.hour = date[3];
 1561                             		.loc 1 329 0
 1562 0b5c 88 1C                   		mov	a, [sp+28]
 1563 0b5e 9D F0                   		mov	r8, a
 1564 0b60 98 0E                   		mov	[sp+14], a
 330:../src/user_functions.c **** 		theDate.min = date[4];
 1565                             		.loc 1 330 0
 1566 0b62 88 1D                   		mov	a, [sp+29]
 1567 0b64 9D F0                   		mov	r8, a
 1568 0b66 98 0D                   		mov	[sp+13], a
 331:../src/user_functions.c **** 		theDate.sec = date[5];
 1569                             		.loc 1 331 0
 1570 0b68 88 1E                   		mov	a, [sp+30]
 1571 0b6a 9D F0                   		mov	r8, a
 1572 0b6c 98 0C                   		mov	[sp+12], a
 332:../src/user_functions.c **** 
 333:../src/user_functions.c **** 		count = 5;
 1573                             		.loc 1 333 0
 1574 0b6e 30 05 00                		movw	ax, #5
 1575 0b71 BF 00 00                		movw	!_count, ax
 334:../src/user_functions.c **** 		strcpy(response, "$B0\x0d\x0a");
 1576                             		.loc 1 334 0
 1577 0b74 51 24                   		mov	a, #36
 1578 0b76 9F 04 00                		mov	!_response, a
 1579 0b79 51 42                   		mov	a, #66
 1580 0b7b 9F 05 00                		mov	!_response+1, a
 1581 0b7e 51 30                   		mov	a, #48
 1582 0b80 9F 06 00                		mov	!_response+2, a
 1583 0b83 51 0D                   		mov	a, #13
 1584 0b85 9F 07 00                		mov	!_response+3, a
 1585 0b88 51 0A                   		mov	a, #10
 1586 0b8a 9F 08 00                		mov	!_response+4, a
 1587 0b8d F5 09 00                		clrb	!_response+5
 335:../src/user_functions.c **** 
 336:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 1588                             		.loc 1 336 0
 1589 0b90 A8 0C                   		movw	ax, [sp+12]
 1590 0b92 BD F0                   		movw	r8, ax
 1591 0b94 B8 00                   		movw	[sp], ax
 1592 0b96 A8 0E                   		movw	ax, [sp+14]
 1593 0b98 BD F0                   		movw	r8, ax
 1594 0b9a B8 02                   		movw	[sp+2], ax
 1595 0b9c A8 10                   		movw	ax, [sp+16]
 1596 0b9e BD F0                   		movw	r8, ax
 1597 0ba0 B8 04                   		movw	[sp+4], ax
 1598 0ba2 88 12                   		mov	a, [sp+18]
 1599 0ba4 9D F0                   		mov	r8, a
 1600 0ba6 98 06                   		mov	[sp+6], a
 1601 0ba8 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1602 0bac EC 0A 0C 00             		br	!!.L52
 1603                             	.L56:
 1604                             	.LBB6:
 337:../src/user_functions.c **** 	}
 338:../src/user_functions.c **** 	else{
 339:../src/user_functions.c **** 		char str[4];
 340:../src/user_functions.c **** 		uint8_t ack = 0;
 1605                             		.loc 1 340 0
 1606 0bb0 F1                      		clrb	a
 1607 0bb1 98 1F                   		mov	[sp+31], a
 341:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 1608                             		.loc 1 341 0
 1609 0bb3 AE F8                   		movw	ax, sp
 1610 0bb5 BD F2                   		movw	r10, ax
 1611 0bb7 04 08 00                		addw	ax, #8
 1612 0bba BD F0                   		movw	r8, ax
 1613 0bbc BD F4                   		movw	r12, ax
 1614 0bbe DA F4                   		movw	bc, r12
 1615 0bc0 30 24 42                		movw	ax, #16932
 1616 0bc3 78 00 00                		movw	[bc], ax
 1617 0bc6 DA F0                   		movw	bc, r8
 1618 0bc8 30 32 0D                		movw	ax, #3378
 1619 0bcb 78 02 00                		movw	2[bc], ax
 1620 0bce 30 0A 00                		movw	ax, #10
 1621 0bd1 78 04 00                		movw	4[bc], ax
 342:../src/user_functions.c **** 		count = strlen(str);
 1622                             		.loc 1 342 0
 1623 0bd4 C9 F0 22 00             		movw	r8, #34
 1624 0bd8 AE F8                   		movw	ax, sp
 1625 0bda BD F0                   		movw	r8, ax
 1626 0bdc 04 22 00                		addw	ax, #34
 1627 0bdf BD F0                   		movw	r8, ax
 1628 0be1 04 E6 FF                		addw	ax, #-26
 1629 0be4 B8 00                   		movw	[sp], ax
 1630 0be6 FC 00 00 00             		call	!!%code(_strlen)
 1631 0bea AD F0                   		movw	ax, r8
 1632 0bec BF 00 00                		movw	!_count, ax
 343:../src/user_functions.c **** 		strcpy(response, str);
 1633                             		.loc 1 343 0
 1634 0bef 30 04 00                		movw	ax, #_response
 1635 0bf2 B8 00                   		movw	[sp], ax
 1636 0bf4 C9 F2 22 00             		movw	r10, #34
 1637 0bf8 AE F8                   		movw	ax, sp
 1638 0bfa BD F2                   		movw	r10, ax
 1639 0bfc 04 22 00                		addw	ax, #34
 1640 0bff BD F2                   		movw	r10, ax
 1641 0c01 04 E6 FF                		addw	ax, #-26
 1642 0c04 B8 02                   		movw	[sp+2], ax
 1643 0c06 FC 00 00 00             		call	!!%code(_strcpy)
 1644                             	.L52:
 1645                             	.LBE6:
 344:../src/user_functions.c **** 
 345:../src/user_functions.c **** 	}
 346:../src/user_functions.c **** 
 347:../src/user_functions.c **** }
 1646                             		.loc 1 347 0
 1647 0c0a 10 22                   		addw	sp, #34
 1648 0c0c D7                      		ret
 1649                             	.LFE5:
 1651                             		.section	.rodata
 1652                             	.LC3:
 1653 0022 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 1653      25 64 2C 25 64 2C 25 64 
 1653      2C 25 64 2C 25 64 0D 0A 
 1653      00 
 1654                             	.text
 1655                             		.global	_getRTC
 1657                             	_getRTC:
 1658                             	.LFB6:
 348:../src/user_functions.c **** 
 349:../src/user_functions.c **** void getRTC(){
 1659                             		.loc 1 349 0
 1660                             		; start of function
 1661                             		; push 6: r16 r18 r20
 1662                             		; locals: 16 bytes
 1663                             		; outgoing: 16 bytes
 1664 0c0d 61 EF                   		sel	rb2
 1665 0c0f C1                      		push	ax ; r16
 1666                             	.LCFI7:
 1667 0c10 C3                      		push	bc ; r18
 1668                             	.LCFI8:
 1669 0c11 C5                      		push	de ; r20
 1670                             	.LCFI9:
 1671 0c12 61 CF                   		sel	rb0
 1672 0c14 20 20                   		subw	sp, #32
 1673                             	.LCFI10:
 350:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 351:../src/user_functions.c **** 	uint8_t date[] = {0,0,0,0,0,0};
 1674                             		.loc 1 351 0
 1675 0c16 F1                      		clrb	a
 1676 0c17 98 11                   		mov	[sp+17], a
 1677 0c19 F1                      		clrb	a
 1678 0c1a 98 12                   		mov	[sp+18], a
 1679 0c1c F1                      		clrb	a
 1680 0c1d 98 13                   		mov	[sp+19], a
 1681 0c1f F1                      		clrb	a
 1682 0c20 98 14                   		mov	[sp+20], a
 1683 0c22 F1                      		clrb	a
 1684 0c23 98 15                   		mov	[sp+21], a
 1685 0c25 F1                      		clrb	a
 1686 0c26 98 16                   		mov	[sp+22], a
 352:../src/user_functions.c **** 
 353:../src/user_functions.c **** 
 354:../src/user_functions.c **** 
 355:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 1687                             		.loc 1 355 0
 1688 0c28 C9 F0 20 00             		movw	r8, #32
 1689 0c2c AE F8                   		movw	ax, sp
 1690 0c2e BD F0                   		movw	r8, ax
 1691 0c30 04 20 00                		addw	ax, #32
 1692 0c33 BD F0                   		movw	r8, ax
 1693 0c35 04 F7 FF                		addw	ax, #-9
 1694 0c38 B8 00                   		movw	[sp], ax
 1695 0c3a FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 356:../src/user_functions.c **** 
 357:../src/user_functions.c **** 	date[0] = theDate.year;
 1696                             		.loc 1 357 0
 1697 0c3e 88 1D                   		mov	a, [sp+29]
 1698 0c40 9D F0                   		mov	r8, a
 1699 0c42 98 11                   		mov	[sp+17], a
 358:../src/user_functions.c **** 	date[1] = theDate.month;
 1700                             		.loc 1 358 0
 1701 0c44 88 1C                   		mov	a, [sp+28]
 1702 0c46 9D F0                   		mov	r8, a
 1703 0c48 98 12                   		mov	[sp+18], a
 359:../src/user_functions.c **** 	date[2] = theDate.day;
 1704                             		.loc 1 359 0
 1705 0c4a 88 1A                   		mov	a, [sp+26]
 1706 0c4c 9D F0                   		mov	r8, a
 1707 0c4e 98 13                   		mov	[sp+19], a
 360:../src/user_functions.c **** 	date[3] = theDate.hour;
 1708                             		.loc 1 360 0
 1709 0c50 88 19                   		mov	a, [sp+25]
 1710 0c52 9D F0                   		mov	r8, a
 1711 0c54 98 14                   		mov	[sp+20], a
 361:../src/user_functions.c **** 	date[4] = theDate.min;
 1712                             		.loc 1 361 0
 1713 0c56 88 18                   		mov	a, [sp+24]
 1714 0c58 9D F0                   		mov	r8, a
 1715 0c5a 98 15                   		mov	[sp+21], a
 362:../src/user_functions.c **** 	date[5] = theDate.sec;
 1716                             		.loc 1 362 0
 1717 0c5c 88 17                   		mov	a, [sp+23]
 1718 0c5e 9D F0                   		mov	r8, a
 1719 0c60 98 16                   		mov	[sp+22], a
 363:../src/user_functions.c **** 
 364:../src/user_functions.c **** 	BCDtoDEC(date);
 1720                             		.loc 1 364 0
 1721 0c62 C9 F0 20 00             		movw	r8, #32
 1722 0c66 AE F8                   		movw	ax, sp
 1723 0c68 BD F0                   		movw	r8, ax
 1724 0c6a 04 20 00                		addw	ax, #32
 1725 0c6d BD F0                   		movw	r8, ax
 1726 0c6f 04 F1 FF                		addw	ax, #-15
 1727 0c72 B8 00                   		movw	[sp], ax
 1728 0c74 FC 00 00 00             		call	!!%code(_BCDtoDEC)
 365:../src/user_functions.c **** 
 366:../src/user_functions.c **** 	char *str;
 367:../src/user_functions.c **** 	str = (char *)malloc(32);
 1729                             		.loc 1 367 0
 1730 0c78 30 20 00                		movw	ax, #32
 1731 0c7b B8 00                   		movw	[sp], ax
 1732 0c7d FC 00 00 00             		call	!!%code(_malloc)
 1733 0c81 AD F0                   		movw	ax, r8
 1734 0c83 B8 1E                   		movw	[sp+30], ax
 368:../src/user_functions.c **** 	sprintf(str, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2], date[3], date[4], date[5
 1735                             		.loc 1 368 0
 1736 0c85 88 11                   		mov	a, [sp+17]
 1737 0c87 9D F0                   		mov	r8, a
 1738 0c89 70                      		mov	x, a 
 1739 0c8a 51 00                   		mov	a, #0
 1740 0c8c BD EC                   		movw	r20, ax
 1741 0c8e 88 12                   		mov	a, [sp+18]
 1742 0c90 9D F0                   		mov	r8, a
 1743 0c92 70                      		mov	x, a 
 1744 0c93 51 00                   		mov	a, #0
 1745 0c95 BD EA                   		movw	r18, ax
 1746 0c97 88 13                   		mov	a, [sp+19]
 1747 0c99 9D F0                   		mov	r8, a
 1748 0c9b 70                      		mov	x, a 
 1749 0c9c 51 00                   		mov	a, #0
 1750 0c9e BD E8                   		movw	r16, ax
 1751 0ca0 88 14                   		mov	a, [sp+20]
 1752 0ca2 9D F0                   		mov	r8, a
 1753 0ca4 70                      		mov	x, a 
 1754 0ca5 51 00                   		mov	a, #0
 1755 0ca7 BD F6                   		movw	r14, ax
 1756 0ca9 88 15                   		mov	a, [sp+21]
 1757 0cab 9D F0                   		mov	r8, a
 1758 0cad 70                      		mov	x, a 
 1759 0cae 51 00                   		mov	a, #0
 1760 0cb0 BD F4                   		movw	r12, ax
 1761 0cb2 88 16                   		mov	a, [sp+22]
 1762 0cb4 9D F0                   		mov	r8, a
 1763 0cb6 70                      		mov	x, a 
 1764 0cb7 51 00                   		mov	a, #0
 1765 0cb9 BD F2                   		movw	r10, ax
 1766 0cbb A8 1E                   		movw	ax, [sp+30]
 1767 0cbd BD F0                   		movw	r8, ax
 1768 0cbf B8 00                   		movw	[sp], ax
 1769 0cc1 30 22 00                		movw	ax, #.LC3
 1770 0cc4 B8 02                   		movw	[sp+2], ax
 1771 0cc6 AD EC                   		movw	ax, r20
 1772 0cc8 B8 04                   		movw	[sp+4], ax
 1773 0cca AD EA                   		movw	ax, r18
 1774 0ccc B8 06                   		movw	[sp+6], ax
 1775 0cce AD E8                   		movw	ax, r16
 1776 0cd0 B8 08                   		movw	[sp+8], ax
 1777 0cd2 AD F6                   		movw	ax, r14
 1778 0cd4 B8 0A                   		movw	[sp+10], ax
 1779 0cd6 AD F4                   		movw	ax, r12
 1780 0cd8 B8 0C                   		movw	[sp+12], ax
 1781 0cda AD F2                   		movw	ax, r10
 1782 0cdc B8 0E                   		movw	[sp+14], ax
 1783 0cde FC 00 00 00             		call	!!%code(_sprintf)
 369:../src/user_functions.c **** //	free(date);
 370:../src/user_functions.c **** 	count = strlen(str);
 1784                             		.loc 1 370 0
 1785 0ce2 A8 1E                   		movw	ax, [sp+30]
 1786 0ce4 BD F0                   		movw	r8, ax
 1787 0ce6 B8 00                   		movw	[sp], ax
 1788 0ce8 FC 00 00 00             		call	!!%code(_strlen)
 1789 0cec AD F0                   		movw	ax, r8
 1790 0cee BF 00 00                		movw	!_count, ax
 371:../src/user_functions.c **** 	strcpy(response, str);
 1791                             		.loc 1 371 0
 1792 0cf1 30 04 00                		movw	ax, #_response
 1793 0cf4 B8 00                   		movw	[sp], ax
 1794 0cf6 A8 1E                   		movw	ax, [sp+30]
 1795 0cf8 BD F0                   		movw	r8, ax
 1796 0cfa B8 02                   		movw	[sp+2], ax
 1797 0cfc FC 00 00 00             		call	!!%code(_strcpy)
 372:../src/user_functions.c **** 	free(str);
 1798                             		.loc 1 372 0
 1799 0d00 A8 1E                   		movw	ax, [sp+30]
 1800 0d02 BD F0                   		movw	r8, ax
 1801 0d04 B8 00                   		movw	[sp], ax
 1802 0d06 FC 00 00 00             		call	!!%code(_free)
 373:../src/user_functions.c **** 
 374:../src/user_functions.c **** }
 1803                             		.loc 1 374 0
 1804 0d0a 10 20                   		addw	sp, #32
 1805 0d0c 61 EF                   		sel	rb2
 1806 0d0e C4                      		pop	de ; r20
 1807 0d0f C2                      		pop	bc ; r18
 1808 0d10 C0                      		pop	ax ; r16
 1809 0d11 61 CF                   		sel	rb0
 1810 0d13 D7                      		ret
 1811                             	.LFE6:
 1813                             		.global	_BCDtoDEC
 1815                             	_BCDtoDEC:
 1816                             	.LFB7:
 375:../src/user_functions.c **** 
 376:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]){
 1817                             		.loc 1 376 0
 1818                             		; start of function
 1819                             		; locals: 6 bytes
 1820 0d14 20 06                   		subw	sp, #6
 1821                             	.LCFI11:
 377:../src/user_functions.c **** 
 378:../src/user_functions.c **** 	uint8_t len =  6;
 1822                             		.loc 1 378 0
 1823 0d16 51 06                   		mov	a, #6
 1824 0d18 98 03                   		mov	[sp+3], a
 379:../src/user_functions.c **** 	uint8_t upper, lower;
 380:../src/user_functions.c **** 	int i;
 381:../src/user_functions.c **** 	for(i = 0; i < len; i++){
 1825                             		.loc 1 381 0
 1826 0d1a F6                      		clrw	ax
 1827 0d1b B8 04                   		movw	[sp+4], ax
 1828 0d1d EC 7F 0D 00             		br	!!.L60
 1829                             	.L61:
 382:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1830                             		.loc 1 382 0 discriminator 3
 1831 0d21 A8 04                   		movw	ax, [sp+4]
 1832 0d23 BD F0                   		movw	r8, ax
 1833 0d25 A8 0A                   		movw	ax, [sp+10]
 1834 0d27 06 F0                   		addw	ax, r8
 1835 0d29 BD F0                   		movw	r8, ax
 1836 0d2b BD F2                   		movw	r10, ax
 1837 0d2d FA F2                   		movw	hl, r10
 1838 0d2f 8B                      		mov	a, [hl]
 1839 0d30 9D F0                   		mov	r8, a
 1840 0d32 5C 0F                   		and	a, #15
 1841 0d34 98 02                   		mov	[sp+2], a
 383:../src/user_functions.c **** 		upper = (arr[i] & 0xf0)>>4;
 1842                             		.loc 1 383 0 discriminator 3
 1843 0d36 A8 04                   		movw	ax, [sp+4]
 1844 0d38 BD F0                   		movw	r8, ax
 1845 0d3a A8 0A                   		movw	ax, [sp+10]
 1846 0d3c 06 F0                   		addw	ax, r8
 1847 0d3e BD F0                   		movw	r8, ax
 1848 0d40 BD F4                   		movw	r12, ax
 1849 0d42 FA F4                   		movw	hl, r12
 1850 0d44 8B                      		mov	a, [hl]
 1851 0d45 9D F0                   		mov	r8, a
 1852 0d47 31 4A                   		shr	a, 4
 1853 0d49 98 01                   		mov	[sp+1], a
 384:../src/user_functions.c **** 
 385:../src/user_functions.c **** 		arr[i] = upper*10 + lower;
 1854                             		.loc 1 385 0 discriminator 3
 1855 0d4b A8 04                   		movw	ax, [sp+4]
 1856 0d4d BD F0                   		movw	r8, ax
 1857 0d4f A8 0A                   		movw	ax, [sp+10]
 1858 0d51 06 F0                   		addw	ax, r8
 1859 0d53 BD F2                   		movw	r10, ax
 1860 0d55 88 01                   		mov	a, [sp+1]
 1861 0d57 9D F0                   		mov	r8, a
 1862 0d59 61 01                   		add	a, a
 1863 0d5b 9D F0                   		mov	r8, a
 1864 0d5d 31 29                   		shl	a, 2
 1865 0d5f 9D F1                   		mov	r9, a
 1866 0d61 76                      		mov	l, a
 1867 0d62 8D F0                   		mov	a, r8
 1868 0d64 61 0E                   		add	a, l
 1869 0d66 9D F0                   		mov	r8, a
 1870 0d68 76                      		mov	l, a
 1871 0d69 88 02                   		mov	a, [sp+2]
 1872 0d6b 61 0E                   		add	a, l
 1873 0d6d 9D F0                   		mov	r8, a
 1874 0d6f AD F2                   		movw	ax, r10
 1875 0d71 BD F4                   		movw	r12, ax
 1876 0d73 DA F4                   		movw	bc, r12
 1877 0d75 8D F0                   		mov	a, r8
 1878 0d77 48 00 00                		mov	[bc], a
 381:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1879                             		.loc 1 381 0 discriminator 3
 1880 0d7a A8 04                   		movw	ax, [sp+4]
 1881 0d7c A1                      		incw	ax
 1882 0d7d B8 04                   		movw	[sp+4], ax
 1883                             	.L60:
 381:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1884                             		.loc 1 381 0 is_stmt 0 discriminator 1
 1885 0d7f 88 03                   		mov	a, [sp+3]
 1886 0d81 70                      		mov	x, a 
 1887 0d82 51 00                   		mov	a, #0
 1888 0d84 BD F2                   		movw	r10, ax
 1889 0d86 A8 04                   		movw	ax, [sp+4]
 1890 0d88 BD F0                   		movw	r8, ax
 1891 0d8a AD F2                   		movw	ax, r10
 1892 0d8c 46 F0                   		cmpw	ax, r8
 1893 0d8e 71 FF                   		 xor1	CY, a.7
 1894 0d90 71 77 F1                		 xor1	CY, r9.7
 1895 0d93 61 F3                   		 sknh
 1896 0d95 EC 21 0D 00             		 br	!!.L61
 386:../src/user_functions.c **** 	}
 387:../src/user_functions.c **** }
 1897                             		.loc 1 387 0 is_stmt 1
 1898 0d99 10 06                   		addw	sp, #6
 1899 0d9b D7                      		ret
 1900                             	.LFE7:
 1902                             		.global	_testDate
 1904                             	_testDate:
 1905                             	.LFB8:
 388:../src/user_functions.c **** 
 389:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 390:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]){
 1906                             		.loc 1 390 0
 1907                             		; start of function
 1908                             		; locals: 24 bytes
 1909 0d9c 20 18                   		subw	sp, #24
 1910                             	.LCFI12:
 391:../src/user_functions.c **** 
 392:../src/user_functions.c **** 	int daysInMonth[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 1911                             		.loc 1 392 0
 1912 0d9e 30 1F 00                		movw	ax, #31
 1913 0da1 B8 00                   		movw	[sp], ax
 1914 0da3 30 1C 00                		movw	ax, #28
 1915 0da6 B8 02                   		movw	[sp+2], ax
 1916 0da8 30 1F 00                		movw	ax, #31
 1917 0dab B8 04                   		movw	[sp+4], ax
 1918 0dad 30 1E 00                		movw	ax, #30
 1919 0db0 B8 06                   		movw	[sp+6], ax
 1920 0db2 30 1F 00                		movw	ax, #31
 1921 0db5 B8 08                   		movw	[sp+8], ax
 1922 0db7 30 1E 00                		movw	ax, #30
 1923 0dba B8 0A                   		movw	[sp+10], ax
 1924 0dbc 30 1F 00                		movw	ax, #31
 1925 0dbf B8 0C                   		movw	[sp+12], ax
 1926 0dc1 30 1F 00                		movw	ax, #31
 1927 0dc4 B8 0E                   		movw	[sp+14], ax
 1928 0dc6 30 1E 00                		movw	ax, #30
 1929 0dc9 B8 10                   		movw	[sp+16], ax
 1930 0dcb 30 1F 00                		movw	ax, #31
 1931 0dce B8 12                   		movw	[sp+18], ax
 1932 0dd0 30 1E 00                		movw	ax, #30
 1933 0dd3 B8 14                   		movw	[sp+20], ax
 1934 0dd5 30 1F 00                		movw	ax, #31
 1935 0dd8 B8 16                   		movw	[sp+22], ax
 393:../src/user_functions.c **** 
 394:../src/user_functions.c **** 	if(arr[1] > 12){
 1936                             		.loc 1 394 0
 1937 0dda A8 1C                   		movw	ax, [sp+28]
 1938 0ddc A1                      		incw	ax
 1939 0ddd BD F0                   		movw	r8, ax
 1940 0ddf BD F2                   		movw	r10, ax
 1941 0de1 FA F2                   		movw	hl, r10
 1942 0de3 8B                      		mov	a, [hl]
 1943 0de4 9D F0                   		mov	r8, a
 1944 0de6 4A F0 0C                		cmp	r8, #12
 1945 0de9 61 E3                   		 skh
 1946 0deb EC F5 0D 00             		 br	!!.L63
 395:../src/user_functions.c **** 		return 0;
 1947                             		.loc 1 395 0
 1948 0def F4 F0                   		clrb	r8
 1949 0df1 EC A7 0E 00             		br	!!.L69
 1950                             	.L63:
 396:../src/user_functions.c **** 	}
 397:../src/user_functions.c **** 	else if(arr[2] > daysInMonth[arr[1]]){
 1951                             		.loc 1 397 0
 1952 0df5 A8 1C                   		movw	ax, [sp+28]
 1953 0df7 04 02 00                		addw	ax, #2
 1954 0dfa BD F0                   		movw	r8, ax
 1955 0dfc BD F4                   		movw	r12, ax
 1956 0dfe FA F4                   		movw	hl, r12
 1957 0e00 8B                      		mov	a, [hl]
 1958 0e01 9D F0                   		mov	r8, a
 1959 0e03 70                      		mov	x, a 
 1960 0e04 51 00                   		mov	a, #0
 1961 0e06 BD F2                   		movw	r10, ax
 1962 0e08 A8 1C                   		movw	ax, [sp+28]
 1963 0e0a A1                      		incw	ax
 1964 0e0b BD F0                   		movw	r8, ax
 1965 0e0d BD F4                   		movw	r12, ax
 1966 0e0f FA F4                   		movw	hl, r12
 1967 0e11 8B                      		mov	a, [hl]
 1968 0e12 9D F0                   		mov	r8, a
 1969 0e14 CD F1 00                		mov	r9, #0
 1970 0e17 AD F0                   		movw	ax, r8
 1971 0e19 01                      		addw	ax, ax
 1972 0e1a BD F0                   		movw	r8, ax
 1973 0e1c C9 F4 18 00             		movw	r12, #24
 1974 0e20 AE F8                   		movw	ax, sp
 1975 0e22 BD F4                   		movw	r12, ax
 1976 0e24 04 18 00                		addw	ax, #24
 1977 0e27 BD F4                   		movw	r12, ax
 1978 0e29 06 F0                   		addw	ax, r8
 1979 0e2b BD F0                   		movw	r8, ax
 1980 0e2d 04 E8 FF                		addw	ax, #-24
 1981 0e30 BD F0                   		movw	r8, ax
 1982 0e32 BD F4                   		movw	r12, ax
 1983 0e34 FA F4                   		movw	hl, r12
 1984 0e36 AB                      		movw	ax, [hl]
 1985 0e37 BD F0                   		movw	r8, ax
 1986 0e39 AD F2                   		movw	ax, r10
 1987 0e3b 46 F0                   		cmpw	ax, r8
 1988 0e3d 71 FF                   		 xor1	CY, a.7
 1989 0e3f 71 77 F1                		 xor1	CY, r9.7
 1990 0e42 61 E3                   		 skh
 1991 0e44 EC 4E 0E 00             		 br	!!.L65
 398:../src/user_functions.c **** 		return 0;
 1992                             		.loc 1 398 0
 1993 0e48 F4 F0                   		clrb	r8
 1994 0e4a EC A7 0E 00             		br	!!.L69
 1995                             	.L65:
 399:../src/user_functions.c **** 	}
 400:../src/user_functions.c **** 	else if(arr[3] > 23){
 1996                             		.loc 1 400 0
 1997 0e4e A8 1C                   		movw	ax, [sp+28]
 1998 0e50 04 03 00                		addw	ax, #3
 1999 0e53 BD F0                   		movw	r8, ax
 2000 0e55 BD F2                   		movw	r10, ax
 2001 0e57 FA F2                   		movw	hl, r10
 2002 0e59 8B                      		mov	a, [hl]
 2003 0e5a 9D F0                   		mov	r8, a
 2004 0e5c 4A F0 17                		cmp	r8, #23
 2005 0e5f 61 E3                   		 skh
 2006 0e61 EC 6B 0E 00             		 br	!!.L66
 401:../src/user_functions.c **** 		return 0;
 2007                             		.loc 1 401 0
 2008 0e65 F4 F0                   		clrb	r8
 2009 0e67 EC A7 0E 00             		br	!!.L69
 2010                             	.L66:
 402:../src/user_functions.c **** 	}
 403:../src/user_functions.c **** 	else if(arr[4] > 59){
 2011                             		.loc 1 403 0
 2012 0e6b A8 1C                   		movw	ax, [sp+28]
 2013 0e6d 04 04 00                		addw	ax, #4
 2014 0e70 BD F0                   		movw	r8, ax
 2015 0e72 BD F4                   		movw	r12, ax
 2016 0e74 FA F4                   		movw	hl, r12
 2017 0e76 8B                      		mov	a, [hl]
 2018 0e77 9D F0                   		mov	r8, a
 2019 0e79 4A F0 3B                		cmp	r8, #59
 2020 0e7c 61 E3                   		 skh
 2021 0e7e EC 88 0E 00             		 br	!!.L67
 404:../src/user_functions.c **** 		return 0;
 2022                             		.loc 1 404 0
 2023 0e82 F4 F0                   		clrb	r8
 2024 0e84 EC A7 0E 00             		br	!!.L69
 2025                             	.L67:
 405:../src/user_functions.c **** 	}
 406:../src/user_functions.c **** 	else if(arr[5] > 59){
 2026                             		.loc 1 406 0
 2027 0e88 A8 1C                   		movw	ax, [sp+28]
 2028 0e8a 04 05 00                		addw	ax, #5
 2029 0e8d BD F0                   		movw	r8, ax
 2030 0e8f BD F2                   		movw	r10, ax
 2031 0e91 FA F2                   		movw	hl, r10
 2032 0e93 8B                      		mov	a, [hl]
 2033 0e94 9D F0                   		mov	r8, a
 2034 0e96 4A F0 3B                		cmp	r8, #59
 2035 0e99 61 E3                   		 skh
 2036 0e9b EC A5 0E 00             		 br	!!.L68
 407:../src/user_functions.c **** 		return 0;
 2037                             		.loc 1 407 0
 2038 0e9f F4 F0                   		clrb	r8
 2039 0ea1 EC A7 0E 00             		br	!!.L69
 2040                             	.L68:
 408:../src/user_functions.c **** 	}
 409:../src/user_functions.c **** 	else{
 410:../src/user_functions.c **** 		return 1;
 2041                             		.loc 1 410 0
 2042 0ea5 E4 F0                   		oneb	r8
 2043                             	.L69:
 411:../src/user_functions.c **** 
 412:../src/user_functions.c **** 	}
 413:../src/user_functions.c **** 
 414:../src/user_functions.c **** }
 2044                             		.loc 1 414 0 discriminator 1
 2045 0ea7 10 18                   		addw	sp, #24
 2046 0ea9 D7                      		ret
 2047                             	.LFE8:
 2191                             	.Letext0:
 2192                             		.file 2 "../src/iodefine.h"
 2193                             		.file 3 "../src/r_cg_macrodriver.h"
 2194                             		.file 4 "../src/r_cg_rtc.h"
 2195                             		.file 5 "../src/globals.h"
