   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_voltage,1,1
  31                             		.comm	_current1,1,1
  32                             		.comm	_current2,1,1
  33                             		.comm	_date,6,1
  34                             		.comm	_scrollFlag,1,1
  35                             		.comm	_tempFlag,1,1
  36                             		.comm	_secFlag,1,1
  37                             		.comm	_scrollCount,2,2
  38                             		.comm	_timerFlag,2,2
  39                             		.local	_count
  40                             		.comm	_count,2,2
  41                             		.local	_finalTemp
  42                             		.comm	_finalTemp,2,2
  43                             		.local	_response
  44                             		.comm	_response,50,1
  45                             		.local	_mode
  46                             		.comm	_mode,2,2
  47                             		.local	_display
  48                             		.comm	_display,2,2
  49                             		.local	_offset
  50                             		.comm	_offset,2,2
  51                             		.global	_D
  52                             	.bss
  53                             		.balign 2
  56                             	_D:
  57 0000 00 00                   		.zero	2
  58                             		.global	_flag
  59                             		.balign 2
  62                             	_flag:
  63 0002 00 00                   		.zero	2
  64                             		.local	_switchState
  65                             		.comm	_switchState,1,1
  66                             		.local	_tempState
  67                             		.comm	_tempState,1,1
  68                             		.local	_logCount
  69                             		.comm	_logCount,2,2
  70                             		.global	_T_on
  71                             		.section	.rodata
  74                             	_T_on:
  75 0000 1A                      		.byte	26
  76                             		.global	_T_off
  79                             	_T_off:
  80 0001 1E                      		.byte	30
  81                             	.LC0:
  82 0002 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  83                             	.text
  84                             		.global	_populate
  86                             	_populate:
  87                             	.LFB0:
  88                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** static uint16_t count = 0;
  22:../src/user_functions.c **** extern uint16_t scrollCount;
  23:../src/user_functions.c **** extern uint8_t scrollFlag;
  24:../src/user_functions.c **** extern uint8_t tempFlag;
  25:../src/user_functions.c **** extern uint8_t recieveflag;
  26:../src/user_functions.c **** extern uint8_t sendflag;
  27:../src/user_functions.c **** extern uint8_t secFlag;
  28:../src/user_functions.c **** 
  29:../src/user_functions.c **** static uint16_t finalTemp;
  30:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  31:../src/user_functions.c **** static int mode = 0;
  32:../src/user_functions.c **** static int display = 0;
  33:../src/user_functions.c **** static int offset = 0;
  34:../src/user_functions.c **** int D = 0;
  35:../src/user_functions.c **** int flag = 0;
  36:../src/user_functions.c **** extern uint8_t voltage, current1, current2;
  37:../src/user_functions.c **** extern uint8_t date[6];
  38:../src/user_functions.c **** static uint8_t switchState;
  39:../src/user_functions.c **** static uint8_t tempState;
  40:../src/user_functions.c **** static uint16_t logCount;
  41:../src/user_functions.c **** const uint8_t T_on = 26;
  42:../src/user_functions.c **** const uint8_t T_off = 30;
  43:../src/user_functions.c **** 
  44:../src/user_functions.c **** void processMSG();
  45:../src/user_functions.c **** int errorTest();
  46:../src/user_functions.c **** void displayLCD();
  47:../src/user_functions.c **** void readRTC();
  48:../src/user_functions.c **** void setRTC();
  49:../src/user_functions.c **** void getRTC();
  50:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  51:../src/user_functions.c **** void collectADC();
  52:../src/user_functions.c **** void checkFlags();
  53:../src/user_functions.c **** void measureTemp();
  54:../src/user_functions.c **** void setTemp();
  55:../src/user_functions.c **** void read(uint16_t addr, uint8_t len);
  56:../src/user_functions.c **** void writeLog();
  57:../src/user_functions.c **** void writeMem(uint16_t addr);
  58:../src/user_functions.c **** void readLog(uint16_t logNum);
  59:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  60:../src/user_functions.c **** 
  61:../src/user_functions.c **** char populate(char recieved) {
  89                             		.loc 1 61 0
  90                             		; start of function
  91                             		; outgoing: 4 bytes
  92 0000 20 04                   		subw	sp, #4
  93                             	.LCFI0:
  62:../src/user_functions.c **** 
  63:../src/user_functions.c **** 	if (recieved == '$') {
  94                             		.loc 1 63 0
  95 0002 88 08                   		mov	a, [sp+8]
  96 0004 4C 24                   		cmp	a, #36
  97 0006 61 E8                   		 skz
  98 0008 EC 2A 00 00             		 br	!!.L2
  64:../src/user_functions.c **** 		record[count] = recieved;
  99                             		.loc 1 64 0
 100 000c AF 04 00                		movw	ax, !_count
 101 000f BD F0                   		movw	r8, ax
 102 0011 88 08                   		mov	a, [sp+8]
 103 0013 9D F2                   		mov	r10, a
 104 0015 DA F0                   		movw	bc, r8
 105 0017 48 00 00                		mov	_record[bc], a
  65:../src/user_functions.c **** 		count++;
 106                             		.loc 1 65 0
 107 001a AF 04 00                		movw	ax, !_count
 108 001d BD F0                   		movw	r8, ax
 109 001f A6 F0                   		incw	r8
 110 0021 AD F0                   		movw	ax, r8
 111 0023 BF 04 00                		movw	!_count, ax
 112 0026 EC E3 00 00             		br	!!.L3
 113                             	.L2:
  66:../src/user_functions.c **** 	} else if (recieved == '\x0a') {
 114                             		.loc 1 66 0
 115 002a 88 08                   		mov	a, [sp+8]
 116 002c 4C 0A                   		cmp	a, #10
 117 002e 61 E8                   		 skz
 118 0030 EC 8D 00 00             		 br	!!.L4
  67:../src/user_functions.c **** 		if (record[count - 1] == '\x0d') {
 119                             		.loc 1 67 0
 120 0034 AF 04 00                		movw	ax, !_count
 121 0037 BD F0                   		movw	r8, ax
 122 0039 B6 F0                   		decw	r8
 123 003b AD F0                   		movw	ax, r8
 124 003d 04 00 00                		addw	ax, #_record
 125 0040 16                      		movw	hl, ax
 126 0041 8B                      		mov	a, [hl]
 127 0042 9D F0                   		mov	r8, a
 128 0044 4A F0 0D                		cmp	r8, #13
 129 0047 61 E8                   		 skz
 130 0049 EC 7A 00 00             		 br	!!.L5
  68:../src/user_functions.c **** 			if (!flag) {
 131                             		.loc 1 68 0
 132 004d AF 00 00                		movw	ax, !_flag
 133 0050 BD F0                   		movw	r8, ax
 134 0052 44 00 00                		cmpw	ax, #0
 135 0055 61 E8                   		 skz
 136 0057 EC 7A 00 00             		 br	!!.L5
  69:../src/user_functions.c **** 				record[count] = recieved;
 137                             		.loc 1 69 0
 138 005b AF 04 00                		movw	ax, !_count
 139 005e BD F0                   		movw	r8, ax
 140 0060 88 08                   		mov	a, [sp+8]
 141 0062 9D F2                   		mov	r10, a
 142 0064 DA F0                   		movw	bc, r8
 143 0066 48 00 00                		mov	_record[bc], a
  70:../src/user_functions.c **** 				record[count + 1] = '\0';
 144                             		.loc 1 70 0
 145 0069 AF 04 00                		movw	ax, !_count
 146 006c BD F0                   		movw	r8, ax
 147 006e A6 F0                   		incw	r8
 148 0070 DA F0                   		movw	bc, r8
 149 0072 F1                      		clrb	a
 150 0073 48 00 00                		mov	_record[bc], a
  71:../src/user_functions.c **** 				processMSG();
 151                             		.loc 1 71 0
 152 0076 FC 00 00 00             		call	!!%code(_processMSG)
 153                             	.L5:
  72:../src/user_functions.c **** 			}
  73:../src/user_functions.c **** 		}
  74:../src/user_functions.c **** 		strcpy(record, "");
 154                             		.loc 1 74 0
 155 007a F4 F0                   		clrb	r8
 156 007c 8D F0                   		mov	a, r8
 157 007e 9F 00 00                		mov	!_record, a
  75:../src/user_functions.c **** 		count = 0;
 158                             		.loc 1 75 0
 159 0081 F6                      		clrw	ax
 160 0082 BF 04 00                		movw	!_count, ax
  76:../src/user_functions.c **** 		flag = 0;
 161                             		.loc 1 76 0
 162 0085 F6                      		clrw	ax
 163 0086 BF 00 00                		movw	!_flag, ax
 164 0089 EC E3 00 00             		br	!!.L3
 165                             	.L4:
  77:../src/user_functions.c **** 	} else if (flag) {
 166                             		.loc 1 77 0
 167 008d AF 00 00                		movw	ax, !_flag
 168 0090 BD F0                   		movw	r8, ax
 169 0092 44 00 00                		cmpw	ax, #0
 170 0095 61 E8                   		 skz
 171 0097 EC E3 00 00             		 br	!!.L3
  78:../src/user_functions.c **** 
  79:../src/user_functions.c **** 	} else if (count == 0 && recieved != '$') {
 172                             		.loc 1 79 0
 173 009b AF 04 00                		movw	ax, !_count
 174 009e BD F0                   		movw	r8, ax
 175 00a0 44 00 00                		cmpw	ax, #0
 176 00a3 61 E8                   		 skz
 177 00a5 EC C9 00 00             		 br	!!.L6
 178                             		.loc 1 79 0 is_stmt 0 discriminator 1
 179 00a9 88 08                   		mov	a, [sp+8]
 180 00ab 4C 24                   		cmp	a, #36
 181 00ad 61 F8                   		 sknz
 182 00af EC C9 00 00             		 br	!!.L6
  80:../src/user_functions.c **** 
  81:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a", 7);
 183                             		.loc 1 81 0 is_stmt 1
 184 00b3 30 02 00                		movw	ax, #.LC0
 185 00b6 B8 00                   		movw	[sp], ax
 186 00b8 30 07 00                		movw	ax, #7
 187 00bb B8 02                   		movw	[sp+2], ax
 188 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  82:../src/user_functions.c **** 		flag = 1;
 189                             		.loc 1 82 0
 190 00c1 E6                      		onew	ax
 191 00c2 BF 00 00                		movw	!_flag, ax
 192 00c5 EC E3 00 00             		br	!!.L3
 193                             	.L6:
  83:../src/user_functions.c **** 	}
  84:../src/user_functions.c **** 
  85:../src/user_functions.c **** 	else {
  86:../src/user_functions.c **** 		record[count] = recieved;
 194                             		.loc 1 86 0
 195 00c9 AF 04 00                		movw	ax, !_count
 196 00cc BD F0                   		movw	r8, ax
 197 00ce 88 08                   		mov	a, [sp+8]
 198 00d0 9D F2                   		mov	r10, a
 199 00d2 DA F0                   		movw	bc, r8
 200 00d4 48 00 00                		mov	_record[bc], a
  87:../src/user_functions.c **** 		count++;
 201                             		.loc 1 87 0
 202 00d7 AF 04 00                		movw	ax, !_count
 203 00da BD F0                   		movw	r8, ax
 204 00dc A6 F0                   		incw	r8
 205 00de AD F0                   		movw	ax, r8
 206 00e0 BF 04 00                		movw	!_count, ax
 207                             	.L3:
  88:../src/user_functions.c **** 	}
  89:../src/user_functions.c **** 
  90:../src/user_functions.c **** 	return recieved;
 208                             		.loc 1 90 0
 209 00e3 88 08                   		mov	a, [sp+8]
 210 00e5 9D F0                   		mov	r8, a
  91:../src/user_functions.c **** }
 211                             		.loc 1 91 0
 212 00e7 10 04                   		addw	sp, #4
 213 00e9 D7                      		ret
 214                             	.LFE0:
 216                             		.section	.rodata
 217                             	.LC1:
 218 000a 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,%02d,%0d\r\n"
 218      25 30 32 64 2C 25 30 64 
 218      0D 0A 00 
 219                             	.LC2:
 220 001d 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 220      25 64 2C 25 64 2C 25 64 
 220      2C 25 64 2C 25 64 0D 0A 
 220      00 
 221                             	.LC3:
 222 0036 24 49 30 25 30 33 64 0D 		.string	"$I0%03d\r\n"
 222      0A 00 
 223                             	.LC4:
 224 0040 24 4E 30 25 64 2C 25 64 		.string	"$N0%d,%d\r\n"
 224      0D 0A 00 
 225                             	.LC5:
 226 004b 24 25 63 31 0D 0A 00    		.string	"$%c1\r\n"
 227                             	.text
 228                             		.global	_processMSG
 230                             	_processMSG:
 231                             	.LFB1:
  92:../src/user_functions.c **** 
  93:../src/user_functions.c **** void processMSG() {
 232                             		.loc 1 93 0
 233                             		; start of function
 234                             		; push 4: r16 r18
 235                             		; locals: 44 bytes
 236                             		; outgoing: 16 bytes
 237 00ea 61 EF                   		sel	rb2
 238 00ec C1                      		push	ax ; r16
 239                             	.LCFI1:
 240 00ed C3                      		push	bc ; r18
 241                             	.LCFI2:
 242 00ee 61 CF                   		sel	rb0
 243 00f0 20 3C                   		subw	sp, #60
 244                             	.LCFI3:
  94:../src/user_functions.c **** 	char ack[3];
  95:../src/user_functions.c **** 	char str[30];
  96:../src/user_functions.c **** 	int i = 2;
 245                             		.loc 1 96 0
 246 00f2 30 02 00                		movw	ax, #2
 247 00f5 B8 3A                   		movw	[sp+58], ax
  97:../src/user_functions.c **** 	if (errorTest()) {
 248                             		.loc 1 97 0
 249 00f7 FC 00 00 00             		call	!!%code(_errorTest)
 250 00fb AD F0                   		movw	ax, r8
 251 00fd 44 00 00                		cmpw	ax, #0
 252 0100 61 F8                   		 sknz
 253 0102 EC B5 09 00             		 br	!!.L9
  98:../src/user_functions.c **** 
  99:../src/user_functions.c **** 		switch (record[1]) {
 254                             		.loc 1 99 0
 255 0106 8F 00 00                		mov	a, !_record+1
 256 0109 9D F0                   		mov	r8, a
 257 010b CD F1 00                		mov	r9, #0
 258 010e AD F0                   		movw	ax, r8
 259 0110 44 44 00                		cmpw	ax, #68
 260 0113 61 F8                   		 sknz
 261 0115 EC 29 03 00             		 br	!!.L11
 262 0119 AD F0                   		movw	ax, r8
 263 011b 44 44 00                		cmpw	ax, #68
 264 011e 71 FF                   		 xor1	CY, a.7
 265 0120 61 F3                   		 sknh
 266 0122 EC 7F 01 00             		 br	!!.L12
 267 0126 AD F0                   		movw	ax, r8
 268 0128 44 32 00                		cmpw	ax, #50
 269 012b 61 F8                   		 sknz
 270 012d EC A7 02 00             		 br	!!.L13
 271 0131 AD F0                   		movw	ax, r8
 272 0133 44 32 00                		cmpw	ax, #50
 273 0136 71 FF                   		 xor1	CY, a.7
 274 0138 61 F3                   		 sknh
 275 013a EC 58 01 00             		 br	!!.L14
 276 013e AD F0                   		movw	ax, r8
 277 0140 44 30 00                		cmpw	ax, #48
 278 0143 61 F8                   		 sknz
 279 0145 EC E5 01 00             		 br	!!.L15
 280 0149 AD F0                   		movw	ax, r8
 281 014b 44 31 00                		cmpw	ax, #49
 282 014e 61 F8                   		 sknz
 283 0150 EC 46 02 00             		 br	!!.L16
 284 0154 EC 95 09 00             		br	!!.L10
 285                             	.L14:
 286 0158 AD F0                   		movw	ax, r8
 287 015a 44 42 00                		cmpw	ax, #66
 288 015d 61 F8                   		 sknz
 289 015f EC 1A 07 00             		 br	!!.L17
 290 0163 AD F0                   		movw	ax, r8
 291 0165 44 42 00                		cmpw	ax, #66
 292 0168 71 FF                   		 xor1	CY, a.7
 293 016a 61 F3                   		 sknh
 294 016c EC 22 07 00             		 br	!!.L18
 295 0170 AD F0                   		movw	ax, r8
 296 0172 44 33 00                		cmpw	ax, #51
 297 0175 61 F8                   		 sknz
 298 0177 EC DB 02 00             		 br	!!.L19
 299 017b EC 95 09 00             		br	!!.L10
 300                             	.L12:
 301 017f AD F0                   		movw	ax, r8
 302 0181 44 4B 00                		cmpw	ax, #75
 303 0184 61 F8                   		 sknz
 304 0186 EC C1 07 00             		 br	!!.L20
 305 018a AD F0                   		movw	ax, r8
 306 018c 44 4B 00                		cmpw	ax, #75
 307 018f 71 FF                   		 xor1	CY, a.7
 308 0191 61 F3                   		 sknh
 309 0193 EC BE 01 00             		 br	!!.L21
 310 0197 AD F0                   		movw	ax, r8
 311 0199 44 49 00                		cmpw	ax, #73
 312 019c 61 F8                   		 sknz
 313 019e EC 98 07 00             		 br	!!.L22
 314 01a2 AD F0                   		movw	ax, r8
 315 01a4 44 49 00                		cmpw	ax, #73
 316 01a7 71 FF                   		 xor1	CY, a.7
 317 01a9 61 F3                   		 sknh
 318 01ab EC A9 08 00             		 br	!!.L23
 319 01af AD F0                   		movw	ax, r8
 320 01b1 44 45 00                		cmpw	ax, #69
 321 01b4 61 F8                   		 sknz
 322 01b6 EC 9D 06 00             		 br	!!.L24
 323 01ba EC 95 09 00             		br	!!.L10
 324                             	.L21:
 325 01be AD F0                   		movw	ax, r8
 326 01c0 44 4D 00                		cmpw	ax, #77
 327 01c3 61 F8                   		 sknz
 328 01c5 EC 07 09 00             		 br	!!.L25
 329 01c9 AD F0                   		movw	ax, r8
 330 01cb 44 4D 00                		cmpw	ax, #77
 331 01ce 71 FF                   		 xor1	CY, a.7
 332 01d0 61 D8                   		 sknc
 333 01d2 EC C5 03 00             		 br	!!.L26
 334 01d6 AD F0                   		movw	ax, r8
 335 01d8 44 4E 00                		cmpw	ax, #78
 336 01db 61 F8                   		 sknz
 337 01dd EC 65 09 00             		 br	!!.L27
 338 01e1 EC 95 09 00             		br	!!.L10
 339                             	.L15:
 340                             	.LBB2:
 100:../src/user_functions.c **** 		case '0':
 101:../src/user_functions.c **** 			if (mode == 1) {
 341                             		.loc 1 101 0
 342 01e5 AF 3A 00                		movw	ax, !_mode
 343 01e8 BD F0                   		movw	r8, ax
 344 01ea 44 01 00                		cmpw	ax, #1
 345 01ed 61 E8                   		 skz
 346 01ef EC FF 01 00             		 br	!!.L28
 102:../src/user_functions.c **** 				ack[0] = '0';
 347                             		.loc 1 102 0
 348 01f3 51 30                   		mov	a, #48
 349 01f5 98 2F                   		mov	[sp+47], a
 103:../src/user_functions.c **** 				mode = 0;
 350                             		.loc 1 103 0
 351 01f7 F6                      		clrw	ax
 352 01f8 BF 3A 00                		movw	!_mode, ax
 353 01fb EC 03 02 00             		br	!!.L29
 354                             	.L28:
 104:../src/user_functions.c **** 			}
 105:../src/user_functions.c **** 
 106:../src/user_functions.c **** 			else {
 107:../src/user_functions.c **** 				ack[0] = '3';
 355                             		.loc 1 107 0
 356 01ff 51 33                   		mov	a, #51
 357 0201 98 2F                   		mov	[sp+47], a
 358                             	.L29:
 108:../src/user_functions.c **** 			}
 109:../src/user_functions.c **** 
 110:../src/user_functions.c **** 			ack[1] = '\x0d';
 359                             		.loc 1 110 0
 360 0203 51 0D                   		mov	a, #13
 361 0205 98 30                   		mov	[sp+48], a
 111:../src/user_functions.c **** 			ack[2] = '\x0a';
 362                             		.loc 1 111 0
 363 0207 51 0A                   		mov	a, #10
 364 0209 98 31                   		mov	[sp+49], a
 112:../src/user_functions.c **** 			strcpy(response, "$0");
 365                             		.loc 1 112 0
 366 020b 51 24                   		mov	a, #36
 367 020d 9F 08 00                		mov	!_response, a
 368 0210 51 30                   		mov	a, #48
 369 0212 9F 09 00                		mov	!_response+1, a
 370 0215 F5 0A 00                		clrb	!_response+2
 113:../src/user_functions.c **** 			strcat(response, ack);
 371                             		.loc 1 113 0
 372 0218 30 08 00                		movw	ax, #_response
 373 021b B8 00                   		movw	[sp], ax
 374 021d C9 F0 3C 00             		movw	r8, #60
 375 0221 AE F8                   		movw	ax, sp
 376 0223 BD F0                   		movw	r8, ax
 377 0225 04 3C 00                		addw	ax, #60
 378 0228 BD F0                   		movw	r8, ax
 379 022a 04 F3 FF                		addw	ax, #-13
 380 022d B8 02                   		movw	[sp+2], ax
 381 022f FC 00 00 00             		call	!!%code(_strcat)
 114:../src/user_functions.c **** 			recieveInstruction(7);
 382                             		.loc 1 114 0
 383 0233 30 07 00                		movw	ax, #7
 384 0236 B8 00                   		movw	[sp], ax
 385 0238 FC 00 00 00             		call	!!%code(_recieveInstruction)
 115:../src/user_functions.c **** 			count = 5;
 386                             		.loc 1 115 0
 387 023c 30 05 00                		movw	ax, #5
 388 023f BF 04 00                		movw	!_count, ax
 116:../src/user_functions.c **** 			break;
 389                             		.loc 1 116 0
 390 0242 EC B5 09 00             		br	!!.L9
 391                             	.L16:
 117:../src/user_functions.c **** 
 118:../src/user_functions.c **** 		case '1':
 119:../src/user_functions.c **** 			if (mode == 0) {
 392                             		.loc 1 119 0
 393 0246 AF 3A 00                		movw	ax, !_mode
 394 0249 BD F0                   		movw	r8, ax
 395 024b 44 00 00                		cmpw	ax, #0
 396 024e 61 E8                   		 skz
 397 0250 EC 60 02 00             		 br	!!.L30
 120:../src/user_functions.c **** 				ack[0] = '0';
 398                             		.loc 1 120 0
 399 0254 51 30                   		mov	a, #48
 400 0256 98 2F                   		mov	[sp+47], a
 121:../src/user_functions.c **** 				mode = 1;
 401                             		.loc 1 121 0
 402 0258 E6                      		onew	ax
 403 0259 BF 3A 00                		movw	!_mode, ax
 404 025c EC 64 02 00             		br	!!.L31
 405                             	.L30:
 122:../src/user_functions.c **** 			}
 123:../src/user_functions.c **** 
 124:../src/user_functions.c **** 			else {
 125:../src/user_functions.c **** 				ack[0] = '3';
 406                             		.loc 1 125 0
 407 0260 51 33                   		mov	a, #51
 408 0262 98 2F                   		mov	[sp+47], a
 409                             	.L31:
 126:../src/user_functions.c **** 			}
 127:../src/user_functions.c **** 
 128:../src/user_functions.c **** 			ack[1] = '\x0d';
 410                             		.loc 1 128 0
 411 0264 51 0D                   		mov	a, #13
 412 0266 98 30                   		mov	[sp+48], a
 129:../src/user_functions.c **** 			ack[2] = '\x0a';
 413                             		.loc 1 129 0
 414 0268 51 0A                   		mov	a, #10
 415 026a 98 31                   		mov	[sp+49], a
 130:../src/user_functions.c **** 			strcpy(response, "$1");
 416                             		.loc 1 130 0
 417 026c 51 24                   		mov	a, #36
 418 026e 9F 08 00                		mov	!_response, a
 419 0271 51 31                   		mov	a, #49
 420 0273 9F 09 00                		mov	!_response+1, a
 421 0276 F5 0A 00                		clrb	!_response+2
 131:../src/user_functions.c **** 			strcat(response, ack);
 422                             		.loc 1 131 0
 423 0279 30 08 00                		movw	ax, #_response
 424 027c B8 00                   		movw	[sp], ax
 425 027e C9 F2 3C 00             		movw	r10, #60
 426 0282 AE F8                   		movw	ax, sp
 427 0284 BD F2                   		movw	r10, ax
 428 0286 04 3C 00                		addw	ax, #60
 429 0289 BD F2                   		movw	r10, ax
 430 028b 04 F3 FF                		addw	ax, #-13
 431 028e B8 02                   		movw	[sp+2], ax
 432 0290 FC 00 00 00             		call	!!%code(_strcat)
 132:../src/user_functions.c **** 			recieveInstruction(6);
 433                             		.loc 1 132 0
 434 0294 30 06 00                		movw	ax, #6
 435 0297 B8 00                   		movw	[sp], ax
 436 0299 FC 00 00 00             		call	!!%code(_recieveInstruction)
 133:../src/user_functions.c **** 			count = 5;
 437                             		.loc 1 133 0
 438 029d 30 05 00                		movw	ax, #5
 439 02a0 BF 04 00                		movw	!_count, ax
 134:../src/user_functions.c **** 			break;
 440                             		.loc 1 134 0
 441 02a3 EC B5 09 00             		br	!!.L9
 442                             	.L13:
 135:../src/user_functions.c **** 
 136:../src/user_functions.c **** 		case '2':
 137:../src/user_functions.c **** 			strcpy(mem, &record[2]);
 443                             		.loc 1 137 0
 444 02a7 30 00 00                		movw	ax, #_mem
 445 02aa B8 00                   		movw	[sp], ax
 446 02ac 30 00 00                		movw	ax, #_record+2
 447 02af B8 02                   		movw	[sp+2], ax
 448 02b1 FC 00 00 00             		call	!!%code(_strcpy)
 138:../src/user_functions.c **** 			strcpy(response, "$20\x0d\x0a");
 449                             		.loc 1 138 0
 450 02b5 51 24                   		mov	a, #36
 451 02b7 9F 08 00                		mov	!_response, a
 452 02ba 51 32                   		mov	a, #50
 453 02bc 9F 09 00                		mov	!_response+1, a
 454 02bf 51 30                   		mov	a, #48
 455 02c1 9F 0A 00                		mov	!_response+2, a
 456 02c4 51 0D                   		mov	a, #13
 457 02c6 9F 0B 00                		mov	!_response+3, a
 458 02c9 51 0A                   		mov	a, #10
 459 02cb 9F 0C 00                		mov	!_response+4, a
 460 02ce F5 0D 00                		clrb	!_response+5
 139:../src/user_functions.c **** 			count = 5;
 461                             		.loc 1 139 0
 462 02d1 30 05 00                		movw	ax, #5
 463 02d4 BF 04 00                		movw	!_count, ax
 140:../src/user_functions.c **** 			break;
 464                             		.loc 1 140 0
 465 02d7 EC B5 09 00             		br	!!.L9
 466                             	.L19:
 141:../src/user_functions.c **** 
 142:../src/user_functions.c **** 		case '3':
 143:../src/user_functions.c **** 			strcpy(response, "$3019119038\x0d\x0a");
 467                             		.loc 1 143 0
 468 02db 51 24                   		mov	a, #36
 469 02dd 9F 08 00                		mov	!_response, a
 470 02e0 51 33                   		mov	a, #51
 471 02e2 9F 09 00                		mov	!_response+1, a
 472 02e5 51 30                   		mov	a, #48
 473 02e7 9F 0A 00                		mov	!_response+2, a
 474 02ea 51 31                   		mov	a, #49
 475 02ec 9F 0B 00                		mov	!_response+3, a
 476 02ef 51 39                   		mov	a, #57
 477 02f1 9F 0C 00                		mov	!_response+4, a
 478 02f4 51 31                   		mov	a, #49
 479 02f6 9F 0D 00                		mov	!_response+5, a
 480 02f9 51 31                   		mov	a, #49
 481 02fb 9F 0E 00                		mov	!_response+6, a
 482 02fe 51 39                   		mov	a, #57
 483 0300 9F 0F 00                		mov	!_response+7, a
 484 0303 51 30                   		mov	a, #48
 485 0305 9F 10 00                		mov	!_response+8, a
 486 0308 51 33                   		mov	a, #51
 487 030a 9F 11 00                		mov	!_response+9, a
 488 030d 51 38                   		mov	a, #56
 489 030f 9F 12 00                		mov	!_response+10, a
 490 0312 51 0D                   		mov	a, #13
 491 0314 9F 13 00                		mov	!_response+11, a
 492 0317 51 0A                   		mov	a, #10
 493 0319 9F 14 00                		mov	!_response+12, a
 494 031c F5 15 00                		clrb	!_response+13
 144:../src/user_functions.c **** 			count = 13;
 495                             		.loc 1 144 0
 496 031f 30 0D 00                		movw	ax, #13
 497 0322 BF 04 00                		movw	!_count, ax
 145:../src/user_functions.c **** 			break;
 498                             		.loc 1 145 0
 499 0325 EC B5 09 00             		br	!!.L9
 500                             	.L11:
 146:../src/user_functions.c **** 
 147:../src/user_functions.c **** 		case 'D':
 148:../src/user_functions.c **** 			if (strlen(mem) <= 32) {
 501                             		.loc 1 148 0
 502 0329 30 00 00                		movw	ax, #_mem
 503 032c B8 00                   		movw	[sp], ax
 504 032e FC 00 00 00             		call	!!%code(_strlen)
 505 0332 AD F0                   		movw	ax, r8
 506 0334 44 20 00                		cmpw	ax, #32
 507 0337 61 F3                   		 sknh
 508 0339 EC 78 03 00             		 br	!!.L32
 149:../src/user_functions.c **** 
 150:../src/user_functions.c **** 				strcpy(response, "$D0\x0d\x0a");
 509                             		.loc 1 150 0
 510 033d 51 24                   		mov	a, #36
 511 033f 9F 08 00                		mov	!_response, a
 512 0342 51 44                   		mov	a, #68
 513 0344 9F 09 00                		mov	!_response+1, a
 514 0347 51 30                   		mov	a, #48
 515 0349 9F 0A 00                		mov	!_response+2, a
 516 034c 51 0D                   		mov	a, #13
 517 034e 9F 0B 00                		mov	!_response+3, a
 518 0351 51 0A                   		mov	a, #10
 519 0353 9F 0C 00                		mov	!_response+4, a
 520 0356 F5 0D 00                		clrb	!_response+5
 151:../src/user_functions.c **** 				count = 5;
 521                             		.loc 1 151 0
 522 0359 30 05 00                		movw	ax, #5
 523 035c BF 04 00                		movw	!_count, ax
 152:../src/user_functions.c **** 
 153:../src/user_functions.c **** 				strcpy(display_string, mem);
 524                             		.loc 1 153 0
 525 035f 30 00 00                		movw	ax, #_display_string
 526 0362 B8 00                   		movw	[sp], ax
 527 0364 30 00 00                		movw	ax, #_mem
 528 0367 B8 02                   		movw	[sp+2], ax
 529 0369 FC 00 00 00             		call	!!%code(_strcpy)
 154:../src/user_functions.c **** 				displayLCD(1);
 530                             		.loc 1 154 0
 531 036d E6                      		onew	ax
 532 036e B8 00                   		movw	[sp], ax
 533 0370 FC 00 00 00             		call	!!%code(_displayLCD)
 155:../src/user_functions.c **** 			} else {
 156:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 157:../src/user_functions.c **** 				delayNoInt(1640);
 158:../src/user_functions.c **** 
 159:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 160:../src/user_functions.c **** 				delayNoInt(1640);
 161:../src/user_functions.c **** 				strcpy(response, "$D3\x0d\x0a");
 162:../src/user_functions.c **** 				count = 5;
 163:../src/user_functions.c **** 			}
 164:../src/user_functions.c **** 			break;
 534                             		.loc 1 164 0
 535 0374 EC B5 09 00             		br	!!.L9
 536                             	.L32:
 156:../src/user_functions.c **** 				delayNoInt(1640);
 537                             		.loc 1 156 0
 538 0378 F1                      		clrb	a
 539 0379 98 00                   		mov	[sp], a
 540 037b E1                      		oneb	a
 541 037c 98 02                   		mov	[sp+2], a
 542 037e FC 00 00 00             		call	!!%code(_writeByteLcd)
 157:../src/user_functions.c **** 
 543                             		.loc 1 157 0
 544 0382 30 68 06                		movw	ax, #1640
 545 0385 B8 00                   		movw	[sp], ax
 546 0387 FC 00 00 00             		call	!!%code(_delayNoInt)
 159:../src/user_functions.c **** 				delayNoInt(1640);
 547                             		.loc 1 159 0
 548 038b F1                      		clrb	a
 549 038c 98 00                   		mov	[sp], a
 550 038e 51 80                   		mov	a, #-128
 551 0390 98 02                   		mov	[sp+2], a
 552 0392 FC 00 00 00             		call	!!%code(_writeByteLcd)
 160:../src/user_functions.c **** 				strcpy(response, "$D3\x0d\x0a");
 553                             		.loc 1 160 0
 554 0396 30 68 06                		movw	ax, #1640
 555 0399 B8 00                   		movw	[sp], ax
 556 039b FC 00 00 00             		call	!!%code(_delayNoInt)
 161:../src/user_functions.c **** 				count = 5;
 557                             		.loc 1 161 0
 558 039f 51 24                   		mov	a, #36
 559 03a1 9F 08 00                		mov	!_response, a
 560 03a4 51 44                   		mov	a, #68
 561 03a6 9F 09 00                		mov	!_response+1, a
 562 03a9 51 33                   		mov	a, #51
 563 03ab 9F 0A 00                		mov	!_response+2, a
 564 03ae 51 0D                   		mov	a, #13
 565 03b0 9F 0B 00                		mov	!_response+3, a
 566 03b3 51 0A                   		mov	a, #10
 567 03b5 9F 0C 00                		mov	!_response+4, a
 568 03b8 F5 0D 00                		clrb	!_response+5
 162:../src/user_functions.c **** 			}
 569                             		.loc 1 162 0
 570 03bb 30 05 00                		movw	ax, #5
 571 03be BF 04 00                		movw	!_count, ax
 572                             		.loc 1 164 0
 573 03c1 EC B5 09 00             		br	!!.L9
 574                             	.L26:
 165:../src/user_functions.c **** 
 166:../src/user_functions.c **** 		case 'L':
 167:../src/user_functions.c **** 			if (record[2] == '0') {
 575                             		.loc 1 167 0
 576 03c5 8F 00 00                		mov	a, !_record+2
 577 03c8 9D F0                   		mov	r8, a
 578 03ca 4A F0 30                		cmp	r8, #48
 579 03cd 61 E8                   		 skz
 580 03cf EC 4D 04 00             		 br	!!.L34
 168:../src/user_functions.c **** 				P4_bit.no1 = 0;
 581                             		.loc 1 168 0
 582 03d3 C9 F0 04 FF             		movw	r8, #-252
 583 03d7 AD F0                   		movw	ax, r8
 584 03d9 BD F4                   		movw	r12, ax
 585 03db FA F4                   		movw	hl, r12
 586 03dd 8B                      		mov	a, [hl]
 587 03de 9D F2                   		mov	r10, a
 588 03e0 5A F2 FD                		and	r10, #-3
 589 03e3 AD F0                   		movw	ax, r8
 590 03e5 BD F6                   		movw	r14, ax
 591 03e7 DA F6                   		movw	bc, r14
 592 03e9 8D F2                   		mov	a, r10
 593 03eb 48 00 00                		mov	[bc], a
 169:../src/user_functions.c **** 				P4_bit.no2 = 0;
 594                             		.loc 1 169 0
 595 03ee C9 F0 04 FF             		movw	r8, #-252
 596 03f2 AD F0                   		movw	ax, r8
 597 03f4 BD F4                   		movw	r12, ax
 598 03f6 FA F4                   		movw	hl, r12
 599 03f8 8B                      		mov	a, [hl]
 600 03f9 9D F2                   		mov	r10, a
 601 03fb 5A F2 FB                		and	r10, #-5
 602 03fe AD F0                   		movw	ax, r8
 603 0400 BD F6                   		movw	r14, ax
 604 0402 DA F6                   		movw	bc, r14
 605 0404 8D F2                   		mov	a, r10
 606 0406 48 00 00                		mov	[bc], a
 170:../src/user_functions.c **** 				P4_bit.no3 = 0;
 607                             		.loc 1 170 0
 608 0409 C9 F0 04 FF             		movw	r8, #-252
 609 040d AD F0                   		movw	ax, r8
 610 040f BD F4                   		movw	r12, ax
 611 0411 FA F4                   		movw	hl, r12
 612 0413 8B                      		mov	a, [hl]
 613 0414 9D F2                   		mov	r10, a
 614 0416 5A F2 F7                		and	r10, #-9
 615 0419 AD F0                   		movw	ax, r8
 616 041b BD F6                   		movw	r14, ax
 617 041d DA F6                   		movw	bc, r14
 618 041f 8D F2                   		mov	a, r10
 619 0421 48 00 00                		mov	[bc], a
 171:../src/user_functions.c **** 				switchState = 0;
 620                             		.loc 1 171 0
 621 0424 F5 40 00                		clrb	!_switchState
 172:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 622                             		.loc 1 172 0
 623 0427 51 24                   		mov	a, #36
 624 0429 9F 08 00                		mov	!_response, a
 625 042c 51 4C                   		mov	a, #76
 626 042e 9F 09 00                		mov	!_response+1, a
 627 0431 51 30                   		mov	a, #48
 628 0433 9F 0A 00                		mov	!_response+2, a
 629 0436 51 0D                   		mov	a, #13
 630 0438 9F 0B 00                		mov	!_response+3, a
 631 043b 51 0A                   		mov	a, #10
 632 043d 9F 0C 00                		mov	!_response+4, a
 633 0440 F5 0D 00                		clrb	!_response+5
 173:../src/user_functions.c **** 				count = 5;
 634                             		.loc 1 173 0
 635 0443 30 05 00                		movw	ax, #5
 636 0446 BF 04 00                		movw	!_count, ax
 637 0449 EC 99 06 00             		br	!!.L35
 638                             	.L34:
 174:../src/user_functions.c **** 			} else if (record[2] == '1') {
 639                             		.loc 1 174 0
 640 044d 8F 00 00                		mov	a, !_record+2
 641 0450 9D F0                   		mov	r8, a
 642 0452 4A F0 31                		cmp	r8, #49
 643 0455 61 E8                   		 skz
 644 0457 EC D5 04 00             		 br	!!.L36
 175:../src/user_functions.c **** 				P4_bit.no1 = 0;
 645                             		.loc 1 175 0
 646 045b C9 F0 04 FF             		movw	r8, #-252
 647 045f AD F0                   		movw	ax, r8
 648 0461 BD F4                   		movw	r12, ax
 649 0463 FA F4                   		movw	hl, r12
 650 0465 8B                      		mov	a, [hl]
 651 0466 9D F2                   		mov	r10, a
 652 0468 5A F2 FD                		and	r10, #-3
 653 046b AD F0                   		movw	ax, r8
 654 046d BD F6                   		movw	r14, ax
 655 046f DA F6                   		movw	bc, r14
 656 0471 8D F2                   		mov	a, r10
 657 0473 48 00 00                		mov	[bc], a
 176:../src/user_functions.c **** 				P4_bit.no2 = 0;
 658                             		.loc 1 176 0
 659 0476 C9 F0 04 FF             		movw	r8, #-252
 660 047a AD F0                   		movw	ax, r8
 661 047c BD F4                   		movw	r12, ax
 662 047e FA F4                   		movw	hl, r12
 663 0480 8B                      		mov	a, [hl]
 664 0481 9D F2                   		mov	r10, a
 665 0483 5A F2 FB                		and	r10, #-5
 666 0486 AD F0                   		movw	ax, r8
 667 0488 BD F6                   		movw	r14, ax
 668 048a DA F6                   		movw	bc, r14
 669 048c 8D F2                   		mov	a, r10
 670 048e 48 00 00                		mov	[bc], a
 177:../src/user_functions.c **** 				P4_bit.no3 = 1;
 671                             		.loc 1 177 0
 672 0491 C9 F0 04 FF             		movw	r8, #-252
 673 0495 AD F0                   		movw	ax, r8
 674 0497 BD F4                   		movw	r12, ax
 675 0499 FA F4                   		movw	hl, r12
 676 049b 8B                      		mov	a, [hl]
 677 049c 9D F2                   		mov	r10, a
 678 049e 6A F2 08                		or	r10, #8
 679 04a1 AD F0                   		movw	ax, r8
 680 04a3 BD F6                   		movw	r14, ax
 681 04a5 DA F6                   		movw	bc, r14
 682 04a7 8D F2                   		mov	a, r10
 683 04a9 48 00 00                		mov	[bc], a
 178:../src/user_functions.c **** 				switchState = 1;
 684                             		.loc 1 178 0
 685 04ac E5 40 00                		oneb	!_switchState
 179:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 686                             		.loc 1 179 0
 687 04af 51 24                   		mov	a, #36
 688 04b1 9F 08 00                		mov	!_response, a
 689 04b4 51 4C                   		mov	a, #76
 690 04b6 9F 09 00                		mov	!_response+1, a
 691 04b9 51 30                   		mov	a, #48
 692 04bb 9F 0A 00                		mov	!_response+2, a
 693 04be 51 0D                   		mov	a, #13
 694 04c0 9F 0B 00                		mov	!_response+3, a
 695 04c3 51 0A                   		mov	a, #10
 696 04c5 9F 0C 00                		mov	!_response+4, a
 697 04c8 F5 0D 00                		clrb	!_response+5
 180:../src/user_functions.c **** 				count = 5;
 698                             		.loc 1 180 0
 699 04cb 30 05 00                		movw	ax, #5
 700 04ce BF 04 00                		movw	!_count, ax
 701 04d1 EC 99 06 00             		br	!!.L35
 702                             	.L36:
 181:../src/user_functions.c **** 			} else if (record[2] == '2') {
 703                             		.loc 1 181 0
 704 04d5 8F 00 00                		mov	a, !_record+2
 705 04d8 9D F0                   		mov	r8, a
 706 04da 4A F0 32                		cmp	r8, #50
 707 04dd 61 E8                   		 skz
 708 04df EC 5F 05 00             		 br	!!.L37
 182:../src/user_functions.c **** 				P4_bit.no1 = 1;
 709                             		.loc 1 182 0
 710 04e3 C9 F0 04 FF             		movw	r8, #-252
 711 04e7 AD F0                   		movw	ax, r8
 712 04e9 BD F4                   		movw	r12, ax
 713 04eb FA F4                   		movw	hl, r12
 714 04ed 8B                      		mov	a, [hl]
 715 04ee 9D F2                   		mov	r10, a
 716 04f0 6A F2 02                		or	r10, #2
 717 04f3 AD F0                   		movw	ax, r8
 718 04f5 BD F6                   		movw	r14, ax
 719 04f7 DA F6                   		movw	bc, r14
 720 04f9 8D F2                   		mov	a, r10
 721 04fb 48 00 00                		mov	[bc], a
 183:../src/user_functions.c **** 				P4_bit.no2 = 0;
 722                             		.loc 1 183 0
 723 04fe C9 F0 04 FF             		movw	r8, #-252
 724 0502 AD F0                   		movw	ax, r8
 725 0504 BD F4                   		movw	r12, ax
 726 0506 FA F4                   		movw	hl, r12
 727 0508 8B                      		mov	a, [hl]
 728 0509 9D F2                   		mov	r10, a
 729 050b 5A F2 FB                		and	r10, #-5
 730 050e AD F0                   		movw	ax, r8
 731 0510 BD F6                   		movw	r14, ax
 732 0512 DA F6                   		movw	bc, r14
 733 0514 8D F2                   		mov	a, r10
 734 0516 48 00 00                		mov	[bc], a
 184:../src/user_functions.c **** 				P4_bit.no3 = 0;
 735                             		.loc 1 184 0
 736 0519 C9 F0 04 FF             		movw	r8, #-252
 737 051d AD F0                   		movw	ax, r8
 738 051f BD F4                   		movw	r12, ax
 739 0521 FA F4                   		movw	hl, r12
 740 0523 8B                      		mov	a, [hl]
 741 0524 9D F2                   		mov	r10, a
 742 0526 5A F2 F7                		and	r10, #-9
 743 0529 AD F0                   		movw	ax, r8
 744 052b BD F6                   		movw	r14, ax
 745 052d DA F6                   		movw	bc, r14
 746 052f 8D F2                   		mov	a, r10
 747 0531 48 00 00                		mov	[bc], a
 185:../src/user_functions.c **** 				switchState = 2;
 748                             		.loc 1 185 0
 749 0534 51 02                   		mov	a, #2
 750 0536 9F 40 00                		mov	!_switchState, a
 186:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 751                             		.loc 1 186 0
 752 0539 51 24                   		mov	a, #36
 753 053b 9F 08 00                		mov	!_response, a
 754 053e 51 4C                   		mov	a, #76
 755 0540 9F 09 00                		mov	!_response+1, a
 756 0543 51 30                   		mov	a, #48
 757 0545 9F 0A 00                		mov	!_response+2, a
 758 0548 51 0D                   		mov	a, #13
 759 054a 9F 0B 00                		mov	!_response+3, a
 760 054d 51 0A                   		mov	a, #10
 761 054f 9F 0C 00                		mov	!_response+4, a
 762 0552 F5 0D 00                		clrb	!_response+5
 187:../src/user_functions.c **** 				count = 5;
 763                             		.loc 1 187 0
 764 0555 30 05 00                		movw	ax, #5
 765 0558 BF 04 00                		movw	!_count, ax
 766 055b EC 99 06 00             		br	!!.L35
 767                             	.L37:
 188:../src/user_functions.c **** 			} else if (record[2] == '3') {
 768                             		.loc 1 188 0
 769 055f 8F 00 00                		mov	a, !_record+2
 770 0562 9D F0                   		mov	r8, a
 771 0564 4A F0 33                		cmp	r8, #51
 772 0567 61 E8                   		 skz
 773 0569 EC E9 05 00             		 br	!!.L38
 189:../src/user_functions.c **** 				P4_bit.no1 = 0;
 774                             		.loc 1 189 0
 775 056d C9 F0 04 FF             		movw	r8, #-252
 776 0571 AD F0                   		movw	ax, r8
 777 0573 BD F4                   		movw	r12, ax
 778 0575 FA F4                   		movw	hl, r12
 779 0577 8B                      		mov	a, [hl]
 780 0578 9D F2                   		mov	r10, a
 781 057a 5A F2 FD                		and	r10, #-3
 782 057d AD F0                   		movw	ax, r8
 783 057f BD F6                   		movw	r14, ax
 784 0581 DA F6                   		movw	bc, r14
 785 0583 8D F2                   		mov	a, r10
 786 0585 48 00 00                		mov	[bc], a
 190:../src/user_functions.c **** 				P4_bit.no2 = 1;
 787                             		.loc 1 190 0
 788 0588 C9 F0 04 FF             		movw	r8, #-252
 789 058c AD F0                   		movw	ax, r8
 790 058e BD F4                   		movw	r12, ax
 791 0590 FA F4                   		movw	hl, r12
 792 0592 8B                      		mov	a, [hl]
 793 0593 9D F2                   		mov	r10, a
 794 0595 6A F2 04                		or	r10, #4
 795 0598 AD F0                   		movw	ax, r8
 796 059a BD F6                   		movw	r14, ax
 797 059c DA F6                   		movw	bc, r14
 798 059e 8D F2                   		mov	a, r10
 799 05a0 48 00 00                		mov	[bc], a
 191:../src/user_functions.c **** 				P4_bit.no3 = 0;
 800                             		.loc 1 191 0
 801 05a3 C9 F0 04 FF             		movw	r8, #-252
 802 05a7 AD F0                   		movw	ax, r8
 803 05a9 BD F4                   		movw	r12, ax
 804 05ab FA F4                   		movw	hl, r12
 805 05ad 8B                      		mov	a, [hl]
 806 05ae 9D F2                   		mov	r10, a
 807 05b0 5A F2 F7                		and	r10, #-9
 808 05b3 AD F0                   		movw	ax, r8
 809 05b5 BD F6                   		movw	r14, ax
 810 05b7 DA F6                   		movw	bc, r14
 811 05b9 8D F2                   		mov	a, r10
 812 05bb 48 00 00                		mov	[bc], a
 192:../src/user_functions.c **** 				switchState = 3;
 813                             		.loc 1 192 0
 814 05be 51 03                   		mov	a, #3
 815 05c0 9F 40 00                		mov	!_switchState, a
 193:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 816                             		.loc 1 193 0
 817 05c3 51 24                   		mov	a, #36
 818 05c5 9F 08 00                		mov	!_response, a
 819 05c8 51 4C                   		mov	a, #76
 820 05ca 9F 09 00                		mov	!_response+1, a
 821 05cd 51 30                   		mov	a, #48
 822 05cf 9F 0A 00                		mov	!_response+2, a
 823 05d2 51 0D                   		mov	a, #13
 824 05d4 9F 0B 00                		mov	!_response+3, a
 825 05d7 51 0A                   		mov	a, #10
 826 05d9 9F 0C 00                		mov	!_response+4, a
 827 05dc F5 0D 00                		clrb	!_response+5
 194:../src/user_functions.c **** 				count = 5;
 828                             		.loc 1 194 0
 829 05df 30 05 00                		movw	ax, #5
 830 05e2 BF 04 00                		movw	!_count, ax
 831 05e5 EC 99 06 00             		br	!!.L35
 832                             	.L38:
 195:../src/user_functions.c **** 			} else if (record[2] == '4') {
 833                             		.loc 1 195 0
 834 05e9 8F 00 00                		mov	a, !_record+2
 835 05ec 9D F0                   		mov	r8, a
 836 05ee 4A F0 34                		cmp	r8, #52
 837 05f1 61 E8                   		 skz
 838 05f3 EC 73 06 00             		 br	!!.L39
 196:../src/user_functions.c **** 				P4_bit.no1 = 1;
 839                             		.loc 1 196 0
 840 05f7 C9 F0 04 FF             		movw	r8, #-252
 841 05fb AD F0                   		movw	ax, r8
 842 05fd BD F4                   		movw	r12, ax
 843 05ff FA F4                   		movw	hl, r12
 844 0601 8B                      		mov	a, [hl]
 845 0602 9D F2                   		mov	r10, a
 846 0604 6A F2 02                		or	r10, #2
 847 0607 AD F0                   		movw	ax, r8
 848 0609 BD F6                   		movw	r14, ax
 849 060b DA F6                   		movw	bc, r14
 850 060d 8D F2                   		mov	a, r10
 851 060f 48 00 00                		mov	[bc], a
 197:../src/user_functions.c **** 				P4_bit.no2 = 1;
 852                             		.loc 1 197 0
 853 0612 C9 F0 04 FF             		movw	r8, #-252
 854 0616 AD F0                   		movw	ax, r8
 855 0618 BD F4                   		movw	r12, ax
 856 061a FA F4                   		movw	hl, r12
 857 061c 8B                      		mov	a, [hl]
 858 061d 9D F2                   		mov	r10, a
 859 061f 6A F2 04                		or	r10, #4
 860 0622 AD F0                   		movw	ax, r8
 861 0624 BD F6                   		movw	r14, ax
 862 0626 DA F6                   		movw	bc, r14
 863 0628 8D F2                   		mov	a, r10
 864 062a 48 00 00                		mov	[bc], a
 198:../src/user_functions.c **** 				P4_bit.no3 = 0;
 865                             		.loc 1 198 0
 866 062d C9 F0 04 FF             		movw	r8, #-252
 867 0631 AD F0                   		movw	ax, r8
 868 0633 BD F4                   		movw	r12, ax
 869 0635 FA F4                   		movw	hl, r12
 870 0637 8B                      		mov	a, [hl]
 871 0638 9D F2                   		mov	r10, a
 872 063a 5A F2 F7                		and	r10, #-9
 873 063d AD F0                   		movw	ax, r8
 874 063f BD F6                   		movw	r14, ax
 875 0641 DA F6                   		movw	bc, r14
 876 0643 8D F2                   		mov	a, r10
 877 0645 48 00 00                		mov	[bc], a
 199:../src/user_functions.c **** 				switchState = 4;
 878                             		.loc 1 199 0
 879 0648 51 04                   		mov	a, #4
 880 064a 9F 40 00                		mov	!_switchState, a
 200:../src/user_functions.c **** 				strcpy(response, "$L0\x0d\x0a");
 881                             		.loc 1 200 0
 882 064d 51 24                   		mov	a, #36
 883 064f 9F 08 00                		mov	!_response, a
 884 0652 51 4C                   		mov	a, #76
 885 0654 9F 09 00                		mov	!_response+1, a
 886 0657 51 30                   		mov	a, #48
 887 0659 9F 0A 00                		mov	!_response+2, a
 888 065c 51 0D                   		mov	a, #13
 889 065e 9F 0B 00                		mov	!_response+3, a
 890 0661 51 0A                   		mov	a, #10
 891 0663 9F 0C 00                		mov	!_response+4, a
 892 0666 F5 0D 00                		clrb	!_response+5
 201:../src/user_functions.c **** 				count = 5;
 893                             		.loc 1 201 0
 894 0669 30 05 00                		movw	ax, #5
 895 066c BF 04 00                		movw	!_count, ax
 896 066f EC 99 06 00             		br	!!.L35
 897                             	.L39:
 202:../src/user_functions.c **** 			} else {
 203:../src/user_functions.c **** 				strcpy(response, "$L2\x0d\x0a");
 898                             		.loc 1 203 0
 899 0673 51 24                   		mov	a, #36
 900 0675 9F 08 00                		mov	!_response, a
 901 0678 51 4C                   		mov	a, #76
 902 067a 9F 09 00                		mov	!_response+1, a
 903 067d 51 32                   		mov	a, #50
 904 067f 9F 0A 00                		mov	!_response+2, a
 905 0682 51 0D                   		mov	a, #13
 906 0684 9F 0B 00                		mov	!_response+3, a
 907 0687 51 0A                   		mov	a, #10
 908 0689 9F 0C 00                		mov	!_response+4, a
 909 068c F5 0D 00                		clrb	!_response+5
 204:../src/user_functions.c **** 				count = 5;
 910                             		.loc 1 204 0
 911 068f 30 05 00                		movw	ax, #5
 912 0692 BF 04 00                		movw	!_count, ax
 205:../src/user_functions.c **** 			}
 206:../src/user_functions.c **** 			break;
 913                             		.loc 1 206 0
 914 0695 EC B5 09 00             		br	!!.L9
 915                             	.L35:
 916 0699 EC B5 09 00             		br	!!.L9
 917                             	.L24:
 207:../src/user_functions.c **** 		case 'E':
 208:../src/user_functions.c **** 			sprintf(str, "$E0%02d,%02d,%0d\x0d\x0a", voltage, current2,
 918                             		.loc 1 208 0
 919 069d 8F 00 00                		mov	a, !_voltage
 920 06a0 9D F0                   		mov	r8, a
 921 06a2 70                      		mov	x, a 
 922 06a3 51 00                   		mov	a, #0
 923 06a5 BD F4                   		movw	r12, ax
 924 06a7 8F 00 00                		mov	a, !_current2
 925 06aa 9D F0                   		mov	r8, a
 926 06ac 70                      		mov	x, a 
 927 06ad 51 00                   		mov	a, #0
 928 06af BD F2                   		movw	r10, ax
 929 06b1 8F 00 00                		mov	a, !_current1
 930 06b4 9D F0                   		mov	r8, a
 931 06b6 CD F1 00                		mov	r9, #0
 932 06b9 C9 F6 3C 00             		movw	r14, #60
 933 06bd AE F8                   		movw	ax, sp
 934 06bf BD F6                   		movw	r14, ax
 935 06c1 04 3C 00                		addw	ax, #60
 936 06c4 BD F6                   		movw	r14, ax
 937 06c6 04 D5 FF                		addw	ax, #-43
 938 06c9 B8 00                   		movw	[sp], ax
 939 06cb 30 0A 00                		movw	ax, #.LC1
 940 06ce B8 02                   		movw	[sp+2], ax
 941 06d0 AD F4                   		movw	ax, r12
 942 06d2 B8 04                   		movw	[sp+4], ax
 943 06d4 AD F2                   		movw	ax, r10
 944 06d6 B8 06                   		movw	[sp+6], ax
 945 06d8 AD F0                   		movw	ax, r8
 946 06da B8 08                   		movw	[sp+8], ax
 947 06dc FC 00 00 00             		call	!!%code(_sprintf)
 209:../src/user_functions.c **** 					current1);
 210:../src/user_functions.c **** 
 211:../src/user_functions.c **** 			//				  sprintf(str, "%d", voltage);
 212:../src/user_functions.c **** 
 213:../src/user_functions.c **** 			strcpy(response, str);
 948                             		.loc 1 213 0
 949 06e0 30 08 00                		movw	ax, #_response
 950 06e3 B8 00                   		movw	[sp], ax
 951 06e5 C9 F0 3C 00             		movw	r8, #60
 952 06e9 AE F8                   		movw	ax, sp
 953 06eb BD F0                   		movw	r8, ax
 954 06ed 04 3C 00                		addw	ax, #60
 955 06f0 BD F0                   		movw	r8, ax
 956 06f2 04 D5 FF                		addw	ax, #-43
 957 06f5 B8 02                   		movw	[sp+2], ax
 958 06f7 FC 00 00 00             		call	!!%code(_strcpy)
 214:../src/user_functions.c **** 			count = strlen(str);
 959                             		.loc 1 214 0
 960 06fb C9 F2 3C 00             		movw	r10, #60
 961 06ff AE F8                   		movw	ax, sp
 962 0701 BD F2                   		movw	r10, ax
 963 0703 04 3C 00                		addw	ax, #60
 964 0706 BD F2                   		movw	r10, ax
 965 0708 04 D5 FF                		addw	ax, #-43
 966 070b B8 00                   		movw	[sp], ax
 967 070d FC 00 00 00             		call	!!%code(_strlen)
 968 0711 AD F0                   		movw	ax, r8
 969 0713 BF 04 00                		movw	!_count, ax
 215:../src/user_functions.c **** 
 216:../src/user_functions.c **** 			break;
 970                             		.loc 1 216 0
 971 0716 EC B5 09 00             		br	!!.L9
 972                             	.L17:
 217:../src/user_functions.c **** 
 218:../src/user_functions.c **** 		case 'B':
 219:../src/user_functions.c **** 			setRTC();
 973                             		.loc 1 219 0
 974 071a FC 00 00 00             		call	!!%code(_setRTC)
 220:../src/user_functions.c **** 			break;
 975                             		.loc 1 220 0
 976 071e EC B5 09 00             		br	!!.L9
 977                             	.L18:
 221:../src/user_functions.c **** 		case 'C':
 222:../src/user_functions.c **** 			getRTC();
 978                             		.loc 1 222 0
 979 0722 FC 00 00 00             		call	!!%code(_getRTC)
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 980                             		.loc 1 223 0
 981 0726 8F 00 00                		mov	a, !_date
 982 0729 9D F0                   		mov	r8, a
 983 072b 70                      		mov	x, a 
 984 072c 51 00                   		mov	a, #0
 985 072e BD EA                   		movw	r18, ax
 224:../src/user_functions.c **** 					date[1], date[2], date[3], date[4], date[5]);
 986                             		.loc 1 224 0
 987 0730 8F 00 00                		mov	a, !_date+1
 988 0733 9D F0                   		mov	r8, a
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 989                             		.loc 1 223 0
 990 0735 70                      		mov	x, a 
 991 0736 51 00                   		mov	a, #0
 992 0738 BD E8                   		movw	r16, ax
 993                             		.loc 1 224 0
 994 073a 8F 00 00                		mov	a, !_date+2
 995 073d 9D F0                   		mov	r8, a
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 996                             		.loc 1 223 0
 997 073f 70                      		mov	x, a 
 998 0740 51 00                   		mov	a, #0
 999 0742 BD F6                   		movw	r14, ax
 1000                             		.loc 1 224 0
 1001 0744 8F 00 00                		mov	a, !_date+3
 1002 0747 9D F0                   		mov	r8, a
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 1003                             		.loc 1 223 0
 1004 0749 70                      		mov	x, a 
 1005 074a 51 00                   		mov	a, #0
 1006 074c BD F4                   		movw	r12, ax
 1007                             		.loc 1 224 0
 1008 074e 8F 00 00                		mov	a, !_date+4
 1009 0751 9D F0                   		mov	r8, a
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 1010                             		.loc 1 223 0
 1011 0753 70                      		mov	x, a 
 1012 0754 51 00                   		mov	a, #0
 1013 0756 BD F2                   		movw	r10, ax
 1014                             		.loc 1 224 0
 1015 0758 8F 00 00                		mov	a, !_date+5
 1016 075b 9D F0                   		mov	r8, a
 223:../src/user_functions.c **** 			sprintf(response, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0],
 1017                             		.loc 1 223 0
 1018 075d CD F1 00                		mov	r9, #0
 1019 0760 30 08 00                		movw	ax, #_response
 1020 0763 B8 00                   		movw	[sp], ax
 1021 0765 30 1D 00                		movw	ax, #.LC2
 1022 0768 B8 02                   		movw	[sp+2], ax
 1023 076a AD EA                   		movw	ax, r18
 1024 076c B8 04                   		movw	[sp+4], ax
 1025 076e AD E8                   		movw	ax, r16
 1026 0770 B8 06                   		movw	[sp+6], ax
 1027 0772 AD F6                   		movw	ax, r14
 1028 0774 B8 08                   		movw	[sp+8], ax
 1029 0776 AD F4                   		movw	ax, r12
 1030 0778 B8 0A                   		movw	[sp+10], ax
 1031 077a AD F2                   		movw	ax, r10
 1032 077c B8 0C                   		movw	[sp+12], ax
 1033 077e AD F0                   		movw	ax, r8
 1034 0780 B8 0E                   		movw	[sp+14], ax
 1035 0782 FC 00 00 00             		call	!!%code(_sprintf)
 225:../src/user_functions.c **** 			count = strlen(response);
 1036                             		.loc 1 225 0
 1037 0786 30 08 00                		movw	ax, #_response
 1038 0789 B8 00                   		movw	[sp], ax
 1039 078b FC 00 00 00             		call	!!%code(_strlen)
 1040 078f AD F0                   		movw	ax, r8
 1041 0791 BF 04 00                		movw	!_count, ax
 226:../src/user_functions.c **** 			break;
 1042                             		.loc 1 226 0
 1043 0794 EC B5 09 00             		br	!!.L9
 1044                             	.L22:
 227:../src/user_functions.c **** 		case 'I':
 228:../src/user_functions.c **** 			sprintf(response, "$I0%03d\x0d\x0a", finalTemp);
 1045                             		.loc 1 228 0
 1046 0798 AF 06 00                		movw	ax, !_finalTemp
 1047 079b BD F0                   		movw	r8, ax
 1048 079d 30 08 00                		movw	ax, #_response
 1049 07a0 B8 00                   		movw	[sp], ax
 1050 07a2 30 36 00                		movw	ax, #.LC3
 1051 07a5 B8 02                   		movw	[sp+2], ax
 1052 07a7 AD F0                   		movw	ax, r8
 1053 07a9 B8 04                   		movw	[sp+4], ax
 1054 07ab FC 00 00 00             		call	!!%code(_sprintf)
 229:../src/user_functions.c **** 			count = strlen(response);
 1055                             		.loc 1 229 0
 1056 07af 30 08 00                		movw	ax, #_response
 1057 07b2 B8 00                   		movw	[sp], ax
 1058 07b4 FC 00 00 00             		call	!!%code(_strlen)
 1059 07b8 AD F0                   		movw	ax, r8
 1060 07ba BF 04 00                		movw	!_count, ax
 230:../src/user_functions.c **** 			break;
 1061                             		.loc 1 230 0
 1062 07bd EC B5 09 00             		br	!!.L9
 1063                             	.L20:
 231:../src/user_functions.c **** 		case 'K':
 232:../src/user_functions.c **** 			if (1) {
 233:../src/user_functions.c **** 			}
 234:../src/user_functions.c **** //			uint16_t addr = (record[2] - '0') * 1000 + (record[3] - '0') * 100
 235:../src/user_functions.c **** //					+ (record[4] - '0') * 10 + (record[5] - '0');
 236:../src/user_functions.c **** //			uint8_t len = record[7] - '0';
 237:../src/user_functions.c **** //			len = len + (record[6] - '0') * 10;
 238:../src/user_functions.c **** 			uint16_t address = 0;
 1064                             		.loc 1 238 0
 1065 07c1 F6                      		clrw	ax
 1066 07c2 B8 38                   		movw	[sp+56], ax
 239:../src/user_functions.c **** 			uint8_t len = 0;
 1067                             		.loc 1 239 0
 1068 07c4 F1                      		clrb	a
 1069 07c5 98 37                   		mov	[sp+55], a
 240:../src/user_functions.c **** 			while (record[i] != ',') {
 1070                             		.loc 1 240 0
 1071 07c7 EC FD 07 00             		br	!!.L40
 1072                             	.L41:
 241:../src/user_functions.c **** 				address = address * 10;
 1073                             		.loc 1 241 0
 1074 07cb A8 38                   		movw	ax, [sp+56]
 1075 07cd BD F0                   		movw	r8, ax
 1076 07cf 01                      		addw	ax, ax
 1077 07d0 BD F0                   		movw	r8, ax
 1078 07d2 31 2D                   		shlw	ax, 2
 1079 07d4 BD F2                   		movw	r10, ax
 1080 07d6 AD F0                   		movw	ax, r8
 1081 07d8 06 F2                   		addw	ax, r10
 1082 07da B8 38                   		movw	[sp+56], ax
 242:../src/user_functions.c **** 				address += record[i] - '0';
 1083                             		.loc 1 242 0
 1084 07dc A8 3A                   		movw	ax, [sp+58]
 1085 07de 04 00 00                		addw	ax, #_record
 1086 07e1 BD F0                   		movw	r8, ax
 1087 07e3 BD F4                   		movw	r12, ax
 1088 07e5 FA F4                   		movw	hl, r12
 1089 07e7 8B                      		mov	a, [hl]
 1090 07e8 9D F0                   		mov	r8, a
 1091 07ea CD F1 00                		mov	r9, #0
 1092 07ed A8 38                   		movw	ax, [sp+56]
 1093 07ef 06 F0                   		addw	ax, r8
 1094 07f1 BD F0                   		movw	r8, ax
 1095 07f3 04 D0 FF                		addw	ax, #-48
 1096 07f6 B8 38                   		movw	[sp+56], ax
 243:../src/user_functions.c **** 				i++;
 1097                             		.loc 1 243 0
 1098 07f8 A8 3A                   		movw	ax, [sp+58]
 1099 07fa A1                      		incw	ax
 1100 07fb B8 3A                   		movw	[sp+58], ax
 1101                             	.L40:
 240:../src/user_functions.c **** 				address = address * 10;
 1102                             		.loc 1 240 0
 1103 07fd A8 3A                   		movw	ax, [sp+58]
 1104 07ff 04 00 00                		addw	ax, #_record
 1105 0802 BD F0                   		movw	r8, ax
 1106 0804 BD F6                   		movw	r14, ax
 1107 0806 FA F6                   		movw	hl, r14
 1108 0808 8B                      		mov	a, [hl]
 1109 0809 9D F0                   		mov	r8, a
 1110 080b 4A F0 2C                		cmp	r8, #44
 1111 080e 61 E8                   		 skz
 1112 0810 EC CB 07 00             		 br	!!.L41
 244:../src/user_functions.c **** 			}
 245:../src/user_functions.c **** 			i++;
 1113                             		.loc 1 245 0
 1114 0814 A8 3A                   		movw	ax, [sp+58]
 1115 0816 A1                      		incw	ax
 1116 0817 B8 3A                   		movw	[sp+58], ax
 246:../src/user_functions.c **** 			while (record[i] != '\r') {
 1117                             		.loc 1 246 0
 1118 0819 EC 4E 08 00             		br	!!.L42
 1119                             	.L43:
 247:../src/user_functions.c **** 				len *= 10U;
 1120                             		.loc 1 247 0
 1121 081d 88 37                   		mov	a, [sp+55]
 1122 081f 9D F0                   		mov	r8, a
 1123 0821 61 01                   		add	a, a
 1124 0823 9D F0                   		mov	r8, a
 1125 0825 31 29                   		shl	a, 2
 1126 0827 9D F1                   		mov	r9, a
 1127 0829 76                      		mov	l, a
 1128 082a 8D F0                   		mov	a, r8
 1129 082c 61 0E                   		add	a, l
 1130 082e 98 37                   		mov	[sp+55], a
 248:../src/user_functions.c **** 				len += record[i] - '0';
 1131                             		.loc 1 248 0
 1132 0830 A8 3A                   		movw	ax, [sp+58]
 1133 0832 04 00 00                		addw	ax, #_record
 1134 0835 BD F0                   		movw	r8, ax
 1135 0837 BD F2                   		movw	r10, ax
 1136 0839 FA F2                   		movw	hl, r10
 1137 083b 8B                      		mov	a, [hl]
 1138 083c 9D F0                   		mov	r8, a
 1139 083e 76                      		mov	l, a
 1140 083f 88 37                   		mov	a, [sp+55]
 1141 0841 61 0E                   		add	a, l
 1142 0843 9D F0                   		mov	r8, a
 1143 0845 0C D0                   		add	a, #-48
 1144 0847 98 37                   		mov	[sp+55], a
 249:../src/user_functions.c **** 				i++;
 1145                             		.loc 1 249 0
 1146 0849 A8 3A                   		movw	ax, [sp+58]
 1147 084b A1                      		incw	ax
 1148 084c B8 3A                   		movw	[sp+58], ax
 1149                             	.L42:
 246:../src/user_functions.c **** 				len *= 10U;
 1150                             		.loc 1 246 0
 1151 084e A8 3A                   		movw	ax, [sp+58]
 1152 0850 04 00 00                		addw	ax, #_record
 1153 0853 BD F0                   		movw	r8, ax
 1154 0855 BD F4                   		movw	r12, ax
 1155 0857 FA F4                   		movw	hl, r12
 1156 0859 8B                      		mov	a, [hl]
 1157 085a 9D F0                   		mov	r8, a
 1158 085c 4A F0 0D                		cmp	r8, #13
 1159 085f 61 E8                   		 skz
 1160 0861 EC 1D 08 00             		 br	!!.L43
 250:../src/user_functions.c **** 			}
 251:../src/user_functions.c **** 
 252:../src/user_functions.c **** 			if (len > 32) {
 1161                             		.loc 1 252 0
 1162 0865 88 37                   		mov	a, [sp+55]
 1163 0867 4C 20                   		cmp	a, #32
 1164 0869 61 E3                   		 skh
 1165 086b EC 95 08 00             		 br	!!.L44
 253:../src/user_functions.c **** 				count = 5;
 1166                             		.loc 1 253 0
 1167 086f 30 05 00                		movw	ax, #5
 1168 0872 BF 04 00                		movw	!_count, ax
 254:../src/user_functions.c **** 				sprintf(response, "$K2\r\n");
 1169                             		.loc 1 254 0
 1170 0875 51 24                   		mov	a, #36
 1171 0877 9F 08 00                		mov	!_response, a
 1172 087a 51 4B                   		mov	a, #75
 1173 087c 9F 09 00                		mov	!_response+1, a
 1174 087f 51 32                   		mov	a, #50
 1175 0881 9F 0A 00                		mov	!_response+2, a
 1176 0884 51 0D                   		mov	a, #13
 1177 0886 9F 0B 00                		mov	!_response+3, a
 1178 0889 51 0A                   		mov	a, #10
 1179 088b 9F 0C 00                		mov	!_response+4, a
 1180 088e F5 0D 00                		clrb	!_response+5
 255:../src/user_functions.c **** 			} else {
 256:../src/user_functions.c **** 				read(address, len);
 257:../src/user_functions.c **** 			}
 258:../src/user_functions.c **** 			break;
 1181                             		.loc 1 258 0
 1182 0891 EC B5 09 00             		br	!!.L9
 1183                             	.L44:
 256:../src/user_functions.c **** 			}
 1184                             		.loc 1 256 0
 1185 0895 A8 38                   		movw	ax, [sp+56]
 1186 0897 BD F0                   		movw	r8, ax
 1187 0899 B8 00                   		movw	[sp], ax
 1188 089b 88 37                   		mov	a, [sp+55]
 1189 089d 9D F0                   		mov	r8, a
 1190 089f 98 02                   		mov	[sp+2], a
 1191 08a1 FC 00 00 00             		call	!!%code(_read)
 1192                             		.loc 1 258 0
 1193 08a5 EC B5 09 00             		br	!!.L9
 1194                             	.L23:
 259:../src/user_functions.c **** 		case 'J':
 260:../src/user_functions.c **** 			if (1) {
 261:../src/user_functions.c **** 
 262:../src/user_functions.c **** 			}
 263:../src/user_functions.c **** 			uint16_t addr = 0;
 1195                             		.loc 1 263 0
 1196 08a9 F6                      		clrw	ax
 1197 08aa B8 34                   		movw	[sp+52], ax
 264:../src/user_functions.c **** 			while (record[i] != '\r') {
 1198                             		.loc 1 264 0
 1199 08ac EC E2 08 00             		br	!!.L46
 1200                             	.L47:
 265:../src/user_functions.c **** 				addr = addr * 10;
 1201                             		.loc 1 265 0
 1202 08b0 A8 34                   		movw	ax, [sp+52]
 1203 08b2 BD F0                   		movw	r8, ax
 1204 08b4 01                      		addw	ax, ax
 1205 08b5 BD F0                   		movw	r8, ax
 1206 08b7 31 2D                   		shlw	ax, 2
 1207 08b9 BD F2                   		movw	r10, ax
 1208 08bb AD F0                   		movw	ax, r8
 1209 08bd 06 F2                   		addw	ax, r10
 1210 08bf B8 34                   		movw	[sp+52], ax
 266:../src/user_functions.c **** 				addr += record[i] - '0';
 1211                             		.loc 1 266 0
 1212 08c1 A8 3A                   		movw	ax, [sp+58]
 1213 08c3 04 00 00                		addw	ax, #_record
 1214 08c6 BD F0                   		movw	r8, ax
 1215 08c8 BD F6                   		movw	r14, ax
 1216 08ca FA F6                   		movw	hl, r14
 1217 08cc 8B                      		mov	a, [hl]
 1218 08cd 9D F0                   		mov	r8, a
 1219 08cf CD F1 00                		mov	r9, #0
 1220 08d2 A8 34                   		movw	ax, [sp+52]
 1221 08d4 06 F0                   		addw	ax, r8
 1222 08d6 BD F0                   		movw	r8, ax
 1223 08d8 04 D0 FF                		addw	ax, #-48
 1224 08db B8 34                   		movw	[sp+52], ax
 267:../src/user_functions.c **** 				i++;
 1225                             		.loc 1 267 0
 1226 08dd A8 3A                   		movw	ax, [sp+58]
 1227 08df A1                      		incw	ax
 1228 08e0 B8 3A                   		movw	[sp+58], ax
 1229                             	.L46:
 264:../src/user_functions.c **** 				addr = addr * 10;
 1230                             		.loc 1 264 0
 1231 08e2 A8 3A                   		movw	ax, [sp+58]
 1232 08e4 04 00 00                		addw	ax, #_record
 1233 08e7 BD F0                   		movw	r8, ax
 1234 08e9 BD F2                   		movw	r10, ax
 1235 08eb FA F2                   		movw	hl, r10
 1236 08ed 8B                      		mov	a, [hl]
 1237 08ee 9D F0                   		mov	r8, a
 1238 08f0 4A F0 0D                		cmp	r8, #13
 1239 08f3 61 E8                   		 skz
 1240 08f5 EC B0 08 00             		 br	!!.L47
 268:../src/user_functions.c **** 			}
 269:../src/user_functions.c **** //			uint16_t address = (record[2] - '0') * 1000
 270:../src/user_functions.c **** //					+ (record[3] - '0') * 100 + (record[4] - '0') * 10
 271:../src/user_functions.c **** //					+ (record[5] - '0');
 272:../src/user_functions.c **** 			writeMem(addr);
 1241                             		.loc 1 272 0
 1242 08f9 A8 34                   		movw	ax, [sp+52]
 1243 08fb BD F0                   		movw	r8, ax
 1244 08fd B8 00                   		movw	[sp], ax
 1245 08ff FC 00 00 00             		call	!!%code(_writeMem)
 273:../src/user_functions.c **** 			break;
 1246                             		.loc 1 273 0
 1247 0903 EC B5 09 00             		br	!!.L9
 1248                             	.L25:
 274:../src/user_functions.c **** 		case 'M':
 275:../src/user_functions.c **** 			if (1) {
 276:../src/user_functions.c **** 
 277:../src/user_functions.c **** 			}
 278:../src/user_functions.c **** 			uint16_t log = 0;
 1249                             		.loc 1 278 0
 1250 0907 F6                      		clrw	ax
 1251 0908 B8 32                   		movw	[sp+50], ax
 279:../src/user_functions.c **** 			while (record[i] != '\x0d') {
 1252                             		.loc 1 279 0
 1253 090a EC 40 09 00             		br	!!.L48
 1254                             	.L49:
 280:../src/user_functions.c **** 				log = log * 10;
 1255                             		.loc 1 280 0
 1256 090e A8 32                   		movw	ax, [sp+50]
 1257 0910 BD F0                   		movw	r8, ax
 1258 0912 01                      		addw	ax, ax
 1259 0913 BD F0                   		movw	r8, ax
 1260 0915 31 2D                   		shlw	ax, 2
 1261 0917 BD F2                   		movw	r10, ax
 1262 0919 AD F0                   		movw	ax, r8
 1263 091b 06 F2                   		addw	ax, r10
 1264 091d B8 32                   		movw	[sp+50], ax
 281:../src/user_functions.c **** 				log += record[i] - '0';
 1265                             		.loc 1 281 0
 1266 091f A8 3A                   		movw	ax, [sp+58]
 1267 0921 04 00 00                		addw	ax, #_record
 1268 0924 BD F0                   		movw	r8, ax
 1269 0926 BD F4                   		movw	r12, ax
 1270 0928 FA F4                   		movw	hl, r12
 1271 092a 8B                      		mov	a, [hl]
 1272 092b 9D F0                   		mov	r8, a
 1273 092d CD F1 00                		mov	r9, #0
 1274 0930 A8 32                   		movw	ax, [sp+50]
 1275 0932 06 F0                   		addw	ax, r8
 1276 0934 BD F0                   		movw	r8, ax
 1277 0936 04 D0 FF                		addw	ax, #-48
 1278 0939 B8 32                   		movw	[sp+50], ax
 282:../src/user_functions.c **** 				i++;
 1279                             		.loc 1 282 0
 1280 093b A8 3A                   		movw	ax, [sp+58]
 1281 093d A1                      		incw	ax
 1282 093e B8 3A                   		movw	[sp+58], ax
 1283                             	.L48:
 279:../src/user_functions.c **** 				log = log * 10;
 1284                             		.loc 1 279 0
 1285 0940 A8 3A                   		movw	ax, [sp+58]
 1286 0942 04 00 00                		addw	ax, #_record
 1287 0945 BD F0                   		movw	r8, ax
 1288 0947 BD F6                   		movw	r14, ax
 1289 0949 FA F6                   		movw	hl, r14
 1290 094b 8B                      		mov	a, [hl]
 1291 094c 9D F0                   		mov	r8, a
 1292 094e 4A F0 0D                		cmp	r8, #13
 1293 0951 61 E8                   		 skz
 1294 0953 EC 0E 09 00             		 br	!!.L49
 283:../src/user_functions.c **** 			}
 284:../src/user_functions.c **** 			readLog(log);
 1295                             		.loc 1 284 0
 1296 0957 A8 32                   		movw	ax, [sp+50]
 1297 0959 BD F0                   		movw	r8, ax
 1298 095b B8 00                   		movw	[sp], ax
 1299 095d FC 00 00 00             		call	!!%code(_readLog)
 285:../src/user_functions.c **** 			break;
 1300                             		.loc 1 285 0
 1301 0961 EC B5 09 00             		br	!!.L9
 1302                             	.L27:
 286:../src/user_functions.c **** 
 287:../src/user_functions.c **** 		case 'N':
 288:../src/user_functions.c **** 
 289:../src/user_functions.c **** 			sprintf(response, "$N0%d,%d\x0d\x0a", T_off, T_on);
 1303                             		.loc 1 289 0
 1304 0965 CD F0 1E                		mov	r8, #30
 1305 0968 8D F0                   		mov	a, r8
 1306 096a 70                      		mov	x, a 
 1307 096b 51 00                   		mov	a, #0
 1308 096d BD F2                   		movw	r10, ax
 1309 096f CD F0 1A                		mov	r8, #26
 1310 0972 CD F1 00                		mov	r9, #0
 1311 0975 30 08 00                		movw	ax, #_response
 1312 0978 B8 00                   		movw	[sp], ax
 1313 097a 30 40 00                		movw	ax, #.LC4
 1314 097d B8 02                   		movw	[sp+2], ax
 1315 097f AD F2                   		movw	ax, r10
 1316 0981 B8 04                   		movw	[sp+4], ax
 1317 0983 AD F0                   		movw	ax, r8
 1318 0985 B8 06                   		movw	[sp+6], ax
 1319 0987 FC 00 00 00             		call	!!%code(_sprintf)
 290:../src/user_functions.c **** 			count = 9;
 1320                             		.loc 1 290 0
 1321 098b 30 09 00                		movw	ax, #9
 1322 098e BF 04 00                		movw	!_count, ax
 291:../src/user_functions.c **** 			break;
 1323                             		.loc 1 291 0
 1324 0991 EC B5 09 00             		br	!!.L9
 1325                             	.L10:
 292:../src/user_functions.c **** 		default:
 293:../src/user_functions.c **** 			sprintf(response, "$%c1\x0d\x0a", record[1]);
 1326                             		.loc 1 293 0
 1327 0995 8F 00 00                		mov	a, !_record+1
 1328 0998 9D F0                   		mov	r8, a
 1329 099a CD F1 00                		mov	r9, #0
 1330 099d 30 08 00                		movw	ax, #_response
 1331 09a0 B8 00                   		movw	[sp], ax
 1332 09a2 30 4B 00                		movw	ax, #.LC5
 1333 09a5 B8 02                   		movw	[sp+2], ax
 1334 09a7 AD F0                   		movw	ax, r8
 1335 09a9 B8 04                   		movw	[sp+4], ax
 1336 09ab FC 00 00 00             		call	!!%code(_sprintf)
 294:../src/user_functions.c **** 			count = 5;
 1337                             		.loc 1 294 0
 1338 09af 30 05 00                		movw	ax, #5
 1339 09b2 BF 04 00                		movw	!_count, ax
 1340                             	.L9:
 1341                             	.LBE2:
 295:../src/user_functions.c **** //				 strcpy(response, "$");
 296:../src/user_functions.c **** //				 strcat(response, &record[1]);
 297:../src/user_functions.c **** //				 strcat(response, "1\x0d\x0a"); count = 5;
 298:../src/user_functions.c **** 
 299:../src/user_functions.c **** 		}
 300:../src/user_functions.c **** 	}
 301:../src/user_functions.c **** 
 302:../src/user_functions.c **** 	R_UART1_Send(response, count);
 1342                             		.loc 1 302 0
 1343 09b5 AF 04 00                		movw	ax, !_count
 1344 09b8 BD F0                   		movw	r8, ax
 1345 09ba 30 08 00                		movw	ax, #_response
 1346 09bd B8 00                   		movw	[sp], ax
 1347 09bf AD F0                   		movw	ax, r8
 1348 09c1 B8 02                   		movw	[sp+2], ax
 1349 09c3 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 303:../src/user_functions.c **** 	count = 0;
 1350                             		.loc 1 303 0
 1351 09c7 F6                      		clrw	ax
 1352 09c8 BF 04 00                		movw	!_count, ax
 304:../src/user_functions.c **** }
 1353                             		.loc 1 304 0
 1354 09cb 10 3C                   		addw	sp, #60
 1355 09cd 61 EF                   		sel	rb2
 1356 09cf C2                      		pop	bc ; r18
 1357 09d0 C0                      		pop	ax ; r16
 1358 09d1 61 CF                   		sel	rb0
 1359 09d3 D7                      		ret
 1360                             	.LFE1:
 1362                             		.global	_errorTest
 1364                             	_errorTest:
 1365                             	.LFB2:
 305:../src/user_functions.c **** 
 306:../src/user_functions.c **** int errorTest() {
 1366                             		.loc 1 306 0
 1367                             		; start of function
 1368                             		; locals: 8 bytes
 1369                             		; outgoing: 4 bytes
 1370 09d4 20 0C                   		subw	sp, #12
 1371                             	.LCFI4:
 307:../src/user_functions.c **** 
 308:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 309:../src/user_functions.c **** //	}
 310:../src/user_functions.c **** //	else{
 311:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 312:../src/user_functions.c **** //		strcpy(record, validChar);
 313:../src/user_functions.c **** //		count = 5;
 314:../src/user_functions.c **** //		return 0;
 315:../src/user_functions.c **** //	}
 316:../src/user_functions.c **** 
 317:../src/user_functions.c **** 	if (record[strlen(record) - 1] != '\x0a') {	//INVALID PARAMETERS
 1372                             		.loc 1 317 0
 1373 09d6 30 00 00                		movw	ax, #_record
 1374 09d9 B8 00                   		movw	[sp], ax
 1375 09db FC 00 00 00             		call	!!%code(_strlen)
 1376 09df B6 F0                   		decw	r8
 1377 09e1 AD F0                   		movw	ax, r8
 1378 09e3 04 00 00                		addw	ax, #_record
 1379 09e6 16                      		movw	hl, ax
 1380 09e7 8B                      		mov	a, [hl]
 1381 09e8 9D F0                   		mov	r8, a
 1382 09ea 4A F0 0A                		cmp	r8, #10
 1383 09ed 61 F8                   		 sknz
 1384 09ef EC 32 0A 00             		 br	!!.L51
 1385                             	.LBB3:
 318:../src/user_functions.c **** 		char validChar[] = { '$', record[1], '2', '\x0d', '\x0a' };
 1386                             		.loc 1 318 0
 1387 09f3 51 24                   		mov	a, #36
 1388 09f5 98 07                   		mov	[sp+7], a
 1389 09f7 8F 00 00                		mov	a, !_record+1
 1390 09fa 9D F0                   		mov	r8, a
 1391 09fc 98 08                   		mov	[sp+8], a
 1392 09fe 51 32                   		mov	a, #50
 1393 0a00 98 09                   		mov	[sp+9], a
 1394 0a02 51 0D                   		mov	a, #13
 1395 0a04 98 0A                   		mov	[sp+10], a
 1396 0a06 51 0A                   		mov	a, #10
 1397 0a08 98 0B                   		mov	[sp+11], a
 319:../src/user_functions.c **** 		strcpy(record, validChar);
 1398                             		.loc 1 319 0
 1399 0a0a 30 00 00                		movw	ax, #_record
 1400 0a0d B8 00                   		movw	[sp], ax
 1401 0a0f C9 F0 0C 00             		movw	r8, #12
 1402 0a13 AE F8                   		movw	ax, sp
 1403 0a15 BD F0                   		movw	r8, ax
 1404 0a17 04 0C 00                		addw	ax, #12
 1405 0a1a BD F0                   		movw	r8, ax
 1406 0a1c 04 FB FF                		addw	ax, #-5
 1407 0a1f B8 02                   		movw	[sp+2], ax
 1408 0a21 FC 00 00 00             		call	!!%code(_strcpy)
 320:../src/user_functions.c **** 		count = 5;
 1409                             		.loc 1 320 0
 1410 0a25 30 05 00                		movw	ax, #5
 1411 0a28 BF 04 00                		movw	!_count, ax
 321:../src/user_functions.c **** 		return 0;
 1412                             		.loc 1 321 0
 1413 0a2b F6                      		clrw	ax
 1414 0a2c B8 04                   		movw	[sp+4], ax
 1415 0a2e EC 35 0A 00             		br	!!.L52
 1416                             	.L51:
 1417                             	.LBE3:
 322:../src/user_functions.c **** 	}
 323:../src/user_functions.c **** 
 324:../src/user_functions.c **** 	return 1;
 1418                             		.loc 1 324 0
 1419 0a32 E6                      		onew	ax
 1420 0a33 B8 04                   		movw	[sp+4], ax
 1421                             	.L52:
 1422 0a35 A8 04                   		movw	ax, [sp+4]
 1423 0a37 BD F0                   		movw	r8, ax
 325:../src/user_functions.c **** }
 1424                             		.loc 1 325 0 discriminator 1
 1425 0a39 10 0C                   		addw	sp, #12
 1426 0a3b D7                      		ret
 1427                             	.LFE2:
 1429                             		.global	_displayLCD
 1431                             	_displayLCD:
 1432                             	.LFB3:
 326:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 327:../src/user_functions.c **** //reset = 0 just keep going
 328:../src/user_functions.c **** 
 329:../src/user_functions.c **** void displayLCD(int reset) {
 1433                             		.loc 1 329 0
 1434                             		; start of function
 1435                             		; push 2: r16
 1436                             		; locals: 2 bytes
 1437                             		; outgoing: 4 bytes
 1438 0a3c 61 EF                   		sel	rb2
 1439 0a3e C1                      		push	ax ; r16
 1440                             	.LCFI5:
 1441 0a3f 61 CF                   		sel	rb0
 1442 0a41 20 06                   		subw	sp, #6
 1443                             	.LCFI6:
 330:../src/user_functions.c **** 
 331:../src/user_functions.c **** 	if (reset) {
 1444                             		.loc 1 331 0
 1445 0a43 A8 0C                   		movw	ax, [sp+12]
 1446 0a45 44 00 00                		cmpw	ax, #0
 1447 0a48 61 F8                   		 sknz
 1448 0a4a EC 5A 0A 00             		 br	!!.L54
 332:../src/user_functions.c **** 		offset = 0;
 1449                             		.loc 1 332 0
 1450 0a4e F6                      		clrw	ax
 1451 0a4f BF 3E 00                		movw	!_offset, ax
 333:../src/user_functions.c **** 		display = 1;
 1452                             		.loc 1 333 0
 1453 0a52 E6                      		onew	ax
 1454 0a53 BF 3C 00                		movw	!_display, ax
 334:../src/user_functions.c **** 		scrollCount = 0;
 1455                             		.loc 1 334 0
 1456 0a56 F6                      		clrw	ax
 1457 0a57 BF 00 00                		movw	!_scrollCount, ax
 1458                             	.L54:
 335:../src/user_functions.c **** 	}
 336:../src/user_functions.c **** 
 337:../src/user_functions.c **** 	if (display) {
 1459                             		.loc 1 337 0
 1460 0a5a AF 3C 00                		movw	ax, !_display
 1461 0a5d BD F0                   		movw	r8, ax
 1462 0a5f 44 00 00                		cmpw	ax, #0
 1463 0a62 61 F8                   		 sknz
 1464 0a64 EC 14 0B 00             		 br	!!.L55
 1465                             	.LBB4:
 338:../src/user_functions.c **** 
 339:../src/user_functions.c **** 		int i;
 340:../src/user_functions.c **** 
 341:../src/user_functions.c **** 		writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1466                             		.loc 1 341 0
 1467 0a68 F1                      		clrb	a
 1468 0a69 98 00                   		mov	[sp], a
 1469 0a6b E1                      		oneb	a
 1470 0a6c 98 02                   		mov	[sp+2], a
 1471 0a6e FC 00 00 00             		call	!!%code(_writeByteLcd)
 342:../src/user_functions.c **** 		delayNoInt(1640);
 1472                             		.loc 1 342 0
 1473 0a72 30 68 06                		movw	ax, #1640
 1474 0a75 B8 00                   		movw	[sp], ax
 1475 0a77 FC 00 00 00             		call	!!%code(_delayNoInt)
 343:../src/user_functions.c **** 
 344:../src/user_functions.c **** 		writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1476                             		.loc 1 344 0
 1477 0a7b F1                      		clrb	a
 1478 0a7c 98 00                   		mov	[sp], a
 1479 0a7e 51 80                   		mov	a, #-128
 1480 0a80 98 02                   		mov	[sp+2], a
 1481 0a82 FC 00 00 00             		call	!!%code(_writeByteLcd)
 345:../src/user_functions.c **** 		delayNoInt(1640);
 1482                             		.loc 1 345 0
 1483 0a86 30 68 06                		movw	ax, #1640
 1484 0a89 B8 00                   		movw	[sp], ax
 1485 0a8b FC 00 00 00             		call	!!%code(_delayNoInt)
 346:../src/user_functions.c **** 
 347:../src/user_functions.c **** 		for (i = offset; i < strlen(display_string) - 2; i++) {
 1486                             		.loc 1 347 0
 1487 0a8f AF 3E 00                		movw	ax, !_offset
 1488 0a92 BD F0                   		movw	r8, ax
 1489 0a94 B8 04                   		movw	[sp+4], ax
 1490 0a96 EC ED 0A 00             		br	!!.L56
 1491                             	.L58:
 348:../src/user_functions.c **** 
 349:../src/user_functions.c **** 			if (i == (8 + offset)) {
 1492                             		.loc 1 349 0
 1493 0a9a AF 3E 00                		movw	ax, !_offset
 1494 0a9d BD F0                   		movw	r8, ax
 1495 0a9f 04 08 00                		addw	ax, #8
 1496 0aa2 BD F2                   		movw	r10, ax
 1497 0aa4 A8 04                   		movw	ax, [sp+4]
 1498 0aa6 BD F0                   		movw	r8, ax
 1499 0aa8 AD F2                   		movw	ax, r10
 1500 0aaa 46 F0                   		cmpw	ax, r8
 1501 0aac 61 E8                   		 skz
 1502 0aae EC C6 0A 00             		 br	!!.L57
 350:../src/user_functions.c **** 				writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1503                             		.loc 1 350 0
 1504 0ab2 F1                      		clrb	a
 1505 0ab3 98 00                   		mov	[sp], a
 1506 0ab5 51 C0                   		mov	a, #-64
 1507 0ab7 98 02                   		mov	[sp+2], a
 1508 0ab9 FC 00 00 00             		call	!!%code(_writeByteLcd)
 351:../src/user_functions.c **** 				delayNoInt(1640);
 1509                             		.loc 1 351 0
 1510 0abd 30 68 06                		movw	ax, #1640
 1511 0ac0 B8 00                   		movw	[sp], ax
 1512 0ac2 FC 00 00 00             		call	!!%code(_delayNoInt)
 1513                             	.L57:
 352:../src/user_functions.c **** 			}
 353:../src/user_functions.c **** 
 354:../src/user_functions.c **** 			writeByteLcd(LCD_DATA_WR, display_string[i]);
 1514                             		.loc 1 354 0 discriminator 2
 1515 0ac6 A8 04                   		movw	ax, [sp+4]
 1516 0ac8 04 00 00                		addw	ax, #_display_string
 1517 0acb BD F0                   		movw	r8, ax
 1518 0acd BD F2                   		movw	r10, ax
 1519 0acf FA F2                   		movw	hl, r10
 1520 0ad1 8B                      		mov	a, [hl]
 1521 0ad2 9D F0                   		mov	r8, a
 1522 0ad4 E1                      		oneb	a
 1523 0ad5 98 00                   		mov	[sp], a
 1524 0ad7 8D F0                   		mov	a, r8
 1525 0ad9 98 02                   		mov	[sp+2], a
 1526 0adb FC 00 00 00             		call	!!%code(_writeByteLcd)
 355:../src/user_functions.c **** 			delayNoInt(40);
 1527                             		.loc 1 355 0 discriminator 2
 1528 0adf 30 28 00                		movw	ax, #40
 1529 0ae2 B8 00                   		movw	[sp], ax
 1530 0ae4 FC 00 00 00             		call	!!%code(_delayNoInt)
 347:../src/user_functions.c **** 
 1531                             		.loc 1 347 0 discriminator 2
 1532 0ae8 A8 04                   		movw	ax, [sp+4]
 1533 0aea A1                      		incw	ax
 1534 0aeb B8 04                   		movw	[sp+4], ax
 1535                             	.L56:
 347:../src/user_functions.c **** 
 1536                             		.loc 1 347 0 is_stmt 0 discriminator 1
 1537 0aed A8 04                   		movw	ax, [sp+4]
 1538 0aef BD E8                   		movw	r16, ax
 1539 0af1 30 00 00                		movw	ax, #_display_string
 1540 0af4 B8 00                   		movw	[sp], ax
 1541 0af6 FC 00 00 00             		call	!!%code(_strlen)
 1542 0afa B6 F0                   		decw	r8 
 1543 0afc B6 F0                   		decw	r8
 1544 0afe AD E8                   		movw	ax, r16
 1545 0b00 46 F0                   		cmpw	ax, r8
 1546 0b02 61 D8                   		 sknc
 1547 0b04 EC 9A 0A 00             		 br	!!.L58
 356:../src/user_functions.c **** 
 357:../src/user_functions.c **** 		}
 358:../src/user_functions.c **** 		offset++;
 1548                             		.loc 1 358 0 is_stmt 1
 1549 0b08 AF 3E 00                		movw	ax, !_offset
 1550 0b0b BD F0                   		movw	r8, ax
 1551 0b0d A6 F0                   		incw	r8
 1552 0b0f AD F0                   		movw	ax, r8
 1553 0b11 BF 3E 00                		movw	!_offset, ax
 1554                             	.L55:
 1555                             	.LBE4:
 359:../src/user_functions.c **** 
 360:../src/user_functions.c **** 	}
 361:../src/user_functions.c **** 
 362:../src/user_functions.c **** 	if (offset >= (strlen(display_string) - 17)
 1556                             		.loc 1 362 0
 1557 0b14 AF 3E 00                		movw	ax, !_offset
 1558 0b17 BD F0                   		movw	r8, ax
 1559 0b19 BD E8                   		movw	r16, ax
 1560 0b1b 30 00 00                		movw	ax, #_display_string
 1561 0b1e B8 00                   		movw	[sp], ax
 1562 0b20 FC 00 00 00             		call	!!%code(_strlen)
 1563 0b24 AD F0                   		movw	ax, r8
 1564 0b26 04 EF FF                		addw	ax, #-17
 1565 0b29 BD F0                   		movw	r8, ax
 1566 0b2b AD E8                   		movw	ax, r16
 1567 0b2d 46 F0                   		cmpw	ax, r8
 1568 0b2f 61 C8                   		 skc
 1569 0b31 EC 49 0B 00             		 br	!!.L59
 363:../src/user_functions.c **** 			|| strlen(display_string) <= 18) {
 1570                             		.loc 1 363 0
 1571 0b35 30 00 00                		movw	ax, #_display_string
 1572 0b38 B8 00                   		movw	[sp], ax
 1573 0b3a FC 00 00 00             		call	!!%code(_strlen)
 1574 0b3e AD F0                   		movw	ax, r8
 1575 0b40 44 12 00                		cmpw	ax, #18
 1576 0b43 61 F3                   		 sknh
 1577 0b45 EC 4D 0B 00             		 br	!!.L53
 1578                             	.L59:
 364:../src/user_functions.c **** 		display = 0;
 1579                             		.loc 1 364 0
 1580 0b49 F6                      		clrw	ax
 1581 0b4a BF 3C 00                		movw	!_display, ax
 1582                             	.L53:
 365:../src/user_functions.c **** 	}
 366:../src/user_functions.c **** 
 367:../src/user_functions.c **** }
 1583                             		.loc 1 367 0
 1584 0b4d 10 06                   		addw	sp, #6
 1585 0b4f 61 EF                   		sel	rb2
 1586 0b51 C0                      		pop	ax ; r16
 1587 0b52 61 CF                   		sel	rb0
 1588 0b54 D7                      		ret
 1589                             	.LFE3:
 1591                             		.global	_collectADC
 1593                             	_collectADC:
 1594                             	.LFB4:
 368:../src/user_functions.c **** 
 369:../src/user_functions.c **** void collectADC() {
 1595                             		.loc 1 369 0
 1596                             		; start of function
 1597                             		; outgoing: 2 bytes
 1598 0b55 20 02                   		subw	sp, #2
 1599                             	.LCFI7:
 370:../src/user_functions.c **** 
 371:../src/user_functions.c **** 	ADS = _00_AD_INPUT_CHANNEL_0;
 1600                             		.loc 1 371 0
 1601 0b57 C9 F0 31 FF             		movw	r8, #-207
 1602 0b5b AD F0                   		movw	ax, r8
 1603 0b5d BD F2                   		movw	r10, ax
 1604 0b5f DA F2                   		movw	bc, r10
 1605 0b61 F1                      		clrb	a
 1606 0b62 48 00 00                		mov	[bc], a
 372:../src/user_functions.c **** 	R_ADC_Start();
 1607                             		.loc 1 372 0
 1608 0b65 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 373:../src/user_functions.c **** 	while (ADCS)
 1609                             		.loc 1 373 0
 1610 0b69 00                      		nop
 1611                             	.L62:
 1612                             		.loc 1 373 0 is_stmt 0 discriminator 1
 1613 0b6a C9 F0 30 FF             		movw	r8, #-208
 1614 0b6e AD F0                   		movw	ax, r8
 1615 0b70 BD F2                   		movw	r10, ax
 1616 0b72 FA F2                   		movw	hl, r10
 1617 0b74 8B                      		mov	a, [hl]
 1618 0b75 9D F0                   		mov	r8, a
 1619 0b77 31 7A                   		shr	a, 7
 1620 0b79 9D F0                   		mov	r8, a
 1621 0b7b D4 F0                   		cmp0	r8
 1622 0b7d 61 E8                   		 skz
 1623 0b7f EC 6A 0B 00             		 br	!!.L62
 374:../src/user_functions.c **** 		;
 375:../src/user_functions.c **** 	R_ADC_Start();
 1624                             		.loc 1 375 0 is_stmt 1
 1625 0b83 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 376:../src/user_functions.c **** 	while (ADCS)
 1626                             		.loc 1 376 0
 1627 0b87 00                      		nop
 1628                             	.L63:
 1629                             		.loc 1 376 0 is_stmt 0 discriminator 1
 1630 0b88 C9 F0 30 FF             		movw	r8, #-208
 1631 0b8c AD F0                   		movw	ax, r8
 1632 0b8e BD F2                   		movw	r10, ax
 1633 0b90 FA F2                   		movw	hl, r10
 1634 0b92 8B                      		mov	a, [hl]
 1635 0b93 9D F0                   		mov	r8, a
 1636 0b95 31 7A                   		shr	a, 7
 1637 0b97 9D F0                   		mov	r8, a
 1638 0b99 D4 F0                   		cmp0	r8
 1639 0b9b 61 E8                   		 skz
 1640 0b9d EC 88 0B 00             		 br	!!.L63
 377:../src/user_functions.c **** 		;
 378:../src/user_functions.c **** 
 379:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&voltage);
 1641                             		.loc 1 379 0 is_stmt 1
 1642 0ba1 30 00 00                		movw	ax, #_voltage
 1643 0ba4 B8 00                   		movw	[sp], ax
 1644 0ba6 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 380:../src/user_functions.c **** 	voltage = voltage >> 1;
 1645                             		.loc 1 380 0
 1646 0baa 8F 00 00                		mov	a, !_voltage
 1647 0bad 9D F0                   		mov	r8, a
 1648 0baf 31 1A                   		shr	a, 1
 1649 0bb1 9D F0                   		mov	r8, a
 1650 0bb3 9F 00 00                		mov	!_voltage, a
 381:../src/user_functions.c **** 
 382:../src/user_functions.c **** 	ADS = _01_AD_INPUT_CHANNEL_1;
 1651                             		.loc 1 382 0
 1652 0bb6 C9 F0 31 FF             		movw	r8, #-207
 1653 0bba AD F0                   		movw	ax, r8
 1654 0bbc BD F2                   		movw	r10, ax
 1655 0bbe DA F2                   		movw	bc, r10
 1656 0bc0 E1                      		oneb	a
 1657 0bc1 48 00 00                		mov	[bc], a
 383:../src/user_functions.c **** 	R_ADC_Start();
 1658                             		.loc 1 383 0
 1659 0bc4 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 384:../src/user_functions.c **** 	while (ADCS)
 1660                             		.loc 1 384 0
 1661 0bc8 00                      		nop
 1662                             	.L64:
 1663                             		.loc 1 384 0 is_stmt 0 discriminator 1
 1664 0bc9 C9 F0 30 FF             		movw	r8, #-208
 1665 0bcd AD F0                   		movw	ax, r8
 1666 0bcf BD F2                   		movw	r10, ax
 1667 0bd1 FA F2                   		movw	hl, r10
 1668 0bd3 8B                      		mov	a, [hl]
 1669 0bd4 9D F0                   		mov	r8, a
 1670 0bd6 31 7A                   		shr	a, 7
 1671 0bd8 9D F0                   		mov	r8, a
 1672 0bda D4 F0                   		cmp0	r8
 1673 0bdc 61 E8                   		 skz
 1674 0bde EC C9 0B 00             		 br	!!.L64
 385:../src/user_functions.c **** 		;
 386:../src/user_functions.c **** 	R_ADC_Start();
 1675                             		.loc 1 386 0 is_stmt 1
 1676 0be2 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 387:../src/user_functions.c **** 	while (ADCS)
 1677                             		.loc 1 387 0
 1678 0be6 00                      		nop
 1679                             	.L65:
 1680                             		.loc 1 387 0 is_stmt 0 discriminator 1
 1681 0be7 C9 F0 30 FF             		movw	r8, #-208
 1682 0beb AD F0                   		movw	ax, r8
 1683 0bed BD F2                   		movw	r10, ax
 1684 0bef FA F2                   		movw	hl, r10
 1685 0bf1 8B                      		mov	a, [hl]
 1686 0bf2 9D F0                   		mov	r8, a
 1687 0bf4 31 7A                   		shr	a, 7
 1688 0bf6 9D F0                   		mov	r8, a
 1689 0bf8 D4 F0                   		cmp0	r8
 1690 0bfa 61 E8                   		 skz
 1691 0bfc EC E7 0B 00             		 br	!!.L65
 388:../src/user_functions.c **** 		;
 389:../src/user_functions.c **** 
 390:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&current1);
 1692                             		.loc 1 390 0 is_stmt 1
 1693 0c00 30 00 00                		movw	ax, #_current1
 1694 0c03 B8 00                   		movw	[sp], ax
 1695 0c05 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 391:../src/user_functions.c **** 	current1 = current1 >> 2;
 1696                             		.loc 1 391 0
 1697 0c09 8F 00 00                		mov	a, !_current1
 1698 0c0c 9D F0                   		mov	r8, a
 1699 0c0e 31 2A                   		shr	a, 2
 1700 0c10 9D F0                   		mov	r8, a
 1701 0c12 9F 00 00                		mov	!_current1, a
 392:../src/user_functions.c **** 
 393:../src/user_functions.c **** 	ADS = _02_AD_INPUT_CHANNEL_2;
 1702                             		.loc 1 393 0
 1703 0c15 C9 F0 31 FF             		movw	r8, #-207
 1704 0c19 AD F0                   		movw	ax, r8
 1705 0c1b BD F2                   		movw	r10, ax
 1706 0c1d DA F2                   		movw	bc, r10
 1707 0c1f 51 02                   		mov	a, #2
 1708 0c21 48 00 00                		mov	[bc], a
 394:../src/user_functions.c **** 	R_ADC_Start();
 1709                             		.loc 1 394 0
 1710 0c24 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 395:../src/user_functions.c **** 	while (ADCS)
 1711                             		.loc 1 395 0
 1712 0c28 00                      		nop
 1713                             	.L66:
 1714                             		.loc 1 395 0 is_stmt 0 discriminator 1
 1715 0c29 C9 F0 30 FF             		movw	r8, #-208
 1716 0c2d AD F0                   		movw	ax, r8
 1717 0c2f BD F2                   		movw	r10, ax
 1718 0c31 FA F2                   		movw	hl, r10
 1719 0c33 8B                      		mov	a, [hl]
 1720 0c34 9D F0                   		mov	r8, a
 1721 0c36 31 7A                   		shr	a, 7
 1722 0c38 9D F0                   		mov	r8, a
 1723 0c3a D4 F0                   		cmp0	r8
 1724 0c3c 61 E8                   		 skz
 1725 0c3e EC 29 0C 00             		 br	!!.L66
 396:../src/user_functions.c **** 		;
 397:../src/user_functions.c **** 	R_ADC_Start();
 1726                             		.loc 1 397 0 is_stmt 1
 1727 0c42 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 398:../src/user_functions.c **** 	while (ADCS)
 1728                             		.loc 1 398 0
 1729 0c46 00                      		nop
 1730                             	.L67:
 1731                             		.loc 1 398 0 is_stmt 0 discriminator 1
 1732 0c47 C9 F0 30 FF             		movw	r8, #-208
 1733 0c4b AD F0                   		movw	ax, r8
 1734 0c4d BD F2                   		movw	r10, ax
 1735 0c4f FA F2                   		movw	hl, r10
 1736 0c51 8B                      		mov	a, [hl]
 1737 0c52 9D F0                   		mov	r8, a
 1738 0c54 31 7A                   		shr	a, 7
 1739 0c56 9D F0                   		mov	r8, a
 1740 0c58 D4 F0                   		cmp0	r8
 1741 0c5a 61 E8                   		 skz
 1742 0c5c EC 47 0C 00             		 br	!!.L67
 399:../src/user_functions.c **** 		;
 400:../src/user_functions.c **** 
 401:../src/user_functions.c **** 	R_ADC_Get_Result_8bit(&current2);
 1743                             		.loc 1 401 0 is_stmt 1
 1744 0c60 30 00 00                		movw	ax, #_current2
 1745 0c63 B8 00                   		movw	[sp], ax
 1746 0c65 FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 402:../src/user_functions.c **** 	current2 = current2 >> 2;
 1747                             		.loc 1 402 0
 1748 0c69 8F 00 00                		mov	a, !_current2
 1749 0c6c 9D F0                   		mov	r8, a
 1750 0c6e 31 2A                   		shr	a, 2
 1751 0c70 9D F0                   		mov	r8, a
 1752 0c72 9F 00 00                		mov	!_current2, a
 403:../src/user_functions.c **** 
 404:../src/user_functions.c **** }
 1753                             		.loc 1 404 0
 1754 0c75 10 02                   		addw	sp, #2
 1755 0c77 D7                      		ret
 1756                             	.LFE4:
 1758                             		.global	_setRTC
 1760                             	_setRTC:
 1761                             	.LFB5:
 405:../src/user_functions.c **** 
 406:../src/user_functions.c **** void setRTC() {
 1762                             		.loc 1 406 0
 1763                             		; start of function
 1764                             		; locals: 22 bytes
 1765                             		; outgoing: 8 bytes
 1766 0c78 20 1E                   		subw	sp, #30
 1767                             	.LCFI8:
 407:../src/user_functions.c **** 	uint8_t BCDdate[6] = { 0, 0, 0, 0, 0, 0 };
 1768                             		.loc 1 407 0
 1769 0c7a F1                      		clrb	a
 1770 0c7b 98 13                   		mov	[sp+19], a
 1771 0c7d F1                      		clrb	a
 1772 0c7e 98 14                   		mov	[sp+20], a
 1773 0c80 F1                      		clrb	a
 1774 0c81 98 15                   		mov	[sp+21], a
 1775 0c83 F1                      		clrb	a
 1776 0c84 98 16                   		mov	[sp+22], a
 1777 0c86 F1                      		clrb	a
 1778 0c87 98 17                   		mov	[sp+23], a
 1779 0c89 F1                      		clrb	a
 1780 0c8a 98 18                   		mov	[sp+24], a
 408:../src/user_functions.c **** 	date[0] = 0;
 1781                             		.loc 1 408 0
 1782 0c8c F5 00 00                		clrb	!_date
 409:../src/user_functions.c **** 	date[1] = 0;
 1783                             		.loc 1 409 0
 1784 0c8f F5 00 00                		clrb	!_date+1
 410:../src/user_functions.c **** 	date[2] = 0;
 1785                             		.loc 1 410 0
 1786 0c92 F5 00 00                		clrb	!_date+2
 411:../src/user_functions.c **** 	date[3] = 0;
 1787                             		.loc 1 411 0
 1788 0c95 F5 00 00                		clrb	!_date+3
 412:../src/user_functions.c **** 	date[4] = 0;
 1789                             		.loc 1 412 0
 1790 0c98 F5 00 00                		clrb	!_date+4
 413:../src/user_functions.c **** 	date[5] = 0;
 1791                             		.loc 1 413 0
 1792 0c9b F5 00 00                		clrb	!_date+5
 414:../src/user_functions.c **** 	uint8_t count = 4;
 1793                             		.loc 1 414 0
 1794 0c9e 51 04                   		mov	a, #4
 1795 0ca0 98 1D                   		mov	[sp+29], a
 415:../src/user_functions.c **** 	int dateCount = 0;
 1796                             		.loc 1 415 0
 1797 0ca2 F6                      		clrw	ax
 1798 0ca3 B8 1A                   		movw	[sp+26], ax
 416:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 417:../src/user_functions.c **** 
 418:../src/user_functions.c **** 	while (record[count] != '\r') {
 1799                             		.loc 1 418 0
 1800 0ca5 EC C9 0D 00             		br	!!.L69
 1801                             	.L71:
 419:../src/user_functions.c **** 
 420:../src/user_functions.c **** 		BCDdate[dateCount] += record[count] - '0';
 1802                             		.loc 1 420 0
 1803 0ca9 AE F8                   		movw	ax, sp
 1804 0cab BD F2                   		movw	r10, ax
 1805 0cad 04 13 00                		addw	ax, #19
 1806 0cb0 BD F0                   		movw	r8, ax
 1807 0cb2 A8 1A                   		movw	ax, [sp+26]
 1808 0cb4 06 F0                   		addw	ax, r8
 1809 0cb6 BD F0                   		movw	r8, ax
 1810 0cb8 BD F4                   		movw	r12, ax
 1811 0cba FA F4                   		movw	hl, r12
 1812 0cbc 8B                      		mov	a, [hl]
 1813 0cbd 9D F2                   		mov	r10, a
 1814 0cbf 88 1D                   		mov	a, [sp+29]
 1815 0cc1 70                      		mov	x, a 
 1816 0cc2 51 00                   		mov	a, #0
 1817 0cc4 BD F0                   		movw	r8, ax
 1818 0cc6 04 00 00                		addw	ax, #_record
 1819 0cc9 16                      		movw	hl, ax
 1820 0cca 8B                      		mov	a, [hl]
 1821 0ccb 9D F0                   		mov	r8, a
 1822 0ccd 76                      		mov	l, a
 1823 0cce 8D F2                   		mov	a, r10
 1824 0cd0 61 0E                   		add	a, l
 1825 0cd2 9D F0                   		mov	r8, a
 1826 0cd4 0C D0                   		add	a, #-48
 1827 0cd6 9D F2                   		mov	r10, a
 1828 0cd8 AE F8                   		movw	ax, sp
 1829 0cda BD F4                   		movw	r12, ax
 1830 0cdc 04 13 00                		addw	ax, #19
 1831 0cdf BD F0                   		movw	r8, ax
 1832 0ce1 A8 1A                   		movw	ax, [sp+26]
 1833 0ce3 06 F0                   		addw	ax, r8
 1834 0ce5 BD F0                   		movw	r8, ax
 1835 0ce7 BD F4                   		movw	r12, ax
 1836 0ce9 DA F4                   		movw	bc, r12
 1837 0ceb 8D F2                   		mov	a, r10
 1838 0ced 48 00 00                		mov	[bc], a
 421:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1839                             		.loc 1 421 0
 1840 0cf0 A8 1A                   		movw	ax, [sp+26]
 1841 0cf2 04 00 00                		addw	ax, #_date
 1842 0cf5 BD F0                   		movw	r8, ax
 1843 0cf7 BD F4                   		movw	r12, ax
 1844 0cf9 FA F4                   		movw	hl, r12
 1845 0cfb 8B                      		mov	a, [hl]
 1846 0cfc 9D F2                   		mov	r10, a
 1847 0cfe 88 1D                   		mov	a, [sp+29]
 1848 0d00 70                      		mov	x, a 
 1849 0d01 51 00                   		mov	a, #0
 1850 0d03 BD F0                   		movw	r8, ax
 1851 0d05 04 00 00                		addw	ax, #_record
 1852 0d08 16                      		movw	hl, ax
 1853 0d09 8B                      		mov	a, [hl]
 1854 0d0a 9D F0                   		mov	r8, a
 1855 0d0c 76                      		mov	l, a
 1856 0d0d 8D F2                   		mov	a, r10
 1857 0d0f 61 0E                   		add	a, l
 1858 0d11 9D F0                   		mov	r8, a
 1859 0d13 0C D0                   		add	a, #-48
 1860 0d15 9D F2                   		mov	r10, a
 1861 0d17 A8 1A                   		movw	ax, [sp+26]
 1862 0d19 04 00 00                		addw	ax, #_date
 1863 0d1c BD F0                   		movw	r8, ax
 1864 0d1e BD F4                   		movw	r12, ax
 1865 0d20 DA F4                   		movw	bc, r12
 1866 0d22 8D F2                   		mov	a, r10
 1867 0d24 48 00 00                		mov	[bc], a
 422:../src/user_functions.c **** 		count++;
 1868                             		.loc 1 422 0
 1869 0d27 88 1D                   		mov	a, [sp+29]
 1870 0d29 9D F0                   		mov	r8, a
 1871 0d2b 81                      		inc	a
 1872 0d2c 98 1D                   		mov	[sp+29], a
 423:../src/user_functions.c **** 		if (record[count] == ',') {
 1873                             		.loc 1 423 0
 1874 0d2e 70                      		mov	x, a 
 1875 0d2f 51 00                   		mov	a, #0
 1876 0d31 BD F0                   		movw	r8, ax
 1877 0d33 04 00 00                		addw	ax, #_record
 1878 0d36 16                      		movw	hl, ax
 1879 0d37 8B                      		mov	a, [hl]
 1880 0d38 9D F0                   		mov	r8, a
 1881 0d3a 4A F0 2C                		cmp	r8, #44
 1882 0d3d 61 E8                   		 skz
 1883 0d3f EC 53 0D 00             		 br	!!.L70
 424:../src/user_functions.c **** 			dateCount++;
 1884                             		.loc 1 424 0
 1885 0d43 A8 1A                   		movw	ax, [sp+26]
 1886 0d45 A1                      		incw	ax
 1887 0d46 B8 1A                   		movw	[sp+26], ax
 425:../src/user_functions.c **** 			count++;
 1888                             		.loc 1 425 0
 1889 0d48 88 1D                   		mov	a, [sp+29]
 1890 0d4a 9D F0                   		mov	r8, a
 1891 0d4c 81                      		inc	a
 1892 0d4d 98 1D                   		mov	[sp+29], a
 1893 0d4f EC C9 0D 00             		br	!!.L69
 1894                             	.L70:
 426:../src/user_functions.c **** 		} else if (record[count] == '\r') {
 1895                             		.loc 1 426 0
 1896 0d53 88 1D                   		mov	a, [sp+29]
 1897 0d55 70                      		mov	x, a 
 1898 0d56 51 00                   		mov	a, #0
 1899 0d58 BD F0                   		movw	r8, ax
 1900 0d5a 04 00 00                		addw	ax, #_record
 1901 0d5d 16                      		movw	hl, ax
 1902 0d5e 8B                      		mov	a, [hl]
 1903 0d5f 9D F0                   		mov	r8, a
 1904 0d61 4A F0 0D                		cmp	r8, #13
 1905 0d64 61 F8                   		 sknz
 1906 0d66 EC C9 0D 00             		 br	!!.L69
 427:../src/user_functions.c **** 
 428:../src/user_functions.c **** 		} else {
 429:../src/user_functions.c **** 			BCDdate[dateCount] = BCDdate[dateCount] << 4;
 1907                             		.loc 1 429 0
 1908 0d6a AE F8                   		movw	ax, sp
 1909 0d6c BD F2                   		movw	r10, ax
 1910 0d6e 04 13 00                		addw	ax, #19
 1911 0d71 BD F0                   		movw	r8, ax
 1912 0d73 A8 1A                   		movw	ax, [sp+26]
 1913 0d75 06 F0                   		addw	ax, r8
 1914 0d77 BD F0                   		movw	r8, ax
 1915 0d79 BD F4                   		movw	r12, ax
 1916 0d7b FA F4                   		movw	hl, r12
 1917 0d7d 8B                      		mov	a, [hl]
 1918 0d7e 9D F0                   		mov	r8, a
 1919 0d80 31 49                   		shl	a, 4
 1920 0d82 9D F2                   		mov	r10, a
 1921 0d84 AE F8                   		movw	ax, sp
 1922 0d86 BD F4                   		movw	r12, ax
 1923 0d88 04 13 00                		addw	ax, #19
 1924 0d8b BD F0                   		movw	r8, ax
 1925 0d8d A8 1A                   		movw	ax, [sp+26]
 1926 0d8f 06 F0                   		addw	ax, r8
 1927 0d91 BD F0                   		movw	r8, ax
 1928 0d93 BD F4                   		movw	r12, ax
 1929 0d95 DA F4                   		movw	bc, r12
 1930 0d97 8D F2                   		mov	a, r10
 1931 0d99 48 00 00                		mov	[bc], a
 430:../src/user_functions.c **** 			date[dateCount] = date[dateCount] * 10;
 1932                             		.loc 1 430 0
 1933 0d9c A8 1A                   		movw	ax, [sp+26]
 1934 0d9e 04 00 00                		addw	ax, #_date
 1935 0da1 BD F0                   		movw	r8, ax
 1936 0da3 BD F2                   		movw	r10, ax
 1937 0da5 FA F2                   		movw	hl, r10
 1938 0da7 8B                      		mov	a, [hl]
 1939 0da8 9D F0                   		mov	r8, a
 1940 0daa 61 01                   		add	a, a
 1941 0dac 9D F0                   		mov	r8, a
 1942 0dae 31 29                   		shl	a, 2
 1943 0db0 9D F1                   		mov	r9, a
 1944 0db2 76                      		mov	l, a
 1945 0db3 8D F0                   		mov	a, r8
 1946 0db5 61 0E                   		add	a, l
 1947 0db7 9D F2                   		mov	r10, a
 1948 0db9 A8 1A                   		movw	ax, [sp+26]
 1949 0dbb 04 00 00                		addw	ax, #_date
 1950 0dbe BD F0                   		movw	r8, ax
 1951 0dc0 BD F4                   		movw	r12, ax
 1952 0dc2 DA F4                   		movw	bc, r12
 1953 0dc4 8D F2                   		mov	a, r10
 1954 0dc6 48 00 00                		mov	[bc], a
 1955                             	.L69:
 418:../src/user_functions.c **** 
 1956                             		.loc 1 418 0
 1957 0dc9 88 1D                   		mov	a, [sp+29]
 1958 0dcb 70                      		mov	x, a 
 1959 0dcc 51 00                   		mov	a, #0
 1960 0dce BD F0                   		movw	r8, ax
 1961 0dd0 04 00 00                		addw	ax, #_record
 1962 0dd3 16                      		movw	hl, ax
 1963 0dd4 8B                      		mov	a, [hl]
 1964 0dd5 9D F0                   		mov	r8, a
 1965 0dd7 4A F0 0D                		cmp	r8, #13
 1966 0dda 61 E8                   		 skz
 1967 0ddc EC A9 0C 00             		 br	!!.L71
 431:../src/user_functions.c **** 		}
 432:../src/user_functions.c **** 
 433:../src/user_functions.c **** 	}
 434:../src/user_functions.c **** 
 435:../src/user_functions.c **** 	if (testDate(date)) {
 1968                             		.loc 1 435 0
 1969 0de0 30 00 00                		movw	ax, #_date
 1970 0de3 B8 00                   		movw	[sp], ax
 1971 0de5 FC 00 00 00             		call	!!%code(_testDate)
 1972 0de9 D4 F0                   		cmp0	r8
 1973 0deb 61 F8                   		 sknz
 1974 0ded EC 55 0E 00             		 br	!!.L72
 436:../src/user_functions.c **** 
 437:../src/user_functions.c **** 		theDate.year = BCDdate[0];
 1975                             		.loc 1 437 0
 1976 0df1 88 13                   		mov	a, [sp+19]
 1977 0df3 9D F0                   		mov	r8, a
 1978 0df5 98 12                   		mov	[sp+18], a
 438:../src/user_functions.c **** 		theDate.month = BCDdate[1];
 1979                             		.loc 1 438 0
 1980 0df7 88 14                   		mov	a, [sp+20]
 1981 0df9 9D F0                   		mov	r8, a
 1982 0dfb 98 11                   		mov	[sp+17], a
 439:../src/user_functions.c **** 		theDate.day = BCDdate[2];
 1983                             		.loc 1 439 0
 1984 0dfd 88 15                   		mov	a, [sp+21]
 1985 0dff 9D F0                   		mov	r8, a
 1986 0e01 98 0F                   		mov	[sp+15], a
 440:../src/user_functions.c **** 		theDate.hour = BCDdate[3];
 1987                             		.loc 1 440 0
 1988 0e03 88 16                   		mov	a, [sp+22]
 1989 0e05 9D F0                   		mov	r8, a
 1990 0e07 98 0E                   		mov	[sp+14], a
 441:../src/user_functions.c **** 		theDate.min = BCDdate[4];
 1991                             		.loc 1 441 0
 1992 0e09 88 17                   		mov	a, [sp+23]
 1993 0e0b 9D F0                   		mov	r8, a
 1994 0e0d 98 0D                   		mov	[sp+13], a
 442:../src/user_functions.c **** 		theDate.sec = BCDdate[5];
 1995                             		.loc 1 442 0
 1996 0e0f 88 18                   		mov	a, [sp+24]
 1997 0e11 9D F0                   		mov	r8, a
 1998 0e13 98 0C                   		mov	[sp+12], a
 443:../src/user_functions.c **** 
 444:../src/user_functions.c **** 		count = 5;
 1999                             		.loc 1 444 0
 2000 0e15 51 05                   		mov	a, #5
 2001 0e17 98 1D                   		mov	[sp+29], a
 445:../src/user_functions.c **** 		strcpy(response, "$B0\x0d\x0a");
 2002                             		.loc 1 445 0
 2003 0e19 51 24                   		mov	a, #36
 2004 0e1b 9F 08 00                		mov	!_response, a
 2005 0e1e 51 42                   		mov	a, #66
 2006 0e20 9F 09 00                		mov	!_response+1, a
 2007 0e23 51 30                   		mov	a, #48
 2008 0e25 9F 0A 00                		mov	!_response+2, a
 2009 0e28 51 0D                   		mov	a, #13
 2010 0e2a 9F 0B 00                		mov	!_response+3, a
 2011 0e2d 51 0A                   		mov	a, #10
 2012 0e2f 9F 0C 00                		mov	!_response+4, a
 2013 0e32 F5 0D 00                		clrb	!_response+5
 446:../src/user_functions.c **** 
 447:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 2014                             		.loc 1 447 0
 2015 0e35 A8 0C                   		movw	ax, [sp+12]
 2016 0e37 BD F0                   		movw	r8, ax
 2017 0e39 B8 00                   		movw	[sp], ax
 2018 0e3b A8 0E                   		movw	ax, [sp+14]
 2019 0e3d BD F0                   		movw	r8, ax
 2020 0e3f B8 02                   		movw	[sp+2], ax
 2021 0e41 A8 10                   		movw	ax, [sp+16]
 2022 0e43 BD F0                   		movw	r8, ax
 2023 0e45 B8 04                   		movw	[sp+4], ax
 2024 0e47 88 12                   		mov	a, [sp+18]
 2025 0e49 9D F0                   		mov	r8, a
 2026 0e4b 98 06                   		mov	[sp+6], a
 2027 0e4d FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 2028 0e51 EC AE 0E 00             		br	!!.L68
 2029                             	.L72:
 2030                             	.LBB5:
 448:../src/user_functions.c **** 	} else {
 449:../src/user_functions.c **** 		char str[4];
 450:../src/user_functions.c **** 		uint8_t ack = 0;
 2031                             		.loc 1 450 0
 2032 0e55 F1                      		clrb	a
 2033 0e56 98 19                   		mov	[sp+25], a
 451:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 2034                             		.loc 1 451 0
 2035 0e58 AE F8                   		movw	ax, sp
 2036 0e5a BD F2                   		movw	r10, ax
 2037 0e5c 04 08 00                		addw	ax, #8
 2038 0e5f BD F0                   		movw	r8, ax
 2039 0e61 BD F4                   		movw	r12, ax
 2040 0e63 DA F4                   		movw	bc, r12
 2041 0e65 30 24 42                		movw	ax, #16932
 2042 0e68 78 00 00                		movw	[bc], ax
 2043 0e6b DA F0                   		movw	bc, r8
 2044 0e6d 30 32 0D                		movw	ax, #3378
 2045 0e70 78 02 00                		movw	2[bc], ax
 2046 0e73 30 0A 00                		movw	ax, #10
 2047 0e76 78 04 00                		movw	4[bc], ax
 452:../src/user_functions.c **** 		count = strlen(str);
 2048                             		.loc 1 452 0
 2049 0e79 C9 F0 1E 00             		movw	r8, #30
 2050 0e7d AE F8                   		movw	ax, sp
 2051 0e7f BD F0                   		movw	r8, ax
 2052 0e81 04 1E 00                		addw	ax, #30
 2053 0e84 BD F0                   		movw	r8, ax
 2054 0e86 04 EA FF                		addw	ax, #-22
 2055 0e89 B8 00                   		movw	[sp], ax
 2056 0e8b FC 00 00 00             		call	!!%code(_strlen)
 2057 0e8f 8D F0                   		mov	a, r8
 2058 0e91 98 1D                   		mov	[sp+29], a
 453:../src/user_functions.c **** 		strcpy(response, str);
 2059                             		.loc 1 453 0
 2060 0e93 30 08 00                		movw	ax, #_response
 2061 0e96 B8 00                   		movw	[sp], ax
 2062 0e98 C9 F2 1E 00             		movw	r10, #30
 2063 0e9c AE F8                   		movw	ax, sp
 2064 0e9e BD F2                   		movw	r10, ax
 2065 0ea0 04 1E 00                		addw	ax, #30
 2066 0ea3 BD F2                   		movw	r10, ax
 2067 0ea5 04 EA FF                		addw	ax, #-22
 2068 0ea8 B8 02                   		movw	[sp+2], ax
 2069 0eaa FC 00 00 00             		call	!!%code(_strcpy)
 2070                             	.L68:
 2071                             	.LBE5:
 454:../src/user_functions.c **** 
 455:../src/user_functions.c **** 	}
 456:../src/user_functions.c **** 
 457:../src/user_functions.c **** }
 2072                             		.loc 1 457 0
 2073 0eae 10 1E                   		addw	sp, #30
 2074 0eb0 D7                      		ret
 2075                             	.LFE5:
 2077                             		.global	_getRTC
 2079                             	_getRTC:
 2080                             	.LFB6:
 458:../src/user_functions.c **** 
 459:../src/user_functions.c **** void getRTC() {
 2081                             		.loc 1 459 0
 2082                             		; start of function
 2083                             		; locals: 8 bytes
 2084                             		; outgoing: 2 bytes
 2085 0eb1 20 0A                   		subw	sp, #10
 2086                             	.LCFI9:
 460:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 461:../src/user_functions.c **** 
 462:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 2087                             		.loc 1 462 0
 2088 0eb3 C9 F0 0A 00             		movw	r8, #10
 2089 0eb7 AE F8                   		movw	ax, sp
 2090 0eb9 BD F0                   		movw	r8, ax
 2091 0ebb 04 0A 00                		addw	ax, #10
 2092 0ebe BD F0                   		movw	r8, ax
 2093 0ec0 04 F9 FF                		addw	ax, #-7
 2094 0ec3 B8 00                   		movw	[sp], ax
 2095 0ec5 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 463:../src/user_functions.c **** 
 464:../src/user_functions.c **** 	date[0] = theDate.year;
 2096                             		.loc 1 464 0
 2097 0ec9 88 09                   		mov	a, [sp+9]
 2098 0ecb 9D F0                   		mov	r8, a
 2099 0ecd 9F 00 00                		mov	!_date, a
 465:../src/user_functions.c **** 	date[1] = theDate.month;
 2100                             		.loc 1 465 0
 2101 0ed0 88 08                   		mov	a, [sp+8]
 2102 0ed2 9D F0                   		mov	r8, a
 2103 0ed4 9F 00 00                		mov	!_date+1, a
 466:../src/user_functions.c **** 	date[2] = theDate.day;
 2104                             		.loc 1 466 0
 2105 0ed7 88 06                   		mov	a, [sp+6]
 2106 0ed9 9D F0                   		mov	r8, a
 2107 0edb 9F 00 00                		mov	!_date+2, a
 467:../src/user_functions.c **** 	date[3] = theDate.hour;
 2108                             		.loc 1 467 0
 2109 0ede 88 05                   		mov	a, [sp+5]
 2110 0ee0 9D F0                   		mov	r8, a
 2111 0ee2 9F 00 00                		mov	!_date+3, a
 468:../src/user_functions.c **** 	date[4] = theDate.min;
 2112                             		.loc 1 468 0
 2113 0ee5 88 04                   		mov	a, [sp+4]
 2114 0ee7 9D F0                   		mov	r8, a
 2115 0ee9 9F 00 00                		mov	!_date+4, a
 469:../src/user_functions.c **** 	date[5] = theDate.sec;
 2116                             		.loc 1 469 0
 2117 0eec 88 03                   		mov	a, [sp+3]
 2118 0eee 9D F0                   		mov	r8, a
 2119 0ef0 9F 00 00                		mov	!_date+5, a
 470:../src/user_functions.c **** 
 471:../src/user_functions.c **** 	BCDtoDEC(date);
 2120                             		.loc 1 471 0
 2121 0ef3 30 00 00                		movw	ax, #_date
 2122 0ef6 B8 00                   		movw	[sp], ax
 2123 0ef8 FC 00 00 00             		call	!!%code(_BCDtoDEC)
 472:../src/user_functions.c **** 
 473:../src/user_functions.c **** }
 2124                             		.loc 1 473 0
 2125 0efc 10 0A                   		addw	sp, #10
 2126 0efe D7                      		ret
 2127                             	.LFE6:
 2129                             		.global	_BCDtoDEC
 2131                             	_BCDtoDEC:
 2132                             	.LFB7:
 474:../src/user_functions.c **** 
 475:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]) {
 2133                             		.loc 1 475 0
 2134                             		; start of function
 2135                             		; locals: 4 bytes
 2136 0eff 20 04                   		subw	sp, #4
 2137                             	.LCFI10:
 476:../src/user_functions.c **** 
 477:../src/user_functions.c **** 	uint8_t upper, lower;
 478:../src/user_functions.c **** 	int i;
 479:../src/user_functions.c **** 	for (i = 0; i < 6; i++) {
 2138                             		.loc 1 479 0
 2139 0f01 F6                      		clrw	ax
 2140 0f02 B8 02                   		movw	[sp+2], ax
 2141 0f04 EC 66 0F 00             		br	!!.L76
 2142                             	.L77:
 480:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2143                             		.loc 1 480 0 discriminator 3
 2144 0f08 A8 02                   		movw	ax, [sp+2]
 2145 0f0a BD F0                   		movw	r8, ax
 2146 0f0c A8 08                   		movw	ax, [sp+8]
 2147 0f0e 06 F0                   		addw	ax, r8
 2148 0f10 BD F0                   		movw	r8, ax
 2149 0f12 BD F2                   		movw	r10, ax
 2150 0f14 FA F2                   		movw	hl, r10
 2151 0f16 8B                      		mov	a, [hl]
 2152 0f17 9D F0                   		mov	r8, a
 2153 0f19 5C 0F                   		and	a, #15
 2154 0f1b 98 01                   		mov	[sp+1], a
 481:../src/user_functions.c **** 		upper = (arr[i] & 0xf0) >> 4;
 2155                             		.loc 1 481 0 discriminator 3
 2156 0f1d A8 02                   		movw	ax, [sp+2]
 2157 0f1f BD F0                   		movw	r8, ax
 2158 0f21 A8 08                   		movw	ax, [sp+8]
 2159 0f23 06 F0                   		addw	ax, r8
 2160 0f25 BD F0                   		movw	r8, ax
 2161 0f27 BD F4                   		movw	r12, ax
 2162 0f29 FA F4                   		movw	hl, r12
 2163 0f2b 8B                      		mov	a, [hl]
 2164 0f2c 9D F0                   		mov	r8, a
 2165 0f2e 31 4A                   		shr	a, 4
 2166 0f30 98 00                   		mov	[sp], a
 482:../src/user_functions.c **** 
 483:../src/user_functions.c **** 		arr[i] = upper * 10 + lower;
 2167                             		.loc 1 483 0 discriminator 3
 2168 0f32 A8 02                   		movw	ax, [sp+2]
 2169 0f34 BD F0                   		movw	r8, ax
 2170 0f36 A8 08                   		movw	ax, [sp+8]
 2171 0f38 06 F0                   		addw	ax, r8
 2172 0f3a BD F2                   		movw	r10, ax
 2173 0f3c 88 00                   		mov	a, [sp]
 2174 0f3e 9D F0                   		mov	r8, a
 2175 0f40 61 01                   		add	a, a
 2176 0f42 9D F0                   		mov	r8, a
 2177 0f44 31 29                   		shl	a, 2
 2178 0f46 9D F1                   		mov	r9, a
 2179 0f48 76                      		mov	l, a
 2180 0f49 8D F0                   		mov	a, r8
 2181 0f4b 61 0E                   		add	a, l
 2182 0f4d 9D F0                   		mov	r8, a
 2183 0f4f 76                      		mov	l, a
 2184 0f50 88 01                   		mov	a, [sp+1]
 2185 0f52 61 0E                   		add	a, l
 2186 0f54 9D F0                   		mov	r8, a
 2187 0f56 AD F2                   		movw	ax, r10
 2188 0f58 BD F4                   		movw	r12, ax
 2189 0f5a DA F4                   		movw	bc, r12
 2190 0f5c 8D F0                   		mov	a, r8
 2191 0f5e 48 00 00                		mov	[bc], a
 479:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2192                             		.loc 1 479 0 discriminator 3
 2193 0f61 A8 02                   		movw	ax, [sp+2]
 2194 0f63 A1                      		incw	ax
 2195 0f64 B8 02                   		movw	[sp+2], ax
 2196                             	.L76:
 479:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 2197                             		.loc 1 479 0 is_stmt 0 discriminator 1
 2198 0f66 A8 02                   		movw	ax, [sp+2]
 2199 0f68 44 05 00                		cmpw	ax, #5
 2200 0f6b 71 FF                   		 xor1	CY, a.7
 2201 0f6d 61 E3                   		 skh
 2202 0f6f EC 08 0F 00             		 br	!!.L77
 484:../src/user_functions.c **** 	}
 485:../src/user_functions.c **** }
 2203                             		.loc 1 485 0 is_stmt 1
 2204 0f73 10 04                   		addw	sp, #4
 2205 0f75 D7                      		ret
 2206                             	.LFE7:
 2208                             		.global	_testDate
 2210                             	_testDate:
 2211                             	.LFB8:
 486:../src/user_functions.c **** 
 487:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 488:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]) {
 2212                             		.loc 1 488 0
 2213                             		; start of function
 2214                             		; locals: 24 bytes
 2215 0f76 20 18                   		subw	sp, #24
 2216                             	.LCFI11:
 489:../src/user_functions.c **** 
 490:../src/user_functions.c **** 	int daysInMonth[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 2217                             		.loc 1 490 0
 2218 0f78 30 1F 00                		movw	ax, #31
 2219 0f7b B8 00                   		movw	[sp], ax
 2220 0f7d 30 1C 00                		movw	ax, #28
 2221 0f80 B8 02                   		movw	[sp+2], ax
 2222 0f82 30 1F 00                		movw	ax, #31
 2223 0f85 B8 04                   		movw	[sp+4], ax
 2224 0f87 30 1E 00                		movw	ax, #30
 2225 0f8a B8 06                   		movw	[sp+6], ax
 2226 0f8c 30 1F 00                		movw	ax, #31
 2227 0f8f B8 08                   		movw	[sp+8], ax
 2228 0f91 30 1E 00                		movw	ax, #30
 2229 0f94 B8 0A                   		movw	[sp+10], ax
 2230 0f96 30 1F 00                		movw	ax, #31
 2231 0f99 B8 0C                   		movw	[sp+12], ax
 2232 0f9b 30 1F 00                		movw	ax, #31
 2233 0f9e B8 0E                   		movw	[sp+14], ax
 2234 0fa0 30 1E 00                		movw	ax, #30
 2235 0fa3 B8 10                   		movw	[sp+16], ax
 2236 0fa5 30 1F 00                		movw	ax, #31
 2237 0fa8 B8 12                   		movw	[sp+18], ax
 2238 0faa 30 1E 00                		movw	ax, #30
 2239 0fad B8 14                   		movw	[sp+20], ax
 2240 0faf 30 1F 00                		movw	ax, #31
 2241 0fb2 B8 16                   		movw	[sp+22], ax
 491:../src/user_functions.c **** 
 492:../src/user_functions.c **** 	if (arr[1] > 12 || arr[1] == 0) {
 2242                             		.loc 1 492 0
 2243 0fb4 A8 1C                   		movw	ax, [sp+28]
 2244 0fb6 A1                      		incw	ax
 2245 0fb7 BD F0                   		movw	r8, ax
 2246 0fb9 BD F2                   		movw	r10, ax
 2247 0fbb FA F2                   		movw	hl, r10
 2248 0fbd 8B                      		mov	a, [hl]
 2249 0fbe 9D F0                   		mov	r8, a
 2250 0fc0 4A F0 0C                		cmp	r8, #12
 2251 0fc3 61 F3                   		 sknh
 2252 0fc5 EC DD 0F 00             		 br	!!.L79
 2253                             		.loc 1 492 0 is_stmt 0 discriminator 1
 2254 0fc9 A8 1C                   		movw	ax, [sp+28]
 2255 0fcb A1                      		incw	ax
 2256 0fcc BD F0                   		movw	r8, ax
 2257 0fce BD F4                   		movw	r12, ax
 2258 0fd0 FA F4                   		movw	hl, r12
 2259 0fd2 8B                      		mov	a, [hl]
 2260 0fd3 9D F0                   		mov	r8, a
 2261 0fd5 D4 F0                   		cmp0	r8
 2262 0fd7 61 E8                   		 skz
 2263 0fd9 EC E3 0F 00             		 br	!!.L80
 2264                             	.L79:
 493:../src/user_functions.c **** 		return 0;
 2265                             		.loc 1 493 0 is_stmt 1
 2266 0fdd F4 F0                   		clrb	r8
 2267 0fdf EC AB 10 00             		br	!!.L87
 2268                             	.L80:
 494:../src/user_functions.c **** 	} else if (arr[2] > daysInMonth[arr[1]] || arr[2] == 0) {
 2269                             		.loc 1 494 0
 2270 0fe3 A8 1C                   		movw	ax, [sp+28]
 2271 0fe5 04 02 00                		addw	ax, #2
 2272 0fe8 BD F0                   		movw	r8, ax
 2273 0fea BD F2                   		movw	r10, ax
 2274 0fec FA F2                   		movw	hl, r10
 2275 0fee 8B                      		mov	a, [hl]
 2276 0fef 9D F0                   		mov	r8, a
 2277 0ff1 70                      		mov	x, a 
 2278 0ff2 51 00                   		mov	a, #0
 2279 0ff4 BD F2                   		movw	r10, ax
 2280 0ff6 A8 1C                   		movw	ax, [sp+28]
 2281 0ff8 A1                      		incw	ax
 2282 0ff9 BD F0                   		movw	r8, ax
 2283 0ffb BD F4                   		movw	r12, ax
 2284 0ffd FA F4                   		movw	hl, r12
 2285 0fff 8B                      		mov	a, [hl]
 2286 1000 9D F0                   		mov	r8, a
 2287 1002 CD F1 00                		mov	r9, #0
 2288 1005 AD F0                   		movw	ax, r8
 2289 1007 01                      		addw	ax, ax
 2290 1008 BD F0                   		movw	r8, ax
 2291 100a C9 F4 18 00             		movw	r12, #24
 2292 100e AE F8                   		movw	ax, sp
 2293 1010 BD F4                   		movw	r12, ax
 2294 1012 04 18 00                		addw	ax, #24
 2295 1015 BD F4                   		movw	r12, ax
 2296 1017 06 F0                   		addw	ax, r8
 2297 1019 BD F0                   		movw	r8, ax
 2298 101b 04 E8 FF                		addw	ax, #-24
 2299 101e BD F0                   		movw	r8, ax
 2300 1020 BD F4                   		movw	r12, ax
 2301 1022 FA F4                   		movw	hl, r12
 2302 1024 AB                      		movw	ax, [hl]
 2303 1025 BD F0                   		movw	r8, ax
 2304 1027 AD F2                   		movw	ax, r10
 2305 1029 46 F0                   		cmpw	ax, r8
 2306 102b 71 FF                   		 xor1	CY, a.7
 2307 102d 71 77 F1                		 xor1	CY, r9.7
 2308 1030 61 F3                   		 sknh
 2309 1032 EC 4C 10 00             		 br	!!.L82
 2310                             		.loc 1 494 0 is_stmt 0 discriminator 1
 2311 1036 A8 1C                   		movw	ax, [sp+28]
 2312 1038 04 02 00                		addw	ax, #2
 2313 103b BD F0                   		movw	r8, ax
 2314 103d BD F2                   		movw	r10, ax
 2315 103f FA F2                   		movw	hl, r10
 2316 1041 8B                      		mov	a, [hl]
 2317 1042 9D F0                   		mov	r8, a
 2318 1044 D4 F0                   		cmp0	r8
 2319 1046 61 E8                   		 skz
 2320 1048 EC 52 10 00             		 br	!!.L83
 2321                             	.L82:
 495:../src/user_functions.c **** 		return 0;
 2322                             		.loc 1 495 0 is_stmt 1
 2323 104c F4 F0                   		clrb	r8
 2324 104e EC AB 10 00             		br	!!.L87
 2325                             	.L83:
 496:../src/user_functions.c **** 	} else if (arr[3] > 23) {
 2326                             		.loc 1 496 0
 2327 1052 A8 1C                   		movw	ax, [sp+28]
 2328 1054 04 03 00                		addw	ax, #3
 2329 1057 BD F0                   		movw	r8, ax
 2330 1059 BD F4                   		movw	r12, ax
 2331 105b FA F4                   		movw	hl, r12
 2332 105d 8B                      		mov	a, [hl]
 2333 105e 9D F0                   		mov	r8, a
 2334 1060 4A F0 17                		cmp	r8, #23
 2335 1063 61 E3                   		 skh
 2336 1065 EC 6F 10 00             		 br	!!.L84
 497:../src/user_functions.c **** 		return 0;
 2337                             		.loc 1 497 0
 2338 1069 F4 F0                   		clrb	r8
 2339 106b EC AB 10 00             		br	!!.L87
 2340                             	.L84:
 498:../src/user_functions.c **** 	} else if (arr[4] > 59) {
 2341                             		.loc 1 498 0
 2342 106f A8 1C                   		movw	ax, [sp+28]
 2343 1071 04 04 00                		addw	ax, #4
 2344 1074 BD F0                   		movw	r8, ax
 2345 1076 BD F2                   		movw	r10, ax
 2346 1078 FA F2                   		movw	hl, r10
 2347 107a 8B                      		mov	a, [hl]
 2348 107b 9D F0                   		mov	r8, a
 2349 107d 4A F0 3B                		cmp	r8, #59
 2350 1080 61 E3                   		 skh
 2351 1082 EC 8C 10 00             		 br	!!.L85
 499:../src/user_functions.c **** 		return 0;
 2352                             		.loc 1 499 0
 2353 1086 F4 F0                   		clrb	r8
 2354 1088 EC AB 10 00             		br	!!.L87
 2355                             	.L85:
 500:../src/user_functions.c **** 	} else if (arr[5] > 59) {
 2356                             		.loc 1 500 0
 2357 108c A8 1C                   		movw	ax, [sp+28]
 2358 108e 04 05 00                		addw	ax, #5
 2359 1091 BD F0                   		movw	r8, ax
 2360 1093 BD F4                   		movw	r12, ax
 2361 1095 FA F4                   		movw	hl, r12
 2362 1097 8B                      		mov	a, [hl]
 2363 1098 9D F0                   		mov	r8, a
 2364 109a 4A F0 3B                		cmp	r8, #59
 2365 109d 61 E3                   		 skh
 2366 109f EC A9 10 00             		 br	!!.L86
 501:../src/user_functions.c **** 		return 0;
 2367                             		.loc 1 501 0
 2368 10a3 F4 F0                   		clrb	r8
 2369 10a5 EC AB 10 00             		br	!!.L87
 2370                             	.L86:
 502:../src/user_functions.c **** 	} else {
 503:../src/user_functions.c **** 		return 1;
 2371                             		.loc 1 503 0
 2372 10a9 E4 F0                   		oneb	r8
 2373                             	.L87:
 504:../src/user_functions.c **** 
 505:../src/user_functions.c **** 	}
 506:../src/user_functions.c **** 
 507:../src/user_functions.c **** }
 2374                             		.loc 1 507 0 discriminator 1
 2375 10ab 10 18                   		addw	sp, #24
 2376 10ad D7                      		ret
 2377                             	.LFE8:
 2379                             		.global	_checkFlags
 2381                             	_checkFlags:
 2382                             	.LFB9:
 508:../src/user_functions.c **** 
 509:../src/user_functions.c **** void checkFlags() {
 2383                             		.loc 1 509 0
 2384                             		; start of function
 2385                             		; outgoing: 2 bytes
 2386 10ae 20 02                   		subw	sp, #2
 2387                             	.LCFI12:
 510:../src/user_functions.c **** 	if (scrollFlag) {
 2388                             		.loc 1 510 0
 2389 10b0 8F 00 00                		mov	a, !_scrollFlag
 2390 10b3 9D F0                   		mov	r8, a
 2391 10b5 D4 F0                   		cmp0	r8
 2392 10b7 61 F8                   		 sknz
 2393 10b9 EC C7 10 00             		 br	!!.L89
 511:../src/user_functions.c **** 		scrollFlag = 0;
 2394                             		.loc 1 511 0
 2395 10bd F5 00 00                		clrb	!_scrollFlag
 512:../src/user_functions.c **** 		displayLCD(0);
 2396                             		.loc 1 512 0
 2397 10c0 F6                      		clrw	ax
 2398 10c1 B8 00                   		movw	[sp], ax
 2399 10c3 FC 00 00 00             		call	!!%code(_displayLCD)
 2400                             	.L89:
 513:../src/user_functions.c **** 	}
 514:../src/user_functions.c **** 	if (tempFlag) {
 2401                             		.loc 1 514 0
 2402 10c7 8F 00 00                		mov	a, !_tempFlag
 2403 10ca 9D F0                   		mov	r8, a
 2404 10cc D4 F0                   		cmp0	r8
 2405 10ce 61 F8                   		 sknz
 2406 10d0 EC 2D 11 00             		 br	!!.L90
 515:../src/user_functions.c **** 		tempFlag = 0;
 2407                             		.loc 1 515 0
 2408 10d4 F5 00 00                		clrb	!_tempFlag
 516:../src/user_functions.c **** 		P1_bit.no7 = !P1_bit.no7;
 2409                             		.loc 1 516 0
 2410 10d7 C9 F0 01 FF             		movw	r8, #-255
 2411 10db C9 F2 01 FF             		movw	r10, #-255
 2412 10df AD F2                   		movw	ax, r10
 2413 10e1 BD F4                   		movw	r12, ax
 2414 10e3 FA F4                   		movw	hl, r12
 2415 10e5 8B                      		mov	a, [hl]
 2416 10e6 9D F2                   		mov	r10, a
 2417 10e8 31 7A                   		shr	a, 7
 2418 10ea 9D F2                   		mov	r10, a
 2419 10ec 7A F2 01                		xor	r10, #1
 2420 10ef 8D F2                   		mov	a, r10
 2421 10f1 31 79                   		shl	a, 7
 2422 10f3 9D F2                   		mov	r10, a
 2423 10f5 AD F0                   		movw	ax, r8
 2424 10f7 BD F4                   		movw	r12, ax
 2425 10f9 FA F4                   		movw	hl, r12
 2426 10fb 8B                      		mov	a, [hl]
 2427 10fc 9D F3                   		mov	r11, a
 2428 10fe 5A F3 7F                		and	r11, #127
 2429 1101 8D F3                   		mov	a, r11
 2430 1103 6B F2                   		or	a, r10
 2431 1105 9D F2                   		mov	r10, a
 2432 1107 AD F0                   		movw	ax, r8
 2433 1109 DA F4                   		movw	bc, r12
 2434 110b 8D F2                   		mov	a, r10
 2435 110d 48 00 00                		mov	[bc], a
 517:../src/user_functions.c **** 
 518:../src/user_functions.c **** 		if (!P1_bit.no7) {
 2436                             		.loc 1 518 0
 2437 1110 C9 F0 01 FF             		movw	r8, #-255
 2438 1114 AD F0                   		movw	ax, r8
 2439 1116 BD F2                   		movw	r10, ax
 2440 1118 FA F2                   		movw	hl, r10
 2441 111a 8B                      		mov	a, [hl]
 2442 111b 9D F0                   		mov	r8, a
 2443 111d 31 7A                   		shr	a, 7
 2444 111f 9D F0                   		mov	r8, a
 2445 1121 D4 F0                   		cmp0	r8
 2446 1123 61 E8                   		 skz
 2447 1125 EC 2D 11 00             		 br	!!.L90
 519:../src/user_functions.c **** 			setTemp();
 2448                             		.loc 1 519 0
 2449 1129 FC 00 00 00             		call	!!%code(_setTemp)
 2450                             	.L90:
 520:../src/user_functions.c **** 		}
 521:../src/user_functions.c **** 	}
 522:../src/user_functions.c **** 
 523:../src/user_functions.c **** 	if (secFlag) {
 2451                             		.loc 1 523 0
 2452 112d 8F 00 00                		mov	a, !_secFlag
 2453 1130 9D F0                   		mov	r8, a
 2454 1132 D4 F0                   		cmp0	r8
 2455 1134 61 F8                   		 sknz
 2456 1136 EC 45 11 00             		 br	!!.L91
 524:../src/user_functions.c **** 		secFlag = 0;
 2457                             		.loc 1 524 0
 2458 113a F5 00 00                		clrb	!_secFlag
 525:../src/user_functions.c **** 		collectADC();
 2459                             		.loc 1 525 0
 2460 113d FC 00 00 00             		call	!!%code(_collectADC)
 526:../src/user_functions.c **** 		writeLog();
 2461                             		.loc 1 526 0
 2462 1141 FC 00 00 00             		call	!!%code(_writeLog)
 2463                             	.L91:
 527:../src/user_functions.c **** 	}
 528:../src/user_functions.c **** 
 529:../src/user_functions.c **** 	if (mode == 0) {
 2464                             		.loc 1 529 0
 2465 1145 AF 3A 00                		movw	ax, !_mode
 2466 1148 BD F0                   		movw	r8, ax
 2467 114a 44 00 00                		cmpw	ax, #0
 2468 114d 61 E8                   		 skz
 2469 114f EC 4A 12 00             		 br	!!.L88
 530:../src/user_functions.c **** 		if (tempState == 0) {
 2470                             		.loc 1 530 0
 2471 1153 8F 41 00                		mov	a, !_tempState
 2472 1156 9D F0                   		mov	r8, a
 2473 1158 D4 F0                   		cmp0	r8
 2474 115a 61 E8                   		 skz
 2475 115c EC D0 11 00             		 br	!!.L93
 531:../src/user_functions.c **** 			P4_bit.no1 = 1;
 2476                             		.loc 1 531 0
 2477 1160 C9 F0 04 FF             		movw	r8, #-252
 2478 1164 AD F0                   		movw	ax, r8
 2479 1166 BD F4                   		movw	r12, ax
 2480 1168 FA F4                   		movw	hl, r12
 2481 116a 8B                      		mov	a, [hl]
 2482 116b 9D F2                   		mov	r10, a
 2483 116d 6A F2 02                		or	r10, #2
 2484 1170 AD F0                   		movw	ax, r8
 2485 1172 DA F4                   		movw	bc, r12
 2486 1174 8D F2                   		mov	a, r10
 2487 1176 48 00 00                		mov	[bc], a
 532:../src/user_functions.c **** 			P4_bit.no2 = 0;
 2488                             		.loc 1 532 0
 2489 1179 C9 F0 04 FF             		movw	r8, #-252
 2490 117d AD F0                   		movw	ax, r8
 2491 117f BD F4                   		movw	r12, ax
 2492 1181 FA F4                   		movw	hl, r12
 2493 1183 8B                      		mov	a, [hl]
 2494 1184 9D F2                   		mov	r10, a
 2495 1186 5A F2 FB                		and	r10, #-5
 2496 1189 AD F0                   		movw	ax, r8
 2497 118b DA F4                   		movw	bc, r12
 2498 118d 8D F2                   		mov	a, r10
 2499 118f 48 00 00                		mov	[bc], a
 533:../src/user_functions.c **** 			P4_bit.no3 = 0;
 2500                             		.loc 1 533 0
 2501 1192 C9 F0 04 FF             		movw	r8, #-252
 2502 1196 AD F0                   		movw	ax, r8
 2503 1198 BD F4                   		movw	r12, ax
 2504 119a FA F4                   		movw	hl, r12
 2505 119c 8B                      		mov	a, [hl]
 2506 119d 9D F2                   		mov	r10, a
 2507 119f 5A F2 F7                		and	r10, #-9
 2508 11a2 AD F0                   		movw	ax, r8
 2509 11a4 DA F4                   		movw	bc, r12
 2510 11a6 8D F2                   		mov	a, r10
 2511 11a8 48 00 00                		mov	[bc], a
 534:../src/user_functions.c **** 			switchState = 2;
 2512                             		.loc 1 534 0
 2513 11ab 51 02                   		mov	a, #2
 2514 11ad 9F 40 00                		mov	!_switchState, a
 535:../src/user_functions.c **** 			if (finalTemp > T_off) {
 2515                             		.loc 1 535 0
 2516 11b0 CD F0 1E                		mov	r8, #30
 2517 11b3 8D F0                   		mov	a, r8
 2518 11b5 70                      		mov	x, a 
 2519 11b6 51 00                   		mov	a, #0
 2520 11b8 BD F2                   		movw	r10, ax
 2521 11ba AF 06 00                		movw	ax, !_finalTemp
 2522 11bd BD F0                   		movw	r8, ax
 2523 11bf AD F2                   		movw	ax, r10
 2524 11c1 46 F0                   		cmpw	ax, r8
 2525 11c3 61 C8                   		 skc
 2526 11c5 EC 4A 12 00             		 br	!!.L88
 536:../src/user_functions.c **** 				tempState = 1;
 2527                             		.loc 1 536 0
 2528 11c9 E5 41 00                		oneb	!_tempState
 2529 11cc EC 4A 12 00             		br	!!.L88
 2530                             	.L93:
 537:../src/user_functions.c **** 			}
 538:../src/user_functions.c **** 		} else if (tempState == 1) {
 2531                             		.loc 1 538 0
 2532 11d0 8F 41 00                		mov	a, !_tempState
 2533 11d3 9D F0                   		mov	r8, a
 2534 11d5 4A F0 01                		cmp	r8, #1
 2535 11d8 61 E8                   		 skz
 2536 11da EC 4A 12 00             		 br	!!.L88
 539:../src/user_functions.c **** 			P4_bit.no1 = 0;
 2537                             		.loc 1 539 0
 2538 11de C9 F0 04 FF             		movw	r8, #-252
 2539 11e2 AD F0                   		movw	ax, r8
 2540 11e4 BD F4                   		movw	r12, ax
 2541 11e6 FA F4                   		movw	hl, r12
 2542 11e8 8B                      		mov	a, [hl]
 2543 11e9 9D F2                   		mov	r10, a
 2544 11eb 5A F2 FD                		and	r10, #-3
 2545 11ee AD F0                   		movw	ax, r8
 2546 11f0 DA F4                   		movw	bc, r12
 2547 11f2 8D F2                   		mov	a, r10
 2548 11f4 48 00 00                		mov	[bc], a
 540:../src/user_functions.c **** 			P4_bit.no2 = 1;
 2549                             		.loc 1 540 0
 2550 11f7 C9 F0 04 FF             		movw	r8, #-252
 2551 11fb AD F0                   		movw	ax, r8
 2552 11fd BD F4                   		movw	r12, ax
 2553 11ff FA F4                   		movw	hl, r12
 2554 1201 8B                      		mov	a, [hl]
 2555 1202 9D F2                   		mov	r10, a
 2556 1204 6A F2 04                		or	r10, #4
 2557 1207 AD F0                   		movw	ax, r8
 2558 1209 DA F4                   		movw	bc, r12
 2559 120b 8D F2                   		mov	a, r10
 2560 120d 48 00 00                		mov	[bc], a
 541:../src/user_functions.c **** 			P4_bit.no3 = 0;
 2561                             		.loc 1 541 0
 2562 1210 C9 F0 04 FF             		movw	r8, #-252
 2563 1214 AD F0                   		movw	ax, r8
 2564 1216 BD F4                   		movw	r12, ax
 2565 1218 FA F4                   		movw	hl, r12
 2566 121a 8B                      		mov	a, [hl]
 2567 121b 9D F2                   		mov	r10, a
 2568 121d 5A F2 F7                		and	r10, #-9
 2569 1220 AD F0                   		movw	ax, r8
 2570 1222 DA F4                   		movw	bc, r12
 2571 1224 8D F2                   		mov	a, r10
 2572 1226 48 00 00                		mov	[bc], a
 542:../src/user_functions.c **** 			switchState = 3;
 2573                             		.loc 1 542 0
 2574 1229 51 03                   		mov	a, #3
 2575 122b 9F 40 00                		mov	!_switchState, a
 543:../src/user_functions.c **** 			if (finalTemp < T_on) {
 2576                             		.loc 1 543 0
 2577 122e CD F0 1A                		mov	r8, #26
 2578 1231 8D F0                   		mov	a, r8
 2579 1233 70                      		mov	x, a 
 2580 1234 51 00                   		mov	a, #0
 2581 1236 BD F2                   		movw	r10, ax
 2582 1238 AF 06 00                		movw	ax, !_finalTemp
 2583 123b BD F0                   		movw	r8, ax
 2584 123d AD F2                   		movw	ax, r10
 2585 123f 46 F0                   		cmpw	ax, r8
 2586 1241 61 E3                   		 skh
 2587 1243 EC 4A 12 00             		 br	!!.L88
 544:../src/user_functions.c **** 				tempState = 1;
 2588                             		.loc 1 544 0
 2589 1247 E5 41 00                		oneb	!_tempState
 2590                             	.L88:
 545:../src/user_functions.c **** 			}
 546:../src/user_functions.c **** 		}
 547:../src/user_functions.c **** 	}
 548:../src/user_functions.c **** 
 549:../src/user_functions.c **** }
 2591                             		.loc 1 549 0
 2592 124a 10 02                   		addw	sp, #2
 2593 124c D7                      		ret
 2594                             	.LFE9:
 2596                             		.global	_setTemp
 2598                             	_setTemp:
 2599                             	.LFB10:
 550:../src/user_functions.c **** 
 551:../src/user_functions.c **** void setTemp() {
 2600                             		.loc 1 551 0
 2601                             		; start of function
 2602                             		; locals: 2 bytes
 2603 124d 20 02                   		subw	sp, #2
 2604                             	.LCFI13:
 552:../src/user_functions.c **** 	uint16_t temp = 4096 - TCR01;
 2605                             		.loc 1 552 0
 2606 124f C9 F0 82 01             		movw	r8, #386
 2607 1253 AD F0                   		movw	ax, r8
 2608 1255 BD F2                   		movw	r10, ax
 2609 1257 FA F2                   		movw	hl, r10
 2610 1259 AB                      		movw	ax, [hl]
 2611 125a BD F0                   		movw	r8, ax
 2612 125c 30 00 10                		movw	ax, #4096
 2613 125f 26 F0                   		subw	ax, r8
 2614 1261 B8 00                   		movw	[sp], ax
 553:../src/user_functions.c **** 	finalTemp = temp / 16;
 2615                             		.loc 1 553 0
 2616 1263 BD F0                   		movw	r8, ax
 2617 1265 31 4E                   		shrw	ax, 4
 2618 1267 BD F0                   		movw	r8, ax
 2619 1269 BF 06 00                		movw	!_finalTemp, ax
 554:../src/user_functions.c **** 	finalTemp -= 50;
 2620                             		.loc 1 554 0
 2621 126c BD F0                   		movw	r8, ax
 2622 126e 04 CE FF                		addw	ax, #-50
 2623 1271 BD F0                   		movw	r8, ax
 2624 1273 BF 06 00                		movw	!_finalTemp, ax
 555:../src/user_functions.c **** 	R_TAU0_Channel1_Stop();
 2625                             		.loc 1 555 0
 2626 1276 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Stop)
 556:../src/user_functions.c **** 	R_TAU0_Channel1_Start();
 2627                             		.loc 1 556 0
 2628 127a FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Start)
 557:../src/user_functions.c **** 
 558:../src/user_functions.c **** }
 2629                             		.loc 1 558 0
 2630 127e 10 02                   		addw	sp, #2
 2631 1280 D7                      		ret
 2632                             	.LFE10:
 2634                             		.global	_writeMem
 2636                             	_writeMem:
 2637                             	.LFB11:
 559:../src/user_functions.c **** 
 560:../src/user_functions.c **** void writeMem(uint16_t addr) {
 2638                             		.loc 1 560 0
 2639                             		; start of function
 2640                             		; locals: 38 bytes
 2641                             		; outgoing: 6 bytes
 2642 1281 20 2C                   		subw	sp, #44
 2643                             	.LCFI14:
 561:../src/user_functions.c **** 	uint8_t send[35];
 562:../src/user_functions.c **** 	uint8_t recieve[3];
 563:../src/user_functions.c **** 
 564:../src/user_functions.c **** 	send[0] = 6;
 2644                             		.loc 1 564 0
 2645 1283 51 06                   		mov	a, #6
 2646 1285 98 09                   		mov	[sp+9], a
 565:../src/user_functions.c **** 
 566:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2647                             		.loc 1 566 0
 2648 1287 C9 F0 01 FF             		movw	r8, #-255
 2649 128b AD F0                   		movw	ax, r8
 2650 128d BD F4                   		movw	r12, ax
 2651 128f FA F4                   		movw	hl, r12
 2652 1291 8B                      		mov	a, [hl]
 2653 1292 9D F2                   		mov	r10, a
 2654 1294 5A F2 DF                		and	r10, #-33
 2655 1297 AD F0                   		movw	ax, r8
 2656 1299 DA F4                   		movw	bc, r12
 2657 129b 8D F2                   		mov	a, r10
 2658 129d 48 00 00                		mov	[bc], a
 567:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2659                             		.loc 1 567 0
 2660 12a0 C9 F0 2C 00             		movw	r8, #44
 2661 12a4 AE F8                   		movw	ax, sp
 2662 12a6 BD F0                   		movw	r8, ax
 2663 12a8 04 2C 00                		addw	ax, #44
 2664 12ab BD F0                   		movw	r8, ax
 2665 12ad 04 DD FF                		addw	ax, #-35
 2666 12b0 B8 00                   		movw	[sp], ax
 2667 12b2 E6                      		onew	ax
 2668 12b3 B8 02                   		movw	[sp+2], ax
 2669 12b5 C9 F2 2C 00             		movw	r10, #44
 2670 12b9 AE F8                   		movw	ax, sp
 2671 12bb BD F2                   		movw	r10, ax
 2672 12bd 04 2C 00                		addw	ax, #44
 2673 12c0 BD F2                   		movw	r10, ax
 2674 12c2 04 DA FF                		addw	ax, #-38
 2675 12c5 B8 04                   		movw	[sp+4], ax
 2676 12c7 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 568:../src/user_functions.c **** 
 569:../src/user_functions.c **** 	while (recieveflag) {
 2677                             		.loc 1 569 0
 2678 12cb 00                      		nop
 2679                             	.L97:
 2680                             		.loc 1 569 0 is_stmt 0 discriminator 1
 2681 12cc 8F 00 00                		mov	a, !_recieveflag
 2682 12cf 9D F0                   		mov	r8, a
 2683 12d1 D4 F0                   		cmp0	r8
 2684 12d3 61 E8                   		 skz
 2685 12d5 EC CC 12 00             		 br	!!.L97
 570:../src/user_functions.c **** 	}
 571:../src/user_functions.c **** 	recieveflag = 1;
 2686                             		.loc 1 571 0 is_stmt 1
 2687 12d9 E5 00 00                		oneb	!_recieveflag
 572:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2688                             		.loc 1 572 0
 2689 12dc C9 F0 01 FF             		movw	r8, #-255
 2690 12e0 AD F0                   		movw	ax, r8
 2691 12e2 BD F4                   		movw	r12, ax
 2692 12e4 FA F4                   		movw	hl, r12
 2693 12e6 8B                      		mov	a, [hl]
 2694 12e7 9D F2                   		mov	r10, a
 2695 12e9 6A F2 20                		or	r10, #32
 2696 12ec AD F0                   		movw	ax, r8
 2697 12ee DA F4                   		movw	bc, r12
 2698 12f0 8D F2                   		mov	a, r10
 2699 12f2 48 00 00                		mov	[bc], a
 573:../src/user_functions.c **** 	delayNoInt(10);
 2700                             		.loc 1 573 0
 2701 12f5 30 0A 00                		movw	ax, #10
 2702 12f8 B8 00                   		movw	[sp], ax
 2703 12fa FC 00 00 00             		call	!!%code(_delayNoInt)
 574:../src/user_functions.c **** 
 575:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2704                             		.loc 1 575 0
 2705 12fe C9 F0 01 FF             		movw	r8, #-255
 2706 1302 AD F0                   		movw	ax, r8
 2707 1304 BD F4                   		movw	r12, ax
 2708 1306 FA F4                   		movw	hl, r12
 2709 1308 8B                      		mov	a, [hl]
 2710 1309 9D F2                   		mov	r10, a
 2711 130b 5A F2 DF                		and	r10, #-33
 2712 130e AD F0                   		movw	ax, r8
 2713 1310 DA F4                   		movw	bc, r12
 2714 1312 8D F2                   		mov	a, r10
 2715 1314 48 00 00                		mov	[bc], a
 576:../src/user_functions.c **** 	send[0] = 2;
 2716                             		.loc 1 576 0
 2717 1317 51 02                   		mov	a, #2
 2718 1319 98 09                   		mov	[sp+9], a
 577:../src/user_functions.c **** 	send[1] = addr >> 4;
 2719                             		.loc 1 577 0
 2720 131b A8 30                   		movw	ax, [sp+48]
 2721 131d 31 4E                   		shrw	ax, 4
 2722 131f BD F0                   		movw	r8, ax
 2723 1321 8D F0                   		mov	a, r8
 2724 1323 98 0A                   		mov	[sp+10], a
 578:../src/user_functions.c **** 	send[2] = addr & 0x0F;
 2725                             		.loc 1 578 0
 2726 1325 88 30                   		mov	a, [sp+48]
 2727 1327 9D F0                   		mov	r8, a
 2728 1329 5A F0 0F                		and	r8, #15
 2729 132c 8D F0                   		mov	a, r8
 2730 132e 98 0B                   		mov	[sp+11], a
 579:../src/user_functions.c **** 	sprintf(&send[3], "%s", mem);
 2731                             		.loc 1 579 0
 2732 1330 AE F8                   		movw	ax, sp
 2733 1332 BD F2                   		movw	r10, ax
 2734 1334 04 09 00                		addw	ax, #9
 2735 1337 BD F0                   		movw	r8, ax
 2736 1339 04 03 00                		addw	ax, #3
 2737 133c B8 00                   		movw	[sp], ax
 2738 133e 30 00 00                		movw	ax, #_mem
 2739 1341 B8 02                   		movw	[sp+2], ax
 2740 1343 FC 00 00 00             		call	!!%code(_strcpy)
 580:../src/user_functions.c **** 
 581:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, strlen(mem) + 3, recieve);
 2741                             		.loc 1 581 0
 2742 1347 30 00 00                		movw	ax, #_mem
 2743 134a B8 00                   		movw	[sp], ax
 2744 134c FC 00 00 00             		call	!!%code(_strlen)
 2745 1350 AD F0                   		movw	ax, r8
 2746 1352 04 03 00                		addw	ax, #3
 2747 1355 BD F0                   		movw	r8, ax
 2748 1357 C9 F4 2C 00             		movw	r12, #44
 2749 135b AE F8                   		movw	ax, sp
 2750 135d BD F4                   		movw	r12, ax
 2751 135f 04 2C 00                		addw	ax, #44
 2752 1362 BD F4                   		movw	r12, ax
 2753 1364 04 DD FF                		addw	ax, #-35
 2754 1367 B8 00                   		movw	[sp], ax
 2755 1369 AD F0                   		movw	ax, r8
 2756 136b B8 02                   		movw	[sp+2], ax
 2757 136d C9 F0 2C 00             		movw	r8, #44
 2758 1371 AE F8                   		movw	ax, sp
 2759 1373 BD F0                   		movw	r8, ax
 2760 1375 04 2C 00                		addw	ax, #44
 2761 1378 BD F0                   		movw	r8, ax
 2762 137a 04 DA FF                		addw	ax, #-38
 2763 137d B8 04                   		movw	[sp+4], ax
 2764 137f FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 582:../src/user_functions.c **** 
 583:../src/user_functions.c **** 	while (recieveflag) {
 2765                             		.loc 1 583 0
 2766 1383 00                      		nop
 2767                             	.L98:
 2768                             		.loc 1 583 0 is_stmt 0 discriminator 1
 2769 1384 8F 00 00                		mov	a, !_recieveflag
 2770 1387 9D F0                   		mov	r8, a
 2771 1389 D4 F0                   		cmp0	r8
 2772 138b 61 E8                   		 skz
 2773 138d EC 84 13 00             		 br	!!.L98
 584:../src/user_functions.c **** 	}
 585:../src/user_functions.c **** 	recieveflag = 1;
 2774                             		.loc 1 585 0 is_stmt 1
 2775 1391 E5 00 00                		oneb	!_recieveflag
 586:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2776                             		.loc 1 586 0
 2777 1394 C9 F0 01 FF             		movw	r8, #-255
 2778 1398 AD F0                   		movw	ax, r8
 2779 139a BD F4                   		movw	r12, ax
 2780 139c FA F4                   		movw	hl, r12
 2781 139e 8B                      		mov	a, [hl]
 2782 139f 9D F2                   		mov	r10, a
 2783 13a1 6A F2 20                		or	r10, #32
 2784 13a4 AD F0                   		movw	ax, r8
 2785 13a6 DA F4                   		movw	bc, r12
 2786 13a8 8D F2                   		mov	a, r10
 2787 13aa 48 00 00                		mov	[bc], a
 587:../src/user_functions.c **** 	delayNoInt(10);
 2788                             		.loc 1 587 0
 2789 13ad 30 0A 00                		movw	ax, #10
 2790 13b0 B8 00                   		movw	[sp], ax
 2791 13b2 FC 00 00 00             		call	!!%code(_delayNoInt)
 588:../src/user_functions.c **** 
 589:../src/user_functions.c **** 	send[0] = 4;
 2792                             		.loc 1 589 0
 2793 13b6 51 04                   		mov	a, #4
 2794 13b8 98 09                   		mov	[sp+9], a
 590:../src/user_functions.c **** 
 591:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2795                             		.loc 1 591 0
 2796 13ba C9 F0 01 FF             		movw	r8, #-255
 2797 13be AD F0                   		movw	ax, r8
 2798 13c0 BD F4                   		movw	r12, ax
 2799 13c2 FA F4                   		movw	hl, r12
 2800 13c4 8B                      		mov	a, [hl]
 2801 13c5 9D F2                   		mov	r10, a
 2802 13c7 5A F2 DF                		and	r10, #-33
 2803 13ca AD F0                   		movw	ax, r8
 2804 13cc DA F4                   		movw	bc, r12
 2805 13ce 8D F2                   		mov	a, r10
 2806 13d0 48 00 00                		mov	[bc], a
 592:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2807                             		.loc 1 592 0
 2808 13d3 C9 F0 2C 00             		movw	r8, #44
 2809 13d7 AE F8                   		movw	ax, sp
 2810 13d9 BD F0                   		movw	r8, ax
 2811 13db 04 2C 00                		addw	ax, #44
 2812 13de BD F0                   		movw	r8, ax
 2813 13e0 04 DD FF                		addw	ax, #-35
 2814 13e3 B8 00                   		movw	[sp], ax
 2815 13e5 E6                      		onew	ax
 2816 13e6 B8 02                   		movw	[sp+2], ax
 2817 13e8 C9 F2 2C 00             		movw	r10, #44
 2818 13ec AE F8                   		movw	ax, sp
 2819 13ee BD F2                   		movw	r10, ax
 2820 13f0 04 2C 00                		addw	ax, #44
 2821 13f3 BD F2                   		movw	r10, ax
 2822 13f5 04 DA FF                		addw	ax, #-38
 2823 13f8 B8 04                   		movw	[sp+4], ax
 2824 13fa FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 593:../src/user_functions.c **** 
 594:../src/user_functions.c **** 	while (recieveflag) {
 2825                             		.loc 1 594 0
 2826 13fe 00                      		nop
 2827                             	.L99:
 2828                             		.loc 1 594 0 is_stmt 0 discriminator 1
 2829 13ff 8F 00 00                		mov	a, !_recieveflag
 2830 1402 9D F0                   		mov	r8, a
 2831 1404 D4 F0                   		cmp0	r8
 2832 1406 61 E8                   		 skz
 2833 1408 EC FF 13 00             		 br	!!.L99
 595:../src/user_functions.c **** 	}
 596:../src/user_functions.c **** 	recieveflag = 1;
 2834                             		.loc 1 596 0 is_stmt 1
 2835 140c E5 00 00                		oneb	!_recieveflag
 597:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2836                             		.loc 1 597 0
 2837 140f C9 F0 01 FF             		movw	r8, #-255
 2838 1413 AD F0                   		movw	ax, r8
 2839 1415 BD F4                   		movw	r12, ax
 2840 1417 FA F4                   		movw	hl, r12
 2841 1419 8B                      		mov	a, [hl]
 2842 141a 9D F2                   		mov	r10, a
 2843 141c 6A F2 20                		or	r10, #32
 2844 141f AD F0                   		movw	ax, r8
 2845 1421 DA F4                   		movw	bc, r12
 2846 1423 8D F2                   		mov	a, r10
 2847 1425 48 00 00                		mov	[bc], a
 598:../src/user_functions.c **** 	delayNoInt(10);
 2848                             		.loc 1 598 0
 2849 1428 30 0A 00                		movw	ax, #10
 2850 142b B8 00                   		movw	[sp], ax
 2851 142d FC 00 00 00             		call	!!%code(_delayNoInt)
 599:../src/user_functions.c **** 
 600:../src/user_functions.c **** 	sprintf(response, "$J0\x0d\x0a");
 2852                             		.loc 1 600 0
 2853 1431 51 24                   		mov	a, #36
 2854 1433 9F 08 00                		mov	!_response, a
 2855 1436 51 4A                   		mov	a, #74
 2856 1438 9F 09 00                		mov	!_response+1, a
 2857 143b 51 30                   		mov	a, #48
 2858 143d 9F 0A 00                		mov	!_response+2, a
 2859 1440 51 0D                   		mov	a, #13
 2860 1442 9F 0B 00                		mov	!_response+3, a
 2861 1445 51 0A                   		mov	a, #10
 2862 1447 9F 0C 00                		mov	!_response+4, a
 2863 144a F5 0D 00                		clrb	!_response+5
 601:../src/user_functions.c **** 	count = 5;
 2864                             		.loc 1 601 0
 2865 144d 30 05 00                		movw	ax, #5
 2866 1450 BF 04 00                		movw	!_count, ax
 602:../src/user_functions.c **** }
 2867                             		.loc 1 602 0
 2868 1453 10 2C                   		addw	sp, #44
 2869 1455 D7                      		ret
 2870                             	.LFE11:
 2872                             		.global	_writeLog
 2874                             	_writeLog:
 2875                             	.LFB12:
 603:../src/user_functions.c **** 
 604:../src/user_functions.c **** void writeLog() {
 2876                             		.loc 1 604 0
 2877                             		; start of function
 2878                             		; locals: 38 bytes
 2879                             		; outgoing: 6 bytes
 2880 1456 20 2C                   		subw	sp, #44
 2881                             	.LCFI15:
 605:../src/user_functions.c **** 	uint8_t send[35];
 606:../src/user_functions.c **** 	uint8_t recieve[3];
 607:../src/user_functions.c **** 
 608:../src/user_functions.c **** 	send[0] = 6;
 2882                             		.loc 1 608 0
 2883 1458 51 06                   		mov	a, #6
 2884 145a 98 09                   		mov	[sp+9], a
 609:../src/user_functions.c **** 
 610:../src/user_functions.c **** 	P1_bit.no5 = 0;
 2885                             		.loc 1 610 0
 2886 145c C9 F0 01 FF             		movw	r8, #-255
 2887 1460 AD F0                   		movw	ax, r8
 2888 1462 BD F4                   		movw	r12, ax
 2889 1464 FA F4                   		movw	hl, r12
 2890 1466 8B                      		mov	a, [hl]
 2891 1467 9D F2                   		mov	r10, a
 2892 1469 5A F2 DF                		and	r10, #-33
 2893 146c AD F0                   		movw	ax, r8
 2894 146e DA F4                   		movw	bc, r12
 2895 1470 8D F2                   		mov	a, r10
 2896 1472 48 00 00                		mov	[bc], a
 611:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 2897                             		.loc 1 611 0
 2898 1475 C9 F0 2C 00             		movw	r8, #44
 2899 1479 AE F8                   		movw	ax, sp
 2900 147b BD F0                   		movw	r8, ax
 2901 147d 04 2C 00                		addw	ax, #44
 2902 1480 BD F0                   		movw	r8, ax
 2903 1482 04 DD FF                		addw	ax, #-35
 2904 1485 B8 00                   		movw	[sp], ax
 2905 1487 E6                      		onew	ax
 2906 1488 B8 02                   		movw	[sp+2], ax
 2907 148a C9 F4 2C 00             		movw	r12, #44
 2908 148e AE F8                   		movw	ax, sp
 2909 1490 BD F4                   		movw	r12, ax
 2910 1492 04 2C 00                		addw	ax, #44
 2911 1495 BD F4                   		movw	r12, ax
 2912 1497 04 DA FF                		addw	ax, #-38
 2913 149a B8 04                   		movw	[sp+4], ax
 2914 149c FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 612:../src/user_functions.c **** 
 613:../src/user_functions.c **** 	while (recieveflag) {
 2915                             		.loc 1 613 0
 2916 14a0 00                      		nop
 2917                             	.L101:
 2918                             		.loc 1 613 0 is_stmt 0 discriminator 1
 2919 14a1 8F 00 00                		mov	a, !_recieveflag
 2920 14a4 9D F0                   		mov	r8, a
 2921 14a6 D4 F0                   		cmp0	r8
 2922 14a8 61 E8                   		 skz
 2923 14aa EC A1 14 00             		 br	!!.L101
 614:../src/user_functions.c **** 	}
 615:../src/user_functions.c **** 	recieveflag = 1;
 2924                             		.loc 1 615 0 is_stmt 1
 2925 14ae E5 00 00                		oneb	!_recieveflag
 616:../src/user_functions.c **** 	P1_bit.no5 = 1;
 2926                             		.loc 1 616 0
 2927 14b1 C9 F0 01 FF             		movw	r8, #-255
 2928 14b5 AD F0                   		movw	ax, r8
 2929 14b7 BD F4                   		movw	r12, ax
 2930 14b9 FA F4                   		movw	hl, r12
 2931 14bb 8B                      		mov	a, [hl]
 2932 14bc 9D F2                   		mov	r10, a
 2933 14be 6A F2 20                		or	r10, #32
 2934 14c1 AD F0                   		movw	ax, r8
 2935 14c3 DA F4                   		movw	bc, r12
 2936 14c5 8D F2                   		mov	a, r10
 2937 14c7 48 00 00                		mov	[bc], a
 617:../src/user_functions.c **** 	delayNoInt(10);
 2938                             		.loc 1 617 0
 2939 14ca 30 0A 00                		movw	ax, #10
 2940 14cd B8 00                   		movw	[sp], ax
 2941 14cf FC 00 00 00             		call	!!%code(_delayNoInt)
 618:../src/user_functions.c **** 
 619:../src/user_functions.c **** 	getRTC();
 2942                             		.loc 1 619 0
 2943 14d3 FC 00 00 00             		call	!!%code(_getRTC)
 620:../src/user_functions.c **** 	count = 0;
 2944                             		.loc 1 620 0
 2945 14d7 F6                      		clrw	ax
 2946 14d8 BF 04 00                		movw	!_count, ax
 621:../src/user_functions.c **** 
 622:../src/user_functions.c **** 	send[0] = 2;
 2947                             		.loc 1 622 0
 2948 14db 51 02                   		mov	a, #2
 2949 14dd 98 09                   		mov	[sp+9], a
 623:../src/user_functions.c **** 	send[1] = logCount >> 8;
 2950                             		.loc 1 623 0
 2951 14df AF 42 00                		movw	ax, !_logCount
 2952 14e2 BD F0                   		movw	r8, ax
 2953 14e4 31 8E                   		shrw	ax, 8
 2954 14e6 BD F0                   		movw	r8, ax
 2955 14e8 8D F0                   		mov	a, r8
 2956 14ea 98 0A                   		mov	[sp+10], a
 624:../src/user_functions.c **** 	send[2] = logCount & 0x00FF;
 2957                             		.loc 1 624 0
 2958 14ec AF 42 00                		movw	ax, !_logCount
 2959 14ef BD F0                   		movw	r8, ax
 2960 14f1 8D F0                   		mov	a, r8
 2961 14f3 98 0B                   		mov	[sp+11], a
 625:../src/user_functions.c **** 	send[3] = date[0];
 2962                             		.loc 1 625 0
 2963 14f5 8F 00 00                		mov	a, !_date
 2964 14f8 9D F0                   		mov	r8, a
 2965 14fa 98 0C                   		mov	[sp+12], a
 626:../src/user_functions.c **** 	send[4] = date[1];
 2966                             		.loc 1 626 0
 2967 14fc 8F 00 00                		mov	a, !_date+1
 2968 14ff 9D F0                   		mov	r8, a
 2969 1501 98 0D                   		mov	[sp+13], a
 627:../src/user_functions.c **** 	send[5] = date[2];
 2970                             		.loc 1 627 0
 2971 1503 8F 00 00                		mov	a, !_date+2
 2972 1506 9D F0                   		mov	r8, a
 2973 1508 98 0E                   		mov	[sp+14], a
 628:../src/user_functions.c **** 	send[6] = date[3];
 2974                             		.loc 1 628 0
 2975 150a 8F 00 00                		mov	a, !_date+3
 2976 150d 9D F0                   		mov	r8, a
 2977 150f 98 0F                   		mov	[sp+15], a
 629:../src/user_functions.c **** 	send[7] = date[4];
 2978                             		.loc 1 629 0
 2979 1511 8F 00 00                		mov	a, !_date+4
 2980 1514 9D F0                   		mov	r8, a
 2981 1516 98 10                   		mov	[sp+16], a
 630:../src/user_functions.c **** 	send[8] = date[5];
 2982                             		.loc 1 630 0
 2983 1518 8F 00 00                		mov	a, !_date+5
 2984 151b 9D F0                   		mov	r8, a
 2985 151d 98 11                   		mov	[sp+17], a
 631:../src/user_functions.c **** 	send[9] = switchState;
 2986                             		.loc 1 631 0
 2987 151f 8F 40 00                		mov	a, !_switchState
 2988 1522 9D F0                   		mov	r8, a
 2989 1524 98 12                   		mov	[sp+18], a
 632:../src/user_functions.c **** 	send[10] = finalTemp;
 2990                             		.loc 1 632 0
 2991 1526 AF 06 00                		movw	ax, !_finalTemp
 2992 1529 BD F0                   		movw	r8, ax
 2993 152b 8D F0                   		mov	a, r8
 2994 152d 98 13                   		mov	[sp+19], a
 633:../src/user_functions.c **** 	send[11] = voltage;
 2995                             		.loc 1 633 0
 2996 152f 8F 00 00                		mov	a, !_voltage
 2997 1532 9D F0                   		mov	r8, a
 2998 1534 98 14                   		mov	[sp+20], a
 634:../src/user_functions.c ****     send[12] = current1;
 2999                             		.loc 1 634 0
 3000 1536 8F 00 00                		mov	a, !_current1
 3001 1539 9D F0                   		mov	r8, a
 3002 153b 98 15                   		mov	[sp+21], a
 635:../src/user_functions.c **** 	send[13] = '\n';
 3003                             		.loc 1 635 0
 3004 153d 51 0A                   		mov	a, #10
 3005 153f 98 16                   		mov	[sp+22], a
 636:../src/user_functions.c **** 	send[14] = 0;
 3006                             		.loc 1 636 0
 3007 1541 F1                      		clrb	a
 3008 1542 98 17                   		mov	[sp+23], a
 637:../src/user_functions.c **** 	send[15] = 0;
 3009                             		.loc 1 637 0
 3010 1544 F1                      		clrb	a
 3011 1545 98 18                   		mov	[sp+24], a
 638:../src/user_functions.c **** 	send[16] = 0;
 3012                             		.loc 1 638 0
 3013 1547 F1                      		clrb	a
 3014 1548 98 19                   		mov	[sp+25], a
 639:../src/user_functions.c **** 	send[17] = 0;
 3015                             		.loc 1 639 0
 3016 154a F1                      		clrb	a
 3017 154b 98 1A                   		mov	[sp+26], a
 640:../src/user_functions.c **** 	send[18] = 0;
 3018                             		.loc 1 640 0
 3019 154d F1                      		clrb	a
 3020 154e 98 1B                   		mov	[sp+27], a
 641:../src/user_functions.c **** 	send[19] = 0;
 3021                             		.loc 1 641 0
 3022 1550 F1                      		clrb	a
 3023 1551 98 1C                   		mov	[sp+28], a
 642:../src/user_functions.c **** 
 643:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3024                             		.loc 1 643 0
 3025 1553 C9 F0 01 FF             		movw	r8, #-255
 3026 1557 AD F0                   		movw	ax, r8
 3027 1559 BD F4                   		movw	r12, ax
 3028 155b FA F4                   		movw	hl, r12
 3029 155d 8B                      		mov	a, [hl]
 3030 155e 9D F2                   		mov	r10, a
 3031 1560 5A F2 DF                		and	r10, #-33
 3032 1563 AD F0                   		movw	ax, r8
 3033 1565 DA F4                   		movw	bc, r12
 3034 1567 8D F2                   		mov	a, r10
 3035 1569 48 00 00                		mov	[bc], a
 644:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 19, recieve);
 3036                             		.loc 1 644 0
 3037 156c C9 F0 2C 00             		movw	r8, #44
 3038 1570 AE F8                   		movw	ax, sp
 3039 1572 BD F0                   		movw	r8, ax
 3040 1574 04 2C 00                		addw	ax, #44
 3041 1577 BD F0                   		movw	r8, ax
 3042 1579 04 DD FF                		addw	ax, #-35
 3043 157c B8 00                   		movw	[sp], ax
 3044 157e 30 13 00                		movw	ax, #19
 3045 1581 B8 02                   		movw	[sp+2], ax
 3046 1583 C9 F4 2C 00             		movw	r12, #44
 3047 1587 AE F8                   		movw	ax, sp
 3048 1589 BD F4                   		movw	r12, ax
 3049 158b 04 2C 00                		addw	ax, #44
 3050 158e BD F4                   		movw	r12, ax
 3051 1590 04 DA FF                		addw	ax, #-38
 3052 1593 B8 04                   		movw	[sp+4], ax
 3053 1595 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 645:../src/user_functions.c **** 
 646:../src/user_functions.c **** 	while (recieveflag) {
 3054                             		.loc 1 646 0
 3055 1599 00                      		nop
 3056                             	.L102:
 3057                             		.loc 1 646 0 is_stmt 0 discriminator 1
 3058 159a 8F 00 00                		mov	a, !_recieveflag
 3059 159d 9D F0                   		mov	r8, a
 3060 159f D4 F0                   		cmp0	r8
 3061 15a1 61 E8                   		 skz
 3062 15a3 EC 9A 15 00             		 br	!!.L102
 647:../src/user_functions.c **** 	}
 648:../src/user_functions.c **** 	recieveflag = 1;
 3063                             		.loc 1 648 0 is_stmt 1
 3064 15a7 E5 00 00                		oneb	!_recieveflag
 649:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3065                             		.loc 1 649 0
 3066 15aa C9 F0 01 FF             		movw	r8, #-255
 3067 15ae AD F0                   		movw	ax, r8
 3068 15b0 BD F4                   		movw	r12, ax
 3069 15b2 FA F4                   		movw	hl, r12
 3070 15b4 8B                      		mov	a, [hl]
 3071 15b5 9D F2                   		mov	r10, a
 3072 15b7 6A F2 20                		or	r10, #32
 3073 15ba AD F0                   		movw	ax, r8
 3074 15bc DA F4                   		movw	bc, r12
 3075 15be 8D F2                   		mov	a, r10
 3076 15c0 48 00 00                		mov	[bc], a
 650:../src/user_functions.c **** 	delayNoInt(10);
 3077                             		.loc 1 650 0
 3078 15c3 30 0A 00                		movw	ax, #10
 3079 15c6 B8 00                   		movw	[sp], ax
 3080 15c8 FC 00 00 00             		call	!!%code(_delayNoInt)
 651:../src/user_functions.c **** 
 652:../src/user_functions.c **** 	send[0] = 4;
 3081                             		.loc 1 652 0
 3082 15cc 51 04                   		mov	a, #4
 3083 15ce 98 09                   		mov	[sp+9], a
 653:../src/user_functions.c **** 
 654:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3084                             		.loc 1 654 0
 3085 15d0 C9 F0 01 FF             		movw	r8, #-255
 3086 15d4 AD F0                   		movw	ax, r8
 3087 15d6 BD F4                   		movw	r12, ax
 3088 15d8 FA F4                   		movw	hl, r12
 3089 15da 8B                      		mov	a, [hl]
 3090 15db 9D F2                   		mov	r10, a
 3091 15dd 5A F2 DF                		and	r10, #-33
 3092 15e0 AD F0                   		movw	ax, r8
 3093 15e2 DA F4                   		movw	bc, r12
 3094 15e4 8D F2                   		mov	a, r10
 3095 15e6 48 00 00                		mov	[bc], a
 655:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 1, recieve);
 3096                             		.loc 1 655 0
 3097 15e9 C9 F0 2C 00             		movw	r8, #44
 3098 15ed AE F8                   		movw	ax, sp
 3099 15ef BD F0                   		movw	r8, ax
 3100 15f1 04 2C 00                		addw	ax, #44
 3101 15f4 BD F0                   		movw	r8, ax
 3102 15f6 04 DD FF                		addw	ax, #-35
 3103 15f9 B8 00                   		movw	[sp], ax
 3104 15fb E6                      		onew	ax
 3105 15fc B8 02                   		movw	[sp+2], ax
 3106 15fe C9 F4 2C 00             		movw	r12, #44
 3107 1602 AE F8                   		movw	ax, sp
 3108 1604 BD F4                   		movw	r12, ax
 3109 1606 04 2C 00                		addw	ax, #44
 3110 1609 BD F4                   		movw	r12, ax
 3111 160b 04 DA FF                		addw	ax, #-38
 3112 160e B8 04                   		movw	[sp+4], ax
 3113 1610 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 656:../src/user_functions.c **** 
 657:../src/user_functions.c **** 	while (recieveflag) {
 3114                             		.loc 1 657 0
 3115 1614 00                      		nop
 3116                             	.L103:
 3117                             		.loc 1 657 0 is_stmt 0 discriminator 1
 3118 1615 8F 00 00                		mov	a, !_recieveflag
 3119 1618 9D F0                   		mov	r8, a
 3120 161a D4 F0                   		cmp0	r8
 3121 161c 61 E8                   		 skz
 3122 161e EC 15 16 00             		 br	!!.L103
 658:../src/user_functions.c **** 	}
 659:../src/user_functions.c **** 	sendflag = 1;
 3123                             		.loc 1 659 0 is_stmt 1
 3124 1622 E5 00 00                		oneb	!_sendflag
 660:../src/user_functions.c **** 	recieveflag = 1;
 3125                             		.loc 1 660 0
 3126 1625 E5 00 00                		oneb	!_recieveflag
 661:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3127                             		.loc 1 661 0
 3128 1628 C9 F0 01 FF             		movw	r8, #-255
 3129 162c AD F0                   		movw	ax, r8
 3130 162e BD F4                   		movw	r12, ax
 3131 1630 FA F4                   		movw	hl, r12
 3132 1632 8B                      		mov	a, [hl]
 3133 1633 9D F2                   		mov	r10, a
 3134 1635 6A F2 20                		or	r10, #32
 3135 1638 AD F0                   		movw	ax, r8
 3136 163a DA F4                   		movw	bc, r12
 3137 163c 8D F2                   		mov	a, r10
 3138 163e 48 00 00                		mov	[bc], a
 662:../src/user_functions.c **** 	delayNoInt(10);
 3139                             		.loc 1 662 0
 3140 1641 30 0A 00                		movw	ax, #10
 3141 1644 B8 00                   		movw	[sp], ax
 3142 1646 FC 00 00 00             		call	!!%code(_delayNoInt)
 663:../src/user_functions.c **** 
 664:../src/user_functions.c **** 	if (logCount <= 8192) {
 3143                             		.loc 1 664 0
 3144 164a AF 42 00                		movw	ax, !_logCount
 3145 164d BD F0                   		movw	r8, ax
 3146 164f 44 00 20                		cmpw	ax, #8192
 3147 1652 61 F3                   		 sknh
 3148 1654 EC 65 16 00             		 br	!!.L100
 665:../src/user_functions.c **** 		logCount += 16;
 3149                             		.loc 1 665 0
 3150 1658 AF 42 00                		movw	ax, !_logCount
 3151 165b BD F0                   		movw	r8, ax
 3152 165d 04 10 00                		addw	ax, #16
 3153 1660 BD F0                   		movw	r8, ax
 3154 1662 BF 42 00                		movw	!_logCount, ax
 3155                             	.L100:
 666:../src/user_functions.c **** 	}
 667:../src/user_functions.c **** }
 3156                             		.loc 1 667 0
 3157 1665 10 2C                   		addw	sp, #44
 3158 1667 D7                      		ret
 3159                             	.LFE12:
 3161                             		.section	.rodata
 3162                             	.LC6:
 3163 0052 24 4B 30 25 73 0D 0A 00 		.string	"$K0%s\r\n"
 3164                             	.text
 3165                             		.global	_read
 3167                             	_read:
 3168                             	.LFB13:
 668:../src/user_functions.c **** 
 669:../src/user_functions.c **** void read(uint16_t addr, uint8_t len) {
 3169                             		.loc 1 669 0
 3170                             		; start of function
 3171                             		; locals: 46 bytes
 3172                             		; outgoing: 6 bytes
 3173 1668 20 34                   		subw	sp, #52
 3174                             	.LCFI16:
 670:../src/user_functions.c **** 	uint8_t send[10];
 671:../src/user_functions.c **** 	uint8_t recieve[35];
 672:../src/user_functions.c **** 
 673:../src/user_functions.c **** 	send[0] = 3;
 3175                             		.loc 1 673 0
 3176 166a 51 03                   		mov	a, #3
 3177 166c 98 2A                   		mov	[sp+42], a
 674:../src/user_functions.c **** 	send[1] = addr >> 4;
 3178                             		.loc 1 674 0
 3179 166e A8 38                   		movw	ax, [sp+56]
 3180 1670 31 4E                   		shrw	ax, 4
 3181 1672 BD F0                   		movw	r8, ax
 3182 1674 8D F0                   		mov	a, r8
 3183 1676 98 2B                   		mov	[sp+43], a
 675:../src/user_functions.c **** 	send[2] = addr & 0x0F;
 3184                             		.loc 1 675 0
 3185 1678 88 38                   		mov	a, [sp+56]
 3186 167a 9D F0                   		mov	r8, a
 3187 167c 5A F0 0F                		and	r8, #15
 3188 167f 8D F0                   		mov	a, r8
 3189 1681 98 2C                   		mov	[sp+44], a
 676:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3190                             		.loc 1 676 0
 3191 1683 C9 F0 01 FF             		movw	r8, #-255
 3192 1687 AD F0                   		movw	ax, r8
 3193 1689 BD F4                   		movw	r12, ax
 3194 168b FA F4                   		movw	hl, r12
 3195 168d 8B                      		mov	a, [hl]
 3196 168e 9D F2                   		mov	r10, a
 3197 1690 5A F2 DF                		and	r10, #-33
 3198 1693 AD F0                   		movw	ax, r8
 3199 1695 DA F4                   		movw	bc, r12
 3200 1697 8D F2                   		mov	a, r10
 3201 1699 48 00 00                		mov	[bc], a
 677:../src/user_functions.c **** 	recieveflag = 1;
 3202                             		.loc 1 677 0
 3203 169c E5 00 00                		oneb	!_recieveflag
 678:../src/user_functions.c **** 	sendflag = 1;
 3204                             		.loc 1 678 0
 3205 169f E5 00 00                		oneb	!_sendflag
 679:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, len + 3, recieve);
 3206                             		.loc 1 679 0
 3207 16a2 88 3A                   		mov	a, [sp+58]
 3208 16a4 70                      		mov	x, a 
 3209 16a5 51 00                   		mov	a, #0
 3210 16a7 BD F0                   		movw	r8, ax
 3211 16a9 04 03 00                		addw	ax, #3
 3212 16ac BD F0                   		movw	r8, ax
 3213 16ae C9 F2 34 00             		movw	r10, #52
 3214 16b2 AE F8                   		movw	ax, sp
 3215 16b4 BD F2                   		movw	r10, ax
 3216 16b6 04 34 00                		addw	ax, #52
 3217 16b9 BD F2                   		movw	r10, ax
 3218 16bb 04 F6 FF                		addw	ax, #-10
 3219 16be B8 00                   		movw	[sp], ax
 3220 16c0 AD F0                   		movw	ax, r8
 3221 16c2 B8 02                   		movw	[sp+2], ax
 3222 16c4 C9 F4 34 00             		movw	r12, #52
 3223 16c8 AE F8                   		movw	ax, sp
 3224 16ca BD F4                   		movw	r12, ax
 3225 16cc 04 34 00                		addw	ax, #52
 3226 16cf BD F4                   		movw	r12, ax
 3227 16d1 04 D3 FF                		addw	ax, #-45
 3228 16d4 B8 04                   		movw	[sp+4], ax
 3229 16d6 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 680:../src/user_functions.c **** 
 681:../src/user_functions.c **** 	while (recieveflag || sendflag) {
 3230                             		.loc 1 681 0
 3231 16da 00                      		nop
 3232                             	.L106:
 3233                             		.loc 1 681 0 is_stmt 0 discriminator 3
 3234 16db 8F 00 00                		mov	a, !_recieveflag
 3235 16de 9D F0                   		mov	r8, a
 3236 16e0 D4 F0                   		cmp0	r8
 3237 16e2 61 E8                   		 skz
 3238 16e4 EC DB 16 00             		 br	!!.L106
 3239                             		.loc 1 681 0 discriminator 2
 3240 16e8 8F 00 00                		mov	a, !_sendflag
 3241 16eb 9D F0                   		mov	r8, a
 3242 16ed D4 F0                   		cmp0	r8
 3243 16ef 61 E8                   		 skz
 3244 16f1 EC DB 16 00             		 br	!!.L106
 682:../src/user_functions.c **** 	}
 683:../src/user_functions.c **** 
 684:../src/user_functions.c **** 	recieveflag = 1;
 3245                             		.loc 1 684 0 is_stmt 1
 3246 16f5 E5 00 00                		oneb	!_recieveflag
 685:../src/user_functions.c **** 	sendflag = 1;
 3247                             		.loc 1 685 0
 3248 16f8 E5 00 00                		oneb	!_sendflag
 686:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3249                             		.loc 1 686 0
 3250 16fb C9 F0 01 FF             		movw	r8, #-255
 3251 16ff AD F0                   		movw	ax, r8
 3252 1701 BD F4                   		movw	r12, ax
 3253 1703 FA F4                   		movw	hl, r12
 3254 1705 8B                      		mov	a, [hl]
 3255 1706 9D F2                   		mov	r10, a
 3256 1708 6A F2 20                		or	r10, #32
 3257 170b AD F0                   		movw	ax, r8
 3258 170d DA F4                   		movw	bc, r12
 3259 170f 8D F2                   		mov	a, r10
 3260 1711 48 00 00                		mov	[bc], a
 687:../src/user_functions.c **** 	count = len + 5;
 3261                             		.loc 1 687 0
 3262 1714 88 3A                   		mov	a, [sp+58]
 3263 1716 70                      		mov	x, a 
 3264 1717 51 00                   		mov	a, #0
 3265 1719 BD F0                   		movw	r8, ax
 3266 171b 04 05 00                		addw	ax, #5
 3267 171e BD F0                   		movw	r8, ax
 3268 1720 BF 04 00                		movw	!_count, ax
 688:../src/user_functions.c **** 	recieve[3 + len] = '\r';
 3269                             		.loc 1 688 0
 3270 1723 88 3A                   		mov	a, [sp+58]
 3271 1725 70                      		mov	x, a 
 3272 1726 51 00                   		mov	a, #0
 3273 1728 BD F0                   		movw	r8, ax
 3274 172a 04 03 00                		addw	ax, #3
 3275 172d BD F0                   		movw	r8, ax
 3276 172f AE F8                   		movw	ax, sp
 3277 1731 BD F4                   		movw	r12, ax
 3278 1733 04 07 00                		addw	ax, #7
 3279 1736 BD F2                   		movw	r10, ax
 3280 1738 06 F0                   		addw	ax, r8
 3281 173a BD F0                   		movw	r8, ax
 3282 173c BD F2                   		movw	r10, ax
 3283 173e DA F2                   		movw	bc, r10
 3284 1740 51 0D                   		mov	a, #13
 3285 1742 48 00 00                		mov	[bc], a
 689:../src/user_functions.c **** 	recieve[4 + len] = '\n';
 3286                             		.loc 1 689 0
 3287 1745 88 3A                   		mov	a, [sp+58]
 3288 1747 70                      		mov	x, a 
 3289 1748 51 00                   		mov	a, #0
 3290 174a BD F0                   		movw	r8, ax
 3291 174c 04 04 00                		addw	ax, #4
 3292 174f BD F0                   		movw	r8, ax
 3293 1751 AE F8                   		movw	ax, sp
 3294 1753 04 07 00                		addw	ax, #7
 3295 1756 BD F2                   		movw	r10, ax
 3296 1758 06 F0                   		addw	ax, r8
 3297 175a BD F0                   		movw	r8, ax
 3298 175c BD F2                   		movw	r10, ax
 3299 175e DA F2                   		movw	bc, r10
 3300 1760 51 0A                   		mov	a, #10
 3301 1762 48 00 00                		mov	[bc], a
 690:../src/user_functions.c **** 	sprintf(response, "$K0%s\x0d\x0a", &recieve[3]);
 3302                             		.loc 1 690 0
 3303 1765 30 08 00                		movw	ax, #_response
 3304 1768 B8 00                   		movw	[sp], ax
 3305 176a 30 52 00                		movw	ax, #.LC6
 3306 176d B8 02                   		movw	[sp+2], ax
 3307 176f AE F8                   		movw	ax, sp
 3308 1771 04 07 00                		addw	ax, #7
 3309 1774 BD F0                   		movw	r8, ax
 3310 1776 04 03 00                		addw	ax, #3
 3311 1779 B8 04                   		movw	[sp+4], ax
 3312 177b FC 00 00 00             		call	!!%code(_sprintf)
 691:../src/user_functions.c **** }
 3313                             		.loc 1 691 0
 3314 177f 10 34                   		addw	sp, #52
 3315 1781 D7                      		ret
 3316                             	.LFE13:
 3318                             		.section	.rodata
 3319                             	.LC7:
 3320 005a 24 4D 30 32 30 25 64 2C 		.string	"$M020%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n"
 3320      25 64 2C 25 64 2C 25 64 
 3320      2C 25 64 2C 25 64 2C 25 
 3320      64 2C 25 64 2C 25 64 2C 
 3320      25 64 0D 0A 00 
 3321                             	.text
 3322                             		.global	_readLog
 3324                             	_readLog:
 3325                             	.LFB14:
 692:../src/user_functions.c **** 
 693:../src/user_functions.c **** void readLog(uint16_t logNum) {
 3326                             		.loc 1 693 0
 3327                             		; start of function
 3328                             		; push 6: r16 r18 r20
 3329                             		; locals: 52 bytes
 3330                             		; outgoing: 24 bytes
 3331 1782 61 EF                   		sel	rb2
 3332 1784 C1                      		push	ax ; r16
 3333                             	.LCFI17:
 3334 1785 C3                      		push	bc ; r18
 3335                             	.LCFI18:
 3336 1786 C5                      		push	de ; r20
 3337                             	.LCFI19:
 3338 1787 61 CF                   		sel	rb0
 3339 1789 20 4C                   		subw	sp, #76
 3340                             	.LCFI20:
 694:../src/user_functions.c **** 	uint8_t send[10];
 695:../src/user_functions.c **** 	uint8_t recieve[35];
 696:../src/user_functions.c **** 
 697:../src/user_functions.c **** 	logNum = (logNum - 1) * 16;
 3341                             		.loc 1 697 0
 3342 178b A8 56                   		movw	ax, [sp+86]
 3343 178d 04 FF 0F                		addw	ax, #4095
 3344 1790 BD F0                   		movw	r8, ax
 3345 1792 31 4D                   		shlw	ax, 4
 3346 1794 B8 56                   		movw	[sp+86], ax
 698:../src/user_functions.c **** 	send[0] = 3;
 3347                             		.loc 1 698 0
 3348 1796 51 03                   		mov	a, #3
 3349 1798 98 42                   		mov	[sp+66], a
 699:../src/user_functions.c **** 	send[1] = logNum >> 8;
 3350                             		.loc 1 699 0
 3351 179a A8 56                   		movw	ax, [sp+86]
 3352 179c 31 8E                   		shrw	ax, 8
 3353 179e BD F0                   		movw	r8, ax
 3354 17a0 8D F0                   		mov	a, r8
 3355 17a2 98 43                   		mov	[sp+67], a
 700:../src/user_functions.c **** 	send[2] = logNum & 0x00FF;
 3356                             		.loc 1 700 0
 3357 17a4 88 56                   		mov	a, [sp+86]
 3358 17a6 9D F0                   		mov	r8, a
 3359 17a8 98 44                   		mov	[sp+68], a
 701:../src/user_functions.c **** 	P1_bit.no5 = 0;
 3360                             		.loc 1 701 0
 3361 17aa C9 F0 01 FF             		movw	r8, #-255
 3362 17ae AD F0                   		movw	ax, r8
 3363 17b0 BD F4                   		movw	r12, ax
 3364 17b2 FA F4                   		movw	hl, r12
 3365 17b4 8B                      		mov	a, [hl]
 3366 17b5 9D F2                   		mov	r10, a
 3367 17b7 5A F2 DF                		and	r10, #-33
 3368 17ba AD F0                   		movw	ax, r8
 3369 17bc DA F4                   		movw	bc, r12
 3370 17be 8D F2                   		mov	a, r10
 3371 17c0 48 00 00                		mov	[bc], a
 702:../src/user_functions.c **** 	recieveflag = 1;
 3372                             		.loc 1 702 0
 3373 17c3 E5 00 00                		oneb	!_recieveflag
 703:../src/user_functions.c **** 	sendflag = 1;
 3374                             		.loc 1 703 0
 3375 17c6 E5 00 00                		oneb	!_sendflag
 704:../src/user_functions.c **** 	R_CSI00_Send_Receive(send, 13, recieve);
 3376                             		.loc 1 704 0
 3377 17c9 C9 F0 4C 00             		movw	r8, #76
 3378 17cd AE F8                   		movw	ax, sp
 3379 17cf BD F0                   		movw	r8, ax
 3380 17d1 04 4C 00                		addw	ax, #76
 3381 17d4 BD F0                   		movw	r8, ax
 3382 17d6 04 F6 FF                		addw	ax, #-10
 3383 17d9 B8 00                   		movw	[sp], ax
 3384 17db 30 0D 00                		movw	ax, #13
 3385 17de B8 02                   		movw	[sp+2], ax
 3386 17e0 C9 F4 4C 00             		movw	r12, #76
 3387 17e4 AE F8                   		movw	ax, sp
 3388 17e6 BD F4                   		movw	r12, ax
 3389 17e8 04 4C 00                		addw	ax, #76
 3390 17eb BD F4                   		movw	r12, ax
 3391 17ed 04 D3 FF                		addw	ax, #-45
 3392 17f0 B8 04                   		movw	[sp+4], ax
 3393 17f2 FC 00 00 00             		call	!!%code(_R_CSI00_Send_Receive)
 705:../src/user_functions.c **** 
 706:../src/user_functions.c **** 	while (recieveflag || sendflag) {
 3394                             		.loc 1 706 0
 3395 17f6 00                      		nop
 3396                             	.L108:
 3397                             		.loc 1 706 0 is_stmt 0 discriminator 3
 3398 17f7 8F 00 00                		mov	a, !_recieveflag
 3399 17fa 9D F0                   		mov	r8, a
 3400 17fc D4 F0                   		cmp0	r8
 3401 17fe 61 E8                   		 skz
 3402 1800 EC F7 17 00             		 br	!!.L108
 3403                             		.loc 1 706 0 discriminator 2
 3404 1804 8F 00 00                		mov	a, !_sendflag
 3405 1807 9D F0                   		mov	r8, a
 3406 1809 D4 F0                   		cmp0	r8
 3407 180b 61 E8                   		 skz
 3408 180d EC F7 17 00             		 br	!!.L108
 707:../src/user_functions.c **** 	}
 708:../src/user_functions.c **** 	recieveflag = 1;
 3409                             		.loc 1 708 0 is_stmt 1
 3410 1811 E5 00 00                		oneb	!_recieveflag
 709:../src/user_functions.c **** 	sendflag = 1;
 3411                             		.loc 1 709 0
 3412 1814 E5 00 00                		oneb	!_sendflag
 710:../src/user_functions.c **** 	P1_bit.no5 = 1;
 3413                             		.loc 1 710 0
 3414 1817 C9 F0 01 FF             		movw	r8, #-255
 3415 181b AD F0                   		movw	ax, r8
 3416 181d BD F4                   		movw	r12, ax
 3417 181f FA F4                   		movw	hl, r12
 3418 1821 8B                      		mov	a, [hl]
 3419 1822 9D F2                   		mov	r10, a
 3420 1824 6A F2 20                		or	r10, #32
 3421 1827 AD F0                   		movw	ax, r8
 3422 1829 DA F4                   		movw	bc, r12
 3423 182b 8D F2                   		mov	a, r10
 3424 182d 48 00 00                		mov	[bc], a
 711:../src/user_functions.c **** 
 712:../src/user_functions.c **** 	if (logNum > logCount) {
 3425                             		.loc 1 712 0
 3426 1830 AF 42 00                		movw	ax, !_logCount
 3427 1833 BD F0                   		movw	r8, ax
 3428 1835 A8 56                   		movw	ax, [sp+86]
 3429 1837 46 F0                   		cmpw	ax, r8
 3430 1839 61 E3                   		 skh
 3431 183b EC 6D 18 00             		 br	!!.L109
 713:../src/user_functions.c **** 		sprintf(response, "$M2\x0d\x0a");
 3432                             		.loc 1 713 0
 3433 183f 51 24                   		mov	a, #36
 3434 1841 9F 08 00                		mov	!_response, a
 3435 1844 51 4D                   		mov	a, #77
 3436 1846 9F 09 00                		mov	!_response+1, a
 3437 1849 51 32                   		mov	a, #50
 3438 184b 9F 0A 00                		mov	!_response+2, a
 3439 184e 51 0D                   		mov	a, #13
 3440 1850 9F 0B 00                		mov	!_response+3, a
 3441 1853 51 0A                   		mov	a, #10
 3442 1855 9F 0C 00                		mov	!_response+4, a
 3443 1858 F5 0D 00                		clrb	!_response+5
 714:../src/user_functions.c **** 		count = strlen(response);
 3444                             		.loc 1 714 0
 3445 185b 30 08 00                		movw	ax, #_response
 3446 185e B8 00                   		movw	[sp], ax
 3447 1860 FC 00 00 00             		call	!!%code(_strlen)
 3448 1864 AD F0                   		movw	ax, r8
 3449 1866 BF 04 00                		movw	!_count, ax
 3450 1869 EC 0F 19 00             		br	!!.L107
 3451                             	.L109:
 715:../src/user_functions.c **** 	} else {
 716:../src/user_functions.c **** 		sprintf(response, "$M020%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\x0d\x0a",
 717:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3452                             		.loc 1 717 0
 3453 186d 88 22                   		mov	a, [sp+34]
 3454 186f 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3455                             		.loc 1 716 0
 3456 1871 70                      		mov	x, a 
 3457 1872 51 00                   		mov	a, #0
 3458 1874 BD F4                   		movw	r12, ax
 3459                             		.loc 1 717 0
 3460 1876 88 23                   		mov	a, [sp+35]
 3461 1878 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3462                             		.loc 1 716 0
 3463 187a 70                      		mov	x, a 
 3464 187b 51 00                   		mov	a, #0
 3465 187d BD F6                   		movw	r14, ax
 3466                             		.loc 1 717 0
 3467 187f 88 24                   		mov	a, [sp+36]
 3468 1881 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3469                             		.loc 1 716 0
 3470 1883 70                      		mov	x, a 
 3471 1884 51 00                   		mov	a, #0
 3472 1886 B8 1C                   		movw	[sp+28], ax
 3473                             		.loc 1 717 0
 3474 1888 88 25                   		mov	a, [sp+37]
 3475 188a 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3476                             		.loc 1 716 0
 3477 188c 70                      		mov	x, a 
 3478 188d 51 00                   		mov	a, #0
 3479 188f B8 1A                   		movw	[sp+26], ax
 3480                             		.loc 1 717 0
 3481 1891 88 26                   		mov	a, [sp+38]
 3482 1893 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3483                             		.loc 1 716 0
 3484 1895 70                      		mov	x, a 
 3485 1896 51 00                   		mov	a, #0
 3486 1898 B8 18                   		movw	[sp+24], ax
 718:../src/user_functions.c **** 				recieve[8], recieve[9], recieve[10], recieve[11], recieve[12]);
 3487                             		.loc 1 718 0
 3488 189a 88 27                   		mov	a, [sp+39]
 3489 189c 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3490                             		.loc 1 716 0
 3491 189e 70                      		mov	x, a 
 3492 189f 51 00                   		mov	a, #0
 3493 18a1 BD EC                   		movw	r20, ax
 3494                             		.loc 1 718 0
 3495 18a3 88 28                   		mov	a, [sp+40]
 3496 18a5 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3497                             		.loc 1 716 0
 3498 18a7 70                      		mov	x, a 
 3499 18a8 51 00                   		mov	a, #0
 3500 18aa BD EA                   		movw	r18, ax
 3501                             		.loc 1 718 0
 3502 18ac 88 29                   		mov	a, [sp+41]
 3503 18ae 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3504                             		.loc 1 716 0
 3505 18b0 70                      		mov	x, a 
 3506 18b1 51 00                   		mov	a, #0
 3507 18b3 BD E8                   		movw	r16, ax
 3508                             		.loc 1 718 0
 3509 18b5 88 2A                   		mov	a, [sp+42]
 3510 18b7 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3511                             		.loc 1 716 0
 3512 18b9 70                      		mov	x, a 
 3513 18ba 51 00                   		mov	a, #0
 3514 18bc BD F2                   		movw	r10, ax
 3515                             		.loc 1 718 0
 3516 18be 88 2B                   		mov	a, [sp+43]
 3517 18c0 9D F0                   		mov	r8, a
 716:../src/user_functions.c **** 				recieve[3], recieve[4], recieve[5], recieve[6], recieve[7],
 3518                             		.loc 1 716 0
 3519 18c2 CD F1 00                		mov	r9, #0
 3520 18c5 30 08 00                		movw	ax, #_response
 3521 18c8 B8 00                   		movw	[sp], ax
 3522 18ca 30 5A 00                		movw	ax, #.LC7
 3523 18cd B8 02                   		movw	[sp+2], ax
 3524 18cf AD F4                   		movw	ax, r12
 3525 18d1 B8 04                   		movw	[sp+4], ax
 3526 18d3 AD F6                   		movw	ax, r14
 3527 18d5 B8 06                   		movw	[sp+6], ax
 3528 18d7 A8 1C                   		movw	ax, [sp+28]
 3529 18d9 BD F4                   		movw	r12, ax
 3530 18db B8 08                   		movw	[sp+8], ax
 3531 18dd A8 1A                   		movw	ax, [sp+26]
 3532 18df BD F4                   		movw	r12, ax
 3533 18e1 B8 0A                   		movw	[sp+10], ax
 3534 18e3 A8 18                   		movw	ax, [sp+24]
 3535 18e5 BD F4                   		movw	r12, ax
 3536 18e7 B8 0C                   		movw	[sp+12], ax
 3537 18e9 AD EC                   		movw	ax, r20
 3538 18eb B8 0E                   		movw	[sp+14], ax
 3539 18ed AD EA                   		movw	ax, r18
 3540 18ef B8 10                   		movw	[sp+16], ax
 3541 18f1 AD E8                   		movw	ax, r16
 3542 18f3 B8 12                   		movw	[sp+18], ax
 3543 18f5 AD F2                   		movw	ax, r10
 3544 18f7 B8 14                   		movw	[sp+20], ax
 3545 18f9 AD F0                   		movw	ax, r8
 3546 18fb B8 16                   		movw	[sp+22], ax
 3547 18fd FC 00 00 00             		call	!!%code(_sprintf)
 719:../src/user_functions.c **** 		count = strlen(response);
 3548                             		.loc 1 719 0
 3549 1901 30 08 00                		movw	ax, #_response
 3550 1904 B8 00                   		movw	[sp], ax
 3551 1906 FC 00 00 00             		call	!!%code(_strlen)
 3552 190a AD F0                   		movw	ax, r8
 3553 190c BF 04 00                		movw	!_count, ax
 3554                             	.L107:
 720:../src/user_functions.c **** 	}
 721:../src/user_functions.c **** 
 722:../src/user_functions.c **** }
 3555                             		.loc 1 722 0
 3556 190f 10 4C                   		addw	sp, #76
 3557 1911 61 EF                   		sel	rb2
 3558 1913 C4                      		pop	de ; r20
 3559 1914 C2                      		pop	bc ; r18
 3560 1915 C0                      		pop	ax ; r16
 3561 1916 61 CF                   		sel	rb0
 3562 1918 D7                      		ret
 3563                             	.LFE14:
 3787                             	.Letext0:
 3788                             		.file 2 "../src/iodefine.h"
 3789                             		.file 3 "../src/r_cg_macrodriver.h"
 3790                             		.file 4 "../src/r_cg_rtc.h"
 3791                             		.file 5 "../src/globals.h"
