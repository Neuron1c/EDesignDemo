   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_scrollFlag,1,1
  31                             		.comm	_tempFlag,1,1
  32                             		.comm	_scrollCount,2,2
  33                             		.comm	_timerFlag,2,2
  34                             		.comm	_count,2,2
  35                             		.local	_finalTemp
  36                             		.comm	_finalTemp,2,2
  37                             		.local	_response
  38                             		.comm	_response,50,1
  39                             		.local	_mode
  40                             		.comm	_mode,2,2
  41                             		.local	_display
  42                             		.comm	_display,2,2
  43                             		.local	_offset
  44                             		.comm	_offset,2,2
  45                             		.global	_D
  46                             	.bss
  47                             		.balign 2
  50                             	_D:
  51 0000 00 00                   		.zero	2
  52                             		.global	_flag
  53                             		.balign 2
  56                             	_flag:
  57 0002 00 00                   		.zero	2
  58                             		.comm	_voltage,1,1
  59                             		.comm	_current1,1,1
  60                             		.comm	_current2,1,1
  61                             		.section	.rodata
  62                             	.LC0:
  63 0000 65 72 72 6F 72 0D 0A 00 		.string	"error\r\n"
  64                             	.text
  65                             		.global	_populate
  67                             	_populate:
  68                             	.LFB0:
  69                             		.file 1 "../src/user_functions.c"
   1:../src/user_functions.c **** /*
   2:../src/user_functions.c ****  * user_functions.c
   3:../src/user_functions.c ****  *
   4:../src/user_functions.c ****  *  Created on: 15 Feb 2017
   5:../src/user_functions.c ****  *      Author: 19119038
   6:../src/user_functions.c ****  */
   7:../src/user_functions.c **** #include "r_cg_macrodriver.h"
   8:../src/user_functions.c **** #include "r_cg_cgc.h"
   9:../src/user_functions.c **** #include "r_cg_port.h"
  10:../src/user_functions.c **** #include "r_cg_serial.h"
  11:../src/user_functions.c **** #include "r_cg_wdt.h"
  12:../src/user_functions.c **** #include "r_cg_userdefine.h"
  13:../src/user_functions.c **** #include "debounce.h"
  14:../src/user_functions.c **** #include <string.h>
  15:../src/user_functions.c **** #include <stdio.h>
  16:../src/user_functions.c **** #include <stdlib.h>
  17:../src/user_functions.c **** 
  18:../src/user_functions.c **** extern uint8_t record[RX_BUF_LEN];
  19:../src/user_functions.c **** extern uint8_t mem[RX_BUF_LEN];
  20:../src/user_functions.c **** extern uint8_t display_string[RX_BUF_LEN];
  21:../src/user_functions.c **** extern int count;
  22:../src/user_functions.c **** extern uint16_t scrollCount;
  23:../src/user_functions.c **** extern uint8_t scrollFlag;
  24:../src/user_functions.c **** extern uint8_t tempFlag;
  25:../src/user_functions.c **** 
  26:../src/user_functions.c **** static uint16_t finalTemp;
  27:../src/user_functions.c **** static uint8_t response[RX_BUF_LEN];
  28:../src/user_functions.c **** static int mode = 0;
  29:../src/user_functions.c **** static int display = 0;
  30:../src/user_functions.c **** static int offset = 0;
  31:../src/user_functions.c **** int D = 0;
  32:../src/user_functions.c **** int flag = 0;
  33:../src/user_functions.c **** uint8_t voltage, current1, current2;
  34:../src/user_functions.c **** 
  35:../src/user_functions.c **** 
  36:../src/user_functions.c **** void processMSG();
  37:../src/user_functions.c **** int errorTest();
  38:../src/user_functions.c **** void displayLCD();
  39:../src/user_functions.c **** void readRTC();
  40:../src/user_functions.c **** void setRTC();
  41:../src/user_functions.c **** void getRTC();
  42:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]);
  43:../src/user_functions.c **** void collectADC();
  44:../src/user_functions.c **** void checkFlags();
  45:../src/user_functions.c **** void measureTemp();
  46:../src/user_functions.c **** void setTemp();
  47:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]);
  48:../src/user_functions.c **** 
  49:../src/user_functions.c **** 
  50:../src/user_functions.c **** char populate(char recieved){
  70                             		.loc 1 50 0
  71                             		; start of function
  72                             		; outgoing: 4 bytes
  73 0000 20 04                   		subw	sp, #4
  74                             	.LCFI0:
  51:../src/user_functions.c **** 
  52:../src/user_functions.c **** 	if(recieved == '$'){
  75                             		.loc 1 52 0
  76 0002 88 08                   		mov	a, [sp+8]
  77 0004 4C 24                   		cmp	a, #36
  78 0006 61 E8                   		 skz
  79 0008 EC 2A 00 00             		 br	!!.L2
  53:../src/user_functions.c **** 		record[count] = recieved;
  80                             		.loc 1 53 0
  81 000c AF 00 00                		movw	ax, !_count
  82 000f BD F0                   		movw	r8, ax
  83 0011 88 08                   		mov	a, [sp+8]
  84 0013 9D F2                   		mov	r10, a
  85 0015 DA F0                   		movw	bc, r8
  86 0017 48 00 00                		mov	_record[bc], a
  54:../src/user_functions.c **** 		count++;
  87                             		.loc 1 54 0
  88 001a AF 00 00                		movw	ax, !_count
  89 001d BD F0                   		movw	r8, ax
  90 001f A6 F0                   		incw	r8
  91 0021 AD F0                   		movw	ax, r8
  92 0023 BF 00 00                		movw	!_count, ax
  93 0026 EC E3 00 00             		br	!!.L3
  94                             	.L2:
  55:../src/user_functions.c **** 	}
  56:../src/user_functions.c **** 	else if(recieved == '\x0a'){
  95                             		.loc 1 56 0
  96 002a 88 08                   		mov	a, [sp+8]
  97 002c 4C 0A                   		cmp	a, #10
  98 002e 61 E8                   		 skz
  99 0030 EC 8D 00 00             		 br	!!.L4
  57:../src/user_functions.c **** 		if(record[count - 1] == '\x0d'){
 100                             		.loc 1 57 0
 101 0034 AF 00 00                		movw	ax, !_count
 102 0037 BD F0                   		movw	r8, ax
 103 0039 B6 F0                   		decw	r8
 104 003b AD F0                   		movw	ax, r8
 105 003d 04 00 00                		addw	ax, #_record
 106 0040 16                      		movw	hl, ax
 107 0041 8B                      		mov	a, [hl]
 108 0042 9D F0                   		mov	r8, a
 109 0044 4A F0 0D                		cmp	r8, #13
 110 0047 61 E8                   		 skz
 111 0049 EC 7A 00 00             		 br	!!.L5
  58:../src/user_functions.c **** 			if(!flag){
 112                             		.loc 1 58 0
 113 004d AF 00 00                		movw	ax, !_flag
 114 0050 BD F0                   		movw	r8, ax
 115 0052 44 00 00                		cmpw	ax, #0
 116 0055 61 E8                   		 skz
 117 0057 EC 7A 00 00             		 br	!!.L5
  59:../src/user_functions.c **** 				record[count] = recieved;
 118                             		.loc 1 59 0
 119 005b AF 00 00                		movw	ax, !_count
 120 005e BD F0                   		movw	r8, ax
 121 0060 88 08                   		mov	a, [sp+8]
 122 0062 9D F2                   		mov	r10, a
 123 0064 DA F0                   		movw	bc, r8
 124 0066 48 00 00                		mov	_record[bc], a
  60:../src/user_functions.c **** 				record[count + 1] = '\0';
 125                             		.loc 1 60 0
 126 0069 AF 00 00                		movw	ax, !_count
 127 006c BD F0                   		movw	r8, ax
 128 006e A6 F0                   		incw	r8
 129 0070 DA F0                   		movw	bc, r8
 130 0072 F1                      		clrb	a
 131 0073 48 00 00                		mov	_record[bc], a
  61:../src/user_functions.c **** 				processMSG();
 132                             		.loc 1 61 0
 133 0076 FC 00 00 00             		call	!!%code(_processMSG)
 134                             	.L5:
  62:../src/user_functions.c **** 			}
  63:../src/user_functions.c **** 		}
  64:../src/user_functions.c **** 		strcpy(record,"");
 135                             		.loc 1 64 0
 136 007a F4 F0                   		clrb	r8
 137 007c 8D F0                   		mov	a, r8
 138 007e 9F 00 00                		mov	!_record, a
  65:../src/user_functions.c **** 		count = 0;
 139                             		.loc 1 65 0
 140 0081 F6                      		clrw	ax
 141 0082 BF 00 00                		movw	!_count, ax
  66:../src/user_functions.c **** 		flag = 0;
 142                             		.loc 1 66 0
 143 0085 F6                      		clrw	ax
 144 0086 BF 00 00                		movw	!_flag, ax
 145 0089 EC E3 00 00             		br	!!.L3
 146                             	.L4:
  67:../src/user_functions.c **** 	}
  68:../src/user_functions.c **** 	else if(flag){
 147                             		.loc 1 68 0
 148 008d AF 00 00                		movw	ax, !_flag
 149 0090 BD F0                   		movw	r8, ax
 150 0092 44 00 00                		cmpw	ax, #0
 151 0095 61 E8                   		 skz
 152 0097 EC E3 00 00             		 br	!!.L3
  69:../src/user_functions.c **** 
  70:../src/user_functions.c **** 	}
  71:../src/user_functions.c **** 	else if(count == 0 && recieved != '$'){
 153                             		.loc 1 71 0
 154 009b AF 00 00                		movw	ax, !_count
 155 009e BD F0                   		movw	r8, ax
 156 00a0 44 00 00                		cmpw	ax, #0
 157 00a3 61 E8                   		 skz
 158 00a5 EC C9 00 00             		 br	!!.L6
 159                             		.loc 1 71 0 is_stmt 0 discriminator 1
 160 00a9 88 08                   		mov	a, [sp+8]
 161 00ab 4C 24                   		cmp	a, #36
 162 00ad 61 F8                   		 sknz
 163 00af EC C9 00 00             		 br	!!.L6
  72:../src/user_functions.c **** 
  73:../src/user_functions.c **** 		R_UART1_Send("error\x0d\x0a",7);
 164                             		.loc 1 73 0 is_stmt 1
 165 00b3 30 00 00                		movw	ax, #.LC0
 166 00b6 B8 00                   		movw	[sp], ax
 167 00b8 30 07 00                		movw	ax, #7
 168 00bb B8 02                   		movw	[sp+2], ax
 169 00bd FC 00 00 00             		call	!!%code(_R_UART1_Send)
  74:../src/user_functions.c **** 		flag = 1;
 170                             		.loc 1 74 0
 171 00c1 E6                      		onew	ax
 172 00c2 BF 00 00                		movw	!_flag, ax
 173 00c5 EC E3 00 00             		br	!!.L3
 174                             	.L6:
  75:../src/user_functions.c **** 	}
  76:../src/user_functions.c **** 
  77:../src/user_functions.c **** 	else{
  78:../src/user_functions.c **** 		record[count] = recieved;
 175                             		.loc 1 78 0
 176 00c9 AF 00 00                		movw	ax, !_count
 177 00cc BD F0                   		movw	r8, ax
 178 00ce 88 08                   		mov	a, [sp+8]
 179 00d0 9D F2                   		mov	r10, a
 180 00d2 DA F0                   		movw	bc, r8
 181 00d4 48 00 00                		mov	_record[bc], a
  79:../src/user_functions.c **** 		count++;
 182                             		.loc 1 79 0
 183 00d7 AF 00 00                		movw	ax, !_count
 184 00da BD F0                   		movw	r8, ax
 185 00dc A6 F0                   		incw	r8
 186 00de AD F0                   		movw	ax, r8
 187 00e0 BF 00 00                		movw	!_count, ax
 188                             	.L3:
  80:../src/user_functions.c **** 	}
  81:../src/user_functions.c **** 
  82:../src/user_functions.c **** 
  83:../src/user_functions.c **** 
  84:../src/user_functions.c **** 	return recieved;
 189                             		.loc 1 84 0
 190 00e3 88 08                   		mov	a, [sp+8]
 191 00e5 9D F0                   		mov	r8, a
  85:../src/user_functions.c **** }
 192                             		.loc 1 85 0
 193 00e7 10 04                   		addw	sp, #4
 194 00e9 D7                      		ret
 195                             	.LFE0:
 197                             		.section	.rodata
 198                             	.LC1:
 199 0008 24 45 30 25 30 32 64 2C 		.string	"$E0%02d,%02d,%0d\r\n"
 199      25 30 32 64 2C 25 30 64 
 199      0D 0A 00 
 200                             	.LC2:
 201 001b 24 49 30 25 64 0D 0A 00 		.string	"$I0%d\r\n"
 202                             	.LC3:
 203 0023 24 25 63 31 0D 0A 00    		.string	"$%c1\r\n"
 204                             	.text
 205                             		.global	_processMSG
 207                             	_processMSG:
 208                             	.LFB1:
  86:../src/user_functions.c **** 
  87:../src/user_functions.c **** void processMSG(){
 209                             		.loc 1 87 0
 210                             		; start of function
 211                             		; locals: 34 bytes
 212                             		; outgoing: 10 bytes
 213 00ea 20 2C                   		subw	sp, #44
 214                             	.LCFI1:
  88:../src/user_functions.c **** 	char ack[3];
  89:../src/user_functions.c **** 	char str[30];
  90:../src/user_functions.c **** 	if(errorTest()){
 215                             		.loc 1 90 0
 216 00ec FC 00 00 00             		call	!!%code(_errorTest)
 217 00f0 AD F0                   		movw	ax, r8
 218 00f2 44 00 00                		cmpw	ax, #0
 219 00f5 61 F8                   		 sknz
 220 00f7 EC 25 07 00             		 br	!!.L9
  91:../src/user_functions.c **** 
  92:../src/user_functions.c **** 		switch(record[1]){
 221                             		.loc 1 92 0
 222 00fb 8F 00 00                		mov	a, !_record+1
 223 00fe 9D F0                   		mov	r8, a
 224 0100 CD F1 00                		mov	r9, #0
 225 0103 AD F0                   		movw	ax, r8
 226 0105 44 42 00                		cmpw	ax, #66
 227 0108 61 F8                   		 sknz
 228 010a EC CC 06 00             		 br	!!.L11
 229 010e AD F0                   		movw	ax, r8
 230 0110 44 42 00                		cmpw	ax, #66
 231 0113 71 FF                   		 xor1	CY, a.7
 232 0115 61 F3                   		 sknh
 233 0117 EC 5C 01 00             		 br	!!.L12
 234 011b AD F0                   		movw	ax, r8
 235 011d 44 31 00                		cmpw	ax, #49
 236 0120 61 F8                   		 sknz
 237 0122 EC 09 02 00             		 br	!!.L13
 238 0126 AD F0                   		movw	ax, r8
 239 0128 44 31 00                		cmpw	ax, #49
 240 012b 71 FF                   		 xor1	CY, a.7
 241 012d 61 F3                   		 sknh
 242 012f EC 42 01 00             		 br	!!.L14
 243 0133 AD F0                   		movw	ax, r8
 244 0135 44 30 00                		cmpw	ax, #48
 245 0138 61 F8                   		 sknz
 246 013a EC A8 01 00             		 br	!!.L15
 247 013e EC 05 07 00             		br	!!.L10
 248                             	.L14:
 249 0142 AD F0                   		movw	ax, r8
 250 0144 44 32 00                		cmpw	ax, #50
 251 0147 61 F8                   		 sknz
 252 0149 EC 6A 02 00             		 br	!!.L16
 253 014d AD F0                   		movw	ax, r8
 254 014f 44 33 00                		cmpw	ax, #51
 255 0152 61 F8                   		 sknz
 256 0154 EC 9E 02 00             		 br	!!.L17
 257 0158 EC 05 07 00             		br	!!.L10
 258                             	.L12:
 259 015c AD F0                   		movw	ax, r8
 260 015e 44 45 00                		cmpw	ax, #69
 261 0161 61 F8                   		 sknz
 262 0163 EC 4B 06 00             		 br	!!.L18
 263 0167 AD F0                   		movw	ax, r8
 264 0169 44 45 00                		cmpw	ax, #69
 265 016c 71 FF                   		 xor1	CY, a.7
 266 016e 61 F3                   		 sknh
 267 0170 EC 8E 01 00             		 br	!!.L19
 268 0174 AD F0                   		movw	ax, r8
 269 0176 44 43 00                		cmpw	ax, #67
 270 0179 61 F8                   		 sknz
 271 017b EC D4 06 00             		 br	!!.L20
 272 017f AD F0                   		movw	ax, r8
 273 0181 44 44 00                		cmpw	ax, #68
 274 0184 61 F8                   		 sknz
 275 0186 EC EC 02 00             		 br	!!.L21
 276 018a EC 05 07 00             		br	!!.L10
 277                             	.L19:
 278 018e AD F0                   		movw	ax, r8
 279 0190 44 49 00                		cmpw	ax, #73
 280 0193 61 F8                   		 sknz
 281 0195 EC DC 06 00             		 br	!!.L22
 282 0199 AD F0                   		movw	ax, r8
 283 019b 44 4C 00                		cmpw	ax, #76
 284 019e 61 F8                   		 sknz
 285 01a0 EC 88 03 00             		 br	!!.L23
 286 01a4 EC 05 07 00             		br	!!.L10
 287                             	.L15:
  93:../src/user_functions.c **** 		case '0': if(mode == 1){
 288                             		.loc 1 93 0
 289 01a8 AF 38 00                		movw	ax, !_mode
 290 01ab BD F0                   		movw	r8, ax
 291 01ad 44 01 00                		cmpw	ax, #1
 292 01b0 61 E8                   		 skz
 293 01b2 EC C2 01 00             		 br	!!.L24
  94:../src/user_functions.c **** 					 ack[0] = '0'; mode = 0;
 294                             		.loc 1 94 0
 295 01b6 51 30                   		mov	a, #48
 296 01b8 98 29                   		mov	[sp+41], a
 297 01ba F6                      		clrw	ax
 298 01bb BF 38 00                		movw	!_mode, ax
 299 01be EC C6 01 00             		br	!!.L25
 300                             	.L24:
  95:../src/user_functions.c **** 				  }
  96:../src/user_functions.c **** 
  97:../src/user_functions.c **** 				  else{
  98:../src/user_functions.c **** 					  ack[0] = '3';
 301                             		.loc 1 98 0
 302 01c2 51 33                   		mov	a, #51
 303 01c4 98 29                   		mov	[sp+41], a
 304                             	.L25:
  99:../src/user_functions.c **** 				  }
 100:../src/user_functions.c **** 
 101:../src/user_functions.c **** 				  ack[1] = '\x0d';
 305                             		.loc 1 101 0
 306 01c6 51 0D                   		mov	a, #13
 307 01c8 98 2A                   		mov	[sp+42], a
 102:../src/user_functions.c **** 				  ack[2] = '\x0a';
 308                             		.loc 1 102 0
 309 01ca 51 0A                   		mov	a, #10
 310 01cc 98 2B                   		mov	[sp+43], a
 103:../src/user_functions.c **** 				  strcpy(response, "$0");
 311                             		.loc 1 103 0
 312 01ce 51 24                   		mov	a, #36
 313 01d0 9F 06 00                		mov	!_response, a
 314 01d3 51 30                   		mov	a, #48
 315 01d5 9F 07 00                		mov	!_response+1, a
 316 01d8 F5 08 00                		clrb	!_response+2
 104:../src/user_functions.c **** 				  strcat(response, ack);
 317                             		.loc 1 104 0
 318 01db 30 06 00                		movw	ax, #_response
 319 01de B8 00                   		movw	[sp], ax
 320 01e0 C9 F0 2C 00             		movw	r8, #44
 321 01e4 AE F8                   		movw	ax, sp
 322 01e6 BD F0                   		movw	r8, ax
 323 01e8 04 2C 00                		addw	ax, #44
 324 01eb BD F0                   		movw	r8, ax
 325 01ed 04 FD FF                		addw	ax, #-3
 326 01f0 B8 02                   		movw	[sp+2], ax
 327 01f2 FC 00 00 00             		call	!!%code(_strcat)
 105:../src/user_functions.c **** 				  recieveInstruction(7);
 328                             		.loc 1 105 0
 329 01f6 30 07 00                		movw	ax, #7
 330 01f9 B8 00                   		movw	[sp], ax
 331 01fb FC 00 00 00             		call	!!%code(_recieveInstruction)
 106:../src/user_functions.c **** 				  count = 5; break;
 332                             		.loc 1 106 0
 333 01ff 30 05 00                		movw	ax, #5
 334 0202 BF 00 00                		movw	!_count, ax
 335 0205 EC 25 07 00             		br	!!.L9
 336                             	.L13:
 107:../src/user_functions.c **** 
 108:../src/user_functions.c **** 
 109:../src/user_functions.c **** 		case '1': if(mode == 0){
 337                             		.loc 1 109 0
 338 0209 AF 38 00                		movw	ax, !_mode
 339 020c BD F0                   		movw	r8, ax
 340 020e 44 00 00                		cmpw	ax, #0
 341 0211 61 E8                   		 skz
 342 0213 EC 23 02 00             		 br	!!.L26
 110:../src/user_functions.c **** 					  ack[0] = '0'; mode = 1;
 343                             		.loc 1 110 0
 344 0217 51 30                   		mov	a, #48
 345 0219 98 29                   		mov	[sp+41], a
 346 021b E6                      		onew	ax
 347 021c BF 38 00                		movw	!_mode, ax
 348 021f EC 27 02 00             		br	!!.L27
 349                             	.L26:
 111:../src/user_functions.c **** 				  }
 112:../src/user_functions.c **** 
 113:../src/user_functions.c **** 		  	  	  else{
 114:../src/user_functions.c **** 		  	  		  ack[0] = '3';
 350                             		.loc 1 114 0
 351 0223 51 33                   		mov	a, #51
 352 0225 98 29                   		mov	[sp+41], a
 353                             	.L27:
 115:../src/user_functions.c **** 		  	  	  }
 116:../src/user_functions.c **** 
 117:../src/user_functions.c **** 				  ack[1] = '\x0d';
 354                             		.loc 1 117 0
 355 0227 51 0D                   		mov	a, #13
 356 0229 98 2A                   		mov	[sp+42], a
 118:../src/user_functions.c **** 				  ack[2] = '\x0a';
 357                             		.loc 1 118 0
 358 022b 51 0A                   		mov	a, #10
 359 022d 98 2B                   		mov	[sp+43], a
 119:../src/user_functions.c **** 				  strcpy(response, "$1");
 360                             		.loc 1 119 0
 361 022f 51 24                   		mov	a, #36
 362 0231 9F 06 00                		mov	!_response, a
 363 0234 51 31                   		mov	a, #49
 364 0236 9F 07 00                		mov	!_response+1, a
 365 0239 F5 08 00                		clrb	!_response+2
 120:../src/user_functions.c **** 				  strcat(response, ack);
 366                             		.loc 1 120 0
 367 023c 30 06 00                		movw	ax, #_response
 368 023f B8 00                   		movw	[sp], ax
 369 0241 C9 F4 2C 00             		movw	r12, #44
 370 0245 AE F8                   		movw	ax, sp
 371 0247 BD F4                   		movw	r12, ax
 372 0249 04 2C 00                		addw	ax, #44
 373 024c BD F4                   		movw	r12, ax
 374 024e 04 FD FF                		addw	ax, #-3
 375 0251 B8 02                   		movw	[sp+2], ax
 376 0253 FC 00 00 00             		call	!!%code(_strcat)
 121:../src/user_functions.c **** 				  recieveInstruction(6);
 377                             		.loc 1 121 0
 378 0257 30 06 00                		movw	ax, #6
 379 025a B8 00                   		movw	[sp], ax
 380 025c FC 00 00 00             		call	!!%code(_recieveInstruction)
 122:../src/user_functions.c **** 				  count = 5; break;
 381                             		.loc 1 122 0
 382 0260 30 05 00                		movw	ax, #5
 383 0263 BF 00 00                		movw	!_count, ax
 384 0266 EC 25 07 00             		br	!!.L9
 385                             	.L16:
 123:../src/user_functions.c **** 
 124:../src/user_functions.c **** 		case '2': strcpy(mem, &record[2]);
 386                             		.loc 1 124 0
 387 026a 30 00 00                		movw	ax, #_mem
 388 026d B8 00                   		movw	[sp], ax
 389 026f 30 00 00                		movw	ax, #_record+2
 390 0272 B8 02                   		movw	[sp+2], ax
 391 0274 FC 00 00 00             		call	!!%code(_strcpy)
 125:../src/user_functions.c **** 				  strcpy(response, "$20\x0d\x0a"); count = 5; break;
 392                             		.loc 1 125 0
 393 0278 51 24                   		mov	a, #36
 394 027a 9F 06 00                		mov	!_response, a
 395 027d 51 32                   		mov	a, #50
 396 027f 9F 07 00                		mov	!_response+1, a
 397 0282 51 30                   		mov	a, #48
 398 0284 9F 08 00                		mov	!_response+2, a
 399 0287 51 0D                   		mov	a, #13
 400 0289 9F 09 00                		mov	!_response+3, a
 401 028c 51 0A                   		mov	a, #10
 402 028e 9F 0A 00                		mov	!_response+4, a
 403 0291 F5 0B 00                		clrb	!_response+5
 404 0294 30 05 00                		movw	ax, #5
 405 0297 BF 00 00                		movw	!_count, ax
 406 029a EC 25 07 00             		br	!!.L9
 407                             	.L17:
 126:../src/user_functions.c **** 
 127:../src/user_functions.c **** 		case '3': strcpy(response, "$3019119038\x0d\x0a"); count = 13; break;
 408                             		.loc 1 127 0
 409 029e 51 24                   		mov	a, #36
 410 02a0 9F 06 00                		mov	!_response, a
 411 02a3 51 33                   		mov	a, #51
 412 02a5 9F 07 00                		mov	!_response+1, a
 413 02a8 51 30                   		mov	a, #48
 414 02aa 9F 08 00                		mov	!_response+2, a
 415 02ad 51 31                   		mov	a, #49
 416 02af 9F 09 00                		mov	!_response+3, a
 417 02b2 51 39                   		mov	a, #57
 418 02b4 9F 0A 00                		mov	!_response+4, a
 419 02b7 51 31                   		mov	a, #49
 420 02b9 9F 0B 00                		mov	!_response+5, a
 421 02bc 51 31                   		mov	a, #49
 422 02be 9F 0C 00                		mov	!_response+6, a
 423 02c1 51 39                   		mov	a, #57
 424 02c3 9F 0D 00                		mov	!_response+7, a
 425 02c6 51 30                   		mov	a, #48
 426 02c8 9F 0E 00                		mov	!_response+8, a
 427 02cb 51 33                   		mov	a, #51
 428 02cd 9F 0F 00                		mov	!_response+9, a
 429 02d0 51 38                   		mov	a, #56
 430 02d2 9F 10 00                		mov	!_response+10, a
 431 02d5 51 0D                   		mov	a, #13
 432 02d7 9F 11 00                		mov	!_response+11, a
 433 02da 51 0A                   		mov	a, #10
 434 02dc 9F 12 00                		mov	!_response+12, a
 435 02df F5 13 00                		clrb	!_response+13
 436 02e2 30 0D 00                		movw	ax, #13
 437 02e5 BF 00 00                		movw	!_count, ax
 438 02e8 EC 25 07 00             		br	!!.L9
 439                             	.L21:
 128:../src/user_functions.c **** 
 129:../src/user_functions.c **** 		case 'D': if(strlen(mem) <= 32){
 440                             		.loc 1 129 0
 441 02ec 30 00 00                		movw	ax, #_mem
 442 02ef B8 00                   		movw	[sp], ax
 443 02f1 FC 00 00 00             		call	!!%code(_strlen)
 444 02f5 AD F0                   		movw	ax, r8
 445 02f7 44 20 00                		cmpw	ax, #32
 446 02fa 61 F3                   		 sknh
 447 02fc EC 3B 03 00             		 br	!!.L28
 130:../src/user_functions.c **** 
 131:../src/user_functions.c **** 					strcpy(response, "$D0\x0d\x0a"); count = 5;
 448                             		.loc 1 131 0
 449 0300 51 24                   		mov	a, #36
 450 0302 9F 06 00                		mov	!_response, a
 451 0305 51 44                   		mov	a, #68
 452 0307 9F 07 00                		mov	!_response+1, a
 453 030a 51 30                   		mov	a, #48
 454 030c 9F 08 00                		mov	!_response+2, a
 455 030f 51 0D                   		mov	a, #13
 456 0311 9F 09 00                		mov	!_response+3, a
 457 0314 51 0A                   		mov	a, #10
 458 0316 9F 0A 00                		mov	!_response+4, a
 459 0319 F5 0B 00                		clrb	!_response+5
 460 031c 30 05 00                		movw	ax, #5
 461 031f BF 00 00                		movw	!_count, ax
 132:../src/user_functions.c **** 
 133:../src/user_functions.c **** 					strcpy(display_string,mem);
 462                             		.loc 1 133 0
 463 0322 30 00 00                		movw	ax, #_display_string
 464 0325 B8 00                   		movw	[sp], ax
 465 0327 30 00 00                		movw	ax, #_mem
 466 032a B8 02                   		movw	[sp+2], ax
 467 032c FC 00 00 00             		call	!!%code(_strcpy)
 134:../src/user_functions.c **** 					displayLCD(1);
 468                             		.loc 1 134 0
 469 0330 E6                      		onew	ax
 470 0331 B8 00                   		movw	[sp], ax
 471 0333 FC 00 00 00             		call	!!%code(_displayLCD)
 135:../src/user_functions.c **** 				  }
 136:../src/user_functions.c **** 				  else{
 137:../src/user_functions.c **** 				    writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 138:../src/user_functions.c **** 					delayNoInt(1640);
 139:../src/user_functions.c **** 
 140:../src/user_functions.c **** 					writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 141:../src/user_functions.c **** 					delayNoInt(1640);
 142:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 143:../src/user_functions.c **** 				  }
 144:../src/user_functions.c **** 				  break;
 472                             		.loc 1 144 0
 473 0337 EC 25 07 00             		br	!!.L9
 474                             	.L28:
 137:../src/user_functions.c **** 					delayNoInt(1640);
 475                             		.loc 1 137 0
 476 033b F1                      		clrb	a
 477 033c 98 00                   		mov	[sp], a
 478 033e E1                      		oneb	a
 479 033f 98 02                   		mov	[sp+2], a
 480 0341 FC 00 00 00             		call	!!%code(_writeByteLcd)
 138:../src/user_functions.c **** 
 481                             		.loc 1 138 0
 482 0345 30 68 06                		movw	ax, #1640
 483 0348 B8 00                   		movw	[sp], ax
 484 034a FC 00 00 00             		call	!!%code(_delayNoInt)
 140:../src/user_functions.c **** 					delayNoInt(1640);
 485                             		.loc 1 140 0
 486 034e F1                      		clrb	a
 487 034f 98 00                   		mov	[sp], a
 488 0351 51 80                   		mov	a, #-128
 489 0353 98 02                   		mov	[sp+2], a
 490 0355 FC 00 00 00             		call	!!%code(_writeByteLcd)
 141:../src/user_functions.c **** 					strcpy(response, "$D3\x0d\x0a"); count = 5;
 491                             		.loc 1 141 0
 492 0359 30 68 06                		movw	ax, #1640
 493 035c B8 00                   		movw	[sp], ax
 494 035e FC 00 00 00             		call	!!%code(_delayNoInt)
 142:../src/user_functions.c **** 				  }
 495                             		.loc 1 142 0
 496 0362 51 24                   		mov	a, #36
 497 0364 9F 06 00                		mov	!_response, a
 498 0367 51 44                   		mov	a, #68
 499 0369 9F 07 00                		mov	!_response+1, a
 500 036c 51 33                   		mov	a, #51
 501 036e 9F 08 00                		mov	!_response+2, a
 502 0371 51 0D                   		mov	a, #13
 503 0373 9F 09 00                		mov	!_response+3, a
 504 0376 51 0A                   		mov	a, #10
 505 0378 9F 0A 00                		mov	!_response+4, a
 506 037b F5 0B 00                		clrb	!_response+5
 507 037e 30 05 00                		movw	ax, #5
 508 0381 BF 00 00                		movw	!_count, ax
 509                             		.loc 1 144 0
 510 0384 EC 25 07 00             		br	!!.L9
 511                             	.L23:
 145:../src/user_functions.c **** 
 146:../src/user_functions.c **** 		case 'L': if(record[2] == '0'){
 512                             		.loc 1 146 0
 513 0388 8F 00 00                		mov	a, !_record+2
 514 038b 9D F0                   		mov	r8, a
 515 038d 4A F0 30                		cmp	r8, #48
 516 0390 61 E8                   		 skz
 517 0392 EC 0D 04 00             		 br	!!.L30
 147:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 518                             		.loc 1 147 0
 519 0396 C9 F0 04 FF             		movw	r8, #-252
 520 039a AD F0                   		movw	ax, r8
 521 039c BD F6                   		movw	r14, ax
 522 039e FA F6                   		movw	hl, r14
 523 03a0 8B                      		mov	a, [hl]
 524 03a1 9D F2                   		mov	r10, a
 525 03a3 5A F2 FD                		and	r10, #-3
 526 03a6 AD F0                   		movw	ax, r8
 527 03a8 BD F4                   		movw	r12, ax
 528 03aa DA F4                   		movw	bc, r12
 529 03ac 8D F2                   		mov	a, r10
 530 03ae 48 00 00                		mov	[bc], a
 148:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 531                             		.loc 1 148 0
 532 03b1 C9 F0 04 FF             		movw	r8, #-252
 533 03b5 AD F0                   		movw	ax, r8
 534 03b7 BD F6                   		movw	r14, ax
 535 03b9 FA F6                   		movw	hl, r14
 536 03bb 8B                      		mov	a, [hl]
 537 03bc 9D F2                   		mov	r10, a
 538 03be 5A F2 FB                		and	r10, #-5
 539 03c1 AD F0                   		movw	ax, r8
 540 03c3 BD F4                   		movw	r12, ax
 541 03c5 DA F4                   		movw	bc, r12
 542 03c7 8D F2                   		mov	a, r10
 543 03c9 48 00 00                		mov	[bc], a
 149:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 544                             		.loc 1 149 0
 545 03cc C9 F0 04 FF             		movw	r8, #-252
 546 03d0 AD F0                   		movw	ax, r8
 547 03d2 BD F6                   		movw	r14, ax
 548 03d4 FA F6                   		movw	hl, r14
 549 03d6 8B                      		mov	a, [hl]
 550 03d7 9D F2                   		mov	r10, a
 551 03d9 5A F2 F7                		and	r10, #-9
 552 03dc AD F0                   		movw	ax, r8
 553 03de BD F4                   		movw	r12, ax
 554 03e0 DA F4                   		movw	bc, r12
 555 03e2 8D F2                   		mov	a, r10
 556 03e4 48 00 00                		mov	[bc], a
 150:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 557                             		.loc 1 150 0
 558 03e7 51 24                   		mov	a, #36
 559 03e9 9F 06 00                		mov	!_response, a
 560 03ec 51 4C                   		mov	a, #76
 561 03ee 9F 07 00                		mov	!_response+1, a
 562 03f1 51 30                   		mov	a, #48
 563 03f3 9F 08 00                		mov	!_response+2, a
 564 03f6 51 0D                   		mov	a, #13
 565 03f8 9F 09 00                		mov	!_response+3, a
 566 03fb 51 0A                   		mov	a, #10
 567 03fd 9F 0A 00                		mov	!_response+4, a
 568 0400 F5 0B 00                		clrb	!_response+5
 569 0403 30 05 00                		movw	ax, #5
 570 0406 BF 00 00                		movw	!_count, ax
 571 0409 EC 47 06 00             		br	!!.L31
 572                             	.L30:
 151:../src/user_functions.c **** 				  }
 152:../src/user_functions.c **** 				  else if(record[2] == '1'){
 573                             		.loc 1 152 0
 574 040d 8F 00 00                		mov	a, !_record+2
 575 0410 9D F0                   		mov	r8, a
 576 0412 4A F0 31                		cmp	r8, #49
 577 0415 61 E8                   		 skz
 578 0417 EC 92 04 00             		 br	!!.L32
 153:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 579                             		.loc 1 153 0
 580 041b C9 F0 04 FF             		movw	r8, #-252
 581 041f AD F0                   		movw	ax, r8
 582 0421 BD F6                   		movw	r14, ax
 583 0423 FA F6                   		movw	hl, r14
 584 0425 8B                      		mov	a, [hl]
 585 0426 9D F2                   		mov	r10, a
 586 0428 5A F2 FD                		and	r10, #-3
 587 042b AD F0                   		movw	ax, r8
 588 042d BD F4                   		movw	r12, ax
 589 042f DA F4                   		movw	bc, r12
 590 0431 8D F2                   		mov	a, r10
 591 0433 48 00 00                		mov	[bc], a
 154:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 592                             		.loc 1 154 0
 593 0436 C9 F0 04 FF             		movw	r8, #-252
 594 043a AD F0                   		movw	ax, r8
 595 043c BD F6                   		movw	r14, ax
 596 043e FA F6                   		movw	hl, r14
 597 0440 8B                      		mov	a, [hl]
 598 0441 9D F2                   		mov	r10, a
 599 0443 5A F2 FB                		and	r10, #-5
 600 0446 AD F0                   		movw	ax, r8
 601 0448 BD F4                   		movw	r12, ax
 602 044a DA F4                   		movw	bc, r12
 603 044c 8D F2                   		mov	a, r10
 604 044e 48 00 00                		mov	[bc], a
 155:../src/user_functions.c **** 					  P4_bit.no3 = 1;
 605                             		.loc 1 155 0
 606 0451 C9 F0 04 FF             		movw	r8, #-252
 607 0455 AD F0                   		movw	ax, r8
 608 0457 BD F6                   		movw	r14, ax
 609 0459 FA F6                   		movw	hl, r14
 610 045b 8B                      		mov	a, [hl]
 611 045c 9D F2                   		mov	r10, a
 612 045e 6A F2 08                		or	r10, #8
 613 0461 AD F0                   		movw	ax, r8
 614 0463 BD F4                   		movw	r12, ax
 615 0465 DA F4                   		movw	bc, r12
 616 0467 8D F2                   		mov	a, r10
 617 0469 48 00 00                		mov	[bc], a
 156:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 618                             		.loc 1 156 0
 619 046c 51 24                   		mov	a, #36
 620 046e 9F 06 00                		mov	!_response, a
 621 0471 51 4C                   		mov	a, #76
 622 0473 9F 07 00                		mov	!_response+1, a
 623 0476 51 30                   		mov	a, #48
 624 0478 9F 08 00                		mov	!_response+2, a
 625 047b 51 0D                   		mov	a, #13
 626 047d 9F 09 00                		mov	!_response+3, a
 627 0480 51 0A                   		mov	a, #10
 628 0482 9F 0A 00                		mov	!_response+4, a
 629 0485 F5 0B 00                		clrb	!_response+5
 630 0488 30 05 00                		movw	ax, #5
 631 048b BF 00 00                		movw	!_count, ax
 632 048e EC 47 06 00             		br	!!.L31
 633                             	.L32:
 157:../src/user_functions.c **** 				  }
 158:../src/user_functions.c **** 				  else if(record[2] == '2'){
 634                             		.loc 1 158 0
 635 0492 8F 00 00                		mov	a, !_record+2
 636 0495 9D F0                   		mov	r8, a
 637 0497 4A F0 32                		cmp	r8, #50
 638 049a 61 E8                   		 skz
 639 049c EC 17 05 00             		 br	!!.L33
 159:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 640                             		.loc 1 159 0
 641 04a0 C9 F0 04 FF             		movw	r8, #-252
 642 04a4 AD F0                   		movw	ax, r8
 643 04a6 BD F6                   		movw	r14, ax
 644 04a8 FA F6                   		movw	hl, r14
 645 04aa 8B                      		mov	a, [hl]
 646 04ab 9D F2                   		mov	r10, a
 647 04ad 6A F2 02                		or	r10, #2
 648 04b0 AD F0                   		movw	ax, r8
 649 04b2 BD F4                   		movw	r12, ax
 650 04b4 DA F4                   		movw	bc, r12
 651 04b6 8D F2                   		mov	a, r10
 652 04b8 48 00 00                		mov	[bc], a
 160:../src/user_functions.c **** 					  P4_bit.no2 = 0;
 653                             		.loc 1 160 0
 654 04bb C9 F0 04 FF             		movw	r8, #-252
 655 04bf AD F0                   		movw	ax, r8
 656 04c1 BD F6                   		movw	r14, ax
 657 04c3 FA F6                   		movw	hl, r14
 658 04c5 8B                      		mov	a, [hl]
 659 04c6 9D F2                   		mov	r10, a
 660 04c8 5A F2 FB                		and	r10, #-5
 661 04cb AD F0                   		movw	ax, r8
 662 04cd BD F4                   		movw	r12, ax
 663 04cf DA F4                   		movw	bc, r12
 664 04d1 8D F2                   		mov	a, r10
 665 04d3 48 00 00                		mov	[bc], a
 161:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 666                             		.loc 1 161 0
 667 04d6 C9 F0 04 FF             		movw	r8, #-252
 668 04da AD F0                   		movw	ax, r8
 669 04dc BD F6                   		movw	r14, ax
 670 04de FA F6                   		movw	hl, r14
 671 04e0 8B                      		mov	a, [hl]
 672 04e1 9D F2                   		mov	r10, a
 673 04e3 5A F2 F7                		and	r10, #-9
 674 04e6 AD F0                   		movw	ax, r8
 675 04e8 BD F4                   		movw	r12, ax
 676 04ea DA F4                   		movw	bc, r12
 677 04ec 8D F2                   		mov	a, r10
 678 04ee 48 00 00                		mov	[bc], a
 162:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 679                             		.loc 1 162 0
 680 04f1 51 24                   		mov	a, #36
 681 04f3 9F 06 00                		mov	!_response, a
 682 04f6 51 4C                   		mov	a, #76
 683 04f8 9F 07 00                		mov	!_response+1, a
 684 04fb 51 30                   		mov	a, #48
 685 04fd 9F 08 00                		mov	!_response+2, a
 686 0500 51 0D                   		mov	a, #13
 687 0502 9F 09 00                		mov	!_response+3, a
 688 0505 51 0A                   		mov	a, #10
 689 0507 9F 0A 00                		mov	!_response+4, a
 690 050a F5 0B 00                		clrb	!_response+5
 691 050d 30 05 00                		movw	ax, #5
 692 0510 BF 00 00                		movw	!_count, ax
 693 0513 EC 47 06 00             		br	!!.L31
 694                             	.L33:
 163:../src/user_functions.c **** 				  }
 164:../src/user_functions.c **** 				  else if(record[2] == '3'){
 695                             		.loc 1 164 0
 696 0517 8F 00 00                		mov	a, !_record+2
 697 051a 9D F0                   		mov	r8, a
 698 051c 4A F0 33                		cmp	r8, #51
 699 051f 61 E8                   		 skz
 700 0521 EC 9C 05 00             		 br	!!.L34
 165:../src/user_functions.c **** 					  P4_bit.no1 = 0;
 701                             		.loc 1 165 0
 702 0525 C9 F0 04 FF             		movw	r8, #-252
 703 0529 AD F0                   		movw	ax, r8
 704 052b BD F6                   		movw	r14, ax
 705 052d FA F6                   		movw	hl, r14
 706 052f 8B                      		mov	a, [hl]
 707 0530 9D F2                   		mov	r10, a
 708 0532 5A F2 FD                		and	r10, #-3
 709 0535 AD F0                   		movw	ax, r8
 710 0537 BD F4                   		movw	r12, ax
 711 0539 DA F4                   		movw	bc, r12
 712 053b 8D F2                   		mov	a, r10
 713 053d 48 00 00                		mov	[bc], a
 166:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 714                             		.loc 1 166 0
 715 0540 C9 F0 04 FF             		movw	r8, #-252
 716 0544 AD F0                   		movw	ax, r8
 717 0546 BD F6                   		movw	r14, ax
 718 0548 FA F6                   		movw	hl, r14
 719 054a 8B                      		mov	a, [hl]
 720 054b 9D F2                   		mov	r10, a
 721 054d 6A F2 04                		or	r10, #4
 722 0550 AD F0                   		movw	ax, r8
 723 0552 BD F4                   		movw	r12, ax
 724 0554 DA F4                   		movw	bc, r12
 725 0556 8D F2                   		mov	a, r10
 726 0558 48 00 00                		mov	[bc], a
 167:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 727                             		.loc 1 167 0
 728 055b C9 F0 04 FF             		movw	r8, #-252
 729 055f AD F0                   		movw	ax, r8
 730 0561 BD F6                   		movw	r14, ax
 731 0563 FA F6                   		movw	hl, r14
 732 0565 8B                      		mov	a, [hl]
 733 0566 9D F2                   		mov	r10, a
 734 0568 5A F2 F7                		and	r10, #-9
 735 056b AD F0                   		movw	ax, r8
 736 056d BD F4                   		movw	r12, ax
 737 056f DA F4                   		movw	bc, r12
 738 0571 8D F2                   		mov	a, r10
 739 0573 48 00 00                		mov	[bc], a
 168:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 740                             		.loc 1 168 0
 741 0576 51 24                   		mov	a, #36
 742 0578 9F 06 00                		mov	!_response, a
 743 057b 51 4C                   		mov	a, #76
 744 057d 9F 07 00                		mov	!_response+1, a
 745 0580 51 30                   		mov	a, #48
 746 0582 9F 08 00                		mov	!_response+2, a
 747 0585 51 0D                   		mov	a, #13
 748 0587 9F 09 00                		mov	!_response+3, a
 749 058a 51 0A                   		mov	a, #10
 750 058c 9F 0A 00                		mov	!_response+4, a
 751 058f F5 0B 00                		clrb	!_response+5
 752 0592 30 05 00                		movw	ax, #5
 753 0595 BF 00 00                		movw	!_count, ax
 754 0598 EC 47 06 00             		br	!!.L31
 755                             	.L34:
 169:../src/user_functions.c **** 				  }
 170:../src/user_functions.c **** 				  else if(record[2] == '4'){
 756                             		.loc 1 170 0
 757 059c 8F 00 00                		mov	a, !_record+2
 758 059f 9D F0                   		mov	r8, a
 759 05a1 4A F0 34                		cmp	r8, #52
 760 05a4 61 E8                   		 skz
 761 05a6 EC 21 06 00             		 br	!!.L35
 171:../src/user_functions.c **** 					  P4_bit.no1 = 1;
 762                             		.loc 1 171 0
 763 05aa C9 F0 04 FF             		movw	r8, #-252
 764 05ae AD F0                   		movw	ax, r8
 765 05b0 BD F6                   		movw	r14, ax
 766 05b2 FA F6                   		movw	hl, r14
 767 05b4 8B                      		mov	a, [hl]
 768 05b5 9D F2                   		mov	r10, a
 769 05b7 6A F2 02                		or	r10, #2
 770 05ba AD F0                   		movw	ax, r8
 771 05bc BD F4                   		movw	r12, ax
 772 05be DA F4                   		movw	bc, r12
 773 05c0 8D F2                   		mov	a, r10
 774 05c2 48 00 00                		mov	[bc], a
 172:../src/user_functions.c **** 					  P4_bit.no2 = 1;
 775                             		.loc 1 172 0
 776 05c5 C9 F0 04 FF             		movw	r8, #-252
 777 05c9 AD F0                   		movw	ax, r8
 778 05cb BD F6                   		movw	r14, ax
 779 05cd FA F6                   		movw	hl, r14
 780 05cf 8B                      		mov	a, [hl]
 781 05d0 9D F2                   		mov	r10, a
 782 05d2 6A F2 04                		or	r10, #4
 783 05d5 AD F0                   		movw	ax, r8
 784 05d7 BD F4                   		movw	r12, ax
 785 05d9 DA F4                   		movw	bc, r12
 786 05db 8D F2                   		mov	a, r10
 787 05dd 48 00 00                		mov	[bc], a
 173:../src/user_functions.c **** 					  P4_bit.no3 = 0;
 788                             		.loc 1 173 0
 789 05e0 C9 F0 04 FF             		movw	r8, #-252
 790 05e4 AD F0                   		movw	ax, r8
 791 05e6 BD F6                   		movw	r14, ax
 792 05e8 FA F6                   		movw	hl, r14
 793 05ea 8B                      		mov	a, [hl]
 794 05eb 9D F2                   		mov	r10, a
 795 05ed 5A F2 F7                		and	r10, #-9
 796 05f0 AD F0                   		movw	ax, r8
 797 05f2 BD F4                   		movw	r12, ax
 798 05f4 DA F4                   		movw	bc, r12
 799 05f6 8D F2                   		mov	a, r10
 800 05f8 48 00 00                		mov	[bc], a
 174:../src/user_functions.c **** 					  strcpy(response, "$L0\x0d\x0a"); count = 5;
 801                             		.loc 1 174 0
 802 05fb 51 24                   		mov	a, #36
 803 05fd 9F 06 00                		mov	!_response, a
 804 0600 51 4C                   		mov	a, #76
 805 0602 9F 07 00                		mov	!_response+1, a
 806 0605 51 30                   		mov	a, #48
 807 0607 9F 08 00                		mov	!_response+2, a
 808 060a 51 0D                   		mov	a, #13
 809 060c 9F 09 00                		mov	!_response+3, a
 810 060f 51 0A                   		mov	a, #10
 811 0611 9F 0A 00                		mov	!_response+4, a
 812 0614 F5 0B 00                		clrb	!_response+5
 813 0617 30 05 00                		movw	ax, #5
 814 061a BF 00 00                		movw	!_count, ax
 815 061d EC 47 06 00             		br	!!.L31
 816                             	.L35:
 175:../src/user_functions.c **** 				  }
 176:../src/user_functions.c **** 				  else{
 177:../src/user_functions.c **** 					  strcpy(response, "$L2\x0d\x0a"); count = 5;
 817                             		.loc 1 177 0
 818 0621 51 24                   		mov	a, #36
 819 0623 9F 06 00                		mov	!_response, a
 820 0626 51 4C                   		mov	a, #76
 821 0628 9F 07 00                		mov	!_response+1, a
 822 062b 51 32                   		mov	a, #50
 823 062d 9F 08 00                		mov	!_response+2, a
 824 0630 51 0D                   		mov	a, #13
 825 0632 9F 09 00                		mov	!_response+3, a
 826 0635 51 0A                   		mov	a, #10
 827 0637 9F 0A 00                		mov	!_response+4, a
 828 063a F5 0B 00                		clrb	!_response+5
 829 063d 30 05 00                		movw	ax, #5
 830 0640 BF 00 00                		movw	!_count, ax
 178:../src/user_functions.c **** 				  }
 179:../src/user_functions.c **** 				  break;
 831                             		.loc 1 179 0
 832 0643 EC 25 07 00             		br	!!.L9
 833                             	.L31:
 834 0647 EC 25 07 00             		br	!!.L9
 835                             	.L18:
 180:../src/user_functions.c **** 		case 'E':
 181:../src/user_functions.c **** 
 182:../src/user_functions.c **** 					 collectADC();
 836                             		.loc 1 182 0
 837 064b FC 00 00 00             		call	!!%code(_collectADC)
 183:../src/user_functions.c **** 					 sprintf(str, "$E0%02d,%02d,%0d\x0d\x0a", voltage, current2, current1);
 838                             		.loc 1 183 0
 839 064f 8F 00 00                		mov	a, !_voltage
 840 0652 9D F0                   		mov	r8, a
 841 0654 70                      		mov	x, a 
 842 0655 51 00                   		mov	a, #0
 843 0657 BD F4                   		movw	r12, ax
 844 0659 8F 00 00                		mov	a, !_current2
 845 065c 9D F0                   		mov	r8, a
 846 065e 70                      		mov	x, a 
 847 065f 51 00                   		mov	a, #0
 848 0661 BD F2                   		movw	r10, ax
 849 0663 8F 00 00                		mov	a, !_current1
 850 0666 9D F0                   		mov	r8, a
 851 0668 CD F1 00                		mov	r9, #0
 852 066b C9 F6 2C 00             		movw	r14, #44
 853 066f AE F8                   		movw	ax, sp
 854 0671 BD F6                   		movw	r14, ax
 855 0673 04 2C 00                		addw	ax, #44
 856 0676 BD F6                   		movw	r14, ax
 857 0678 04 DF FF                		addw	ax, #-33
 858 067b B8 00                   		movw	[sp], ax
 859 067d 30 08 00                		movw	ax, #.LC1
 860 0680 B8 02                   		movw	[sp+2], ax
 861 0682 AD F4                   		movw	ax, r12
 862 0684 B8 04                   		movw	[sp+4], ax
 863 0686 AD F2                   		movw	ax, r10
 864 0688 B8 06                   		movw	[sp+6], ax
 865 068a AD F0                   		movw	ax, r8
 866 068c B8 08                   		movw	[sp+8], ax
 867 068e FC 00 00 00             		call	!!%code(_sprintf)
 184:../src/user_functions.c **** 
 185:../src/user_functions.c **** 	//				  sprintf(str, "%d", voltage);
 186:../src/user_functions.c **** 
 187:../src/user_functions.c **** 					  strcpy(response, str); count = strlen(str);
 868                             		.loc 1 187 0
 869 0692 30 06 00                		movw	ax, #_response
 870 0695 B8 00                   		movw	[sp], ax
 871 0697 C9 F0 2C 00             		movw	r8, #44
 872 069b AE F8                   		movw	ax, sp
 873 069d BD F0                   		movw	r8, ax
 874 069f 04 2C 00                		addw	ax, #44
 875 06a2 BD F0                   		movw	r8, ax
 876 06a4 04 DF FF                		addw	ax, #-33
 877 06a7 B8 02                   		movw	[sp+2], ax
 878 06a9 FC 00 00 00             		call	!!%code(_strcpy)
 879 06ad C9 F4 2C 00             		movw	r12, #44
 880 06b1 AE F8                   		movw	ax, sp
 881 06b3 BD F4                   		movw	r12, ax
 882 06b5 04 2C 00                		addw	ax, #44
 883 06b8 BD F4                   		movw	r12, ax
 884 06ba 04 DF FF                		addw	ax, #-33
 885 06bd B8 00                   		movw	[sp], ax
 886 06bf FC 00 00 00             		call	!!%code(_strlen)
 887 06c3 AD F0                   		movw	ax, r8
 888 06c5 BF 00 00                		movw	!_count, ax
 188:../src/user_functions.c **** 
 189:../src/user_functions.c **** 					  break;
 889                             		.loc 1 189 0
 890 06c8 EC 25 07 00             		br	!!.L9
 891                             	.L11:
 190:../src/user_functions.c **** 
 191:../src/user_functions.c **** 	     case 'B':    setRTC();
 892                             		.loc 1 191 0
 893 06cc FC 00 00 00             		call	!!%code(_setRTC)
 192:../src/user_functions.c **** 					  break;
 894                             		.loc 1 192 0
 895 06d0 EC 25 07 00             		br	!!.L9
 896                             	.L20:
 193:../src/user_functions.c **** 		 case 'C':	  getRTC();
 897                             		.loc 1 193 0
 898 06d4 FC 00 00 00             		call	!!%code(_getRTC)
 194:../src/user_functions.c **** 		 	 	 	  break;
 899                             		.loc 1 194 0
 900 06d8 EC 25 07 00             		br	!!.L9
 901                             	.L22:
 195:../src/user_functions.c **** 		 case 'I':	  sprintf(response, "$I0%d\x0d\x0a", finalTemp);
 902                             		.loc 1 195 0
 903 06dc AF 04 00                		movw	ax, !_finalTemp
 904 06df BD F0                   		movw	r8, ax
 905 06e1 30 06 00                		movw	ax, #_response
 906 06e4 B8 00                   		movw	[sp], ax
 907 06e6 30 1B 00                		movw	ax, #.LC2
 908 06e9 B8 02                   		movw	[sp+2], ax
 909 06eb AD F0                   		movw	ax, r8
 910 06ed B8 04                   		movw	[sp+4], ax
 911 06ef FC 00 00 00             		call	!!%code(_sprintf)
 196:../src/user_functions.c **** 		 	 	 	  count = strlen(response);
 912                             		.loc 1 196 0
 913 06f3 30 06 00                		movw	ax, #_response
 914 06f6 B8 00                   		movw	[sp], ax
 915 06f8 FC 00 00 00             		call	!!%code(_strlen)
 916 06fc AD F0                   		movw	ax, r8
 917 06fe BF 00 00                		movw	!_count, ax
 197:../src/user_functions.c **** 		 	 	 	  break;
 918                             		.loc 1 197 0
 919 0701 EC 25 07 00             		br	!!.L9
 920                             	.L10:
 198:../src/user_functions.c **** 
 199:../src/user_functions.c **** 
 200:../src/user_functions.c **** 		default:
 201:../src/user_functions.c **** 				 sprintf(response, "$%c1\x0d\x0a", record[1]);
 921                             		.loc 1 201 0
 922 0705 8F 00 00                		mov	a, !_record+1
 923 0708 9D F0                   		mov	r8, a
 924 070a CD F1 00                		mov	r9, #0
 925 070d 30 06 00                		movw	ax, #_response
 926 0710 B8 00                   		movw	[sp], ax
 927 0712 30 23 00                		movw	ax, #.LC3
 928 0715 B8 02                   		movw	[sp+2], ax
 929 0717 AD F0                   		movw	ax, r8
 930 0719 B8 04                   		movw	[sp+4], ax
 931 071b FC 00 00 00             		call	!!%code(_sprintf)
 202:../src/user_functions.c **** 				 count = 5;
 932                             		.loc 1 202 0
 933 071f 30 05 00                		movw	ax, #5
 934 0722 BF 00 00                		movw	!_count, ax
 935                             	.L9:
 203:../src/user_functions.c **** //				 strcpy(response, "$");
 204:../src/user_functions.c **** //				 strcat(response, &record[1]);
 205:../src/user_functions.c **** //				 strcat(response, "1\x0d\x0a"); count = 5;
 206:../src/user_functions.c **** 
 207:../src/user_functions.c **** 		}
 208:../src/user_functions.c **** 	}
 209:../src/user_functions.c **** 
 210:../src/user_functions.c **** 	R_UART1_Send(response, count);
 936                             		.loc 1 210 0
 937 0725 AF 00 00                		movw	ax, !_count
 938 0728 BD F0                   		movw	r8, ax
 939 072a 30 06 00                		movw	ax, #_response
 940 072d B8 00                   		movw	[sp], ax
 941 072f AD F0                   		movw	ax, r8
 942 0731 B8 02                   		movw	[sp+2], ax
 943 0733 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 211:../src/user_functions.c **** }
 944                             		.loc 1 211 0
 945 0737 10 2C                   		addw	sp, #44
 946 0739 D7                      		ret
 947                             	.LFE1:
 949                             		.global	_errorTest
 951                             	_errorTest:
 952                             	.LFB2:
 212:../src/user_functions.c **** 
 213:../src/user_functions.c **** int errorTest(){
 953                             		.loc 1 213 0
 954                             		; start of function
 955                             		; locals: 8 bytes
 956                             		; outgoing: 4 bytes
 957 073a 20 0C                   		subw	sp, #12
 958                             	.LCFI2:
 214:../src/user_functions.c **** 
 215:../src/user_functions.c **** //	if(record[1] == '0' || record[1] == '1' ||record[1] == '3'||record[1] == '2' || record[1] == 'D'
 216:../src/user_functions.c **** //	}
 217:../src/user_functions.c **** //	else{
 218:../src/user_functions.c **** //		char validChar[] = {'$',record[1],'1','\x0d','\x0a'};
 219:../src/user_functions.c **** //		strcpy(record, validChar);
 220:../src/user_functions.c **** //		count = 5;
 221:../src/user_functions.c **** //		return 0;
 222:../src/user_functions.c **** //	}
 223:../src/user_functions.c **** 
 224:../src/user_functions.c **** 	if(record[strlen(record) - 1] != '\x0a'){	//INVALID PARAMETERS
 959                             		.loc 1 224 0
 960 073c 30 00 00                		movw	ax, #_record
 961 073f B8 00                   		movw	[sp], ax
 962 0741 FC 00 00 00             		call	!!%code(_strlen)
 963 0745 B6 F0                   		decw	r8
 964 0747 AD F0                   		movw	ax, r8
 965 0749 04 00 00                		addw	ax, #_record
 966 074c 16                      		movw	hl, ax
 967 074d 8B                      		mov	a, [hl]
 968 074e 9D F0                   		mov	r8, a
 969 0750 4A F0 0A                		cmp	r8, #10
 970 0753 61 F8                   		 sknz
 971 0755 EC 98 07 00             		 br	!!.L37
 972                             	.LBB2:
 225:../src/user_functions.c **** 		char validChar[] = {'$',record[1],'2','\x0d','\x0a'};
 973                             		.loc 1 225 0
 974 0759 51 24                   		mov	a, #36
 975 075b 98 07                   		mov	[sp+7], a
 976 075d 8F 00 00                		mov	a, !_record+1
 977 0760 9D F0                   		mov	r8, a
 978 0762 98 08                   		mov	[sp+8], a
 979 0764 51 32                   		mov	a, #50
 980 0766 98 09                   		mov	[sp+9], a
 981 0768 51 0D                   		mov	a, #13
 982 076a 98 0A                   		mov	[sp+10], a
 983 076c 51 0A                   		mov	a, #10
 984 076e 98 0B                   		mov	[sp+11], a
 226:../src/user_functions.c **** 		strcpy(record, validChar);
 985                             		.loc 1 226 0
 986 0770 30 00 00                		movw	ax, #_record
 987 0773 B8 00                   		movw	[sp], ax
 988 0775 C9 F0 0C 00             		movw	r8, #12
 989 0779 AE F8                   		movw	ax, sp
 990 077b BD F0                   		movw	r8, ax
 991 077d 04 0C 00                		addw	ax, #12
 992 0780 BD F0                   		movw	r8, ax
 993 0782 04 FB FF                		addw	ax, #-5
 994 0785 B8 02                   		movw	[sp+2], ax
 995 0787 FC 00 00 00             		call	!!%code(_strcpy)
 227:../src/user_functions.c **** 		count = 5;
 996                             		.loc 1 227 0
 997 078b 30 05 00                		movw	ax, #5
 998 078e BF 00 00                		movw	!_count, ax
 228:../src/user_functions.c **** 		return 0;
 999                             		.loc 1 228 0
 1000 0791 F6                      		clrw	ax
 1001 0792 B8 04                   		movw	[sp+4], ax
 1002 0794 EC 9B 07 00             		br	!!.L38
 1003                             	.L37:
 1004                             	.LBE2:
 229:../src/user_functions.c **** 	}
 230:../src/user_functions.c **** 
 231:../src/user_functions.c **** 	return 1;
 1005                             		.loc 1 231 0
 1006 0798 E6                      		onew	ax
 1007 0799 B8 04                   		movw	[sp+4], ax
 1008                             	.L38:
 1009 079b A8 04                   		movw	ax, [sp+4]
 1010 079d BD F0                   		movw	r8, ax
 232:../src/user_functions.c **** }
 1011                             		.loc 1 232 0 discriminator 1
 1012 079f 10 0C                   		addw	sp, #12
 1013 07a1 D7                      		ret
 1014                             	.LFE2:
 1016                             		.global	_displayLCD
 1018                             	_displayLCD:
 1019                             	.LFB3:
 233:../src/user_functions.c **** //reset >= 1 clears screen and starts over
 234:../src/user_functions.c **** //reset = 0 just keep going
 235:../src/user_functions.c **** 
 236:../src/user_functions.c **** void displayLCD(int reset){
 1020                             		.loc 1 236 0
 1021                             		; start of function
 1022                             		; push 2: r16
 1023                             		; locals: 2 bytes
 1024                             		; outgoing: 4 bytes
 1025 07a2 61 EF                   		sel	rb2
 1026 07a4 C1                      		push	ax ; r16
 1027                             	.LCFI3:
 1028 07a5 61 CF                   		sel	rb0
 1029 07a7 20 06                   		subw	sp, #6
 1030                             	.LCFI4:
 237:../src/user_functions.c **** 
 238:../src/user_functions.c **** if(reset){
 1031                             		.loc 1 238 0
 1032 07a9 A8 0C                   		movw	ax, [sp+12]
 1033 07ab 44 00 00                		cmpw	ax, #0
 1034 07ae 61 F8                   		 sknz
 1035 07b0 EC C0 07 00             		 br	!!.L40
 239:../src/user_functions.c **** 	offset = 0;
 1036                             		.loc 1 239 0
 1037 07b4 F6                      		clrw	ax
 1038 07b5 BF 3C 00                		movw	!_offset, ax
 240:../src/user_functions.c **** 	display = 1;
 1039                             		.loc 1 240 0
 1040 07b8 E6                      		onew	ax
 1041 07b9 BF 3A 00                		movw	!_display, ax
 241:../src/user_functions.c **** 	scrollCount = 0;
 1042                             		.loc 1 241 0
 1043 07bc F6                      		clrw	ax
 1044 07bd BF 00 00                		movw	!_scrollCount, ax
 1045                             	.L40:
 242:../src/user_functions.c **** }
 243:../src/user_functions.c **** 
 244:../src/user_functions.c **** if(display){
 1046                             		.loc 1 244 0
 1047 07c0 AF 3A 00                		movw	ax, !_display
 1048 07c3 BD F0                   		movw	r8, ax
 1049 07c5 44 00 00                		cmpw	ax, #0
 1050 07c8 61 F8                   		 sknz
 1051 07ca EC 7A 08 00             		 br	!!.L41
 1052                             	.LBB3:
 245:../src/user_functions.c **** 
 246:../src/user_functions.c **** 	int i;
 247:../src/user_functions.c **** 
 248:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);
 1053                             		.loc 1 248 0
 1054 07ce F1                      		clrb	a
 1055 07cf 98 00                   		mov	[sp], a
 1056 07d1 E1                      		oneb	a
 1057 07d2 98 02                   		mov	[sp+2], a
 1058 07d4 FC 00 00 00             		call	!!%code(_writeByteLcd)
 249:../src/user_functions.c **** 	delayNoInt(1640);
 1059                             		.loc 1 249 0
 1060 07d8 30 68 06                		movw	ax, #1640
 1061 07db B8 00                   		movw	[sp], ax
 1062 07dd FC 00 00 00             		call	!!%code(_delayNoInt)
 250:../src/user_functions.c **** 
 251:../src/user_functions.c **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 1063                             		.loc 1 251 0
 1064 07e1 F1                      		clrb	a
 1065 07e2 98 00                   		mov	[sp], a
 1066 07e4 51 80                   		mov	a, #-128
 1067 07e6 98 02                   		mov	[sp+2], a
 1068 07e8 FC 00 00 00             		call	!!%code(_writeByteLcd)
 252:../src/user_functions.c **** 	delayNoInt(1640);
 1069                             		.loc 1 252 0
 1070 07ec 30 68 06                		movw	ax, #1640
 1071 07ef B8 00                   		movw	[sp], ax
 1072 07f1 FC 00 00 00             		call	!!%code(_delayNoInt)
 253:../src/user_functions.c **** 
 254:../src/user_functions.c **** 	for(i = offset; i < strlen(display_string) - 2; i++){
 1073                             		.loc 1 254 0
 1074 07f5 AF 3C 00                		movw	ax, !_offset
 1075 07f8 BD F0                   		movw	r8, ax
 1076 07fa B8 04                   		movw	[sp+4], ax
 1077 07fc EC 53 08 00             		br	!!.L42
 1078                             	.L44:
 255:../src/user_functions.c **** 
 256:../src/user_functions.c **** 		if(i == (8 + offset)){
 1079                             		.loc 1 256 0
 1080 0800 AF 3C 00                		movw	ax, !_offset
 1081 0803 BD F0                   		movw	r8, ax
 1082 0805 04 08 00                		addw	ax, #8
 1083 0808 BD F2                   		movw	r10, ax
 1084 080a A8 04                   		movw	ax, [sp+4]
 1085 080c BD F0                   		movw	r8, ax
 1086 080e AD F2                   		movw	ax, r10
 1087 0810 46 F0                   		cmpw	ax, r8
 1088 0812 61 E8                   		 skz
 1089 0814 EC 2C 08 00             		 br	!!.L43
 257:../src/user_functions.c **** 			writeByteLcd(LCD_CTRL_WR, LCD_HOME_L2);
 1090                             		.loc 1 257 0
 1091 0818 F1                      		clrb	a
 1092 0819 98 00                   		mov	[sp], a
 1093 081b 51 C0                   		mov	a, #-64
 1094 081d 98 02                   		mov	[sp+2], a
 1095 081f FC 00 00 00             		call	!!%code(_writeByteLcd)
 258:../src/user_functions.c **** 			delayNoInt(1640);
 1096                             		.loc 1 258 0
 1097 0823 30 68 06                		movw	ax, #1640
 1098 0826 B8 00                   		movw	[sp], ax
 1099 0828 FC 00 00 00             		call	!!%code(_delayNoInt)
 1100                             	.L43:
 259:../src/user_functions.c **** 		}
 260:../src/user_functions.c **** 
 261:../src/user_functions.c **** 		writeByteLcd(LCD_DATA_WR, display_string[i]);
 1101                             		.loc 1 261 0 discriminator 2
 1102 082c A8 04                   		movw	ax, [sp+4]
 1103 082e 04 00 00                		addw	ax, #_display_string
 1104 0831 BD F0                   		movw	r8, ax
 1105 0833 BD F2                   		movw	r10, ax
 1106 0835 FA F2                   		movw	hl, r10
 1107 0837 8B                      		mov	a, [hl]
 1108 0838 9D F0                   		mov	r8, a
 1109 083a E1                      		oneb	a
 1110 083b 98 00                   		mov	[sp], a
 1111 083d 8D F0                   		mov	a, r8
 1112 083f 98 02                   		mov	[sp+2], a
 1113 0841 FC 00 00 00             		call	!!%code(_writeByteLcd)
 262:../src/user_functions.c **** 		delayNoInt(40);
 1114                             		.loc 1 262 0 discriminator 2
 1115 0845 30 28 00                		movw	ax, #40
 1116 0848 B8 00                   		movw	[sp], ax
 1117 084a FC 00 00 00             		call	!!%code(_delayNoInt)
 254:../src/user_functions.c **** 
 1118                             		.loc 1 254 0 discriminator 2
 1119 084e A8 04                   		movw	ax, [sp+4]
 1120 0850 A1                      		incw	ax
 1121 0851 B8 04                   		movw	[sp+4], ax
 1122                             	.L42:
 254:../src/user_functions.c **** 
 1123                             		.loc 1 254 0 is_stmt 0 discriminator 1
 1124 0853 A8 04                   		movw	ax, [sp+4]
 1125 0855 BD E8                   		movw	r16, ax
 1126 0857 30 00 00                		movw	ax, #_display_string
 1127 085a B8 00                   		movw	[sp], ax
 1128 085c FC 00 00 00             		call	!!%code(_strlen)
 1129 0860 B6 F0                   		decw	r8 
 1130 0862 B6 F0                   		decw	r8
 1131 0864 AD E8                   		movw	ax, r16
 1132 0866 46 F0                   		cmpw	ax, r8
 1133 0868 61 D8                   		 sknc
 1134 086a EC 00 08 00             		 br	!!.L44
 263:../src/user_functions.c **** 
 264:../src/user_functions.c **** 	}
 265:../src/user_functions.c **** 	offset++;
 1135                             		.loc 1 265 0 is_stmt 1
 1136 086e AF 3C 00                		movw	ax, !_offset
 1137 0871 BD F0                   		movw	r8, ax
 1138 0873 A6 F0                   		incw	r8
 1139 0875 AD F0                   		movw	ax, r8
 1140 0877 BF 3C 00                		movw	!_offset, ax
 1141                             	.L41:
 1142                             	.LBE3:
 266:../src/user_functions.c **** 
 267:../src/user_functions.c **** }
 268:../src/user_functions.c **** 
 269:../src/user_functions.c **** if(offset >= (strlen(display_string) - 17) || strlen(display_string) <= 18 ){
 1143                             		.loc 1 269 0
 1144 087a AF 3C 00                		movw	ax, !_offset
 1145 087d BD F0                   		movw	r8, ax
 1146 087f BD E8                   		movw	r16, ax
 1147 0881 30 00 00                		movw	ax, #_display_string
 1148 0884 B8 00                   		movw	[sp], ax
 1149 0886 FC 00 00 00             		call	!!%code(_strlen)
 1150 088a AD F0                   		movw	ax, r8
 1151 088c 04 EF FF                		addw	ax, #-17
 1152 088f BD F0                   		movw	r8, ax
 1153 0891 AD E8                   		movw	ax, r16
 1154 0893 46 F0                   		cmpw	ax, r8
 1155 0895 61 C8                   		 skc
 1156 0897 EC AF 08 00             		 br	!!.L45
 1157                             		.loc 1 269 0 is_stmt 0 discriminator 1
 1158 089b 30 00 00                		movw	ax, #_display_string
 1159 089e B8 00                   		movw	[sp], ax
 1160 08a0 FC 00 00 00             		call	!!%code(_strlen)
 1161 08a4 AD F0                   		movw	ax, r8
 1162 08a6 44 12 00                		cmpw	ax, #18
 1163 08a9 61 F3                   		 sknh
 1164 08ab EC B3 08 00             		 br	!!.L39
 1165                             	.L45:
 270:../src/user_functions.c **** 	display = 0;
 1166                             		.loc 1 270 0 is_stmt 1
 1167 08af F6                      		clrw	ax
 1168 08b0 BF 3A 00                		movw	!_display, ax
 1169                             	.L39:
 271:../src/user_functions.c **** }
 272:../src/user_functions.c **** 
 273:../src/user_functions.c **** }
 1170                             		.loc 1 273 0
 1171 08b3 10 06                   		addw	sp, #6
 1172 08b5 61 EF                   		sel	rb2
 1173 08b7 C0                      		pop	ax ; r16
 1174 08b8 61 CF                   		sel	rb0
 1175 08ba D7                      		ret
 1176                             	.LFE3:
 1178                             		.global	_collectADC
 1180                             	_collectADC:
 1181                             	.LFB4:
 274:../src/user_functions.c **** 
 275:../src/user_functions.c **** void collectADC(){
 1182                             		.loc 1 275 0
 1183                             		; start of function
 1184                             		; outgoing: 2 bytes
 1185 08bb 20 02                   		subw	sp, #2
 1186                             	.LCFI5:
 276:../src/user_functions.c **** 
 277:../src/user_functions.c **** 	 ADS = _00_AD_INPUT_CHANNEL_0;
 1187                             		.loc 1 277 0
 1188 08bd C9 F0 31 FF             		movw	r8, #-207
 1189 08c1 AD F0                   		movw	ax, r8
 1190 08c3 BD F2                   		movw	r10, ax
 1191 08c5 DA F2                   		movw	bc, r10
 1192 08c7 F1                      		clrb	a
 1193 08c8 48 00 00                		mov	[bc], a
 278:../src/user_functions.c **** 	 R_ADC_Start();
 1194                             		.loc 1 278 0
 1195 08cb FC 00 00 00             		call	!!%code(_R_ADC_Start)
 279:../src/user_functions.c **** 	 while(ADCS);
 1196                             		.loc 1 279 0
 1197 08cf 00                      		nop
 1198                             	.L48:
 1199                             		.loc 1 279 0 is_stmt 0 discriminator 1
 1200 08d0 C9 F0 30 FF             		movw	r8, #-208
 1201 08d4 AD F0                   		movw	ax, r8
 1202 08d6 BD F2                   		movw	r10, ax
 1203 08d8 FA F2                   		movw	hl, r10
 1204 08da 8B                      		mov	a, [hl]
 1205 08db 9D F0                   		mov	r8, a
 1206 08dd 31 7A                   		shr	a, 7
 1207 08df 9D F0                   		mov	r8, a
 1208 08e1 D4 F0                   		cmp0	r8
 1209 08e3 61 E8                   		 skz
 1210 08e5 EC D0 08 00             		 br	!!.L48
 280:../src/user_functions.c **** 	 R_ADC_Start();
 1211                             		.loc 1 280 0 is_stmt 1
 1212 08e9 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 281:../src/user_functions.c **** 	 while(ADCS);
 1213                             		.loc 1 281 0
 1214 08ed 00                      		nop
 1215                             	.L49:
 1216                             		.loc 1 281 0 is_stmt 0 discriminator 1
 1217 08ee C9 F0 30 FF             		movw	r8, #-208
 1218 08f2 AD F0                   		movw	ax, r8
 1219 08f4 BD F2                   		movw	r10, ax
 1220 08f6 FA F2                   		movw	hl, r10
 1221 08f8 8B                      		mov	a, [hl]
 1222 08f9 9D F0                   		mov	r8, a
 1223 08fb 31 7A                   		shr	a, 7
 1224 08fd 9D F0                   		mov	r8, a
 1225 08ff D4 F0                   		cmp0	r8
 1226 0901 61 E8                   		 skz
 1227 0903 EC EE 08 00             		 br	!!.L49
 282:../src/user_functions.c **** 
 283:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&voltage);
 1228                             		.loc 1 283 0 is_stmt 1
 1229 0907 30 00 00                		movw	ax, #_voltage
 1230 090a B8 00                   		movw	[sp], ax
 1231 090c FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 284:../src/user_functions.c **** 	 voltage = voltage >> 1;
 1232                             		.loc 1 284 0
 1233 0910 8F 00 00                		mov	a, !_voltage
 1234 0913 9D F0                   		mov	r8, a
 1235 0915 31 1A                   		shr	a, 1
 1236 0917 9D F0                   		mov	r8, a
 1237 0919 9F 00 00                		mov	!_voltage, a
 285:../src/user_functions.c **** 
 286:../src/user_functions.c **** 	 ADS = _01_AD_INPUT_CHANNEL_1;
 1238                             		.loc 1 286 0
 1239 091c C9 F0 31 FF             		movw	r8, #-207
 1240 0920 AD F0                   		movw	ax, r8
 1241 0922 BD F2                   		movw	r10, ax
 1242 0924 DA F2                   		movw	bc, r10
 1243 0926 E1                      		oneb	a
 1244 0927 48 00 00                		mov	[bc], a
 287:../src/user_functions.c **** 	 R_ADC_Start();
 1245                             		.loc 1 287 0
 1246 092a FC 00 00 00             		call	!!%code(_R_ADC_Start)
 288:../src/user_functions.c **** 	 while(ADCS);
 1247                             		.loc 1 288 0
 1248 092e 00                      		nop
 1249                             	.L50:
 1250                             		.loc 1 288 0 is_stmt 0 discriminator 1
 1251 092f C9 F0 30 FF             		movw	r8, #-208
 1252 0933 AD F0                   		movw	ax, r8
 1253 0935 BD F2                   		movw	r10, ax
 1254 0937 FA F2                   		movw	hl, r10
 1255 0939 8B                      		mov	a, [hl]
 1256 093a 9D F0                   		mov	r8, a
 1257 093c 31 7A                   		shr	a, 7
 1258 093e 9D F0                   		mov	r8, a
 1259 0940 D4 F0                   		cmp0	r8
 1260 0942 61 E8                   		 skz
 1261 0944 EC 2F 09 00             		 br	!!.L50
 289:../src/user_functions.c **** 	 R_ADC_Start();
 1262                             		.loc 1 289 0 is_stmt 1
 1263 0948 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 290:../src/user_functions.c **** 	 while(ADCS);
 1264                             		.loc 1 290 0
 1265 094c 00                      		nop
 1266                             	.L51:
 1267                             		.loc 1 290 0 is_stmt 0 discriminator 1
 1268 094d C9 F0 30 FF             		movw	r8, #-208
 1269 0951 AD F0                   		movw	ax, r8
 1270 0953 BD F2                   		movw	r10, ax
 1271 0955 FA F2                   		movw	hl, r10
 1272 0957 8B                      		mov	a, [hl]
 1273 0958 9D F0                   		mov	r8, a
 1274 095a 31 7A                   		shr	a, 7
 1275 095c 9D F0                   		mov	r8, a
 1276 095e D4 F0                   		cmp0	r8
 1277 0960 61 E8                   		 skz
 1278 0962 EC 4D 09 00             		 br	!!.L51
 291:../src/user_functions.c **** 
 292:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current1);
 1279                             		.loc 1 292 0 is_stmt 1
 1280 0966 30 00 00                		movw	ax, #_current1
 1281 0969 B8 00                   		movw	[sp], ax
 1282 096b FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 293:../src/user_functions.c **** 	 current1 = current1 >> 2;
 1283                             		.loc 1 293 0
 1284 096f 8F 00 00                		mov	a, !_current1
 1285 0972 9D F0                   		mov	r8, a
 1286 0974 31 2A                   		shr	a, 2
 1287 0976 9D F0                   		mov	r8, a
 1288 0978 9F 00 00                		mov	!_current1, a
 294:../src/user_functions.c **** 
 295:../src/user_functions.c **** 	 ADS = _02_AD_INPUT_CHANNEL_2;
 1289                             		.loc 1 295 0
 1290 097b C9 F0 31 FF             		movw	r8, #-207
 1291 097f AD F0                   		movw	ax, r8
 1292 0981 BD F2                   		movw	r10, ax
 1293 0983 DA F2                   		movw	bc, r10
 1294 0985 51 02                   		mov	a, #2
 1295 0987 48 00 00                		mov	[bc], a
 296:../src/user_functions.c **** 	 R_ADC_Start();
 1296                             		.loc 1 296 0
 1297 098a FC 00 00 00             		call	!!%code(_R_ADC_Start)
 297:../src/user_functions.c **** 	 while(ADCS);
 1298                             		.loc 1 297 0
 1299 098e 00                      		nop
 1300                             	.L52:
 1301                             		.loc 1 297 0 is_stmt 0 discriminator 1
 1302 098f C9 F0 30 FF             		movw	r8, #-208
 1303 0993 AD F0                   		movw	ax, r8
 1304 0995 BD F2                   		movw	r10, ax
 1305 0997 FA F2                   		movw	hl, r10
 1306 0999 8B                      		mov	a, [hl]
 1307 099a 9D F0                   		mov	r8, a
 1308 099c 31 7A                   		shr	a, 7
 1309 099e 9D F0                   		mov	r8, a
 1310 09a0 D4 F0                   		cmp0	r8
 1311 09a2 61 E8                   		 skz
 1312 09a4 EC 8F 09 00             		 br	!!.L52
 298:../src/user_functions.c **** 	 R_ADC_Start();
 1313                             		.loc 1 298 0 is_stmt 1
 1314 09a8 FC 00 00 00             		call	!!%code(_R_ADC_Start)
 299:../src/user_functions.c **** 	 while(ADCS);
 1315                             		.loc 1 299 0
 1316 09ac 00                      		nop
 1317                             	.L53:
 1318                             		.loc 1 299 0 is_stmt 0 discriminator 1
 1319 09ad C9 F0 30 FF             		movw	r8, #-208
 1320 09b1 AD F0                   		movw	ax, r8
 1321 09b3 BD F2                   		movw	r10, ax
 1322 09b5 FA F2                   		movw	hl, r10
 1323 09b7 8B                      		mov	a, [hl]
 1324 09b8 9D F0                   		mov	r8, a
 1325 09ba 31 7A                   		shr	a, 7
 1326 09bc 9D F0                   		mov	r8, a
 1327 09be D4 F0                   		cmp0	r8
 1328 09c0 61 E8                   		 skz
 1329 09c2 EC AD 09 00             		 br	!!.L53
 300:../src/user_functions.c **** 
 301:../src/user_functions.c **** 	 R_ADC_Get_Result_8bit(&current2);
 1330                             		.loc 1 301 0 is_stmt 1
 1331 09c6 30 00 00                		movw	ax, #_current2
 1332 09c9 B8 00                   		movw	[sp], ax
 1333 09cb FC 00 00 00             		call	!!%code(_R_ADC_Get_Result_8bit)
 302:../src/user_functions.c **** 	 current2 = current2 >> 2;
 1334                             		.loc 1 302 0
 1335 09cf 8F 00 00                		mov	a, !_current2
 1336 09d2 9D F0                   		mov	r8, a
 1337 09d4 31 2A                   		shr	a, 2
 1338 09d6 9D F0                   		mov	r8, a
 1339 09d8 9F 00 00                		mov	!_current2, a
 303:../src/user_functions.c **** 
 304:../src/user_functions.c **** }
 1340                             		.loc 1 304 0
 1341 09db 10 02                   		addw	sp, #2
 1342 09dd D7                      		ret
 1343                             	.LFE4:
 1345                             		.global	_setRTC
 1347                             	_setRTC:
 1348                             	.LFB5:
 305:../src/user_functions.c **** 
 306:../src/user_functions.c **** void setRTC(){
 1349                             		.loc 1 306 0
 1350                             		; start of function
 1351                             		; locals: 26 bytes
 1352                             		; outgoing: 8 bytes
 1353 09de 20 22                   		subw	sp, #34
 1354                             	.LCFI6:
 307:../src/user_functions.c **** 	uint8_t date[6] = {0,0,0,0,0,0};
 1355                             		.loc 1 307 0
 1356 09e0 F1                      		clrb	a
 1357 09e1 98 19                   		mov	[sp+25], a
 1358 09e3 F1                      		clrb	a
 1359 09e4 98 1A                   		mov	[sp+26], a
 1360 09e6 F1                      		clrb	a
 1361 09e7 98 1B                   		mov	[sp+27], a
 1362 09e9 F1                      		clrb	a
 1363 09ea 98 1C                   		mov	[sp+28], a
 1364 09ec F1                      		clrb	a
 1365 09ed 98 1D                   		mov	[sp+29], a
 1366 09ef F1                      		clrb	a
 1367 09f0 98 1E                   		mov	[sp+30], a
 308:../src/user_functions.c **** 	uint8_t actualDate[6] = {0,0,0,0,0,0};
 1368                             		.loc 1 308 0
 1369 09f2 F1                      		clrb	a
 1370 09f3 98 13                   		mov	[sp+19], a
 1371 09f5 F1                      		clrb	a
 1372 09f6 98 14                   		mov	[sp+20], a
 1373 09f8 F1                      		clrb	a
 1374 09f9 98 15                   		mov	[sp+21], a
 1375 09fb F1                      		clrb	a
 1376 09fc 98 16                   		mov	[sp+22], a
 1377 09fe F1                      		clrb	a
 1378 09ff 98 17                   		mov	[sp+23], a
 1379 0a01 F1                      		clrb	a
 1380 0a02 98 18                   		mov	[sp+24], a
 309:../src/user_functions.c **** 	count = 4;
 1381                             		.loc 1 309 0
 1382 0a04 30 04 00                		movw	ax, #4
 1383 0a07 BF 00 00                		movw	!_count, ax
 310:../src/user_functions.c **** 	int dateCount = 0;
 1384                             		.loc 1 310 0
 1385 0a0a F6                      		clrw	ax
 1386 0a0b B8 20                   		movw	[sp+32], ax
 311:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 312:../src/user_functions.c **** 
 313:../src/user_functions.c **** 	while(record[count] != '\r'){
 1387                             		.loc 1 313 0
 1388 0a0d EC 52 0B 00             		br	!!.L55
 1389                             	.L57:
 314:../src/user_functions.c **** 
 315:../src/user_functions.c **** 		date[dateCount] += record[count] - '0';
 1390                             		.loc 1 315 0
 1391 0a11 AE F8                   		movw	ax, sp
 1392 0a13 BD F2                   		movw	r10, ax
 1393 0a15 04 19 00                		addw	ax, #25
 1394 0a18 BD F0                   		movw	r8, ax
 1395 0a1a A8 20                   		movw	ax, [sp+32]
 1396 0a1c 06 F0                   		addw	ax, r8
 1397 0a1e BD F0                   		movw	r8, ax
 1398 0a20 BD F4                   		movw	r12, ax
 1399 0a22 FA F4                   		movw	hl, r12
 1400 0a24 8B                      		mov	a, [hl]
 1401 0a25 9D F2                   		mov	r10, a
 1402 0a27 AF 00 00                		movw	ax, !_count
 1403 0a2a BD F0                   		movw	r8, ax
 1404 0a2c 04 00 00                		addw	ax, #_record
 1405 0a2f 16                      		movw	hl, ax
 1406 0a30 8B                      		mov	a, [hl]
 1407 0a31 9D F0                   		mov	r8, a
 1408 0a33 76                      		mov	l, a
 1409 0a34 8D F2                   		mov	a, r10
 1410 0a36 61 0E                   		add	a, l
 1411 0a38 9D F0                   		mov	r8, a
 1412 0a3a 0C D0                   		add	a, #-48
 1413 0a3c 9D F2                   		mov	r10, a
 1414 0a3e AE F8                   		movw	ax, sp
 1415 0a40 BD F4                   		movw	r12, ax
 1416 0a42 04 19 00                		addw	ax, #25
 1417 0a45 BD F0                   		movw	r8, ax
 1418 0a47 A8 20                   		movw	ax, [sp+32]
 1419 0a49 06 F0                   		addw	ax, r8
 1420 0a4b BD F0                   		movw	r8, ax
 1421 0a4d BD F4                   		movw	r12, ax
 1422 0a4f DA F4                   		movw	bc, r12
 1423 0a51 8D F2                   		mov	a, r10
 1424 0a53 48 00 00                		mov	[bc], a
 316:../src/user_functions.c **** 		actualDate[dateCount] += record[count] - '0';
 1425                             		.loc 1 316 0
 1426 0a56 AE F8                   		movw	ax, sp
 1427 0a58 BD F2                   		movw	r10, ax
 1428 0a5a 04 13 00                		addw	ax, #19
 1429 0a5d BD F0                   		movw	r8, ax
 1430 0a5f A8 20                   		movw	ax, [sp+32]
 1431 0a61 06 F0                   		addw	ax, r8
 1432 0a63 BD F0                   		movw	r8, ax
 1433 0a65 BD F4                   		movw	r12, ax
 1434 0a67 FA F4                   		movw	hl, r12
 1435 0a69 8B                      		mov	a, [hl]
 1436 0a6a 9D F2                   		mov	r10, a
 1437 0a6c AF 00 00                		movw	ax, !_count
 1438 0a6f BD F0                   		movw	r8, ax
 1439 0a71 04 00 00                		addw	ax, #_record
 1440 0a74 16                      		movw	hl, ax
 1441 0a75 8B                      		mov	a, [hl]
 1442 0a76 9D F0                   		mov	r8, a
 1443 0a78 76                      		mov	l, a
 1444 0a79 8D F2                   		mov	a, r10
 1445 0a7b 61 0E                   		add	a, l
 1446 0a7d 9D F0                   		mov	r8, a
 1447 0a7f 0C D0                   		add	a, #-48
 1448 0a81 9D F2                   		mov	r10, a
 1449 0a83 AE F8                   		movw	ax, sp
 1450 0a85 BD F4                   		movw	r12, ax
 1451 0a87 04 13 00                		addw	ax, #19
 1452 0a8a BD F0                   		movw	r8, ax
 1453 0a8c A8 20                   		movw	ax, [sp+32]
 1454 0a8e 06 F0                   		addw	ax, r8
 1455 0a90 BD F0                   		movw	r8, ax
 1456 0a92 BD F4                   		movw	r12, ax
 1457 0a94 DA F4                   		movw	bc, r12
 1458 0a96 8D F2                   		mov	a, r10
 1459 0a98 48 00 00                		mov	[bc], a
 317:../src/user_functions.c **** 		count++;
 1460                             		.loc 1 317 0
 1461 0a9b AF 00 00                		movw	ax, !_count
 1462 0a9e BD F0                   		movw	r8, ax
 1463 0aa0 A6 F0                   		incw	r8
 1464 0aa2 AD F0                   		movw	ax, r8
 1465 0aa4 BF 00 00                		movw	!_count, ax
 318:../src/user_functions.c **** 		if(record[count] == ','){
 1466                             		.loc 1 318 0
 1467 0aa7 BD F0                   		movw	r8, ax
 1468 0aa9 04 00 00                		addw	ax, #_record
 1469 0aac 16                      		movw	hl, ax
 1470 0aad 8B                      		mov	a, [hl]
 1471 0aae 9D F0                   		mov	r8, a
 1472 0ab0 4A F0 2C                		cmp	r8, #44
 1473 0ab3 61 E8                   		 skz
 1474 0ab5 EC CE 0A 00             		 br	!!.L56
 319:../src/user_functions.c **** 			dateCount++;
 1475                             		.loc 1 319 0
 1476 0ab9 A8 20                   		movw	ax, [sp+32]
 1477 0abb A1                      		incw	ax
 1478 0abc B8 20                   		movw	[sp+32], ax
 320:../src/user_functions.c **** 			count++;
 1479                             		.loc 1 320 0
 1480 0abe AF 00 00                		movw	ax, !_count
 1481 0ac1 BD F0                   		movw	r8, ax
 1482 0ac3 A6 F0                   		incw	r8
 1483 0ac5 AD F0                   		movw	ax, r8
 1484 0ac7 BF 00 00                		movw	!_count, ax
 1485 0aca EC 52 0B 00             		br	!!.L55
 1486                             	.L56:
 321:../src/user_functions.c **** 		}
 322:../src/user_functions.c **** 		else if(record[count] == '\r'){
 1487                             		.loc 1 322 0
 1488 0ace AF 00 00                		movw	ax, !_count
 1489 0ad1 BD F0                   		movw	r8, ax
 1490 0ad3 04 00 00                		addw	ax, #_record
 1491 0ad6 16                      		movw	hl, ax
 1492 0ad7 8B                      		mov	a, [hl]
 1493 0ad8 9D F0                   		mov	r8, a
 1494 0ada 4A F0 0D                		cmp	r8, #13
 1495 0add 61 F8                   		 sknz
 1496 0adf EC 52 0B 00             		 br	!!.L55
 323:../src/user_functions.c **** 
 324:../src/user_functions.c **** 		}
 325:../src/user_functions.c **** 		else{
 326:../src/user_functions.c **** 			date[dateCount] = date[dateCount]<<4;
 1497                             		.loc 1 326 0
 1498 0ae3 AE F8                   		movw	ax, sp
 1499 0ae5 BD F2                   		movw	r10, ax
 1500 0ae7 04 19 00                		addw	ax, #25
 1501 0aea BD F0                   		movw	r8, ax
 1502 0aec A8 20                   		movw	ax, [sp+32]
 1503 0aee 06 F0                   		addw	ax, r8
 1504 0af0 BD F0                   		movw	r8, ax
 1505 0af2 BD F4                   		movw	r12, ax
 1506 0af4 FA F4                   		movw	hl, r12
 1507 0af6 8B                      		mov	a, [hl]
 1508 0af7 9D F0                   		mov	r8, a
 1509 0af9 31 49                   		shl	a, 4
 1510 0afb 9D F2                   		mov	r10, a
 1511 0afd AE F8                   		movw	ax, sp
 1512 0aff BD F4                   		movw	r12, ax
 1513 0b01 04 19 00                		addw	ax, #25
 1514 0b04 BD F0                   		movw	r8, ax
 1515 0b06 A8 20                   		movw	ax, [sp+32]
 1516 0b08 06 F0                   		addw	ax, r8
 1517 0b0a BD F0                   		movw	r8, ax
 1518 0b0c BD F4                   		movw	r12, ax
 1519 0b0e DA F4                   		movw	bc, r12
 1520 0b10 8D F2                   		mov	a, r10
 1521 0b12 48 00 00                		mov	[bc], a
 327:../src/user_functions.c **** 			actualDate[dateCount] = actualDate[dateCount]*10;
 1522                             		.loc 1 327 0
 1523 0b15 AE F8                   		movw	ax, sp
 1524 0b17 BD F2                   		movw	r10, ax
 1525 0b19 04 13 00                		addw	ax, #19
 1526 0b1c BD F0                   		movw	r8, ax
 1527 0b1e A8 20                   		movw	ax, [sp+32]
 1528 0b20 06 F0                   		addw	ax, r8
 1529 0b22 BD F0                   		movw	r8, ax
 1530 0b24 BD F4                   		movw	r12, ax
 1531 0b26 FA F4                   		movw	hl, r12
 1532 0b28 8B                      		mov	a, [hl]
 1533 0b29 9D F0                   		mov	r8, a
 1534 0b2b 61 01                   		add	a, a
 1535 0b2d 9D F0                   		mov	r8, a
 1536 0b2f 31 29                   		shl	a, 2
 1537 0b31 9D F1                   		mov	r9, a
 1538 0b33 76                      		mov	l, a
 1539 0b34 8D F0                   		mov	a, r8
 1540 0b36 61 0E                   		add	a, l
 1541 0b38 9D F2                   		mov	r10, a
 1542 0b3a AE F8                   		movw	ax, sp
 1543 0b3c BD F4                   		movw	r12, ax
 1544 0b3e 04 13 00                		addw	ax, #19
 1545 0b41 BD F0                   		movw	r8, ax
 1546 0b43 A8 20                   		movw	ax, [sp+32]
 1547 0b45 06 F0                   		addw	ax, r8
 1548 0b47 BD F0                   		movw	r8, ax
 1549 0b49 BD F4                   		movw	r12, ax
 1550 0b4b DA F4                   		movw	bc, r12
 1551 0b4d 8D F2                   		mov	a, r10
 1552 0b4f 48 00 00                		mov	[bc], a
 1553                             	.L55:
 313:../src/user_functions.c **** 
 1554                             		.loc 1 313 0
 1555 0b52 AF 00 00                		movw	ax, !_count
 1556 0b55 BD F0                   		movw	r8, ax
 1557 0b57 04 00 00                		addw	ax, #_record
 1558 0b5a 16                      		movw	hl, ax
 1559 0b5b 8B                      		mov	a, [hl]
 1560 0b5c 9D F0                   		mov	r8, a
 1561 0b5e 4A F0 0D                		cmp	r8, #13
 1562 0b61 61 E8                   		 skz
 1563 0b63 EC 11 0A 00             		 br	!!.L57
 328:../src/user_functions.c **** 		}
 329:../src/user_functions.c **** 
 330:../src/user_functions.c **** 	}
 331:../src/user_functions.c **** 
 332:../src/user_functions.c **** 	if(testDate(actualDate)){
 1564                             		.loc 1 332 0
 1565 0b67 C9 F0 22 00             		movw	r8, #34
 1566 0b6b AE F8                   		movw	ax, sp
 1567 0b6d BD F0                   		movw	r8, ax
 1568 0b6f 04 22 00                		addw	ax, #34
 1569 0b72 BD F0                   		movw	r8, ax
 1570 0b74 04 F1 FF                		addw	ax, #-15
 1571 0b77 B8 00                   		movw	[sp], ax
 1572 0b79 FC 00 00 00             		call	!!%code(_testDate)
 1573 0b7d D4 F0                   		cmp0	r8
 1574 0b7f 61 F8                   		 sknz
 1575 0b81 EC EB 0B 00             		 br	!!.L58
 333:../src/user_functions.c **** 
 334:../src/user_functions.c **** 		theDate.year = date[0];
 1576                             		.loc 1 334 0
 1577 0b85 88 19                   		mov	a, [sp+25]
 1578 0b87 9D F0                   		mov	r8, a
 1579 0b89 98 12                   		mov	[sp+18], a
 335:../src/user_functions.c **** 		theDate.month = date[1];
 1580                             		.loc 1 335 0
 1581 0b8b 88 1A                   		mov	a, [sp+26]
 1582 0b8d 9D F0                   		mov	r8, a
 1583 0b8f 98 11                   		mov	[sp+17], a
 336:../src/user_functions.c **** 		theDate.day = date[2];
 1584                             		.loc 1 336 0
 1585 0b91 88 1B                   		mov	a, [sp+27]
 1586 0b93 9D F0                   		mov	r8, a
 1587 0b95 98 0F                   		mov	[sp+15], a
 337:../src/user_functions.c **** 		theDate.hour = date[3];
 1588                             		.loc 1 337 0
 1589 0b97 88 1C                   		mov	a, [sp+28]
 1590 0b99 9D F0                   		mov	r8, a
 1591 0b9b 98 0E                   		mov	[sp+14], a
 338:../src/user_functions.c **** 		theDate.min = date[4];
 1592                             		.loc 1 338 0
 1593 0b9d 88 1D                   		mov	a, [sp+29]
 1594 0b9f 9D F0                   		mov	r8, a
 1595 0ba1 98 0D                   		mov	[sp+13], a
 339:../src/user_functions.c **** 		theDate.sec = date[5];
 1596                             		.loc 1 339 0
 1597 0ba3 88 1E                   		mov	a, [sp+30]
 1598 0ba5 9D F0                   		mov	r8, a
 1599 0ba7 98 0C                   		mov	[sp+12], a
 340:../src/user_functions.c **** 
 341:../src/user_functions.c **** 		count = 5;
 1600                             		.loc 1 341 0
 1601 0ba9 30 05 00                		movw	ax, #5
 1602 0bac BF 00 00                		movw	!_count, ax
 342:../src/user_functions.c **** 		strcpy(response, "$B0\x0d\x0a");
 1603                             		.loc 1 342 0
 1604 0baf 51 24                   		mov	a, #36
 1605 0bb1 9F 06 00                		mov	!_response, a
 1606 0bb4 51 42                   		mov	a, #66
 1607 0bb6 9F 07 00                		mov	!_response+1, a
 1608 0bb9 51 30                   		mov	a, #48
 1609 0bbb 9F 08 00                		mov	!_response+2, a
 1610 0bbe 51 0D                   		mov	a, #13
 1611 0bc0 9F 09 00                		mov	!_response+3, a
 1612 0bc3 51 0A                   		mov	a, #10
 1613 0bc5 9F 0A 00                		mov	!_response+4, a
 1614 0bc8 F5 0B 00                		clrb	!_response+5
 343:../src/user_functions.c **** 
 344:../src/user_functions.c **** 		R_RTC_Set_CounterValue(theDate);
 1615                             		.loc 1 344 0
 1616 0bcb A8 0C                   		movw	ax, [sp+12]
 1617 0bcd BD F0                   		movw	r8, ax
 1618 0bcf B8 00                   		movw	[sp], ax
 1619 0bd1 A8 0E                   		movw	ax, [sp+14]
 1620 0bd3 BD F0                   		movw	r8, ax
 1621 0bd5 B8 02                   		movw	[sp+2], ax
 1622 0bd7 A8 10                   		movw	ax, [sp+16]
 1623 0bd9 BD F0                   		movw	r8, ax
 1624 0bdb B8 04                   		movw	[sp+4], ax
 1625 0bdd 88 12                   		mov	a, [sp+18]
 1626 0bdf 9D F0                   		mov	r8, a
 1627 0be1 98 06                   		mov	[sp+6], a
 1628 0be3 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 1629 0be7 EC 45 0C 00             		br	!!.L54
 1630                             	.L58:
 1631                             	.LBB4:
 345:../src/user_functions.c **** 	}
 346:../src/user_functions.c **** 	else{
 347:../src/user_functions.c **** 		char str[4];
 348:../src/user_functions.c **** 		uint8_t ack = 0;
 1632                             		.loc 1 348 0
 1633 0beb F1                      		clrb	a
 1634 0bec 98 1F                   		mov	[sp+31], a
 349:../src/user_functions.c **** 		sprintf(str, "$B2\x0d\x0a");
 1635                             		.loc 1 349 0
 1636 0bee AE F8                   		movw	ax, sp
 1637 0bf0 BD F2                   		movw	r10, ax
 1638 0bf2 04 08 00                		addw	ax, #8
 1639 0bf5 BD F0                   		movw	r8, ax
 1640 0bf7 BD F4                   		movw	r12, ax
 1641 0bf9 DA F4                   		movw	bc, r12
 1642 0bfb 30 24 42                		movw	ax, #16932
 1643 0bfe 78 00 00                		movw	[bc], ax
 1644 0c01 DA F0                   		movw	bc, r8
 1645 0c03 30 32 0D                		movw	ax, #3378
 1646 0c06 78 02 00                		movw	2[bc], ax
 1647 0c09 30 0A 00                		movw	ax, #10
 1648 0c0c 78 04 00                		movw	4[bc], ax
 350:../src/user_functions.c **** 		count = strlen(str);
 1649                             		.loc 1 350 0
 1650 0c0f C9 F0 22 00             		movw	r8, #34
 1651 0c13 AE F8                   		movw	ax, sp
 1652 0c15 BD F0                   		movw	r8, ax
 1653 0c17 04 22 00                		addw	ax, #34
 1654 0c1a BD F0                   		movw	r8, ax
 1655 0c1c 04 E6 FF                		addw	ax, #-26
 1656 0c1f B8 00                   		movw	[sp], ax
 1657 0c21 FC 00 00 00             		call	!!%code(_strlen)
 1658 0c25 AD F0                   		movw	ax, r8
 1659 0c27 BF 00 00                		movw	!_count, ax
 351:../src/user_functions.c **** 		strcpy(response, str);
 1660                             		.loc 1 351 0
 1661 0c2a 30 06 00                		movw	ax, #_response
 1662 0c2d B8 00                   		movw	[sp], ax
 1663 0c2f C9 F2 22 00             		movw	r10, #34
 1664 0c33 AE F8                   		movw	ax, sp
 1665 0c35 BD F2                   		movw	r10, ax
 1666 0c37 04 22 00                		addw	ax, #34
 1667 0c3a BD F2                   		movw	r10, ax
 1668 0c3c 04 E6 FF                		addw	ax, #-26
 1669 0c3f B8 02                   		movw	[sp+2], ax
 1670 0c41 FC 00 00 00             		call	!!%code(_strcpy)
 1671                             	.L54:
 1672                             	.LBE4:
 352:../src/user_functions.c **** 
 353:../src/user_functions.c **** 	}
 354:../src/user_functions.c **** 
 355:../src/user_functions.c **** }
 1673                             		.loc 1 355 0
 1674 0c45 10 22                   		addw	sp, #34
 1675 0c47 D7                      		ret
 1676                             	.LFE5:
 1678                             		.section	.rodata
 1679                             	.LC4:
 1680 002a 24 43 30 32 30 25 64 2C 		.string	"$C020%d,%d,%d,%d,%d,%d\r\n"
 1680      25 64 2C 25 64 2C 25 64 
 1680      2C 25 64 2C 25 64 0D 0A 
 1680      00 
 1681                             	.text
 1682                             		.global	_getRTC
 1684                             	_getRTC:
 1685                             	.LFB6:
 356:../src/user_functions.c **** 
 357:../src/user_functions.c **** void getRTC(){
 1686                             		.loc 1 357 0
 1687                             		; start of function
 1688                             		; push 6: r16 r18 r20
 1689                             		; locals: 16 bytes
 1690                             		; outgoing: 16 bytes
 1691 0c48 61 EF                   		sel	rb2
 1692 0c4a C1                      		push	ax ; r16
 1693                             	.LCFI7:
 1694 0c4b C3                      		push	bc ; r18
 1695                             	.LCFI8:
 1696 0c4c C5                      		push	de ; r20
 1697                             	.LCFI9:
 1698 0c4d 61 CF                   		sel	rb0
 1699 0c4f 20 20                   		subw	sp, #32
 1700                             	.LCFI10:
 358:../src/user_functions.c **** 	rtc_counter_value_t theDate;
 359:../src/user_functions.c **** 	uint8_t date[] = {0,0,0,0,0,0};
 1701                             		.loc 1 359 0
 1702 0c51 F1                      		clrb	a
 1703 0c52 98 11                   		mov	[sp+17], a
 1704 0c54 F1                      		clrb	a
 1705 0c55 98 12                   		mov	[sp+18], a
 1706 0c57 F1                      		clrb	a
 1707 0c58 98 13                   		mov	[sp+19], a
 1708 0c5a F1                      		clrb	a
 1709 0c5b 98 14                   		mov	[sp+20], a
 1710 0c5d F1                      		clrb	a
 1711 0c5e 98 15                   		mov	[sp+21], a
 1712 0c60 F1                      		clrb	a
 1713 0c61 98 16                   		mov	[sp+22], a
 360:../src/user_functions.c **** 
 361:../src/user_functions.c **** 
 362:../src/user_functions.c **** 
 363:../src/user_functions.c **** 	R_RTC_Get_CounterValue(&theDate);
 1714                             		.loc 1 363 0
 1715 0c63 C9 F0 20 00             		movw	r8, #32
 1716 0c67 AE F8                   		movw	ax, sp
 1717 0c69 BD F0                   		movw	r8, ax
 1718 0c6b 04 20 00                		addw	ax, #32
 1719 0c6e BD F0                   		movw	r8, ax
 1720 0c70 04 F7 FF                		addw	ax, #-9
 1721 0c73 B8 00                   		movw	[sp], ax
 1722 0c75 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 364:../src/user_functions.c **** 
 365:../src/user_functions.c **** 	date[0] = theDate.year;
 1723                             		.loc 1 365 0
 1724 0c79 88 1D                   		mov	a, [sp+29]
 1725 0c7b 9D F0                   		mov	r8, a
 1726 0c7d 98 11                   		mov	[sp+17], a
 366:../src/user_functions.c **** 	date[1] = theDate.month;
 1727                             		.loc 1 366 0
 1728 0c7f 88 1C                   		mov	a, [sp+28]
 1729 0c81 9D F0                   		mov	r8, a
 1730 0c83 98 12                   		mov	[sp+18], a
 367:../src/user_functions.c **** 	date[2] = theDate.day;
 1731                             		.loc 1 367 0
 1732 0c85 88 1A                   		mov	a, [sp+26]
 1733 0c87 9D F0                   		mov	r8, a
 1734 0c89 98 13                   		mov	[sp+19], a
 368:../src/user_functions.c **** 	date[3] = theDate.hour;
 1735                             		.loc 1 368 0
 1736 0c8b 88 19                   		mov	a, [sp+25]
 1737 0c8d 9D F0                   		mov	r8, a
 1738 0c8f 98 14                   		mov	[sp+20], a
 369:../src/user_functions.c **** 	date[4] = theDate.min;
 1739                             		.loc 1 369 0
 1740 0c91 88 18                   		mov	a, [sp+24]
 1741 0c93 9D F0                   		mov	r8, a
 1742 0c95 98 15                   		mov	[sp+21], a
 370:../src/user_functions.c **** 	date[5] = theDate.sec;
 1743                             		.loc 1 370 0
 1744 0c97 88 17                   		mov	a, [sp+23]
 1745 0c99 9D F0                   		mov	r8, a
 1746 0c9b 98 16                   		mov	[sp+22], a
 371:../src/user_functions.c **** 
 372:../src/user_functions.c **** 	BCDtoDEC(date);
 1747                             		.loc 1 372 0
 1748 0c9d C9 F0 20 00             		movw	r8, #32
 1749 0ca1 AE F8                   		movw	ax, sp
 1750 0ca3 BD F0                   		movw	r8, ax
 1751 0ca5 04 20 00                		addw	ax, #32
 1752 0ca8 BD F0                   		movw	r8, ax
 1753 0caa 04 F1 FF                		addw	ax, #-15
 1754 0cad B8 00                   		movw	[sp], ax
 1755 0caf FC 00 00 00             		call	!!%code(_BCDtoDEC)
 373:../src/user_functions.c **** 
 374:../src/user_functions.c **** 	char *str;
 375:../src/user_functions.c **** 	str = (char *)malloc(32);
 1756                             		.loc 1 375 0
 1757 0cb3 30 20 00                		movw	ax, #32
 1758 0cb6 B8 00                   		movw	[sp], ax
 1759 0cb8 FC 00 00 00             		call	!!%code(_malloc)
 1760 0cbc AD F0                   		movw	ax, r8
 1761 0cbe B8 1E                   		movw	[sp+30], ax
 376:../src/user_functions.c **** 	sprintf(str, "$C020%d,%d,%d,%d,%d,%d\x0d\x0a", date[0], date[1], date[2], date[3], date[4], date[5
 1762                             		.loc 1 376 0
 1763 0cc0 88 11                   		mov	a, [sp+17]
 1764 0cc2 9D F0                   		mov	r8, a
 1765 0cc4 70                      		mov	x, a 
 1766 0cc5 51 00                   		mov	a, #0
 1767 0cc7 BD EC                   		movw	r20, ax
 1768 0cc9 88 12                   		mov	a, [sp+18]
 1769 0ccb 9D F0                   		mov	r8, a
 1770 0ccd 70                      		mov	x, a 
 1771 0cce 51 00                   		mov	a, #0
 1772 0cd0 BD EA                   		movw	r18, ax
 1773 0cd2 88 13                   		mov	a, [sp+19]
 1774 0cd4 9D F0                   		mov	r8, a
 1775 0cd6 70                      		mov	x, a 
 1776 0cd7 51 00                   		mov	a, #0
 1777 0cd9 BD E8                   		movw	r16, ax
 1778 0cdb 88 14                   		mov	a, [sp+20]
 1779 0cdd 9D F0                   		mov	r8, a
 1780 0cdf 70                      		mov	x, a 
 1781 0ce0 51 00                   		mov	a, #0
 1782 0ce2 BD F6                   		movw	r14, ax
 1783 0ce4 88 15                   		mov	a, [sp+21]
 1784 0ce6 9D F0                   		mov	r8, a
 1785 0ce8 70                      		mov	x, a 
 1786 0ce9 51 00                   		mov	a, #0
 1787 0ceb BD F4                   		movw	r12, ax
 1788 0ced 88 16                   		mov	a, [sp+22]
 1789 0cef 9D F0                   		mov	r8, a
 1790 0cf1 70                      		mov	x, a 
 1791 0cf2 51 00                   		mov	a, #0
 1792 0cf4 BD F2                   		movw	r10, ax
 1793 0cf6 A8 1E                   		movw	ax, [sp+30]
 1794 0cf8 BD F0                   		movw	r8, ax
 1795 0cfa B8 00                   		movw	[sp], ax
 1796 0cfc 30 2A 00                		movw	ax, #.LC4
 1797 0cff B8 02                   		movw	[sp+2], ax
 1798 0d01 AD EC                   		movw	ax, r20
 1799 0d03 B8 04                   		movw	[sp+4], ax
 1800 0d05 AD EA                   		movw	ax, r18
 1801 0d07 B8 06                   		movw	[sp+6], ax
 1802 0d09 AD E8                   		movw	ax, r16
 1803 0d0b B8 08                   		movw	[sp+8], ax
 1804 0d0d AD F6                   		movw	ax, r14
 1805 0d0f B8 0A                   		movw	[sp+10], ax
 1806 0d11 AD F4                   		movw	ax, r12
 1807 0d13 B8 0C                   		movw	[sp+12], ax
 1808 0d15 AD F2                   		movw	ax, r10
 1809 0d17 B8 0E                   		movw	[sp+14], ax
 1810 0d19 FC 00 00 00             		call	!!%code(_sprintf)
 377:../src/user_functions.c **** //	free(date);
 378:../src/user_functions.c **** 	count = strlen(str);
 1811                             		.loc 1 378 0
 1812 0d1d A8 1E                   		movw	ax, [sp+30]
 1813 0d1f BD F0                   		movw	r8, ax
 1814 0d21 B8 00                   		movw	[sp], ax
 1815 0d23 FC 00 00 00             		call	!!%code(_strlen)
 1816 0d27 AD F0                   		movw	ax, r8
 1817 0d29 BF 00 00                		movw	!_count, ax
 379:../src/user_functions.c **** 	strcpy(response, str);
 1818                             		.loc 1 379 0
 1819 0d2c 30 06 00                		movw	ax, #_response
 1820 0d2f B8 00                   		movw	[sp], ax
 1821 0d31 A8 1E                   		movw	ax, [sp+30]
 1822 0d33 BD F0                   		movw	r8, ax
 1823 0d35 B8 02                   		movw	[sp+2], ax
 1824 0d37 FC 00 00 00             		call	!!%code(_strcpy)
 380:../src/user_functions.c **** 	free(str);
 1825                             		.loc 1 380 0
 1826 0d3b A8 1E                   		movw	ax, [sp+30]
 1827 0d3d BD F0                   		movw	r8, ax
 1828 0d3f B8 00                   		movw	[sp], ax
 1829 0d41 FC 00 00 00             		call	!!%code(_free)
 381:../src/user_functions.c **** 
 382:../src/user_functions.c **** }
 1830                             		.loc 1 382 0
 1831 0d45 10 20                   		addw	sp, #32
 1832 0d47 61 EF                   		sel	rb2
 1833 0d49 C4                      		pop	de ; r20
 1834 0d4a C2                      		pop	bc ; r18
 1835 0d4b C0                      		pop	ax ; r16
 1836 0d4c 61 CF                   		sel	rb0
 1837 0d4e D7                      		ret
 1838                             	.LFE6:
 1840                             		.global	_BCDtoDEC
 1842                             	_BCDtoDEC:
 1843                             	.LFB7:
 383:../src/user_functions.c **** 
 384:../src/user_functions.c **** void BCDtoDEC(uint8_t arr[]){
 1844                             		.loc 1 384 0
 1845                             		; start of function
 1846                             		; locals: 6 bytes
 1847 0d4f 20 06                   		subw	sp, #6
 1848                             	.LCFI11:
 385:../src/user_functions.c **** 
 386:../src/user_functions.c **** 	uint8_t len =  6;
 1849                             		.loc 1 386 0
 1850 0d51 51 06                   		mov	a, #6
 1851 0d53 98 03                   		mov	[sp+3], a
 387:../src/user_functions.c **** 	uint8_t upper, lower;
 388:../src/user_functions.c **** 	int i;
 389:../src/user_functions.c **** 	for(i = 0; i < len; i++){
 1852                             		.loc 1 389 0
 1853 0d55 F6                      		clrw	ax
 1854 0d56 B8 04                   		movw	[sp+4], ax
 1855 0d58 EC BA 0D 00             		br	!!.L62
 1856                             	.L63:
 390:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1857                             		.loc 1 390 0 discriminator 3
 1858 0d5c A8 04                   		movw	ax, [sp+4]
 1859 0d5e BD F0                   		movw	r8, ax
 1860 0d60 A8 0A                   		movw	ax, [sp+10]
 1861 0d62 06 F0                   		addw	ax, r8
 1862 0d64 BD F0                   		movw	r8, ax
 1863 0d66 BD F2                   		movw	r10, ax
 1864 0d68 FA F2                   		movw	hl, r10
 1865 0d6a 8B                      		mov	a, [hl]
 1866 0d6b 9D F0                   		mov	r8, a
 1867 0d6d 5C 0F                   		and	a, #15
 1868 0d6f 98 02                   		mov	[sp+2], a
 391:../src/user_functions.c **** 		upper = (arr[i] & 0xf0)>>4;
 1869                             		.loc 1 391 0 discriminator 3
 1870 0d71 A8 04                   		movw	ax, [sp+4]
 1871 0d73 BD F0                   		movw	r8, ax
 1872 0d75 A8 0A                   		movw	ax, [sp+10]
 1873 0d77 06 F0                   		addw	ax, r8
 1874 0d79 BD F0                   		movw	r8, ax
 1875 0d7b BD F4                   		movw	r12, ax
 1876 0d7d FA F4                   		movw	hl, r12
 1877 0d7f 8B                      		mov	a, [hl]
 1878 0d80 9D F0                   		mov	r8, a
 1879 0d82 31 4A                   		shr	a, 4
 1880 0d84 98 01                   		mov	[sp+1], a
 392:../src/user_functions.c **** 
 393:../src/user_functions.c **** 		arr[i] = upper*10 + lower;
 1881                             		.loc 1 393 0 discriminator 3
 1882 0d86 A8 04                   		movw	ax, [sp+4]
 1883 0d88 BD F0                   		movw	r8, ax
 1884 0d8a A8 0A                   		movw	ax, [sp+10]
 1885 0d8c 06 F0                   		addw	ax, r8
 1886 0d8e BD F2                   		movw	r10, ax
 1887 0d90 88 01                   		mov	a, [sp+1]
 1888 0d92 9D F0                   		mov	r8, a
 1889 0d94 61 01                   		add	a, a
 1890 0d96 9D F0                   		mov	r8, a
 1891 0d98 31 29                   		shl	a, 2
 1892 0d9a 9D F1                   		mov	r9, a
 1893 0d9c 76                      		mov	l, a
 1894 0d9d 8D F0                   		mov	a, r8
 1895 0d9f 61 0E                   		add	a, l
 1896 0da1 9D F0                   		mov	r8, a
 1897 0da3 76                      		mov	l, a
 1898 0da4 88 02                   		mov	a, [sp+2]
 1899 0da6 61 0E                   		add	a, l
 1900 0da8 9D F0                   		mov	r8, a
 1901 0daa AD F2                   		movw	ax, r10
 1902 0dac BD F4                   		movw	r12, ax
 1903 0dae DA F4                   		movw	bc, r12
 1904 0db0 8D F0                   		mov	a, r8
 1905 0db2 48 00 00                		mov	[bc], a
 389:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1906                             		.loc 1 389 0 discriminator 3
 1907 0db5 A8 04                   		movw	ax, [sp+4]
 1908 0db7 A1                      		incw	ax
 1909 0db8 B8 04                   		movw	[sp+4], ax
 1910                             	.L62:
 389:../src/user_functions.c **** 		lower = arr[i] & 0x0f;
 1911                             		.loc 1 389 0 is_stmt 0 discriminator 1
 1912 0dba 88 03                   		mov	a, [sp+3]
 1913 0dbc 70                      		mov	x, a 
 1914 0dbd 51 00                   		mov	a, #0
 1915 0dbf BD F2                   		movw	r10, ax
 1916 0dc1 A8 04                   		movw	ax, [sp+4]
 1917 0dc3 BD F0                   		movw	r8, ax
 1918 0dc5 AD F2                   		movw	ax, r10
 1919 0dc7 46 F0                   		cmpw	ax, r8
 1920 0dc9 71 FF                   		 xor1	CY, a.7
 1921 0dcb 71 77 F1                		 xor1	CY, r9.7
 1922 0dce 61 F3                   		 sknh
 1923 0dd0 EC 5C 0D 00             		 br	!!.L63
 394:../src/user_functions.c **** 	}
 395:../src/user_functions.c **** }
 1924                             		.loc 1 395 0 is_stmt 1
 1925 0dd4 10 06                   		addw	sp, #6
 1926 0dd6 D7                      		ret
 1927                             	.LFE7:
 1929                             		.global	_testDate
 1931                             	_testDate:
 1932                             	.LFB8:
 396:../src/user_functions.c **** 
 397:../src/user_functions.c **** // arr format [year,month,day,hour,minute,second]
 398:../src/user_functions.c **** uint8_t testDate(uint8_t arr[]){
 1933                             		.loc 1 398 0
 1934                             		; start of function
 1935                             		; locals: 24 bytes
 1936 0dd7 20 18                   		subw	sp, #24
 1937                             	.LCFI12:
 399:../src/user_functions.c **** 
 400:../src/user_functions.c **** 	int daysInMonth[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
 1938                             		.loc 1 400 0
 1939 0dd9 30 1F 00                		movw	ax, #31
 1940 0ddc B8 00                   		movw	[sp], ax
 1941 0dde 30 1C 00                		movw	ax, #28
 1942 0de1 B8 02                   		movw	[sp+2], ax
 1943 0de3 30 1F 00                		movw	ax, #31
 1944 0de6 B8 04                   		movw	[sp+4], ax
 1945 0de8 30 1E 00                		movw	ax, #30
 1946 0deb B8 06                   		movw	[sp+6], ax
 1947 0ded 30 1F 00                		movw	ax, #31
 1948 0df0 B8 08                   		movw	[sp+8], ax
 1949 0df2 30 1E 00                		movw	ax, #30
 1950 0df5 B8 0A                   		movw	[sp+10], ax
 1951 0df7 30 1F 00                		movw	ax, #31
 1952 0dfa B8 0C                   		movw	[sp+12], ax
 1953 0dfc 30 1F 00                		movw	ax, #31
 1954 0dff B8 0E                   		movw	[sp+14], ax
 1955 0e01 30 1E 00                		movw	ax, #30
 1956 0e04 B8 10                   		movw	[sp+16], ax
 1957 0e06 30 1F 00                		movw	ax, #31
 1958 0e09 B8 12                   		movw	[sp+18], ax
 1959 0e0b 30 1E 00                		movw	ax, #30
 1960 0e0e B8 14                   		movw	[sp+20], ax
 1961 0e10 30 1F 00                		movw	ax, #31
 1962 0e13 B8 16                   		movw	[sp+22], ax
 401:../src/user_functions.c **** 
 402:../src/user_functions.c **** 	if(arr[1] > 12){
 1963                             		.loc 1 402 0
 1964 0e15 A8 1C                   		movw	ax, [sp+28]
 1965 0e17 A1                      		incw	ax
 1966 0e18 BD F0                   		movw	r8, ax
 1967 0e1a BD F2                   		movw	r10, ax
 1968 0e1c FA F2                   		movw	hl, r10
 1969 0e1e 8B                      		mov	a, [hl]
 1970 0e1f 9D F0                   		mov	r8, a
 1971 0e21 4A F0 0C                		cmp	r8, #12
 1972 0e24 61 E3                   		 skh
 1973 0e26 EC 30 0E 00             		 br	!!.L65
 403:../src/user_functions.c **** 		return 0;
 1974                             		.loc 1 403 0
 1975 0e2a F4 F0                   		clrb	r8
 1976 0e2c EC E2 0E 00             		br	!!.L71
 1977                             	.L65:
 404:../src/user_functions.c **** 	}
 405:../src/user_functions.c **** 	else if(arr[2] > daysInMonth[arr[1]]){
 1978                             		.loc 1 405 0
 1979 0e30 A8 1C                   		movw	ax, [sp+28]
 1980 0e32 04 02 00                		addw	ax, #2
 1981 0e35 BD F0                   		movw	r8, ax
 1982 0e37 BD F4                   		movw	r12, ax
 1983 0e39 FA F4                   		movw	hl, r12
 1984 0e3b 8B                      		mov	a, [hl]
 1985 0e3c 9D F0                   		mov	r8, a
 1986 0e3e 70                      		mov	x, a 
 1987 0e3f 51 00                   		mov	a, #0
 1988 0e41 BD F2                   		movw	r10, ax
 1989 0e43 A8 1C                   		movw	ax, [sp+28]
 1990 0e45 A1                      		incw	ax
 1991 0e46 BD F0                   		movw	r8, ax
 1992 0e48 BD F4                   		movw	r12, ax
 1993 0e4a FA F4                   		movw	hl, r12
 1994 0e4c 8B                      		mov	a, [hl]
 1995 0e4d 9D F0                   		mov	r8, a
 1996 0e4f CD F1 00                		mov	r9, #0
 1997 0e52 AD F0                   		movw	ax, r8
 1998 0e54 01                      		addw	ax, ax
 1999 0e55 BD F0                   		movw	r8, ax
 2000 0e57 C9 F4 18 00             		movw	r12, #24
 2001 0e5b AE F8                   		movw	ax, sp
 2002 0e5d BD F4                   		movw	r12, ax
 2003 0e5f 04 18 00                		addw	ax, #24
 2004 0e62 BD F4                   		movw	r12, ax
 2005 0e64 06 F0                   		addw	ax, r8
 2006 0e66 BD F0                   		movw	r8, ax
 2007 0e68 04 E8 FF                		addw	ax, #-24
 2008 0e6b BD F0                   		movw	r8, ax
 2009 0e6d BD F4                   		movw	r12, ax
 2010 0e6f FA F4                   		movw	hl, r12
 2011 0e71 AB                      		movw	ax, [hl]
 2012 0e72 BD F0                   		movw	r8, ax
 2013 0e74 AD F2                   		movw	ax, r10
 2014 0e76 46 F0                   		cmpw	ax, r8
 2015 0e78 71 FF                   		 xor1	CY, a.7
 2016 0e7a 71 77 F1                		 xor1	CY, r9.7
 2017 0e7d 61 E3                   		 skh
 2018 0e7f EC 89 0E 00             		 br	!!.L67
 406:../src/user_functions.c **** 		return 0;
 2019                             		.loc 1 406 0
 2020 0e83 F4 F0                   		clrb	r8
 2021 0e85 EC E2 0E 00             		br	!!.L71
 2022                             	.L67:
 407:../src/user_functions.c **** 	}
 408:../src/user_functions.c **** 	else if(arr[3] > 23){
 2023                             		.loc 1 408 0
 2024 0e89 A8 1C                   		movw	ax, [sp+28]
 2025 0e8b 04 03 00                		addw	ax, #3
 2026 0e8e BD F0                   		movw	r8, ax
 2027 0e90 BD F2                   		movw	r10, ax
 2028 0e92 FA F2                   		movw	hl, r10
 2029 0e94 8B                      		mov	a, [hl]
 2030 0e95 9D F0                   		mov	r8, a
 2031 0e97 4A F0 17                		cmp	r8, #23
 2032 0e9a 61 E3                   		 skh
 2033 0e9c EC A6 0E 00             		 br	!!.L68
 409:../src/user_functions.c **** 		return 0;
 2034                             		.loc 1 409 0
 2035 0ea0 F4 F0                   		clrb	r8
 2036 0ea2 EC E2 0E 00             		br	!!.L71
 2037                             	.L68:
 410:../src/user_functions.c **** 	}
 411:../src/user_functions.c **** 	else if(arr[4] > 59){
 2038                             		.loc 1 411 0
 2039 0ea6 A8 1C                   		movw	ax, [sp+28]
 2040 0ea8 04 04 00                		addw	ax, #4
 2041 0eab BD F0                   		movw	r8, ax
 2042 0ead BD F4                   		movw	r12, ax
 2043 0eaf FA F4                   		movw	hl, r12
 2044 0eb1 8B                      		mov	a, [hl]
 2045 0eb2 9D F0                   		mov	r8, a
 2046 0eb4 4A F0 3B                		cmp	r8, #59
 2047 0eb7 61 E3                   		 skh
 2048 0eb9 EC C3 0E 00             		 br	!!.L69
 412:../src/user_functions.c **** 		return 0;
 2049                             		.loc 1 412 0
 2050 0ebd F4 F0                   		clrb	r8
 2051 0ebf EC E2 0E 00             		br	!!.L71
 2052                             	.L69:
 413:../src/user_functions.c **** 	}
 414:../src/user_functions.c **** 	else if(arr[5] > 59){
 2053                             		.loc 1 414 0
 2054 0ec3 A8 1C                   		movw	ax, [sp+28]
 2055 0ec5 04 05 00                		addw	ax, #5
 2056 0ec8 BD F0                   		movw	r8, ax
 2057 0eca BD F2                   		movw	r10, ax
 2058 0ecc FA F2                   		movw	hl, r10
 2059 0ece 8B                      		mov	a, [hl]
 2060 0ecf 9D F0                   		mov	r8, a
 2061 0ed1 4A F0 3B                		cmp	r8, #59
 2062 0ed4 61 E3                   		 skh
 2063 0ed6 EC E0 0E 00             		 br	!!.L70
 415:../src/user_functions.c **** 		return 0;
 2064                             		.loc 1 415 0
 2065 0eda F4 F0                   		clrb	r8
 2066 0edc EC E2 0E 00             		br	!!.L71
 2067                             	.L70:
 416:../src/user_functions.c **** 	}
 417:../src/user_functions.c **** 	else{
 418:../src/user_functions.c **** 		return 1;
 2068                             		.loc 1 418 0
 2069 0ee0 E4 F0                   		oneb	r8
 2070                             	.L71:
 419:../src/user_functions.c **** 
 420:../src/user_functions.c **** 	}
 421:../src/user_functions.c **** 
 422:../src/user_functions.c **** }
 2071                             		.loc 1 422 0 discriminator 1
 2072 0ee2 10 18                   		addw	sp, #24
 2073 0ee4 D7                      		ret
 2074                             	.LFE8:
 2076                             		.global	_checkFlags
 2078                             	_checkFlags:
 2079                             	.LFB9:
 423:../src/user_functions.c **** 
 424:../src/user_functions.c **** void checkFlags(){
 2080                             		.loc 1 424 0
 2081                             		; start of function
 2082                             		; outgoing: 2 bytes
 2083 0ee5 20 02                   		subw	sp, #2
 2084                             	.LCFI13:
 425:../src/user_functions.c **** 	 if(scrollFlag){
 2085                             		.loc 1 425 0
 2086 0ee7 8F 00 00                		mov	a, !_scrollFlag
 2087 0eea 9D F0                   		mov	r8, a
 2088 0eec D4 F0                   		cmp0	r8
 2089 0eee 61 F8                   		 sknz
 2090 0ef0 EC FE 0E 00             		 br	!!.L73
 426:../src/user_functions.c **** 		 scrollFlag = 0;
 2091                             		.loc 1 426 0
 2092 0ef4 F5 00 00                		clrb	!_scrollFlag
 427:../src/user_functions.c **** 		 displayLCD(0);
 2093                             		.loc 1 427 0
 2094 0ef7 F6                      		clrw	ax
 2095 0ef8 B8 00                   		movw	[sp], ax
 2096 0efa FC 00 00 00             		call	!!%code(_displayLCD)
 2097                             	.L73:
 428:../src/user_functions.c **** 	 }
 429:../src/user_functions.c **** 	 if(tempFlag){
 2098                             		.loc 1 429 0
 2099 0efe 8F 00 00                		mov	a, !_tempFlag
 2100 0f01 9D F0                   		mov	r8, a
 2101 0f03 D4 F0                   		cmp0	r8
 2102 0f05 61 F8                   		 sknz
 2103 0f07 EC 64 0F 00             		 br	!!.L72
 430:../src/user_functions.c **** 		 tempFlag = 0;
 2104                             		.loc 1 430 0
 2105 0f0b F5 00 00                		clrb	!_tempFlag
 431:../src/user_functions.c **** 		 P1_bit.no7 = !P1_bit.no7;
 2106                             		.loc 1 431 0
 2107 0f0e C9 F0 01 FF             		movw	r8, #-255
 2108 0f12 C9 F2 01 FF             		movw	r10, #-255
 2109 0f16 AD F2                   		movw	ax, r10
 2110 0f18 BD F4                   		movw	r12, ax
 2111 0f1a FA F4                   		movw	hl, r12
 2112 0f1c 8B                      		mov	a, [hl]
 2113 0f1d 9D F2                   		mov	r10, a
 2114 0f1f 31 7A                   		shr	a, 7
 2115 0f21 9D F2                   		mov	r10, a
 2116 0f23 7A F2 01                		xor	r10, #1
 2117 0f26 8D F2                   		mov	a, r10
 2118 0f28 31 79                   		shl	a, 7
 2119 0f2a 9D F2                   		mov	r10, a
 2120 0f2c AD F0                   		movw	ax, r8
 2121 0f2e BD F4                   		movw	r12, ax
 2122 0f30 FA F4                   		movw	hl, r12
 2123 0f32 8B                      		mov	a, [hl]
 2124 0f33 9D F3                   		mov	r11, a
 2125 0f35 5A F3 7F                		and	r11, #127
 2126 0f38 8D F3                   		mov	a, r11
 2127 0f3a 6B F2                   		or	a, r10
 2128 0f3c 9D F2                   		mov	r10, a
 2129 0f3e AD F0                   		movw	ax, r8
 2130 0f40 DA F4                   		movw	bc, r12
 2131 0f42 8D F2                   		mov	a, r10
 2132 0f44 48 00 00                		mov	[bc], a
 432:../src/user_functions.c **** 
 433:../src/user_functions.c **** 		 if(!P1_bit.no7){
 2133                             		.loc 1 433 0
 2134 0f47 C9 F0 01 FF             		movw	r8, #-255
 2135 0f4b AD F0                   		movw	ax, r8
 2136 0f4d BD F2                   		movw	r10, ax
 2137 0f4f FA F2                   		movw	hl, r10
 2138 0f51 8B                      		mov	a, [hl]
 2139 0f52 9D F0                   		mov	r8, a
 2140 0f54 31 7A                   		shr	a, 7
 2141 0f56 9D F0                   		mov	r8, a
 2142 0f58 D4 F0                   		cmp0	r8
 2143 0f5a 61 E8                   		 skz
 2144 0f5c EC 64 0F 00             		 br	!!.L72
 434:../src/user_functions.c **** 			 setTemp();
 2145                             		.loc 1 434 0
 2146 0f60 FC 00 00 00             		call	!!%code(_setTemp)
 2147                             	.L72:
 435:../src/user_functions.c **** 		 }
 436:../src/user_functions.c **** 	 }
 437:../src/user_functions.c **** }
 2148                             		.loc 1 437 0
 2149 0f64 10 02                   		addw	sp, #2
 2150 0f66 D7                      		ret
 2151                             	.LFE9:
 2153                             		.global	_setTemp
 2155                             	_setTemp:
 2156                             	.LFB10:
 438:../src/user_functions.c **** 
 439:../src/user_functions.c **** void setTemp(){
 2157                             		.loc 1 439 0
 2158                             		; start of function
 2159                             		; locals: 2 bytes
 2160 0f67 20 02                   		subw	sp, #2
 2161                             	.LCFI14:
 440:../src/user_functions.c **** 	uint16_t temp = 4096 - TCR01;
 2162                             		.loc 1 440 0
 2163 0f69 C9 F0 82 01             		movw	r8, #386
 2164 0f6d AD F0                   		movw	ax, r8
 2165 0f6f BD F2                   		movw	r10, ax
 2166 0f71 FA F2                   		movw	hl, r10
 2167 0f73 AB                      		movw	ax, [hl]
 2168 0f74 BD F0                   		movw	r8, ax
 2169 0f76 30 00 10                		movw	ax, #4096
 2170 0f79 26 F0                   		subw	ax, r8
 2171 0f7b B8 00                   		movw	[sp], ax
 441:../src/user_functions.c **** 	finalTemp = temp/16;
 2172                             		.loc 1 441 0
 2173 0f7d BD F0                   		movw	r8, ax
 2174 0f7f 31 4E                   		shrw	ax, 4
 2175 0f81 BD F0                   		movw	r8, ax
 2176 0f83 BF 04 00                		movw	!_finalTemp, ax
 442:../src/user_functions.c **** 	finalTemp -= 50;
 2177                             		.loc 1 442 0
 2178 0f86 BD F0                   		movw	r8, ax
 2179 0f88 04 CE FF                		addw	ax, #-50
 2180 0f8b BD F0                   		movw	r8, ax
 2181 0f8d BF 04 00                		movw	!_finalTemp, ax
 443:../src/user_functions.c **** 	R_TAU0_Channel1_Stop();
 2182                             		.loc 1 443 0
 2183 0f90 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Stop)
 444:../src/user_functions.c **** 	R_TAU0_Channel1_Start();
 2184                             		.loc 1 444 0
 2185 0f94 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Start)
 445:../src/user_functions.c **** 
 446:../src/user_functions.c **** }
 2186                             		.loc 1 446 0
 2187 0f98 10 02                   		addw	sp, #2
 2188 0f9a D7                      		ret
 2189                             	.LFE10:
 2357                             	.Letext0:
 2358                             		.file 2 "../src/iodefine.h"
 2359                             		.file 3 "../src/r_cg_macrodriver.h"
 2360                             		.file 4 "../src/r_cg_rtc.h"
 2361                             		.file 5 "../src/globals.h"
