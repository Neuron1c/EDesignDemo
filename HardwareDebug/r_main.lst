   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_scrollFlag,1,1
  31                             		.comm	_tempFlag,1,1
  32                             		.comm	_scrollCount,2,2
  33                             		.comm	_timerFlag,2,2
  34                             		.comm	_count,2,2
  35                             		.comm	_uart1RxBuf,50,1
  36                             		.comm	_uart1RxCnt,2,2
  37                             		.comm	_uart1RxFlag,1,1
  38                             		.comm	_uart1TxBuf,50,1
  39                             		.comm	_uart1TxCnt,2,2
  40                             		.comm	_uart1TxFlag,1,1
  41                             		.comm	_uart1RxErrFlag,1,1
  42                             		.comm	_uart1RxOvrFlag,1,1
  43                             		.comm	_uart1Status,2,2
  44                             		.global	_main
  46                             	_main:
  47                             	.LFB0:
  48                             		.file 1 "../src/r_main.c"
   1:../src/r_main.c **** /**************************************************************************************************
   2:../src/r_main.c **** * DISCLAIMER
   3:../src/r_main.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_main.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_main.c **** * applicable laws, including copyright laws. 
   6:../src/r_main.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_main.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_main.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_main.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_main.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_main.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_main.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_main.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_main.c **** * following link:
  15:../src/r_main.c **** * http://www.renesas.com/disclaimer
  16:../src/r_main.c **** *
  17:../src/r_main.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_main.c **** ***************************************************************************************************
  19:../src/r_main.c **** 
  20:../src/r_main.c **** /**************************************************************************************************
  21:../src/r_main.c **** * File Name    : r_main.c
  22:../src/r_main.c **** * Version      : CodeGenerator for RL78/G13 V2.03.02.01 [15 May 2015]
  23:../src/r_main.c **** * Device(s)    : R5F100LE
  24:../src/r_main.c **** * Tool-Chain   : GCCRL78
  25:../src/r_main.c **** * Description  : This file implements main function.
  26:../src/r_main.c **** * Creation Date: 2017/05/07
  27:../src/r_main.c **** ***************************************************************************************************
  28:../src/r_main.c **** 
  29:../src/r_main.c **** /**************************************************************************************************
  30:../src/r_main.c **** Includes
  31:../src/r_main.c **** ***************************************************************************************************
  32:../src/r_main.c **** #include "r_cg_macrodriver.h"
  33:../src/r_main.c **** #include "r_cg_cgc.h"
  34:../src/r_main.c **** #include "r_cg_port.h"
  35:../src/r_main.c **** #include "r_cg_serial.h"
  36:../src/r_main.c **** #include "r_cg_adc.h"
  37:../src/r_main.c **** #include "r_cg_timer.h"
  38:../src/r_main.c **** #include "r_cg_rtc.h"
  39:../src/r_main.c **** #include "r_cg_it.h"
  40:../src/r_main.c **** /* Start user code for include. Do not edit comment generated here */
  41:../src/r_main.c **** #include <string.h>
  42:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_main.c **** #include "r_cg_userdefine.h"
  44:../src/r_main.c **** 
  45:../src/r_main.c **** /**************************************************************************************************
  46:../src/r_main.c **** Global variables and functions
  47:../src/r_main.c **** ***************************************************************************************************
  48:../src/r_main.c **** /* Start user code for global. Do not edit comment generated here */
  49:../src/r_main.c **** uint8_t uart1RxBuf[RX_BUF_LEN];
  50:../src/r_main.c **** uint16_t uart1RxCnt;
  51:../src/r_main.c **** uint8_t uart1RxFlag;
  52:../src/r_main.c **** uint8_t uart1TxBuf[TX_BUF_LEN];
  53:../src/r_main.c **** uint16_t uart1TxCnt;
  54:../src/r_main.c **** uint8_t uart1TxFlag;
  55:../src/r_main.c **** uint8_t	uart1RxErrFlag;	// UART2 Receive Error Flag
  56:../src/r_main.c **** uint8_t uart1RxOvrFlag;	// UART2 Receive Overrun Flag
  57:../src/r_main.c **** MD_STATUS uart1Status;
  58:../src/r_main.c **** extern uint8_t display_string[RX_BUF_LEN];
  59:../src/r_main.c **** //extern uint8_t mem[RX_BUF_LEN];
  60:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  61:../src/r_main.c **** void R_MAIN_UserInit(void);
  62:../src/r_main.c **** 
  63:../src/r_main.c **** /**************************************************************************************************
  64:../src/r_main.c **** * Function Name: main
  65:../src/r_main.c **** * Description  : This function implements main function.
  66:../src/r_main.c **** * Arguments    : None
  67:../src/r_main.c **** * Return Value : None
  68:../src/r_main.c **** ***************************************************************************************************
  69:../src/r_main.c **** void main(void)
  70:../src/r_main.c **** {
  49                             		.loc 1 70 0
  50                             		; start of function
  51                             		; locals: 10 bytes
  52                             		; outgoing: 4 bytes
  53 0000 20 0E                   		subw	sp, #14
  54                             	.LCFI0:
  71:../src/r_main.c ****     R_MAIN_UserInit();
  55                             		.loc 1 71 0
  56 0002 FC 00 00 00             		call	!!%code(_R_MAIN_UserInit)
  72:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
  73:../src/r_main.c **** 
  74:../src/r_main.c ****     R_UART1_Create();
  57                             		.loc 1 74 0
  58 0006 FC 00 00 00             		call	!!%code(_R_UART1_Create)
  75:../src/r_main.c ****     R_UART1_Start();
  59                             		.loc 1 75 0
  60 000a FC 00 00 00             		call	!!%code(_R_UART1_Start)
  76:../src/r_main.c **** 
  77:../src/r_main.c ****     R_IT_Create();
  61                             		.loc 1 77 0
  62 000e FC 00 00 00             		call	!!%code(_R_IT_Create)
  78:../src/r_main.c ****     R_IT_Start();
  63                             		.loc 1 78 0
  64 0012 FC 00 00 00             		call	!!%code(_R_IT_Start)
  79:../src/r_main.c **** 
  80:../src/r_main.c ****     R_RTC_Create();
  65                             		.loc 1 80 0
  66 0016 FC 00 00 00             		call	!!%code(_R_RTC_Create)
  81:../src/r_main.c ****     R_RTC_Start();
  67                             		.loc 1 81 0
  68 001a FC 00 00 00             		call	!!%code(_R_RTC_Start)
  82:../src/r_main.c **** 
  83:../src/r_main.c ****     R_TAU0_Create();
  69                             		.loc 1 83 0
  70 001e FC 00 00 00             		call	!!%code(_R_TAU0_Create)
  84:../src/r_main.c ****     R_TAU0_Channel1_Start();
  71                             		.loc 1 84 0
  72 0022 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Start)
  85:../src/r_main.c **** 
  86:../src/r_main.c ****     R_CSI00_Create();
  73                             		.loc 1 86 0
  74 0026 FC 00 00 00             		call	!!%code(_R_CSI00_Create)
  87:../src/r_main.c ****     R_CSI00_Start();
  75                             		.loc 1 87 0
  76 002a FC 00 00 00             		call	!!%code(_R_CSI00_Start)
  88:../src/r_main.c **** 
  89:../src/r_main.c ****     P1_bit.no5 = 1;
  77                             		.loc 1 89 0
  78 002e C9 F0 01 FF             		movw	r8, #-255
  79 0032 AD F0                   		movw	ax, r8
  80 0034 BD F4                   		movw	r12, ax
  81 0036 FA F4                   		movw	hl, r12
  82 0038 8B                      		mov	a, [hl]
  83 0039 9D F2                   		mov	r10, a
  84 003b 6A F2 20                		or	r10, #32
  85 003e AD F0                   		movw	ax, r8
  86 0040 DA F4                   		movw	bc, r12
  87 0042 8D F2                   		mov	a, r10
  88 0044 48 00 00                		mov	[bc], a
  90:../src/r_main.c **** 
  91:../src/r_main.c ****     initLcd();
  89                             		.loc 1 91 0
  90 0047 FC 00 00 00             		call	!!%code(_initLcd)
  92:../src/r_main.c **** 
  93:../src/r_main.c ****     strcpy(display_string,"Potato OS 3.0\x0d\x0a");
  91                             		.loc 1 93 0
  92 004b 51 50                   		mov	a, #80
  93 004d 9F 00 00                		mov	!_display_string, a
  94 0050 51 6F                   		mov	a, #111
  95 0052 9F 00 00                		mov	!_display_string+1, a
  96 0055 51 74                   		mov	a, #116
  97 0057 9F 00 00                		mov	!_display_string+2, a
  98 005a 51 61                   		mov	a, #97
  99 005c 9F 00 00                		mov	!_display_string+3, a
 100 005f 51 74                   		mov	a, #116
 101 0061 9F 00 00                		mov	!_display_string+4, a
 102 0064 51 6F                   		mov	a, #111
 103 0066 9F 00 00                		mov	!_display_string+5, a
 104 0069 51 20                   		mov	a, #32
 105 006b 9F 00 00                		mov	!_display_string+6, a
 106 006e 51 4F                   		mov	a, #79
 107 0070 9F 00 00                		mov	!_display_string+7, a
 108 0073 51 53                   		mov	a, #83
 109 0075 9F 00 00                		mov	!_display_string+8, a
 110 0078 51 20                   		mov	a, #32
 111 007a 9F 00 00                		mov	!_display_string+9, a
 112 007d 51 33                   		mov	a, #51
 113 007f 9F 00 00                		mov	!_display_string+10, a
 114 0082 51 2E                   		mov	a, #46
 115 0084 9F 00 00                		mov	!_display_string+11, a
 116 0087 51 30                   		mov	a, #48
 117 0089 9F 00 00                		mov	!_display_string+12, a
 118 008c 51 0D                   		mov	a, #13
 119 008e 9F 00 00                		mov	!_display_string+13, a
 120 0091 51 0A                   		mov	a, #10
 121 0093 9F 00 00                		mov	!_display_string+14, a
 122 0096 F5 00 00                		clrb	!_display_string+15
  94:../src/r_main.c ****     displayLCD(1);
 123                             		.loc 1 94 0
 124 0099 E6                      		onew	ax
 125 009a B8 00                   		movw	[sp], ax
 126 009c FC 00 00 00             		call	!!%code(_displayLCD)
  95:../src/r_main.c **** 
  96:../src/r_main.c ****     char welcome[] = "Welcome\x0d\x0a";
 127                             		.loc 1 96 0
 128 00a0 30 57 65                		movw	ax, #25943
 129 00a3 B8 04                   		movw	[sp+4], ax
 130 00a5 30 6C 63                		movw	ax, #25452
 131 00a8 B8 06                   		movw	[sp+6], ax
 132 00aa 30 6F 6D                		movw	ax, #28015
 133 00ad B8 08                   		movw	[sp+8], ax
 134 00af 30 65 0D                		movw	ax, #3429
 135 00b2 B8 0A                   		movw	[sp+10], ax
 136 00b4 30 0A 00                		movw	ax, #10
 137 00b7 B8 0C                   		movw	[sp+12], ax
  97:../src/r_main.c ****     R_UART1_Send(welcome,9);
 138                             		.loc 1 97 0
 139 00b9 C9 F0 0E 00             		movw	r8, #14
 140 00bd AE F8                   		movw	ax, sp
 141 00bf BD F0                   		movw	r8, ax
 142 00c1 04 0E 00                		addw	ax, #14
 143 00c4 BD F0                   		movw	r8, ax
 144 00c6 04 F6 FF                		addw	ax, #-10
 145 00c9 B8 00                   		movw	[sp], ax
 146 00cb 30 09 00                		movw	ax, #9
 147 00ce B8 02                   		movw	[sp+2], ax
 148 00d0 FC 00 00 00             		call	!!%code(_R_UART1_Send)
  98:../src/r_main.c **** 
  99:../src/r_main.c ****     uart1Status = R_UART1_Receive(&uart1RxBuf[0],1);
 149                             		.loc 1 99 0
 150 00d4 30 00 00                		movw	ax, #_uart1RxBuf
 151 00d7 B8 00                   		movw	[sp], ax
 152 00d9 E6                      		onew	ax
 153 00da B8 02                   		movw	[sp+2], ax
 154 00dc FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 155 00e0 AD F0                   		movw	ax, r8
 156 00e2 BF 00 00                		movw	!_uart1Status, ax
 157                             	.L8:
 100:../src/r_main.c **** 
 101:../src/r_main.c ****     while (1U)
 102:../src/r_main.c ****     {
 103:../src/r_main.c **** 		 R_ADC_Set_OperationOn();
 158                             		.loc 1 103 0
 159 00e5 FC 00 00 00             		call	!!%code(_R_ADC_Set_OperationOn)
 104:../src/r_main.c **** 
 105:../src/r_main.c **** 		 while(ADCS);
 160                             		.loc 1 105 0
 161 00e9 00                      		nop
 162                             	.L2:
 163                             		.loc 1 105 0 is_stmt 0 discriminator 1
 164 00ea C9 F0 30 FF             		movw	r8, #-208
 165 00ee AD F0                   		movw	ax, r8
 166 00f0 BD F2                   		movw	r10, ax
 167 00f2 FA F2                   		movw	hl, r10
 168 00f4 8B                      		mov	a, [hl]
 169 00f5 9D F0                   		mov	r8, a
 170 00f7 31 7A                   		shr	a, 7
 171 00f9 9D F0                   		mov	r8, a
 172 00fb D4 F0                   		cmp0	r8
 173 00fd 61 E8                   		 skz
 174 00ff EC EA 00 00             		 br	!!.L2
 106:../src/r_main.c **** 
 107:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 5)){
 175                             		.loc 1 107 0 is_stmt 1
 176 0103 30 05 FF                		movw	ax, #-251
 177 0106 B8 00                   		movw	[sp], ax
 178 0108 30 05 00                		movw	ax, #5
 179 010b B8 02                   		movw	[sp+2], ax
 180 010d FC 00 00 00             		call	!!%code(_bounce_correction)
 181 0111 D4 F0                   		cmp0	r8
 182 0113 61 F8                   		 sknz
 183 0115 EC 22 01 00             		 br	!!.L3
 108:../src/r_main.c **** 			 recieveInstruction(5);
 184                             		.loc 1 108 0
 185 0119 30 05 00                		movw	ax, #5
 186 011c B8 00                   		movw	[sp], ax
 187 011e FC 00 00 00             		call	!!%code(_recieveInstruction)
 188                             	.L3:
 109:../src/r_main.c **** 		 }
 110:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 4)){
 189                             		.loc 1 110 0
 190 0122 30 05 FF                		movw	ax, #-251
 191 0125 B8 00                   		movw	[sp], ax
 192 0127 30 04 00                		movw	ax, #4
 193 012a B8 02                   		movw	[sp+2], ax
 194 012c FC 00 00 00             		call	!!%code(_bounce_correction)
 195 0130 D4 F0                   		cmp0	r8
 196 0132 61 F8                   		 sknz
 197 0134 EC 41 01 00             		 br	!!.L4
 111:../src/r_main.c **** 			 recieveInstruction(3);
 198                             		.loc 1 111 0
 199 0138 30 03 00                		movw	ax, #3
 200 013b B8 00                   		movw	[sp], ax
 201 013d FC 00 00 00             		call	!!%code(_recieveInstruction)
 202                             	.L4:
 112:../src/r_main.c **** 		 }
 113:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 3)){
 203                             		.loc 1 113 0
 204 0141 30 05 FF                		movw	ax, #-251
 205 0144 B8 00                   		movw	[sp], ax
 206 0146 30 03 00                		movw	ax, #3
 207 0149 B8 02                   		movw	[sp+2], ax
 208 014b FC 00 00 00             		call	!!%code(_bounce_correction)
 209 014f D4 F0                   		cmp0	r8
 210 0151 61 F8                   		 sknz
 211 0153 EC 60 01 00             		 br	!!.L5
 114:../src/r_main.c **** 			 recieveInstruction(4);
 212                             		.loc 1 114 0
 213 0157 30 04 00                		movw	ax, #4
 214 015a B8 00                   		movw	[sp], ax
 215 015c FC 00 00 00             		call	!!%code(_recieveInstruction)
 216                             	.L5:
 115:../src/r_main.c **** 		 }
 116:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 1)){
 217                             		.loc 1 116 0
 218 0160 30 05 FF                		movw	ax, #-251
 219 0163 B8 00                   		movw	[sp], ax
 220 0165 E6                      		onew	ax
 221 0166 B8 02                   		movw	[sp+2], ax
 222 0168 FC 00 00 00             		call	!!%code(_bounce_correction)
 223 016c D4 F0                   		cmp0	r8
 224 016e 61 F8                   		 sknz
 225 0170 EC 7B 01 00             		 br	!!.L6
 117:../src/r_main.c **** 			 recieveInstruction(1);
 226                             		.loc 1 117 0
 227 0174 E6                      		onew	ax
 228 0175 B8 00                   		movw	[sp], ax
 229 0177 FC 00 00 00             		call	!!%code(_recieveInstruction)
 230                             	.L6:
 118:../src/r_main.c **** 		 }
 119:../src/r_main.c **** 
 120:../src/r_main.c **** 		 checkFlags();
 231                             		.loc 1 120 0
 232 017b FC 00 00 00             		call	!!%code(_checkFlags)
 121:../src/r_main.c **** 
 122:../src/r_main.c ****             if (uart1RxFlag)
 233                             		.loc 1 122 0
 234 017f 8F 00 00                		mov	a, !_uart1RxFlag
 235 0182 9D F0                   		mov	r8, a
 236 0184 D4 F0                   		cmp0	r8
 237 0186 61 F8                   		 sknz
 238 0188 EC AB 01 00             		 br	!!.L7
 123:../src/r_main.c ****             {
 124:../src/r_main.c ****             	uart1RxFlag = 0U;
 239                             		.loc 1 124 0
 240 018c F5 00 00                		clrb	!_uart1RxFlag
 125:../src/r_main.c **** 
 126:../src/r_main.c ****             	populate(uart1RxBuf[0]);
 241                             		.loc 1 126 0
 242 018f 8F 00 00                		mov	a, !_uart1RxBuf
 243 0192 9D F0                   		mov	r8, a
 244 0194 98 00                   		mov	[sp], a
 245 0196 FC 00 00 00             		call	!!%code(_populate)
 127:../src/r_main.c **** 
 128:../src/r_main.c ****                 uart1Status = R_UART1_Receive(uart1RxBuf,1);
 246                             		.loc 1 128 0
 247 019a 30 00 00                		movw	ax, #_uart1RxBuf
 248 019d B8 00                   		movw	[sp], ax
 249 019f E6                      		onew	ax
 250 01a0 B8 02                   		movw	[sp+2], ax
 251 01a2 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 252 01a6 AD F0                   		movw	ax, r8
 253 01a8 BF 00 00                		movw	!_uart1Status, ax
 254                             	.L7:
 129:../src/r_main.c ****             }
 130:../src/r_main.c **** 
 131:../src/r_main.c ****     }
 255                             		.loc 1 131 0
 256 01ab EC E5 00 00             		br	!!.L8
 257                             	.LFE0:
 259                             		.global	_R_MAIN_UserInit
 261                             	_R_MAIN_UserInit:
 262                             	.LFB1:
 132:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 133:../src/r_main.c **** }
 134:../src/r_main.c **** 
 135:../src/r_main.c **** 
 136:../src/r_main.c **** /**************************************************************************************************
 137:../src/r_main.c **** * Function Name: R_MAIN_UserInit
 138:../src/r_main.c **** * Description  : This function adds user code before implementing main function.
 139:../src/r_main.c **** * Arguments    : None
 140:../src/r_main.c **** * Return Value : None
 141:../src/r_main.c **** ***************************************************************************************************
 142:../src/r_main.c **** void R_MAIN_UserInit(void)
 143:../src/r_main.c **** {
 263                             		.loc 1 143 0
 144:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
 145:../src/r_main.c ****     EI();
 264                             		.loc 1 145 0
 265                             	 ; 145 "../src/r_main.c" 1
 266 01af 71 7A FA                		ei
 267                             	 ; 0 "" 2
 146:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 147:../src/r_main.c **** }
 268                             		.loc 1 147 0
 269 01b2 D7                      		ret
 270                             	.LFE1:
 310                             	.Letext0:
 311                             		.file 2 "../src/iodefine.h"
 312                             		.file 3 "../src/r_cg_macrodriver.h"
 313                             		.file 4 "../src/globals.h"
