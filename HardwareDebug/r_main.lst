   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_timerFlag,2,2
  31                             		.comm	_count,2,2
  32                             		.comm	_interval_timer_count,2,2
  33                             		.comm	_uart1RxBuf,50,1
  34                             		.comm	_uart1RxCnt,2,2
  35                             		.comm	_uart1RxFlag,1,1
  36                             		.comm	_uart1TxBuf,50,1
  37                             		.comm	_uart1TxCnt,2,2
  38                             		.comm	_uart1TxFlag,1,1
  39                             		.comm	_uart1RxErrFlag,1,1
  40                             		.comm	_uart1RxOvrFlag,1,1
  41                             		.comm	_uart1Status,2,2
  42                             		.global	_main
  44                             	_main:
  45                             	.LFB0:
  46                             		.file 1 "../src/r_main.c"
   1:../src/r_main.c **** /**************************************************************************************************
   2:../src/r_main.c **** * DISCLAIMER
   3:../src/r_main.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_main.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_main.c **** * applicable laws, including copyright laws. 
   6:../src/r_main.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_main.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_main.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_main.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_main.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_main.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_main.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_main.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_main.c **** * following link:
  15:../src/r_main.c **** * http://www.renesas.com/disclaimer
  16:../src/r_main.c **** *
  17:../src/r_main.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_main.c **** ***************************************************************************************************
  19:../src/r_main.c **** 
  20:../src/r_main.c **** /**************************************************************************************************
  21:../src/r_main.c **** * File Name    : r_main.c
  22:../src/r_main.c **** * Version      : CodeGenerator for RL78/G13 V2.03.02.01 [15 May 2015]
  23:../src/r_main.c **** * Device(s)    : R5F100LE
  24:../src/r_main.c **** * Tool-Chain   : GCCRL78
  25:../src/r_main.c **** * Description  : This file implements main function.
  26:../src/r_main.c **** * Creation Date: 2017/04/12
  27:../src/r_main.c **** ***************************************************************************************************
  28:../src/r_main.c **** 
  29:../src/r_main.c **** /**************************************************************************************************
  30:../src/r_main.c **** Includes
  31:../src/r_main.c **** ***************************************************************************************************
  32:../src/r_main.c **** #include "r_cg_macrodriver.h"
  33:../src/r_main.c **** #include "r_cg_cgc.h"
  34:../src/r_main.c **** #include "r_cg_port.h"
  35:../src/r_main.c **** #include "r_cg_serial.h"
  36:../src/r_main.c **** #include "r_cg_adc.h"
  37:../src/r_main.c **** #include "r_cg_timer.h"
  38:../src/r_main.c **** #include "r_cg_rtc.h"
  39:../src/r_main.c **** #include "r_cg_it.h"
  40:../src/r_main.c **** /* Start user code for include. Do not edit comment generated here */
  41:../src/r_main.c **** #include <string.h>
  42:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_main.c **** #include "r_cg_userdefine.h"
  44:../src/r_main.c **** 
  45:../src/r_main.c **** /**************************************************************************************************
  46:../src/r_main.c **** Global variables and functions
  47:../src/r_main.c **** ***************************************************************************************************
  48:../src/r_main.c **** /* Start user code for global. Do not edit comment generated here */
  49:../src/r_main.c **** uint8_t uart1RxBuf[RX_BUF_LEN];
  50:../src/r_main.c **** uint16_t uart1RxCnt;
  51:../src/r_main.c **** uint8_t uart1RxFlag;
  52:../src/r_main.c **** uint8_t uart1TxBuf[TX_BUF_LEN];
  53:../src/r_main.c **** uint16_t uart1TxCnt;
  54:../src/r_main.c **** uint8_t uart1TxFlag;
  55:../src/r_main.c **** uint8_t	uart1RxErrFlag;	// UART2 Receive Error Flag
  56:../src/r_main.c **** uint8_t uart1RxOvrFlag;	// UART2 Receive Overrun Flag
  57:../src/r_main.c **** MD_STATUS uart1Status;
  58:../src/r_main.c **** //extern uint8_t mem[RX_BUF_LEN];
  59:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  60:../src/r_main.c **** void R_MAIN_UserInit(void);
  61:../src/r_main.c **** 
  62:../src/r_main.c **** /**************************************************************************************************
  63:../src/r_main.c **** * Function Name: main
  64:../src/r_main.c **** * Description  : This function implements main function.
  65:../src/r_main.c **** * Arguments    : None
  66:../src/r_main.c **** * Return Value : None
  67:../src/r_main.c **** ***************************************************************************************************
  68:../src/r_main.c **** void main(void)
  69:../src/r_main.c **** {
  47                             		.loc 1 69 0
  48                             		; start of function
  49                             		; locals: 10 bytes
  50                             		; outgoing: 4 bytes
  51 0000 20 0E                   		subw	sp, #14
  52                             	.LCFI0:
  70:../src/r_main.c ****     R_MAIN_UserInit();
  53                             		.loc 1 70 0
  54 0002 FC 00 00 00             		call	!!%code(_R_MAIN_UserInit)
  71:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
  72:../src/r_main.c **** 
  73:../src/r_main.c ****     R_UART1_Create();
  55                             		.loc 1 73 0
  56 0006 FC 00 00 00             		call	!!%code(_R_UART1_Create)
  74:../src/r_main.c ****     R_UART1_Start();
  57                             		.loc 1 74 0
  58 000a FC 00 00 00             		call	!!%code(_R_UART1_Start)
  75:../src/r_main.c **** 
  76:../src/r_main.c ****     R_IT_Create();
  59                             		.loc 1 76 0
  60 000e FC 00 00 00             		call	!!%code(_R_IT_Create)
  77:../src/r_main.c **** //  R_IT_Start();
  78:../src/r_main.c **** 
  79:../src/r_main.c ****     initLcd();
  61                             		.loc 1 79 0
  62 0012 FC 00 00 00             		call	!!%code(_initLcd)
  80:../src/r_main.c **** 
  81:../src/r_main.c ****     char welcome[] = "Welcome\x0d\x0a";
  63                             		.loc 1 81 0
  64 0016 30 57 65                		movw	ax, #25943
  65 0019 B8 04                   		movw	[sp+4], ax
  66 001b 30 6C 63                		movw	ax, #25452
  67 001e B8 06                   		movw	[sp+6], ax
  68 0020 30 6F 6D                		movw	ax, #28015
  69 0023 B8 08                   		movw	[sp+8], ax
  70 0025 30 65 0D                		movw	ax, #3429
  71 0028 B8 0A                   		movw	[sp+10], ax
  72 002a 30 0A 00                		movw	ax, #10
  73 002d B8 0C                   		movw	[sp+12], ax
  82:../src/r_main.c ****     R_UART1_Send(welcome,9);
  74                             		.loc 1 82 0
  75 002f C9 F0 0E 00             		movw	r8, #14
  76 0033 AE F8                   		movw	ax, sp
  77 0035 BD F0                   		movw	r8, ax
  78 0037 04 0E 00                		addw	ax, #14
  79 003a BD F0                   		movw	r8, ax
  80 003c 04 F6 FF                		addw	ax, #-10
  81 003f B8 00                   		movw	[sp], ax
  82 0041 30 09 00                		movw	ax, #9
  83 0044 B8 02                   		movw	[sp+2], ax
  84 0046 FC 00 00 00             		call	!!%code(_R_UART1_Send)
  83:../src/r_main.c **** 
  84:../src/r_main.c ****     uart1Status = R_UART1_Receive(&uart1RxBuf[0],1);
  85                             		.loc 1 84 0
  86 004a 30 00 00                		movw	ax, #_uart1RxBuf
  87 004d B8 00                   		movw	[sp], ax
  88 004f E6                      		onew	ax
  89 0050 B8 02                   		movw	[sp+2], ax
  90 0052 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
  91 0056 AD F0                   		movw	ax, r8
  92 0058 BF 00 00                		movw	!_uart1Status, ax
  93                             	.L8:
  85:../src/r_main.c **** 
  86:../src/r_main.c ****     while (1U)
  87:../src/r_main.c ****     {
  88:../src/r_main.c **** 		 R_ADC_Set_OperationOn();
  94                             		.loc 1 88 0
  95 005b FC 00 00 00             		call	!!%code(_R_ADC_Set_OperationOn)
  89:../src/r_main.c **** 
  90:../src/r_main.c **** 		 while(ADCS);
  96                             		.loc 1 90 0
  97 005f 00                      		nop
  98                             	.L2:
  99                             		.loc 1 90 0 is_stmt 0 discriminator 1
 100 0060 C9 F0 30 FF             		movw	r8, #-208
 101 0064 AD F0                   		movw	ax, r8
 102 0066 BD F2                   		movw	r10, ax
 103 0068 FA F2                   		movw	hl, r10
 104 006a 8B                      		mov	a, [hl]
 105 006b 9D F0                   		mov	r8, a
 106 006d 31 7A                   		shr	a, 7
 107 006f 9D F0                   		mov	r8, a
 108 0071 D4 F0                   		cmp0	r8
 109 0073 61 E8                   		 skz
 110 0075 EC 60 00 00             		 br	!!.L2
  91:../src/r_main.c **** 
  92:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 5)){
 111                             		.loc 1 92 0 is_stmt 1
 112 0079 30 05 FF                		movw	ax, #-251
 113 007c B8 00                   		movw	[sp], ax
 114 007e 30 05 00                		movw	ax, #5
 115 0081 B8 02                   		movw	[sp+2], ax
 116 0083 FC 00 00 00             		call	!!%code(_bounce_correction)
 117 0087 D4 F0                   		cmp0	r8
 118 0089 61 F8                   		 sknz
 119 008b EC 98 00 00             		 br	!!.L3
  93:../src/r_main.c **** 			 recieveInstruction(5);
 120                             		.loc 1 93 0
 121 008f 30 05 00                		movw	ax, #5
 122 0092 B8 00                   		movw	[sp], ax
 123 0094 FC 00 00 00             		call	!!%code(_recieveInstruction)
 124                             	.L3:
  94:../src/r_main.c **** 		 }
  95:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 4)){
 125                             		.loc 1 95 0
 126 0098 30 05 FF                		movw	ax, #-251
 127 009b B8 00                   		movw	[sp], ax
 128 009d 30 04 00                		movw	ax, #4
 129 00a0 B8 02                   		movw	[sp+2], ax
 130 00a2 FC 00 00 00             		call	!!%code(_bounce_correction)
 131 00a6 D4 F0                   		cmp0	r8
 132 00a8 61 F8                   		 sknz
 133 00aa EC B7 00 00             		 br	!!.L4
  96:../src/r_main.c **** 			 recieveInstruction(3);
 134                             		.loc 1 96 0
 135 00ae 30 03 00                		movw	ax, #3
 136 00b1 B8 00                   		movw	[sp], ax
 137 00b3 FC 00 00 00             		call	!!%code(_recieveInstruction)
 138                             	.L4:
  97:../src/r_main.c **** 		 }
  98:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 3)){
 139                             		.loc 1 98 0
 140 00b7 30 05 FF                		movw	ax, #-251
 141 00ba B8 00                   		movw	[sp], ax
 142 00bc 30 03 00                		movw	ax, #3
 143 00bf B8 02                   		movw	[sp+2], ax
 144 00c1 FC 00 00 00             		call	!!%code(_bounce_correction)
 145 00c5 D4 F0                   		cmp0	r8
 146 00c7 61 F8                   		 sknz
 147 00c9 EC D6 00 00             		 br	!!.L5
  99:../src/r_main.c **** 			 recieveInstruction(4);
 148                             		.loc 1 99 0
 149 00cd 30 04 00                		movw	ax, #4
 150 00d0 B8 00                   		movw	[sp], ax
 151 00d2 FC 00 00 00             		call	!!%code(_recieveInstruction)
 152                             	.L5:
 100:../src/r_main.c **** 		 }
 101:../src/r_main.c **** 		 if(bounce_correction(&P5_bit, 2)){
 153                             		.loc 1 101 0
 154 00d6 30 05 FF                		movw	ax, #-251
 155 00d9 B8 00                   		movw	[sp], ax
 156 00db 30 02 00                		movw	ax, #2
 157 00de B8 02                   		movw	[sp+2], ax
 158 00e0 FC 00 00 00             		call	!!%code(_bounce_correction)
 159 00e4 D4 F0                   		cmp0	r8
 160 00e6 61 F8                   		 sknz
 161 00e8 EC F3 00 00             		 br	!!.L6
 102:../src/r_main.c **** 			 recieveInstruction(1);
 162                             		.loc 1 102 0
 163 00ec E6                      		onew	ax
 164 00ed B8 00                   		movw	[sp], ax
 165 00ef FC 00 00 00             		call	!!%code(_recieveInstruction)
 166                             	.L6:
 103:../src/r_main.c **** 		 }
 104:../src/r_main.c **** 
 105:../src/r_main.c ****             if (uart1RxFlag)
 167                             		.loc 1 105 0
 168 00f3 8F 00 00                		mov	a, !_uart1RxFlag
 169 00f6 9D F0                   		mov	r8, a
 170 00f8 D4 F0                   		cmp0	r8
 171 00fa 61 F8                   		 sknz
 172 00fc EC 1F 01 00             		 br	!!.L7
 106:../src/r_main.c ****             {
 107:../src/r_main.c ****             	uart1RxFlag = 0U;
 173                             		.loc 1 107 0
 174 0100 F5 00 00                		clrb	!_uart1RxFlag
 108:../src/r_main.c **** 
 109:../src/r_main.c ****             	populate(uart1RxBuf[0]);
 175                             		.loc 1 109 0
 176 0103 8F 00 00                		mov	a, !_uart1RxBuf
 177 0106 9D F0                   		mov	r8, a
 178 0108 98 00                   		mov	[sp], a
 179 010a FC 00 00 00             		call	!!%code(_populate)
 110:../src/r_main.c **** 
 111:../src/r_main.c ****                 uart1Status = R_UART1_Receive(uart1RxBuf,1);
 180                             		.loc 1 111 0
 181 010e 30 00 00                		movw	ax, #_uart1RxBuf
 182 0111 B8 00                   		movw	[sp], ax
 183 0113 E6                      		onew	ax
 184 0114 B8 02                   		movw	[sp+2], ax
 185 0116 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 186 011a AD F0                   		movw	ax, r8
 187 011c BF 00 00                		movw	!_uart1Status, ax
 188                             	.L7:
 112:../src/r_main.c ****             }
 113:../src/r_main.c **** 
 114:../src/r_main.c **** 
 115:../src/r_main.c ****             //If a character has been transmitted
 116:../src/r_main.c **** //            if (ITIF != 0 && display == 1)
 117:../src/r_main.c **** //            {
 118:../src/r_main.c **** //            	displayLCD();
 119:../src/r_main.c **** //            	ITIF = 0U;
 120:../src/r_main.c **** //            }
 121:../src/r_main.c ****     }
 189                             		.loc 1 121 0
 190 011f EC 5B 00 00             		br	!!.L8
 191                             	.LFE0:
 193                             		.global	_R_MAIN_UserInit
 195                             	_R_MAIN_UserInit:
 196                             	.LFB1:
 122:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 123:../src/r_main.c **** }
 124:../src/r_main.c **** 
 125:../src/r_main.c **** 
 126:../src/r_main.c **** /**************************************************************************************************
 127:../src/r_main.c **** * Function Name: R_MAIN_UserInit
 128:../src/r_main.c **** * Description  : This function adds user code before implementing main function.
 129:../src/r_main.c **** * Arguments    : None
 130:../src/r_main.c **** * Return Value : None
 131:../src/r_main.c **** ***************************************************************************************************
 132:../src/r_main.c **** void R_MAIN_UserInit(void)
 133:../src/r_main.c **** {
 197                             		.loc 1 133 0
 134:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
 135:../src/r_main.c ****     EI();
 198                             		.loc 1 135 0
 199                             	 ; 135 "../src/r_main.c" 1
 200 0123 71 7A FA                		ei
 201                             	 ; 0 "" 2
 136:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 137:../src/r_main.c **** }
 202                             		.loc 1 137 0
 203 0126 D7                      		ret
 204                             	.LFE1:
 244                             	.Letext0:
 245                             		.file 2 "../src/iodefine.h"
 246                             		.file 3 "../src/r_cg_macrodriver.h"
 247                             		.file 4 "../src/globals.h"
