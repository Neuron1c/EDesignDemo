   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_timerFlag,2,2
  30                             		.comm	_count,2,2
  31                             		.comm	_interval_timer_count,2,2
  32                             		.global	_R_RTC_Create
  34                             	_R_RTC_Create:
  35                             	.LFB0:
  36                             		.file 1 "../src/r_cg_rtc.c"
   1:../src/r_cg_rtc.c **** /**************************************************************************************************
   2:../src/r_cg_rtc.c **** * DISCLAIMER
   3:../src/r_cg_rtc.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_rtc.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_rtc.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_rtc.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_rtc.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_rtc.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_rtc.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_rtc.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_rtc.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_rtc.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_rtc.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_rtc.c **** * following link:
  15:../src/r_cg_rtc.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_rtc.c **** *
  17:../src/r_cg_rtc.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_rtc.c **** ***************************************************************************************************
  19:../src/r_cg_rtc.c **** 
  20:../src/r_cg_rtc.c **** /**************************************************************************************************
  21:../src/r_cg_rtc.c **** * File Name    : r_cg_rtc.c
  22:../src/r_cg_rtc.c **** * Version      : CodeGenerator for RL78/G13 V2.03.02.01 [15 May 2015]
  23:../src/r_cg_rtc.c **** * Device(s)    : R5F100LE
  24:../src/r_cg_rtc.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_rtc.c **** * Description  : This file implements device driver for RTC module.
  26:../src/r_cg_rtc.c **** * Creation Date: 2017/04/12
  27:../src/r_cg_rtc.c **** ***************************************************************************************************
  28:../src/r_cg_rtc.c **** 
  29:../src/r_cg_rtc.c **** /**************************************************************************************************
  30:../src/r_cg_rtc.c **** Includes
  31:../src/r_cg_rtc.c **** ***************************************************************************************************
  32:../src/r_cg_rtc.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_rtc.c **** #include "r_cg_rtc.h"
  34:../src/r_cg_rtc.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_rtc.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_rtc.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_rtc.c **** 
  38:../src/r_cg_rtc.c **** /**************************************************************************************************
  39:../src/r_cg_rtc.c **** Global variables and functions
  40:../src/r_cg_rtc.c **** ***************************************************************************************************
  41:../src/r_cg_rtc.c **** /* Start user code for global. Do not edit comment generated here */
  42:../src/r_cg_rtc.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_cg_rtc.c **** 
  44:../src/r_cg_rtc.c **** /**************************************************************************************************
  45:../src/r_cg_rtc.c **** * Function Name: R_RTC_Create
  46:../src/r_cg_rtc.c **** * Description  : This function initializes the real-time clock module.
  47:../src/r_cg_rtc.c **** * Arguments    : None
  48:../src/r_cg_rtc.c **** * Return Value : None
  49:../src/r_cg_rtc.c **** ***************************************************************************************************
  50:../src/r_cg_rtc.c **** void R_RTC_Create(void)
  51:../src/r_cg_rtc.c **** {
  37                             		.loc 1 51 0
  52:../src/r_cg_rtc.c ****     RTCEN = 1U;    /* supply RTC clock */
  38                             		.loc 1 52 0
  39 0000 C9 F0 F0 00             		movw	r8, #240
  40 0004 AD F0                   		movw	ax, r8
  41 0006 BD F4                   		movw	r12, ax
  42 0008 FA F4                   		movw	hl, r12
  43 000a 8B                      		mov	a, [hl]
  44 000b 9D F2                   		mov	r10, a
  45 000d 6A F2 80                		or	r10, #-128
  46 0010 AD F0                   		movw	ax, r8
  47 0012 DA F4                   		movw	bc, r12
  48 0014 8D F2                   		mov	a, r10
  49 0016 48 00 00                		mov	[bc], a
  53:../src/r_cg_rtc.c ****     RTCE = 0U;     /* disable RTC clock operation */
  50                             		.loc 1 53 0
  51 0019 C9 F0 9D FF             		movw	r8, #-99
  52 001d AD F0                   		movw	ax, r8
  53 001f BD F4                   		movw	r12, ax
  54 0021 FA F4                   		movw	hl, r12
  55 0023 8B                      		mov	a, [hl]
  56 0024 9D F2                   		mov	r10, a
  57 0026 5A F2 7F                		and	r10, #127
  58 0029 AD F0                   		movw	ax, r8
  59 002b DA F4                   		movw	bc, r12
  60 002d 8D F2                   		mov	a, r10
  61 002f 48 00 00                		mov	[bc], a
  54:../src/r_cg_rtc.c ****     RTCMK = 1U;    /* disable INTRTC interrupt */
  62                             		.loc 1 54 0
  63 0032 C9 F0 E7 FF             		movw	r8, #-25
  64 0036 AD F0                   		movw	ax, r8
  65 0038 BD F4                   		movw	r12, ax
  66 003a FA F4                   		movw	hl, r12
  67 003c 8B                      		mov	a, [hl]
  68 003d 9D F2                   		mov	r10, a
  69 003f 6A F2 02                		or	r10, #2
  70 0042 AD F0                   		movw	ax, r8
  71 0044 DA F4                   		movw	bc, r12
  72 0046 8D F2                   		mov	a, r10
  73 0048 48 00 00                		mov	[bc], a
  55:../src/r_cg_rtc.c ****     RTCIF = 0U;    /* clear INTRTC interrupt flag */
  74                             		.loc 1 55 0
  75 004b C9 F0 E3 FF             		movw	r8, #-29
  76 004f AD F0                   		movw	ax, r8
  77 0051 BD F4                   		movw	r12, ax
  78 0053 FA F4                   		movw	hl, r12
  79 0055 8B                      		mov	a, [hl]
  80 0056 9D F2                   		mov	r10, a
  81 0058 5A F2 FD                		and	r10, #-3
  82 005b AD F0                   		movw	ax, r8
  83 005d DA F4                   		movw	bc, r12
  84 005f 8D F2                   		mov	a, r10
  85 0061 48 00 00                		mov	[bc], a
  56:../src/r_cg_rtc.c ****     /* Set INTRTC low priority */
  57:../src/r_cg_rtc.c ****     RTCPR1 = 1U;
  86                             		.loc 1 57 0
  87 0064 C9 F0 EF FF             		movw	r8, #-17
  88 0068 AD F0                   		movw	ax, r8
  89 006a BD F4                   		movw	r12, ax
  90 006c FA F4                   		movw	hl, r12
  91 006e 8B                      		mov	a, [hl]
  92 006f 9D F2                   		mov	r10, a
  93 0071 6A F2 02                		or	r10, #2
  94 0074 AD F0                   		movw	ax, r8
  95 0076 DA F4                   		movw	bc, r12
  96 0078 8D F2                   		mov	a, r10
  97 007a 48 00 00                		mov	[bc], a
  58:../src/r_cg_rtc.c ****     RTCPR0 = 1U;
  98                             		.loc 1 58 0
  99 007d C9 F0 EB FF             		movw	r8, #-21
 100 0081 AD F0                   		movw	ax, r8
 101 0083 BD F4                   		movw	r12, ax
 102 0085 FA F4                   		movw	hl, r12
 103 0087 8B                      		mov	a, [hl]
 104 0088 9D F2                   		mov	r10, a
 105 008a 6A F2 02                		or	r10, #2
 106 008d AD F0                   		movw	ax, r8
 107 008f DA F4                   		movw	bc, r12
 108 0091 8D F2                   		mov	a, r10
 109 0093 48 00 00                		mov	[bc], a
  59:../src/r_cg_rtc.c ****     RTCC0 = _00_RTC_RTC1HZ_DISABLE | _08_RTC_24HOUR_SYSTEM | _00_RTC_INTRTC_NOT_GENERATE;
 110                             		.loc 1 59 0
 111 0096 C9 F0 9D FF             		movw	r8, #-99
 112 009a AD F0                   		movw	ax, r8
 113 009c BD F2                   		movw	r10, ax
 114 009e DA F2                   		movw	bc, r10
 115 00a0 51 08                   		mov	a, #8
 116 00a2 48 00 00                		mov	[bc], a
  60:../src/r_cg_rtc.c ****     /* Set real-time clock */
  61:../src/r_cg_rtc.c ****     SEC = _00_RTC_COUNTER_SEC;
 117                             		.loc 1 61 0
 118 00a5 C9 F0 92 FF             		movw	r8, #-110
 119 00a9 AD F0                   		movw	ax, r8
 120 00ab BD F4                   		movw	r12, ax
 121 00ad DA F4                   		movw	bc, r12
 122 00af F1                      		clrb	a
 123 00b0 48 00 00                		mov	[bc], a
  62:../src/r_cg_rtc.c ****     MIN = _00_RTC_COUNTER_MIN;
 124                             		.loc 1 62 0
 125 00b3 C9 F0 93 FF             		movw	r8, #-109
 126 00b7 AD F0                   		movw	ax, r8
 127 00b9 BD F2                   		movw	r10, ax
 128 00bb DA F2                   		movw	bc, r10
 129 00bd F1                      		clrb	a
 130 00be 48 00 00                		mov	[bc], a
  63:../src/r_cg_rtc.c ****     HOUR = _00_RTC_COUNTER_HOUR;
 131                             		.loc 1 63 0
 132 00c1 C9 F0 94 FF             		movw	r8, #-108
 133 00c5 AD F0                   		movw	ax, r8
 134 00c7 BD F4                   		movw	r12, ax
 135 00c9 DA F4                   		movw	bc, r12
 136 00cb F1                      		clrb	a
 137 00cc 48 00 00                		mov	[bc], a
  64:../src/r_cg_rtc.c ****     WEEK = _02_RTC_COUNTER_WEEK;
 138                             		.loc 1 64 0
 139 00cf C9 F0 95 FF             		movw	r8, #-107
 140 00d3 AD F0                   		movw	ax, r8
 141 00d5 BD F2                   		movw	r10, ax
 142 00d7 DA F2                   		movw	bc, r10
 143 00d9 51 02                   		mov	a, #2
 144 00db 48 00 00                		mov	[bc], a
  65:../src/r_cg_rtc.c ****     DAY = _11_RTC_COUNTER_DAY;
 145                             		.loc 1 65 0
 146 00de C9 F0 96 FF             		movw	r8, #-106
 147 00e2 AD F0                   		movw	ax, r8
 148 00e4 BD F4                   		movw	r12, ax
 149 00e6 DA F4                   		movw	bc, r12
 150 00e8 51 11                   		mov	a, #17
 151 00ea 48 00 00                		mov	[bc], a
  66:../src/r_cg_rtc.c ****     MONTH = _04_RTC_COUNTER_MONTH;
 152                             		.loc 1 66 0
 153 00ed C9 F0 97 FF             		movw	r8, #-105
 154 00f1 AD F0                   		movw	ax, r8
 155 00f3 BD F2                   		movw	r10, ax
 156 00f5 DA F2                   		movw	bc, r10
 157 00f7 51 04                   		mov	a, #4
 158 00f9 48 00 00                		mov	[bc], a
  67:../src/r_cg_rtc.c ****     YEAR = _17_RTC_COUNTER_YEAR;
 159                             		.loc 1 67 0
 160 00fc C9 F0 98 FF             		movw	r8, #-104
 161 0100 AD F0                   		movw	ax, r8
 162 0102 BD F4                   		movw	r12, ax
 163 0104 DA F4                   		movw	bc, r12
 164 0106 51 17                   		mov	a, #23
 165 0108 48 00 00                		mov	[bc], a
  68:../src/r_cg_rtc.c **** }
 166                             		.loc 1 68 0
 167 010b D7                      		ret
 168                             	.LFE0:
 170                             		.global	_R_RTC_Start
 172                             	_R_RTC_Start:
 173                             	.LFB1:
  69:../src/r_cg_rtc.c **** 
  70:../src/r_cg_rtc.c **** /**************************************************************************************************
  71:../src/r_cg_rtc.c **** * Function Name: R_RTC_Start
  72:../src/r_cg_rtc.c **** * Description  : This function enables the real-time clock.
  73:../src/r_cg_rtc.c **** * Arguments    : None
  74:../src/r_cg_rtc.c **** * Return Value : None
  75:../src/r_cg_rtc.c **** ***************************************************************************************************
  76:../src/r_cg_rtc.c **** void R_RTC_Start(void)
  77:../src/r_cg_rtc.c **** {
 174                             		.loc 1 77 0
  78:../src/r_cg_rtc.c ****     RTCE = 1U;     /* enable RTC clock operation */
 175                             		.loc 1 78 0
 176 010c C9 F0 9D FF             		movw	r8, #-99
 177 0110 AD F0                   		movw	ax, r8
 178 0112 BD F4                   		movw	r12, ax
 179 0114 FA F4                   		movw	hl, r12
 180 0116 8B                      		mov	a, [hl]
 181 0117 9D F2                   		mov	r10, a
 182 0119 6A F2 80                		or	r10, #-128
 183 011c AD F0                   		movw	ax, r8
 184 011e DA F4                   		movw	bc, r12
 185 0120 8D F2                   		mov	a, r10
 186 0122 48 00 00                		mov	[bc], a
  79:../src/r_cg_rtc.c **** }
 187                             		.loc 1 79 0
 188 0125 D7                      		ret
 189                             	.LFE1:
 191                             		.global	_R_RTC_Stop
 193                             	_R_RTC_Stop:
 194                             	.LFB2:
  80:../src/r_cg_rtc.c **** 
  81:../src/r_cg_rtc.c **** /**************************************************************************************************
  82:../src/r_cg_rtc.c **** * Function Name: R_RTC_Stop
  83:../src/r_cg_rtc.c **** * Description  : This function disables the real-time clock.
  84:../src/r_cg_rtc.c **** * Arguments    : None
  85:../src/r_cg_rtc.c **** * Return Value : None
  86:../src/r_cg_rtc.c **** ***************************************************************************************************
  87:../src/r_cg_rtc.c **** void R_RTC_Stop(void)
  88:../src/r_cg_rtc.c **** {
 195                             		.loc 1 88 0
  89:../src/r_cg_rtc.c ****     RTCE = 0U;    /* disable RTC clock operation */
 196                             		.loc 1 89 0
 197 0126 C9 F0 9D FF             		movw	r8, #-99
 198 012a AD F0                   		movw	ax, r8
 199 012c BD F4                   		movw	r12, ax
 200 012e FA F4                   		movw	hl, r12
 201 0130 8B                      		mov	a, [hl]
 202 0131 9D F2                   		mov	r10, a
 203 0133 5A F2 7F                		and	r10, #127
 204 0136 AD F0                   		movw	ax, r8
 205 0138 DA F4                   		movw	bc, r12
 206 013a 8D F2                   		mov	a, r10
 207 013c 48 00 00                		mov	[bc], a
  90:../src/r_cg_rtc.c **** }
 208                             		.loc 1 90 0
 209 013f D7                      		ret
 210                             	.LFE2:
 212                             		.global	_R_RTC_Get_CounterValue
 214                             	_R_RTC_Get_CounterValue:
 215                             	.LFB3:
  91:../src/r_cg_rtc.c **** 
  92:../src/r_cg_rtc.c **** /**************************************************************************************************
  93:../src/r_cg_rtc.c **** * Function Name: R_RTC_Get_CounterValue
  94:../src/r_cg_rtc.c **** * Description  : This function reads the results of real-time clock and store them in the variables
  95:../src/r_cg_rtc.c **** * Arguments    : counter_read_val -
  96:../src/r_cg_rtc.c **** *                    the current real-time clock value(BCD code)
  97:../src/r_cg_rtc.c **** * Return Value : status -
  98:../src/r_cg_rtc.c **** *                    MD_OK, MD_BUSY1 or MD_BUSY2
  99:../src/r_cg_rtc.c **** ***************************************************************************************************
 100:../src/r_cg_rtc.c **** MD_STATUS R_RTC_Get_CounterValue(rtc_counter_value_t * const counter_read_val)
 101:../src/r_cg_rtc.c **** {
 216                             		.loc 1 101 0
 217                             		; start of function
 218                             		; locals: 6 bytes
 219 0140 20 06                   		subw	sp, #6
 220                             	.LCFI0:
 102:../src/r_cg_rtc.c ****     MD_STATUS status = MD_OK;
 221                             		.loc 1 102 0
 222 0142 F6                      		clrw	ax
 223 0143 B8 04                   		movw	[sp+4], ax
 103:../src/r_cg_rtc.c ****     uint32_t  w_count;
 104:../src/r_cg_rtc.c ****     
 105:../src/r_cg_rtc.c ****     RTCC1 |= _01_RTC_COUNTER_PAUSE;
 224                             		.loc 1 105 0
 225 0145 C9 F2 9E FF             		movw	r10, #-98
 226 0149 C9 F0 9E FF             		movw	r8, #-98
 227 014d AD F0                   		movw	ax, r8
 228 014f BD F4                   		movw	r12, ax
 229 0151 FA F4                   		movw	hl, r12
 230 0153 8B                      		mov	a, [hl]
 231 0154 9D F0                   		mov	r8, a
 232 0156 6A F0 01                		or	r8, #1
 233 0159 AD F2                   		movw	ax, r10
 234 015b BD F4                   		movw	r12, ax
 235 015d DA F4                   		movw	bc, r12
 236 015f 8D F0                   		mov	a, r8
 237 0161 48 00 00                		mov	[bc], a
 106:../src/r_cg_rtc.c **** 
 107:../src/r_cg_rtc.c ****     /* Change the waiting time according to the system */
 108:../src/r_cg_rtc.c ****     for (w_count = 0U; w_count < RTC_WAITTIME; w_count++)
 238                             		.loc 1 108 0
 239 0164 F6                      		clrw	ax
 240 0165 B8 00                   		movw	[sp], ax
 241 0167 F6                      		clrw	ax
 242 0168 B8 02                   		movw	[sp+2], ax
 243 016a EC 7D 01 00             		br	!!.L5
 244                             	.L6:
 109:../src/r_cg_rtc.c ****     {
 110:../src/r_cg_rtc.c ****         NOP();
 245                             		.loc 1 110 0 discriminator 3
 246                             	 ; 110 "../src/r_cg_rtc.c" 1
 247 016e 00                      		nop
 248                             	 ; 0 "" 2
 108:../src/r_cg_rtc.c ****     {
 249                             		.loc 1 108 0 discriminator 3
 250 016f A8 00                   		movw ax, [sp]
 251 0171 04 01 00                		addw ax, #1
 252 0174 B8 00                   		movw [sp], ax
 253 0176 A8 02                   		movw ax, [sp+2]
 254 0178 61 D8                   		sknc
 255 017a A1                      		incw ax
 256 017b B8 02                   		movw [sp+2],ax
 257                             	.L5:
 108:../src/r_cg_rtc.c ****     {
 258                             		.loc 1 108 0 is_stmt 0 discriminator 1
 259 017d A8 02                   		movw	ax, [sp+2]
 260 017f 44 00 00                		 cmpw	ax, #0
 261 0182 A8 00                   		 movw	ax, [sp]
 262 0184 61 F8                   		 sknz
 263 0186 44 3F 01                		 cmpw	ax, #319
 264 0189 61 E3                   		 skh
 265 018b EC 6E 01 00             		 br	!!.L6
 111:../src/r_cg_rtc.c ****     }
 112:../src/r_cg_rtc.c **** 
 113:../src/r_cg_rtc.c ****     if (0U == RWST)
 266                             		.loc 1 113 0 is_stmt 1
 267 018f C9 F0 9E FF             		movw	r8, #-98
 268 0193 AD F0                   		movw	ax, r8
 269 0195 BD F2                   		movw	r10, ax
 270 0197 FA F2                   		movw	hl, r10
 271 0199 8B                      		mov	a, [hl]
 272 019a 9D F0                   		mov	r8, a
 273 019c 31 1A                   		shr	a, 1
 274 019e 9D F0                   		mov	r8, a
 275 01a0 5A F0 01                		and	r8, #1
 276 01a3 61 E8                   		skz
 277 01a5 EC B2 01 00             		 br	!!.L7
 278                             		 # zero-comparison eliminated
 114:../src/r_cg_rtc.c ****     {
 115:../src/r_cg_rtc.c ****         status = MD_BUSY1;
 279                             		.loc 1 115 0
 280 01a9 30 03 00                		movw	ax, #3
 281 01ac B8 04                   		movw	[sp+4], ax
 282 01ae EC C8 02 00             		br	!!.L8
 283                             	.L7:
 116:../src/r_cg_rtc.c ****     }
 117:../src/r_cg_rtc.c ****     else
 118:../src/r_cg_rtc.c ****     {
 119:../src/r_cg_rtc.c ****         counter_read_val->sec = SEC;
 284                             		.loc 1 119 0
 285 01b2 C9 F0 92 FF             		movw	r8, #-110
 286 01b6 AD F0                   		movw	ax, r8
 287 01b8 BD F4                   		movw	r12, ax
 288 01ba FA F4                   		movw	hl, r12
 289 01bc 8B                      		mov	a, [hl]
 290 01bd 9D F2                   		mov	r10, a
 291 01bf A8 0A                   		movw	ax, [sp+10]
 292 01c1 BD F0                   		movw	r8, ax
 293 01c3 BD F4                   		movw	r12, ax
 294 01c5 DA F4                   		movw	bc, r12
 295 01c7 8D F2                   		mov	a, r10
 296 01c9 48 00 00                		mov	[bc], a
 120:../src/r_cg_rtc.c ****         counter_read_val->min = MIN;
 297                             		.loc 1 120 0
 298 01cc C9 F0 93 FF             		movw	r8, #-109
 299 01d0 AD F0                   		movw	ax, r8
 300 01d2 BD F4                   		movw	r12, ax
 301 01d4 FA F4                   		movw	hl, r12
 302 01d6 8B                      		mov	a, [hl]
 303 01d7 9D F2                   		mov	r10, a
 304 01d9 A8 0A                   		movw	ax, [sp+10]
 305 01db BD F0                   		movw	r8, ax
 306 01dd DA F0                   		movw	bc, r8
 307 01df 8D F2                   		mov	a, r10
 308 01e1 48 01 00                		mov	1[bc], a
 121:../src/r_cg_rtc.c ****         counter_read_val->hour = HOUR;
 309                             		.loc 1 121 0
 310 01e4 C9 F0 94 FF             		movw	r8, #-108
 311 01e8 AD F0                   		movw	ax, r8
 312 01ea BD F4                   		movw	r12, ax
 313 01ec FA F4                   		movw	hl, r12
 314 01ee 8B                      		mov	a, [hl]
 315 01ef 9D F2                   		mov	r10, a
 316 01f1 A8 0A                   		movw	ax, [sp+10]
 317 01f3 BD F0                   		movw	r8, ax
 318 01f5 DA F0                   		movw	bc, r8
 319 01f7 8D F2                   		mov	a, r10
 320 01f9 48 02 00                		mov	2[bc], a
 122:../src/r_cg_rtc.c ****         counter_read_val->week = WEEK;
 321                             		.loc 1 122 0
 322 01fc C9 F0 95 FF             		movw	r8, #-107
 323 0200 AD F0                   		movw	ax, r8
 324 0202 BD F4                   		movw	r12, ax
 325 0204 FA F4                   		movw	hl, r12
 326 0206 8B                      		mov	a, [hl]
 327 0207 9D F2                   		mov	r10, a
 328 0209 A8 0A                   		movw	ax, [sp+10]
 329 020b BD F0                   		movw	r8, ax
 330 020d DA F0                   		movw	bc, r8
 331 020f 8D F2                   		mov	a, r10
 332 0211 48 04 00                		mov	4[bc], a
 123:../src/r_cg_rtc.c ****         counter_read_val->day = DAY;
 333                             		.loc 1 123 0
 334 0214 C9 F0 96 FF             		movw	r8, #-106
 335 0218 AD F0                   		movw	ax, r8
 336 021a BD F4                   		movw	r12, ax
 337 021c FA F4                   		movw	hl, r12
 338 021e 8B                      		mov	a, [hl]
 339 021f 9D F2                   		mov	r10, a
 340 0221 A8 0A                   		movw	ax, [sp+10]
 341 0223 BD F0                   		movw	r8, ax
 342 0225 DA F0                   		movw	bc, r8
 343 0227 8D F2                   		mov	a, r10
 344 0229 48 03 00                		mov	3[bc], a
 124:../src/r_cg_rtc.c ****         counter_read_val->month = MONTH;
 345                             		.loc 1 124 0
 346 022c C9 F0 97 FF             		movw	r8, #-105
 347 0230 AD F0                   		movw	ax, r8
 348 0232 BD F4                   		movw	r12, ax
 349 0234 FA F4                   		movw	hl, r12
 350 0236 8B                      		mov	a, [hl]
 351 0237 9D F2                   		mov	r10, a
 352 0239 A8 0A                   		movw	ax, [sp+10]
 353 023b BD F0                   		movw	r8, ax
 354 023d DA F0                   		movw	bc, r8
 355 023f 8D F2                   		mov	a, r10
 356 0241 48 05 00                		mov	5[bc], a
 125:../src/r_cg_rtc.c ****         counter_read_val->year = YEAR;
 357                             		.loc 1 125 0
 358 0244 C9 F0 98 FF             		movw	r8, #-104
 359 0248 AD F0                   		movw	ax, r8
 360 024a BD F4                   		movw	r12, ax
 361 024c FA F4                   		movw	hl, r12
 362 024e 8B                      		mov	a, [hl]
 363 024f 9D F2                   		mov	r10, a
 364 0251 A8 0A                   		movw	ax, [sp+10]
 365 0253 BD F0                   		movw	r8, ax
 366 0255 DA F0                   		movw	bc, r8
 367 0257 8D F2                   		mov	a, r10
 368 0259 48 06 00                		mov	6[bc], a
 126:../src/r_cg_rtc.c **** 
 127:../src/r_cg_rtc.c ****         RTCC1 &= (uint8_t)~_01_RTC_COUNTER_PAUSE;
 369                             		.loc 1 127 0
 370 025c C9 F2 9E FF             		movw	r10, #-98
 371 0260 C9 F0 9E FF             		movw	r8, #-98
 372 0264 AD F0                   		movw	ax, r8
 373 0266 BD F4                   		movw	r12, ax
 374 0268 FA F4                   		movw	hl, r12
 375 026a 8B                      		mov	a, [hl]
 376 026b 9D F0                   		mov	r8, a
 377 026d 5A F0 FE                		and	r8, #-2
 378 0270 AD F2                   		movw	ax, r10
 379 0272 BD F4                   		movw	r12, ax
 380 0274 DA F4                   		movw	bc, r12
 381 0276 8D F0                   		mov	a, r8
 382 0278 48 00 00                		mov	[bc], a
 128:../src/r_cg_rtc.c **** 
 129:../src/r_cg_rtc.c ****         /* Change the waiting time according to the system */
 130:../src/r_cg_rtc.c ****         for (w_count = 0U; w_count < RTC_WAITTIME; w_count++)
 383                             		.loc 1 130 0
 384 027b F6                      		clrw	ax
 385 027c B8 00                   		movw	[sp], ax
 386 027e F6                      		clrw	ax
 387 027f B8 02                   		movw	[sp+2], ax
 388 0281 EC 94 02 00             		br	!!.L9
 389                             	.L10:
 131:../src/r_cg_rtc.c ****         {
 132:../src/r_cg_rtc.c ****             NOP();
 390                             		.loc 1 132 0 discriminator 3
 391                             	 ; 132 "../src/r_cg_rtc.c" 1
 392 0285 00                      		nop
 393                             	 ; 0 "" 2
 130:../src/r_cg_rtc.c ****         {
 394                             		.loc 1 130 0 discriminator 3
 395 0286 A8 00                   		movw ax, [sp]
 396 0288 04 01 00                		addw ax, #1
 397 028b B8 00                   		movw [sp], ax
 398 028d A8 02                   		movw ax, [sp+2]
 399 028f 61 D8                   		sknc
 400 0291 A1                      		incw ax
 401 0292 B8 02                   		movw [sp+2],ax
 402                             	.L9:
 130:../src/r_cg_rtc.c ****         {
 403                             		.loc 1 130 0 is_stmt 0 discriminator 1
 404 0294 A8 02                   		movw	ax, [sp+2]
 405 0296 44 00 00                		 cmpw	ax, #0
 406 0299 A8 00                   		 movw	ax, [sp]
 407 029b 61 F8                   		 sknz
 408 029d 44 3F 01                		 cmpw	ax, #319
 409 02a0 61 E3                   		 skh
 410 02a2 EC 85 02 00             		 br	!!.L10
 133:../src/r_cg_rtc.c ****         }
 134:../src/r_cg_rtc.c **** 
 135:../src/r_cg_rtc.c ****         if (1U == RWST)
 411                             		.loc 1 135 0 is_stmt 1
 412 02a6 C9 F0 9E FF             		movw	r8, #-98
 413 02aa AD F0                   		movw	ax, r8
 414 02ac BD F2                   		movw	r10, ax
 415 02ae FA F2                   		movw	hl, r10
 416 02b0 8B                      		mov	a, [hl]
 417 02b1 9D F0                   		mov	r8, a
 418 02b3 31 1A                   		shr	a, 1
 419 02b5 9D F0                   		mov	r8, a
 420 02b7 5A F0 01                		and	r8, #1
 421 02ba 4A F0 01                		cmp	r8, #1
 422 02bd 61 E8                   		 skz
 423 02bf EC C8 02 00             		 br	!!.L8
 136:../src/r_cg_rtc.c ****         {
 137:../src/r_cg_rtc.c ****             status = MD_BUSY2;
 424                             		.loc 1 137 0
 425 02c3 30 04 00                		movw	ax, #4
 426 02c6 B8 04                   		movw	[sp+4], ax
 427                             	.L8:
 138:../src/r_cg_rtc.c ****         }
 139:../src/r_cg_rtc.c ****     }
 140:../src/r_cg_rtc.c **** 
 141:../src/r_cg_rtc.c ****     return (status);
 428                             		.loc 1 141 0
 429 02c8 A8 04                   		movw	ax, [sp+4]
 430 02ca BD F0                   		movw	r8, ax
 142:../src/r_cg_rtc.c **** }
 431                             		.loc 1 142 0
 432 02cc 10 06                   		addw	sp, #6
 433 02ce D7                      		ret
 434                             	.LFE3:
 436                             		.global	_R_RTC_Set_CounterValue
 438                             	_R_RTC_Set_CounterValue:
 439                             	.LFB4:
 143:../src/r_cg_rtc.c **** 
 144:../src/r_cg_rtc.c **** /**************************************************************************************************
 145:../src/r_cg_rtc.c **** * Function Name: R_RTC_Set_CounterValue
 146:../src/r_cg_rtc.c **** * Description  : This function changes the real-time clock value.
 147:../src/r_cg_rtc.c **** * Arguments    : counter_write_val -
 148:../src/r_cg_rtc.c **** *                    the expected real-time clock value(BCD code)
 149:../src/r_cg_rtc.c **** * Return Value : status -
 150:../src/r_cg_rtc.c **** *                    MD_OK, MD_BUSY1 or MD_BUSY2
 151:../src/r_cg_rtc.c **** ***************************************************************************************************
 152:../src/r_cg_rtc.c **** MD_STATUS R_RTC_Set_CounterValue(rtc_counter_value_t counter_write_val)
 153:../src/r_cg_rtc.c **** {
 440                             		.loc 1 153 0
 441                             		; start of function
 442                             		; locals: 6 bytes
 443 02cf 20 06                   		subw	sp, #6
 444                             	.LCFI1:
 154:../src/r_cg_rtc.c ****     MD_STATUS status = MD_OK;
 445                             		.loc 1 154 0
 446 02d1 F6                      		clrw	ax
 447 02d2 B8 04                   		movw	[sp+4], ax
 155:../src/r_cg_rtc.c ****     uint32_t  w_count;
 156:../src/r_cg_rtc.c ****     
 157:../src/r_cg_rtc.c ****     RTCC1 |= _01_RTC_COUNTER_PAUSE;
 448                             		.loc 1 157 0
 449 02d4 C9 F2 9E FF             		movw	r10, #-98
 450 02d8 C9 F0 9E FF             		movw	r8, #-98
 451 02dc AD F0                   		movw	ax, r8
 452 02de BD F4                   		movw	r12, ax
 453 02e0 FA F4                   		movw	hl, r12
 454 02e2 8B                      		mov	a, [hl]
 455 02e3 9D F0                   		mov	r8, a
 456 02e5 6A F0 01                		or	r8, #1
 457 02e8 AD F2                   		movw	ax, r10
 458 02ea BD F4                   		movw	r12, ax
 459 02ec DA F4                   		movw	bc, r12
 460 02ee 8D F0                   		mov	a, r8
 461 02f0 48 00 00                		mov	[bc], a
 158:../src/r_cg_rtc.c **** 
 159:../src/r_cg_rtc.c ****     /* Change the waiting time according to the system */
 160:../src/r_cg_rtc.c ****     for (w_count = 0U; w_count < RTC_WAITTIME; w_count++)
 462                             		.loc 1 160 0
 463 02f3 F6                      		clrw	ax
 464 02f4 B8 00                   		movw	[sp], ax
 465 02f6 F6                      		clrw	ax
 466 02f7 B8 02                   		movw	[sp+2], ax
 467 02f9 EC 0C 03 00             		br	!!.L13
 468                             	.L14:
 161:../src/r_cg_rtc.c ****     {
 162:../src/r_cg_rtc.c ****         NOP();
 469                             		.loc 1 162 0 discriminator 3
 470                             	 ; 162 "../src/r_cg_rtc.c" 1
 471 02fd 00                      		nop
 472                             	 ; 0 "" 2
 160:../src/r_cg_rtc.c ****     {
 473                             		.loc 1 160 0 discriminator 3
 474 02fe A8 00                   		movw ax, [sp]
 475 0300 04 01 00                		addw ax, #1
 476 0303 B8 00                   		movw [sp], ax
 477 0305 A8 02                   		movw ax, [sp+2]
 478 0307 61 D8                   		sknc
 479 0309 A1                      		incw ax
 480 030a B8 02                   		movw [sp+2],ax
 481                             	.L13:
 160:../src/r_cg_rtc.c ****     {
 482                             		.loc 1 160 0 is_stmt 0 discriminator 1
 483 030c A8 02                   		movw	ax, [sp+2]
 484 030e 44 00 00                		 cmpw	ax, #0
 485 0311 A8 00                   		 movw	ax, [sp]
 486 0313 61 F8                   		 sknz
 487 0315 44 3F 01                		 cmpw	ax, #319
 488 0318 61 E3                   		 skh
 489 031a EC FD 02 00             		 br	!!.L14
 163:../src/r_cg_rtc.c ****     }
 164:../src/r_cg_rtc.c **** 
 165:../src/r_cg_rtc.c ****     if (0U == RWST)
 490                             		.loc 1 165 0 is_stmt 1
 491 031e C9 F0 9E FF             		movw	r8, #-98
 492 0322 AD F0                   		movw	ax, r8
 493 0324 BD F2                   		movw	r10, ax
 494 0326 FA F2                   		movw	hl, r10
 495 0328 8B                      		mov	a, [hl]
 496 0329 9D F0                   		mov	r8, a
 497 032b 31 1A                   		shr	a, 1
 498 032d 9D F0                   		mov	r8, a
 499 032f 5A F0 01                		and	r8, #1
 500 0332 61 E8                   		skz
 501 0334 EC 41 03 00             		 br	!!.L15
 502                             		 # zero-comparison eliminated
 166:../src/r_cg_rtc.c ****     {
 167:../src/r_cg_rtc.c ****         status = MD_BUSY1;
 503                             		.loc 1 167 0
 504 0338 30 03 00                		movw	ax, #3
 505 033b B8 04                   		movw	[sp+4], ax
 506 033d EC 32 04 00             		br	!!.L16
 507                             	.L15:
 168:../src/r_cg_rtc.c ****     }
 169:../src/r_cg_rtc.c ****     else
 170:../src/r_cg_rtc.c ****     {
 171:../src/r_cg_rtc.c ****         SEC = counter_write_val.sec;
 508                             		.loc 1 171 0
 509 0341 C9 F0 92 FF             		movw	r8, #-110
 510 0345 88 0A                   		mov	a, [sp+10]
 511 0347 9D F2                   		mov	r10, a
 512 0349 AD F0                   		movw	ax, r8
 513 034b BD F4                   		movw	r12, ax
 514 034d DA F4                   		movw	bc, r12
 515 034f 8D F2                   		mov	a, r10
 516 0351 48 00 00                		mov	[bc], a
 172:../src/r_cg_rtc.c ****         MIN = counter_write_val.min;
 517                             		.loc 1 172 0
 518 0354 C9 F0 93 FF             		movw	r8, #-109
 519 0358 88 0B                   		mov	a, [sp+11]
 520 035a 9D F2                   		mov	r10, a
 521 035c AD F0                   		movw	ax, r8
 522 035e BD F4                   		movw	r12, ax
 523 0360 DA F4                   		movw	bc, r12
 524 0362 8D F2                   		mov	a, r10
 525 0364 48 00 00                		mov	[bc], a
 173:../src/r_cg_rtc.c ****         HOUR = counter_write_val.hour;
 526                             		.loc 1 173 0
 527 0367 C9 F0 94 FF             		movw	r8, #-108
 528 036b 88 0C                   		mov	a, [sp+12]
 529 036d 9D F2                   		mov	r10, a
 530 036f AD F0                   		movw	ax, r8
 531 0371 BD F4                   		movw	r12, ax
 532 0373 DA F4                   		movw	bc, r12
 533 0375 8D F2                   		mov	a, r10
 534 0377 48 00 00                		mov	[bc], a
 174:../src/r_cg_rtc.c ****         WEEK = counter_write_val.week;
 535                             		.loc 1 174 0
 536 037a C9 F0 95 FF             		movw	r8, #-107
 537 037e 88 0E                   		mov	a, [sp+14]
 538 0380 9D F2                   		mov	r10, a
 539 0382 AD F0                   		movw	ax, r8
 540 0384 BD F4                   		movw	r12, ax
 541 0386 DA F4                   		movw	bc, r12
 542 0388 8D F2                   		mov	a, r10
 543 038a 48 00 00                		mov	[bc], a
 175:../src/r_cg_rtc.c ****         DAY = counter_write_val.day;
 544                             		.loc 1 175 0
 545 038d C9 F0 96 FF             		movw	r8, #-106
 546 0391 88 0D                   		mov	a, [sp+13]
 547 0393 9D F2                   		mov	r10, a
 548 0395 AD F0                   		movw	ax, r8
 549 0397 BD F4                   		movw	r12, ax
 550 0399 DA F4                   		movw	bc, r12
 551 039b 8D F2                   		mov	a, r10
 552 039d 48 00 00                		mov	[bc], a
 176:../src/r_cg_rtc.c ****         MONTH = counter_write_val.month;
 553                             		.loc 1 176 0
 554 03a0 C9 F0 97 FF             		movw	r8, #-105
 555 03a4 88 0F                   		mov	a, [sp+15]
 556 03a6 9D F2                   		mov	r10, a
 557 03a8 AD F0                   		movw	ax, r8
 558 03aa BD F4                   		movw	r12, ax
 559 03ac DA F4                   		movw	bc, r12
 560 03ae 8D F2                   		mov	a, r10
 561 03b0 48 00 00                		mov	[bc], a
 177:../src/r_cg_rtc.c ****         YEAR = counter_write_val.year;
 562                             		.loc 1 177 0
 563 03b3 C9 F0 98 FF             		movw	r8, #-104
 564 03b7 88 10                   		mov	a, [sp+16]
 565 03b9 9D F2                   		mov	r10, a
 566 03bb AD F0                   		movw	ax, r8
 567 03bd BD F4                   		movw	r12, ax
 568 03bf DA F4                   		movw	bc, r12
 569 03c1 8D F2                   		mov	a, r10
 570 03c3 48 00 00                		mov	[bc], a
 178:../src/r_cg_rtc.c ****         RTCC1 &= (uint8_t)~_01_RTC_COUNTER_PAUSE;
 571                             		.loc 1 178 0
 572 03c6 C9 F2 9E FF             		movw	r10, #-98
 573 03ca C9 F0 9E FF             		movw	r8, #-98
 574 03ce AD F0                   		movw	ax, r8
 575 03d0 BD F4                   		movw	r12, ax
 576 03d2 FA F4                   		movw	hl, r12
 577 03d4 8B                      		mov	a, [hl]
 578 03d5 9D F0                   		mov	r8, a
 579 03d7 5A F0 FE                		and	r8, #-2
 580 03da AD F2                   		movw	ax, r10
 581 03dc BD F4                   		movw	r12, ax
 582 03de DA F4                   		movw	bc, r12
 583 03e0 8D F0                   		mov	a, r8
 584 03e2 48 00 00                		mov	[bc], a
 179:../src/r_cg_rtc.c **** 
 180:../src/r_cg_rtc.c ****         /* Change the waiting time according to the system */
 181:../src/r_cg_rtc.c ****         for (w_count = 0U; w_count < RTC_WAITTIME; w_count++)
 585                             		.loc 1 181 0
 586 03e5 F6                      		clrw	ax
 587 03e6 B8 00                   		movw	[sp], ax
 588 03e8 F6                      		clrw	ax
 589 03e9 B8 02                   		movw	[sp+2], ax
 590 03eb EC FE 03 00             		br	!!.L17
 591                             	.L18:
 182:../src/r_cg_rtc.c ****         {
 183:../src/r_cg_rtc.c ****             NOP();
 592                             		.loc 1 183 0 discriminator 3
 593                             	 ; 183 "../src/r_cg_rtc.c" 1
 594 03ef 00                      		nop
 595                             	 ; 0 "" 2
 181:../src/r_cg_rtc.c ****         {
 596                             		.loc 1 181 0 discriminator 3
 597 03f0 A8 00                   		movw ax, [sp]
 598 03f2 04 01 00                		addw ax, #1
 599 03f5 B8 00                   		movw [sp], ax
 600 03f7 A8 02                   		movw ax, [sp+2]
 601 03f9 61 D8                   		sknc
 602 03fb A1                      		incw ax
 603 03fc B8 02                   		movw [sp+2],ax
 604                             	.L17:
 181:../src/r_cg_rtc.c ****         {
 605                             		.loc 1 181 0 is_stmt 0 discriminator 1
 606 03fe A8 02                   		movw	ax, [sp+2]
 607 0400 44 00 00                		 cmpw	ax, #0
 608 0403 A8 00                   		 movw	ax, [sp]
 609 0405 61 F8                   		 sknz
 610 0407 44 3F 01                		 cmpw	ax, #319
 611 040a 61 E3                   		 skh
 612 040c EC EF 03 00             		 br	!!.L18
 184:../src/r_cg_rtc.c ****         }
 185:../src/r_cg_rtc.c **** 
 186:../src/r_cg_rtc.c ****         if (1U == RWST)
 613                             		.loc 1 186 0 is_stmt 1
 614 0410 C9 F0 9E FF             		movw	r8, #-98
 615 0414 AD F0                   		movw	ax, r8
 616 0416 BD F2                   		movw	r10, ax
 617 0418 FA F2                   		movw	hl, r10
 618 041a 8B                      		mov	a, [hl]
 619 041b 9D F0                   		mov	r8, a
 620 041d 31 1A                   		shr	a, 1
 621 041f 9D F0                   		mov	r8, a
 622 0421 5A F0 01                		and	r8, #1
 623 0424 4A F0 01                		cmp	r8, #1
 624 0427 61 E8                   		 skz
 625 0429 EC 32 04 00             		 br	!!.L16
 187:../src/r_cg_rtc.c ****         {
 188:../src/r_cg_rtc.c ****             status = MD_BUSY2;
 626                             		.loc 1 188 0
 627 042d 30 04 00                		movw	ax, #4
 628 0430 B8 04                   		movw	[sp+4], ax
 629                             	.L16:
 189:../src/r_cg_rtc.c ****         }
 190:../src/r_cg_rtc.c ****     }
 191:../src/r_cg_rtc.c **** 
 192:../src/r_cg_rtc.c ****     return (status);
 630                             		.loc 1 192 0
 631 0432 A8 04                   		movw	ax, [sp+4]
 632 0434 BD F0                   		movw	r8, ax
 193:../src/r_cg_rtc.c **** }
 633                             		.loc 1 193 0
 634 0436 10 06                   		addw	sp, #6
 635 0438 D7                      		ret
 636                             	.LFE4:
 704                             	.Letext0:
 705                             		.file 2 "../src/iodefine.h"
 706                             		.file 3 "../src/iodefine_ext.h"
 707                             		.file 4 "../src/r_cg_macrodriver.h"
 708                             		.file 5 "../src/r_cg_rtc.h"
 709                             		.file 6 "../src/globals.h"
