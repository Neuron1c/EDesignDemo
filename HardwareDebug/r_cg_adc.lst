   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_scrollFlag,1,1
  31                             		.comm	_tempFlag,1,1
  32                             		.comm	_scrollCount,2,2
  33                             		.comm	_timerFlag,2,2
  34                             		.comm	_count,2,2
  35                             		.global	_R_ADC_Create
  37                             	_R_ADC_Create:
  38                             	.LFB0:
  39                             		.file 1 "../src/r_cg_adc.c"
   1:../src/r_cg_adc.c **** /**************************************************************************************************
   2:../src/r_cg_adc.c **** * DISCLAIMER
   3:../src/r_cg_adc.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_adc.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_adc.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_adc.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_adc.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_adc.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_adc.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_adc.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_adc.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_adc.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_adc.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_adc.c **** * following link:
  15:../src/r_cg_adc.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_adc.c **** *
  17:../src/r_cg_adc.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_adc.c **** ***************************************************************************************************
  19:../src/r_cg_adc.c **** 
  20:../src/r_cg_adc.c **** /**************************************************************************************************
  21:../src/r_cg_adc.c **** * File Name    : r_cg_adc.c
  22:../src/r_cg_adc.c **** * Version      : CodeGenerator for RL78/G13 V2.03.02.01 [15 May 2015]
  23:../src/r_cg_adc.c **** * Device(s)    : R5F100LE
  24:../src/r_cg_adc.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_adc.c **** * Description  : This file implements device driver for ADC module.
  26:../src/r_cg_adc.c **** * Creation Date: 2017/05/07
  27:../src/r_cg_adc.c **** ***************************************************************************************************
  28:../src/r_cg_adc.c **** 
  29:../src/r_cg_adc.c **** /**************************************************************************************************
  30:../src/r_cg_adc.c **** Includes
  31:../src/r_cg_adc.c **** ***************************************************************************************************
  32:../src/r_cg_adc.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_adc.c **** #include "r_cg_adc.h"
  34:../src/r_cg_adc.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_adc.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_adc.c **** 
  38:../src/r_cg_adc.c **** /**************************************************************************************************
  39:../src/r_cg_adc.c **** Global variables and functions
  40:../src/r_cg_adc.c **** ***************************************************************************************************
  41:../src/r_cg_adc.c **** /* Start user code for global. Do not edit comment generated here */
  42:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_cg_adc.c **** 
  44:../src/r_cg_adc.c **** /**************************************************************************************************
  45:../src/r_cg_adc.c **** * Function Name: R_ADC_Create
  46:../src/r_cg_adc.c **** * Description  : This function initializes the AD converter.
  47:../src/r_cg_adc.c **** * Arguments    : None
  48:../src/r_cg_adc.c **** * Return Value : None
  49:../src/r_cg_adc.c **** ***************************************************************************************************
  50:../src/r_cg_adc.c **** void R_ADC_Create(void)
  51:../src/r_cg_adc.c **** {    
  40                             		.loc 1 51 0
  52:../src/r_cg_adc.c ****     ADCEN = 1U;  /* supply AD clock */
  41                             		.loc 1 52 0
  42 0000 C9 F0 F0 00             		movw	r8, #240
  43 0004 AD F0                   		movw	ax, r8
  44 0006 BD F4                   		movw	r12, ax
  45 0008 FA F4                   		movw	hl, r12
  46 000a 8B                      		mov	a, [hl]
  47 000b 9D F2                   		mov	r10, a
  48 000d 6A F2 20                		or	r10, #32
  49 0010 AD F0                   		movw	ax, r8
  50 0012 DA F4                   		movw	bc, r12
  51 0014 8D F2                   		mov	a, r10
  52 0016 48 00 00                		mov	[bc], a
  53:../src/r_cg_adc.c ****     ADM0 = _00_AD_ADM0_INITIALVALUE;  /* disable AD conversion and clear ADM0 register */
  53                             		.loc 1 53 0
  54 0019 C9 F0 30 FF             		movw	r8, #-208
  55 001d AD F0                   		movw	ax, r8
  56 001f BD F2                   		movw	r10, ax
  57 0021 DA F2                   		movw	bc, r10
  58 0023 F1                      		clrb	a
  59 0024 48 00 00                		mov	[bc], a
  54:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
  60                             		.loc 1 54 0
  61 0027 C9 F0 E7 FF             		movw	r8, #-25
  62 002b AD F0                   		movw	ax, r8
  63 002d BD F4                   		movw	r12, ax
  64 002f FA F4                   		movw	hl, r12
  65 0031 8B                      		mov	a, [hl]
  66 0032 9D F2                   		mov	r10, a
  67 0034 6A F2 01                		or	r10, #1
  68 0037 AD F0                   		movw	ax, r8
  69 0039 DA F4                   		movw	bc, r12
  70 003b 8D F2                   		mov	a, r10
  71 003d 48 00 00                		mov	[bc], a
  55:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
  72                             		.loc 1 55 0
  73 0040 C9 F0 E3 FF             		movw	r8, #-29
  74 0044 AD F0                   		movw	ax, r8
  75 0046 BD F4                   		movw	r12, ax
  76 0048 FA F4                   		movw	hl, r12
  77 004a 8B                      		mov	a, [hl]
  78 004b 9D F2                   		mov	r10, a
  79 004d 5A F2 FE                		and	r10, #-2
  80 0050 AD F0                   		movw	ax, r8
  81 0052 DA F4                   		movw	bc, r12
  82 0054 8D F2                   		mov	a, r10
  83 0056 48 00 00                		mov	[bc], a
  56:../src/r_cg_adc.c ****     /* Set INTAD low priority */
  57:../src/r_cg_adc.c ****     ADPR1 = 1U;
  84                             		.loc 1 57 0
  85 0059 C9 F0 EF FF             		movw	r8, #-17
  86 005d AD F0                   		movw	ax, r8
  87 005f BD F4                   		movw	r12, ax
  88 0061 FA F4                   		movw	hl, r12
  89 0063 8B                      		mov	a, [hl]
  90 0064 9D F2                   		mov	r10, a
  91 0066 6A F2 01                		or	r10, #1
  92 0069 AD F0                   		movw	ax, r8
  93 006b DA F4                   		movw	bc, r12
  94 006d 8D F2                   		mov	a, r10
  95 006f 48 00 00                		mov	[bc], a
  58:../src/r_cg_adc.c ****     ADPR0 = 1U;
  96                             		.loc 1 58 0
  97 0072 C9 F0 EB FF             		movw	r8, #-21
  98 0076 AD F0                   		movw	ax, r8
  99 0078 BD F4                   		movw	r12, ax
 100 007a FA F4                   		movw	hl, r12
 101 007c 8B                      		mov	a, [hl]
 102 007d 9D F2                   		mov	r10, a
 103 007f 6A F2 01                		or	r10, #1
 104 0082 AD F0                   		movw	ax, r8
 105 0084 DA F4                   		movw	bc, r12
 106 0086 8D F2                   		mov	a, r10
 107 0088 48 00 00                		mov	[bc], a
  59:../src/r_cg_adc.c ****     /* The reset status of ADPC is analog input, so it's unnecessary to set. */
  60:../src/r_cg_adc.c ****     /* Set ANI0 - ANI2 pin as analog input */
  61:../src/r_cg_adc.c ****     PM2 |= 0x07U;
 108                             		.loc 1 61 0
 109 008b C9 F2 22 FF             		movw	r10, #-222
 110 008f C9 F0 22 FF             		movw	r8, #-222
 111 0093 AD F0                   		movw	ax, r8
 112 0095 BD F4                   		movw	r12, ax
 113 0097 FA F4                   		movw	hl, r12
 114 0099 8B                      		mov	a, [hl]
 115 009a 9D F0                   		mov	r8, a
 116 009c 6A F0 07                		or	r8, #7
 117 009f AD F2                   		movw	ax, r10
 118 00a1 BD F4                   		movw	r12, ax
 119 00a3 DA F4                   		movw	bc, r12
 120 00a5 8D F0                   		mov	a, r8
 121 00a7 48 00 00                		mov	[bc], a
  62:../src/r_cg_adc.c ****     ADM0 = _08_AD_CONVERSION_CLOCK_32 | _00_AD_TIME_MODE_NORMAL_1 | _00_AD_OPERMODE_SELECT;
 122                             		.loc 1 62 0
 123 00aa C9 F0 30 FF             		movw	r8, #-208
 124 00ae AD F0                   		movw	ax, r8
 125 00b0 BD F2                   		movw	r10, ax
 126 00b2 DA F2                   		movw	bc, r10
 127 00b4 51 08                   		mov	a, #8
 128 00b6 48 00 00                		mov	[bc], a
  63:../src/r_cg_adc.c ****     ADM1 = _00_AD_TRIGGER_SOFTWARE | _20_AD_CONVMODE_ONESELECT;
 129                             		.loc 1 63 0
 130 00b9 C9 F0 32 FF             		movw	r8, #-206
 131 00bd AD F0                   		movw	ax, r8
 132 00bf BD F4                   		movw	r12, ax
 133 00c1 DA F4                   		movw	bc, r12
 134 00c3 51 20                   		mov	a, #32
 135 00c5 48 00 00                		mov	[bc], a
  64:../src/r_cg_adc.c ****     ADM2 = _00_AD_POSITIVE_VDD | _00_AD_NEGATIVE_VSS | _00_AD_AREA_MODE_1 | _01_AD_RESOLUTION_8BIT;
 136                             		.loc 1 64 0
 137 00c8 C9 F0 10 00             		movw	r8, #16
 138 00cc AD F0                   		movw	ax, r8
 139 00ce BD F2                   		movw	r10, ax
 140 00d0 DA F2                   		movw	bc, r10
 141 00d2 E1                      		oneb	a
 142 00d3 48 00 00                		mov	[bc], a
  65:../src/r_cg_adc.c ****     ADUL = _FF_AD_ADUL_VALUE;
 143                             		.loc 1 65 0
 144 00d6 C9 F0 11 00             		movw	r8, #17
 145 00da AD F0                   		movw	ax, r8
 146 00dc BD F4                   		movw	r12, ax
 147 00de DA F4                   		movw	bc, r12
 148 00e0 51 FF                   		mov	a, #-1
 149 00e2 48 00 00                		mov	[bc], a
  66:../src/r_cg_adc.c ****     ADLL = _00_AD_ADLL_VALUE;
 150                             		.loc 1 66 0
 151 00e5 C9 F0 12 00             		movw	r8, #18
 152 00e9 AD F0                   		movw	ax, r8
 153 00eb BD F2                   		movw	r10, ax
 154 00ed DA F2                   		movw	bc, r10
 155 00ef F1                      		clrb	a
 156 00f0 48 00 00                		mov	[bc], a
  67:../src/r_cg_adc.c ****     ADS = _00_AD_INPUT_CHANNEL_0;
 157                             		.loc 1 67 0
 158 00f3 C9 F0 31 FF             		movw	r8, #-207
 159 00f7 AD F0                   		movw	ax, r8
 160 00f9 BD F4                   		movw	r12, ax
 161 00fb DA F4                   		movw	bc, r12
 162 00fd F1                      		clrb	a
 163 00fe 48 00 00                		mov	[bc], a
  68:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 164                             		.loc 1 68 0
 165 0101 C9 F0 30 FF             		movw	r8, #-208
 166 0105 AD F0                   		movw	ax, r8
 167 0107 BD F4                   		movw	r12, ax
 168 0109 FA F4                   		movw	hl, r12
 169 010b 8B                      		mov	a, [hl]
 170 010c 9D F2                   		mov	r10, a
 171 010e 6A F2 01                		or	r10, #1
 172 0111 AD F0                   		movw	ax, r8
 173 0113 DA F4                   		movw	bc, r12
 174 0115 8D F2                   		mov	a, r10
 175 0117 48 00 00                		mov	[bc], a
  69:../src/r_cg_adc.c **** }
 176                             		.loc 1 69 0
 177 011a D7                      		ret
 178                             	.LFE0:
 180                             		.global	_R_ADC_Start
 182                             	_R_ADC_Start:
 183                             	.LFB1:
  70:../src/r_cg_adc.c **** 
  71:../src/r_cg_adc.c **** /**************************************************************************************************
  72:../src/r_cg_adc.c **** * Function Name: R_ADC_Start
  73:../src/r_cg_adc.c **** * Description  : This function starts the AD converter.
  74:../src/r_cg_adc.c **** * Arguments    : None
  75:../src/r_cg_adc.c **** * Return Value : None
  76:../src/r_cg_adc.c **** ***************************************************************************************************
  77:../src/r_cg_adc.c **** void R_ADC_Start(void)
  78:../src/r_cg_adc.c **** {
 184                             		.loc 1 78 0
  79:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 185                             		.loc 1 79 0
 186 011b C9 F0 E3 FF             		movw	r8, #-29
 187 011f AD F0                   		movw	ax, r8
 188 0121 BD F4                   		movw	r12, ax
 189 0123 FA F4                   		movw	hl, r12
 190 0125 8B                      		mov	a, [hl]
 191 0126 9D F2                   		mov	r10, a
 192 0128 5A F2 FE                		and	r10, #-2
 193 012b AD F0                   		movw	ax, r8
 194 012d DA F4                   		movw	bc, r12
 195 012f 8D F2                   		mov	a, r10
 196 0131 48 00 00                		mov	[bc], a
  80:../src/r_cg_adc.c ****     ADMK = 0U;  /* enable INTAD interrupt */
 197                             		.loc 1 80 0
 198 0134 C9 F0 E7 FF             		movw	r8, #-25
 199 0138 AD F0                   		movw	ax, r8
 200 013a BD F4                   		movw	r12, ax
 201 013c FA F4                   		movw	hl, r12
 202 013e 8B                      		mov	a, [hl]
 203 013f 9D F2                   		mov	r10, a
 204 0141 5A F2 FE                		and	r10, #-2
 205 0144 AD F0                   		movw	ax, r8
 206 0146 DA F4                   		movw	bc, r12
 207 0148 8D F2                   		mov	a, r10
 208 014a 48 00 00                		mov	[bc], a
  81:../src/r_cg_adc.c ****     ADCS = 1U;  /* enable AD conversion */
 209                             		.loc 1 81 0
 210 014d C9 F0 30 FF             		movw	r8, #-208
 211 0151 AD F0                   		movw	ax, r8
 212 0153 BD F4                   		movw	r12, ax
 213 0155 FA F4                   		movw	hl, r12
 214 0157 8B                      		mov	a, [hl]
 215 0158 9D F2                   		mov	r10, a
 216 015a 6A F2 80                		or	r10, #-128
 217 015d AD F0                   		movw	ax, r8
 218 015f DA F4                   		movw	bc, r12
 219 0161 8D F2                   		mov	a, r10
 220 0163 48 00 00                		mov	[bc], a
  82:../src/r_cg_adc.c **** }
 221                             		.loc 1 82 0
 222 0166 D7                      		ret
 223                             	.LFE1:
 225                             		.global	_R_ADC_Stop
 227                             	_R_ADC_Stop:
 228                             	.LFB2:
  83:../src/r_cg_adc.c **** 
  84:../src/r_cg_adc.c **** /**************************************************************************************************
  85:../src/r_cg_adc.c **** * Function Name: R_ADC_Stop
  86:../src/r_cg_adc.c **** * Description  : This function stops the AD converter.
  87:../src/r_cg_adc.c **** * Arguments    : None
  88:../src/r_cg_adc.c **** * Return Value : None
  89:../src/r_cg_adc.c **** ***************************************************************************************************
  90:../src/r_cg_adc.c **** void R_ADC_Stop(void)
  91:../src/r_cg_adc.c **** {
 229                             		.loc 1 91 0
  92:../src/r_cg_adc.c ****     ADCS = 0U;  /* disable AD conversion */
 230                             		.loc 1 92 0
 231 0167 C9 F0 30 FF             		movw	r8, #-208
 232 016b AD F0                   		movw	ax, r8
 233 016d BD F4                   		movw	r12, ax
 234 016f FA F4                   		movw	hl, r12
 235 0171 8B                      		mov	a, [hl]
 236 0172 9D F2                   		mov	r10, a
 237 0174 5A F2 7F                		and	r10, #127
 238 0177 AD F0                   		movw	ax, r8
 239 0179 DA F4                   		movw	bc, r12
 240 017b 8D F2                   		mov	a, r10
 241 017d 48 00 00                		mov	[bc], a
  93:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
 242                             		.loc 1 93 0
 243 0180 C9 F0 E7 FF             		movw	r8, #-25
 244 0184 AD F0                   		movw	ax, r8
 245 0186 BD F4                   		movw	r12, ax
 246 0188 FA F4                   		movw	hl, r12
 247 018a 8B                      		mov	a, [hl]
 248 018b 9D F2                   		mov	r10, a
 249 018d 6A F2 01                		or	r10, #1
 250 0190 AD F0                   		movw	ax, r8
 251 0192 DA F4                   		movw	bc, r12
 252 0194 8D F2                   		mov	a, r10
 253 0196 48 00 00                		mov	[bc], a
  94:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 254                             		.loc 1 94 0
 255 0199 C9 F0 E3 FF             		movw	r8, #-29
 256 019d AD F0                   		movw	ax, r8
 257 019f BD F4                   		movw	r12, ax
 258 01a1 FA F4                   		movw	hl, r12
 259 01a3 8B                      		mov	a, [hl]
 260 01a4 9D F2                   		mov	r10, a
 261 01a6 5A F2 FE                		and	r10, #-2
 262 01a9 AD F0                   		movw	ax, r8
 263 01ab DA F4                   		movw	bc, r12
 264 01ad 8D F2                   		mov	a, r10
 265 01af 48 00 00                		mov	[bc], a
  95:../src/r_cg_adc.c **** }
 266                             		.loc 1 95 0
 267 01b2 D7                      		ret
 268                             	.LFE2:
 270                             		.global	_R_ADC_Set_OperationOn
 272                             	_R_ADC_Set_OperationOn:
 273                             	.LFB3:
  96:../src/r_cg_adc.c **** 
  97:../src/r_cg_adc.c **** /**************************************************************************************************
  98:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOn
  99:../src/r_cg_adc.c **** * Description  : This function enables comparator operation.
 100:../src/r_cg_adc.c **** * Arguments    : None
 101:../src/r_cg_adc.c **** * Return Value : None
 102:../src/r_cg_adc.c **** ***************************************************************************************************
 103:../src/r_cg_adc.c **** void R_ADC_Set_OperationOn(void)
 104:../src/r_cg_adc.c **** {
 274                             		.loc 1 104 0
 105:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 275                             		.loc 1 105 0
 276 01b3 C9 F0 30 FF             		movw	r8, #-208
 277 01b7 AD F0                   		movw	ax, r8
 278 01b9 BD F4                   		movw	r12, ax
 279 01bb FA F4                   		movw	hl, r12
 280 01bd 8B                      		mov	a, [hl]
 281 01be 9D F2                   		mov	r10, a
 282 01c0 6A F2 01                		or	r10, #1
 283 01c3 AD F0                   		movw	ax, r8
 284 01c5 DA F4                   		movw	bc, r12
 285 01c7 8D F2                   		mov	a, r10
 286 01c9 48 00 00                		mov	[bc], a
 106:../src/r_cg_adc.c **** }
 287                             		.loc 1 106 0
 288 01cc D7                      		ret
 289                             	.LFE3:
 291                             		.global	_R_ADC_Set_OperationOff
 293                             	_R_ADC_Set_OperationOff:
 294                             	.LFB4:
 107:../src/r_cg_adc.c **** 
 108:../src/r_cg_adc.c **** /**************************************************************************************************
 109:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOff
 110:../src/r_cg_adc.c **** * Description  : This function stops comparator operation.
 111:../src/r_cg_adc.c **** * Arguments    : None
 112:../src/r_cg_adc.c **** * Return Value : None
 113:../src/r_cg_adc.c **** ***************************************************************************************************
 114:../src/r_cg_adc.c **** void R_ADC_Set_OperationOff(void)
 115:../src/r_cg_adc.c **** {
 295                             		.loc 1 115 0
 116:../src/r_cg_adc.c ****     ADCE = 0U;  /* disable AD comparator */
 296                             		.loc 1 116 0
 297 01cd C9 F0 30 FF             		movw	r8, #-208
 298 01d1 AD F0                   		movw	ax, r8
 299 01d3 BD F4                   		movw	r12, ax
 300 01d5 FA F4                   		movw	hl, r12
 301 01d7 8B                      		mov	a, [hl]
 302 01d8 9D F2                   		mov	r10, a
 303 01da 5A F2 FE                		and	r10, #-2
 304 01dd AD F0                   		movw	ax, r8
 305 01df DA F4                   		movw	bc, r12
 306 01e1 8D F2                   		mov	a, r10
 307 01e3 48 00 00                		mov	[bc], a
 117:../src/r_cg_adc.c **** }
 308                             		.loc 1 117 0
 309 01e6 D7                      		ret
 310                             	.LFE4:
 312                             		.global	_R_ADC_Get_Result_8bit
 314                             	_R_ADC_Get_Result_8bit:
 315                             	.LFB5:
 118:../src/r_cg_adc.c **** 
 119:../src/r_cg_adc.c **** /**************************************************************************************************
 120:../src/r_cg_adc.c **** * Function Name: R_ADC_Get_Result_8bit
 121:../src/r_cg_adc.c **** * Description  : This function returns the higher 8 bits conversion result.
 122:../src/r_cg_adc.c **** * Arguments    : buffer -
 123:../src/r_cg_adc.c **** *                    the address where to write the conversion result
 124:../src/r_cg_adc.c **** * Return Value : None
 125:../src/r_cg_adc.c **** ***************************************************************************************************
 126:../src/r_cg_adc.c **** void R_ADC_Get_Result_8bit(uint8_t * const buffer)
 127:../src/r_cg_adc.c **** {
 316                             		.loc 1 127 0
 128:../src/r_cg_adc.c ****     *buffer = ADCRH;
 317                             		.loc 1 128 0
 318 01e7 C9 F0 1F FF             		movw	r8, #-225
 319 01eb AD F0                   		movw	ax, r8
 320 01ed BD F4                   		movw	r12, ax
 321 01ef FA F4                   		movw	hl, r12
 322 01f1 8B                      		mov	a, [hl]
 323 01f2 9D F2                   		mov	r10, a
 324 01f4 A8 04                   		movw	ax, [sp+4]
 325 01f6 BD F0                   		movw	r8, ax
 326 01f8 BD F4                   		movw	r12, ax
 327 01fa DA F4                   		movw	bc, r12
 328 01fc 8D F2                   		mov	a, r10
 329 01fe 48 00 00                		mov	[bc], a
 129:../src/r_cg_adc.c **** }
 330                             		.loc 1 129 0
 331 0201 D7                      		ret
 332                             	.LFE5:
 400                             	.Letext0:
 401                             		.file 2 "../src/iodefine.h"
 402                             		.file 3 "../src/iodefine_ext.h"
 403                             		.file 4 "../src/r_cg_macrodriver.h"
 404                             		.file 5 "../src/globals.h"
