   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_record,50,1
  28                             		.comm	_mem,50,1
  29                             		.comm	_display_string,50,1
  30                             		.comm	_timerFlag,2,2
  31                             		.comm	_count,2,2
  32                             		.comm	_interval_timer_count,2,2
  33                             		.global	_R_ADC_Create
  35                             	_R_ADC_Create:
  36                             	.LFB0:
  37                             		.file 1 "../src/r_cg_adc.c"
   1:../src/r_cg_adc.c **** /**************************************************************************************************
   2:../src/r_cg_adc.c **** * DISCLAIMER
   3:../src/r_cg_adc.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_adc.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_adc.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_adc.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_adc.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_adc.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_adc.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_adc.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_adc.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_adc.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_adc.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_adc.c **** * following link:
  15:../src/r_cg_adc.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_adc.c **** *
  17:../src/r_cg_adc.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_adc.c **** ***************************************************************************************************
  19:../src/r_cg_adc.c **** 
  20:../src/r_cg_adc.c **** /**************************************************************************************************
  21:../src/r_cg_adc.c **** * File Name    : r_cg_adc.c
  22:../src/r_cg_adc.c **** * Version      : CodeGenerator for RL78/G13 V2.03.02.01 [15 May 2015]
  23:../src/r_cg_adc.c **** * Device(s)    : R5F100LE
  24:../src/r_cg_adc.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_adc.c **** * Description  : This file implements device driver for ADC module.
  26:../src/r_cg_adc.c **** * Creation Date: 2017/04/12
  27:../src/r_cg_adc.c **** ***************************************************************************************************
  28:../src/r_cg_adc.c **** 
  29:../src/r_cg_adc.c **** /**************************************************************************************************
  30:../src/r_cg_adc.c **** Includes
  31:../src/r_cg_adc.c **** ***************************************************************************************************
  32:../src/r_cg_adc.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_adc.c **** #include "r_cg_adc.h"
  34:../src/r_cg_adc.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_adc.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_adc.c **** 
  38:../src/r_cg_adc.c **** /**************************************************************************************************
  39:../src/r_cg_adc.c **** Global variables and functions
  40:../src/r_cg_adc.c **** ***************************************************************************************************
  41:../src/r_cg_adc.c **** /* Start user code for global. Do not edit comment generated here */
  42:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_cg_adc.c **** 
  44:../src/r_cg_adc.c **** /**************************************************************************************************
  45:../src/r_cg_adc.c **** * Function Name: R_ADC_Create
  46:../src/r_cg_adc.c **** * Description  : This function initializes the AD converter.
  47:../src/r_cg_adc.c **** * Arguments    : None
  48:../src/r_cg_adc.c **** * Return Value : None
  49:../src/r_cg_adc.c **** ***************************************************************************************************
  50:../src/r_cg_adc.c **** void R_ADC_Create(void)
  51:../src/r_cg_adc.c **** {    
  38                             		.loc 1 51 0
  52:../src/r_cg_adc.c ****     ADCEN = 1U;  /* supply AD clock */
  39                             		.loc 1 52 0
  40 0000 C9 F0 F0 00             		movw	r8, #240
  41 0004 AD F0                   		movw	ax, r8
  42 0006 BD F4                   		movw	r12, ax
  43 0008 FA F4                   		movw	hl, r12
  44 000a 8B                      		mov	a, [hl]
  45 000b 9D F2                   		mov	r10, a
  46 000d 6A F2 20                		or	r10, #32
  47 0010 AD F0                   		movw	ax, r8
  48 0012 DA F4                   		movw	bc, r12
  49 0014 8D F2                   		mov	a, r10
  50 0016 48 00 00                		mov	[bc], a
  53:../src/r_cg_adc.c ****     ADM0 = _00_AD_ADM0_INITIALVALUE;  /* disable AD conversion and clear ADM0 register */
  51                             		.loc 1 53 0
  52 0019 C9 F0 30 FF             		movw	r8, #-208
  53 001d AD F0                   		movw	ax, r8
  54 001f BD F2                   		movw	r10, ax
  55 0021 DA F2                   		movw	bc, r10
  56 0023 F1                      		clrb	a
  57 0024 48 00 00                		mov	[bc], a
  54:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
  58                             		.loc 1 54 0
  59 0027 C9 F0 E7 FF             		movw	r8, #-25
  60 002b AD F0                   		movw	ax, r8
  61 002d BD F4                   		movw	r12, ax
  62 002f FA F4                   		movw	hl, r12
  63 0031 8B                      		mov	a, [hl]
  64 0032 9D F2                   		mov	r10, a
  65 0034 6A F2 01                		or	r10, #1
  66 0037 AD F0                   		movw	ax, r8
  67 0039 DA F4                   		movw	bc, r12
  68 003b 8D F2                   		mov	a, r10
  69 003d 48 00 00                		mov	[bc], a
  55:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
  70                             		.loc 1 55 0
  71 0040 C9 F0 E3 FF             		movw	r8, #-29
  72 0044 AD F0                   		movw	ax, r8
  73 0046 BD F4                   		movw	r12, ax
  74 0048 FA F4                   		movw	hl, r12
  75 004a 8B                      		mov	a, [hl]
  76 004b 9D F2                   		mov	r10, a
  77 004d 5A F2 FE                		and	r10, #-2
  78 0050 AD F0                   		movw	ax, r8
  79 0052 DA F4                   		movw	bc, r12
  80 0054 8D F2                   		mov	a, r10
  81 0056 48 00 00                		mov	[bc], a
  56:../src/r_cg_adc.c ****     /* Set INTAD low priority */
  57:../src/r_cg_adc.c ****     ADPR1 = 1U;
  82                             		.loc 1 57 0
  83 0059 C9 F0 EF FF             		movw	r8, #-17
  84 005d AD F0                   		movw	ax, r8
  85 005f BD F4                   		movw	r12, ax
  86 0061 FA F4                   		movw	hl, r12
  87 0063 8B                      		mov	a, [hl]
  88 0064 9D F2                   		mov	r10, a
  89 0066 6A F2 01                		or	r10, #1
  90 0069 AD F0                   		movw	ax, r8
  91 006b DA F4                   		movw	bc, r12
  92 006d 8D F2                   		mov	a, r10
  93 006f 48 00 00                		mov	[bc], a
  58:../src/r_cg_adc.c ****     ADPR0 = 1U;
  94                             		.loc 1 58 0
  95 0072 C9 F0 EB FF             		movw	r8, #-21
  96 0076 AD F0                   		movw	ax, r8
  97 0078 BD F4                   		movw	r12, ax
  98 007a FA F4                   		movw	hl, r12
  99 007c 8B                      		mov	a, [hl]
 100 007d 9D F2                   		mov	r10, a
 101 007f 6A F2 01                		or	r10, #1
 102 0082 AD F0                   		movw	ax, r8
 103 0084 DA F4                   		movw	bc, r12
 104 0086 8D F2                   		mov	a, r10
 105 0088 48 00 00                		mov	[bc], a
  59:../src/r_cg_adc.c ****     /* The reset status of ADPC is analog input, so it's unnecessary to set. */
  60:../src/r_cg_adc.c ****     /* Set ANI0 - ANI2 pin as analog input */
  61:../src/r_cg_adc.c ****     PM2 |= 0x07U;
 106                             		.loc 1 61 0
 107 008b C9 F2 22 FF             		movw	r10, #-222
 108 008f C9 F0 22 FF             		movw	r8, #-222
 109 0093 AD F0                   		movw	ax, r8
 110 0095 BD F4                   		movw	r12, ax
 111 0097 FA F4                   		movw	hl, r12
 112 0099 8B                      		mov	a, [hl]
 113 009a 9D F0                   		mov	r8, a
 114 009c 6A F0 07                		or	r8, #7
 115 009f AD F2                   		movw	ax, r10
 116 00a1 BD F4                   		movw	r12, ax
 117 00a3 DA F4                   		movw	bc, r12
 118 00a5 8D F0                   		mov	a, r8
 119 00a7 48 00 00                		mov	[bc], a
  62:../src/r_cg_adc.c ****     ADM0 = _08_AD_CONVERSION_CLOCK_32 | _00_AD_TIME_MODE_NORMAL_1 | _00_AD_OPERMODE_SELECT;
 120                             		.loc 1 62 0
 121 00aa C9 F0 30 FF             		movw	r8, #-208
 122 00ae AD F0                   		movw	ax, r8
 123 00b0 BD F2                   		movw	r10, ax
 124 00b2 DA F2                   		movw	bc, r10
 125 00b4 51 08                   		mov	a, #8
 126 00b6 48 00 00                		mov	[bc], a
  63:../src/r_cg_adc.c ****     ADM1 = _00_AD_TRIGGER_SOFTWARE | _20_AD_CONVMODE_ONESELECT;
 127                             		.loc 1 63 0
 128 00b9 C9 F0 32 FF             		movw	r8, #-206
 129 00bd AD F0                   		movw	ax, r8
 130 00bf BD F4                   		movw	r12, ax
 131 00c1 DA F4                   		movw	bc, r12
 132 00c3 51 20                   		mov	a, #32
 133 00c5 48 00 00                		mov	[bc], a
  64:../src/r_cg_adc.c ****     ADM2 = _00_AD_POSITIVE_VDD | _00_AD_NEGATIVE_VSS | _00_AD_AREA_MODE_1 | _01_AD_RESOLUTION_8BIT;
 134                             		.loc 1 64 0
 135 00c8 C9 F0 10 00             		movw	r8, #16
 136 00cc AD F0                   		movw	ax, r8
 137 00ce BD F2                   		movw	r10, ax
 138 00d0 DA F2                   		movw	bc, r10
 139 00d2 E1                      		oneb	a
 140 00d3 48 00 00                		mov	[bc], a
  65:../src/r_cg_adc.c ****     ADUL = _FF_AD_ADUL_VALUE;
 141                             		.loc 1 65 0
 142 00d6 C9 F0 11 00             		movw	r8, #17
 143 00da AD F0                   		movw	ax, r8
 144 00dc BD F4                   		movw	r12, ax
 145 00de DA F4                   		movw	bc, r12
 146 00e0 51 FF                   		mov	a, #-1
 147 00e2 48 00 00                		mov	[bc], a
  66:../src/r_cg_adc.c ****     ADLL = _00_AD_ADLL_VALUE;
 148                             		.loc 1 66 0
 149 00e5 C9 F0 12 00             		movw	r8, #18
 150 00e9 AD F0                   		movw	ax, r8
 151 00eb BD F2                   		movw	r10, ax
 152 00ed DA F2                   		movw	bc, r10
 153 00ef F1                      		clrb	a
 154 00f0 48 00 00                		mov	[bc], a
  67:../src/r_cg_adc.c ****     ADS = _00_AD_INPUT_CHANNEL_0;
 155                             		.loc 1 67 0
 156 00f3 C9 F0 31 FF             		movw	r8, #-207
 157 00f7 AD F0                   		movw	ax, r8
 158 00f9 BD F4                   		movw	r12, ax
 159 00fb DA F4                   		movw	bc, r12
 160 00fd F1                      		clrb	a
 161 00fe 48 00 00                		mov	[bc], a
  68:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 162                             		.loc 1 68 0
 163 0101 C9 F0 30 FF             		movw	r8, #-208
 164 0105 AD F0                   		movw	ax, r8
 165 0107 BD F4                   		movw	r12, ax
 166 0109 FA F4                   		movw	hl, r12
 167 010b 8B                      		mov	a, [hl]
 168 010c 9D F2                   		mov	r10, a
 169 010e 6A F2 01                		or	r10, #1
 170 0111 AD F0                   		movw	ax, r8
 171 0113 DA F4                   		movw	bc, r12
 172 0115 8D F2                   		mov	a, r10
 173 0117 48 00 00                		mov	[bc], a
  69:../src/r_cg_adc.c **** }
 174                             		.loc 1 69 0
 175 011a D7                      		ret
 176                             	.LFE0:
 178                             		.global	_R_ADC_Start
 180                             	_R_ADC_Start:
 181                             	.LFB1:
  70:../src/r_cg_adc.c **** 
  71:../src/r_cg_adc.c **** /**************************************************************************************************
  72:../src/r_cg_adc.c **** * Function Name: R_ADC_Start
  73:../src/r_cg_adc.c **** * Description  : This function starts the AD converter.
  74:../src/r_cg_adc.c **** * Arguments    : None
  75:../src/r_cg_adc.c **** * Return Value : None
  76:../src/r_cg_adc.c **** ***************************************************************************************************
  77:../src/r_cg_adc.c **** void R_ADC_Start(void)
  78:../src/r_cg_adc.c **** {
 182                             		.loc 1 78 0
  79:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 183                             		.loc 1 79 0
 184 011b C9 F0 E3 FF             		movw	r8, #-29
 185 011f AD F0                   		movw	ax, r8
 186 0121 BD F4                   		movw	r12, ax
 187 0123 FA F4                   		movw	hl, r12
 188 0125 8B                      		mov	a, [hl]
 189 0126 9D F2                   		mov	r10, a
 190 0128 5A F2 FE                		and	r10, #-2
 191 012b AD F0                   		movw	ax, r8
 192 012d DA F4                   		movw	bc, r12
 193 012f 8D F2                   		mov	a, r10
 194 0131 48 00 00                		mov	[bc], a
  80:../src/r_cg_adc.c ****     ADMK = 0U;  /* enable INTAD interrupt */
 195                             		.loc 1 80 0
 196 0134 C9 F0 E7 FF             		movw	r8, #-25
 197 0138 AD F0                   		movw	ax, r8
 198 013a BD F4                   		movw	r12, ax
 199 013c FA F4                   		movw	hl, r12
 200 013e 8B                      		mov	a, [hl]
 201 013f 9D F2                   		mov	r10, a
 202 0141 5A F2 FE                		and	r10, #-2
 203 0144 AD F0                   		movw	ax, r8
 204 0146 DA F4                   		movw	bc, r12
 205 0148 8D F2                   		mov	a, r10
 206 014a 48 00 00                		mov	[bc], a
  81:../src/r_cg_adc.c ****     ADCS = 1U;  /* enable AD conversion */
 207                             		.loc 1 81 0
 208 014d C9 F0 30 FF             		movw	r8, #-208
 209 0151 AD F0                   		movw	ax, r8
 210 0153 BD F4                   		movw	r12, ax
 211 0155 FA F4                   		movw	hl, r12
 212 0157 8B                      		mov	a, [hl]
 213 0158 9D F2                   		mov	r10, a
 214 015a 6A F2 80                		or	r10, #-128
 215 015d AD F0                   		movw	ax, r8
 216 015f DA F4                   		movw	bc, r12
 217 0161 8D F2                   		mov	a, r10
 218 0163 48 00 00                		mov	[bc], a
  82:../src/r_cg_adc.c **** }
 219                             		.loc 1 82 0
 220 0166 D7                      		ret
 221                             	.LFE1:
 223                             		.global	_R_ADC_Stop
 225                             	_R_ADC_Stop:
 226                             	.LFB2:
  83:../src/r_cg_adc.c **** 
  84:../src/r_cg_adc.c **** /**************************************************************************************************
  85:../src/r_cg_adc.c **** * Function Name: R_ADC_Stop
  86:../src/r_cg_adc.c **** * Description  : This function stops the AD converter.
  87:../src/r_cg_adc.c **** * Arguments    : None
  88:../src/r_cg_adc.c **** * Return Value : None
  89:../src/r_cg_adc.c **** ***************************************************************************************************
  90:../src/r_cg_adc.c **** void R_ADC_Stop(void)
  91:../src/r_cg_adc.c **** {
 227                             		.loc 1 91 0
  92:../src/r_cg_adc.c ****     ADCS = 0U;  /* disable AD conversion */
 228                             		.loc 1 92 0
 229 0167 C9 F0 30 FF             		movw	r8, #-208
 230 016b AD F0                   		movw	ax, r8
 231 016d BD F4                   		movw	r12, ax
 232 016f FA F4                   		movw	hl, r12
 233 0171 8B                      		mov	a, [hl]
 234 0172 9D F2                   		mov	r10, a
 235 0174 5A F2 7F                		and	r10, #127
 236 0177 AD F0                   		movw	ax, r8
 237 0179 DA F4                   		movw	bc, r12
 238 017b 8D F2                   		mov	a, r10
 239 017d 48 00 00                		mov	[bc], a
  93:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
 240                             		.loc 1 93 0
 241 0180 C9 F0 E7 FF             		movw	r8, #-25
 242 0184 AD F0                   		movw	ax, r8
 243 0186 BD F4                   		movw	r12, ax
 244 0188 FA F4                   		movw	hl, r12
 245 018a 8B                      		mov	a, [hl]
 246 018b 9D F2                   		mov	r10, a
 247 018d 6A F2 01                		or	r10, #1
 248 0190 AD F0                   		movw	ax, r8
 249 0192 DA F4                   		movw	bc, r12
 250 0194 8D F2                   		mov	a, r10
 251 0196 48 00 00                		mov	[bc], a
  94:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 252                             		.loc 1 94 0
 253 0199 C9 F0 E3 FF             		movw	r8, #-29
 254 019d AD F0                   		movw	ax, r8
 255 019f BD F4                   		movw	r12, ax
 256 01a1 FA F4                   		movw	hl, r12
 257 01a3 8B                      		mov	a, [hl]
 258 01a4 9D F2                   		mov	r10, a
 259 01a6 5A F2 FE                		and	r10, #-2
 260 01a9 AD F0                   		movw	ax, r8
 261 01ab DA F4                   		movw	bc, r12
 262 01ad 8D F2                   		mov	a, r10
 263 01af 48 00 00                		mov	[bc], a
  95:../src/r_cg_adc.c **** }
 264                             		.loc 1 95 0
 265 01b2 D7                      		ret
 266                             	.LFE2:
 268                             		.global	_R_ADC_Set_OperationOn
 270                             	_R_ADC_Set_OperationOn:
 271                             	.LFB3:
  96:../src/r_cg_adc.c **** 
  97:../src/r_cg_adc.c **** /**************************************************************************************************
  98:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOn
  99:../src/r_cg_adc.c **** * Description  : This function enables comparator operation.
 100:../src/r_cg_adc.c **** * Arguments    : None
 101:../src/r_cg_adc.c **** * Return Value : None
 102:../src/r_cg_adc.c **** ***************************************************************************************************
 103:../src/r_cg_adc.c **** void R_ADC_Set_OperationOn(void)
 104:../src/r_cg_adc.c **** {
 272                             		.loc 1 104 0
 105:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 273                             		.loc 1 105 0
 274 01b3 C9 F0 30 FF             		movw	r8, #-208
 275 01b7 AD F0                   		movw	ax, r8
 276 01b9 BD F4                   		movw	r12, ax
 277 01bb FA F4                   		movw	hl, r12
 278 01bd 8B                      		mov	a, [hl]
 279 01be 9D F2                   		mov	r10, a
 280 01c0 6A F2 01                		or	r10, #1
 281 01c3 AD F0                   		movw	ax, r8
 282 01c5 DA F4                   		movw	bc, r12
 283 01c7 8D F2                   		mov	a, r10
 284 01c9 48 00 00                		mov	[bc], a
 106:../src/r_cg_adc.c **** }
 285                             		.loc 1 106 0
 286 01cc D7                      		ret
 287                             	.LFE3:
 289                             		.global	_R_ADC_Set_OperationOff
 291                             	_R_ADC_Set_OperationOff:
 292                             	.LFB4:
 107:../src/r_cg_adc.c **** 
 108:../src/r_cg_adc.c **** /**************************************************************************************************
 109:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOff
 110:../src/r_cg_adc.c **** * Description  : This function stops comparator operation.
 111:../src/r_cg_adc.c **** * Arguments    : None
 112:../src/r_cg_adc.c **** * Return Value : None
 113:../src/r_cg_adc.c **** ***************************************************************************************************
 114:../src/r_cg_adc.c **** void R_ADC_Set_OperationOff(void)
 115:../src/r_cg_adc.c **** {
 293                             		.loc 1 115 0
 116:../src/r_cg_adc.c ****     ADCE = 0U;  /* disable AD comparator */
 294                             		.loc 1 116 0
 295 01cd C9 F0 30 FF             		movw	r8, #-208
 296 01d1 AD F0                   		movw	ax, r8
 297 01d3 BD F4                   		movw	r12, ax
 298 01d5 FA F4                   		movw	hl, r12
 299 01d7 8B                      		mov	a, [hl]
 300 01d8 9D F2                   		mov	r10, a
 301 01da 5A F2 FE                		and	r10, #-2
 302 01dd AD F0                   		movw	ax, r8
 303 01df DA F4                   		movw	bc, r12
 304 01e1 8D F2                   		mov	a, r10
 305 01e3 48 00 00                		mov	[bc], a
 117:../src/r_cg_adc.c **** }
 306                             		.loc 1 117 0
 307 01e6 D7                      		ret
 308                             	.LFE4:
 310                             		.global	_R_ADC_Get_Result_8bit
 312                             	_R_ADC_Get_Result_8bit:
 313                             	.LFB5:
 118:../src/r_cg_adc.c **** 
 119:../src/r_cg_adc.c **** /**************************************************************************************************
 120:../src/r_cg_adc.c **** * Function Name: R_ADC_Get_Result_8bit
 121:../src/r_cg_adc.c **** * Description  : This function returns the higher 8 bits conversion result.
 122:../src/r_cg_adc.c **** * Arguments    : buffer -
 123:../src/r_cg_adc.c **** *                    the address where to write the conversion result
 124:../src/r_cg_adc.c **** * Return Value : None
 125:../src/r_cg_adc.c **** ***************************************************************************************************
 126:../src/r_cg_adc.c **** void R_ADC_Get_Result_8bit(uint8_t * const buffer)
 127:../src/r_cg_adc.c **** {
 314                             		.loc 1 127 0
 128:../src/r_cg_adc.c ****     *buffer = ADCRH;
 315                             		.loc 1 128 0
 316 01e7 C9 F0 1F FF             		movw	r8, #-225
 317 01eb AD F0                   		movw	ax, r8
 318 01ed BD F4                   		movw	r12, ax
 319 01ef FA F4                   		movw	hl, r12
 320 01f1 8B                      		mov	a, [hl]
 321 01f2 9D F2                   		mov	r10, a
 322 01f4 A8 04                   		movw	ax, [sp+4]
 323 01f6 BD F0                   		movw	r8, ax
 324 01f8 BD F4                   		movw	r12, ax
 325 01fa DA F4                   		movw	bc, r12
 326 01fc 8D F2                   		mov	a, r10
 327 01fe 48 00 00                		mov	[bc], a
 129:../src/r_cg_adc.c **** }
 328                             		.loc 1 129 0
 329 0201 D7                      		ret
 330                             	.LFE5:
 398                             	.Letext0:
 399                             		.file 2 "../src/iodefine.h"
 400                             		.file 3 "../src/iodefine_ext.h"
 401                             		.file 4 "../src/r_cg_macrodriver.h"
 402                             		.file 5 "../src/globals.h"
